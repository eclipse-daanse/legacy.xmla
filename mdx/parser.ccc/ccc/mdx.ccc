/*
* Copyright (c) 2023 Contributors to the Eclipse Foundation.
*
* This program and the accompanying materials are made
* available under the terms of the Eclipse Public License 2.0
* which is available at https://www.eclipse.org/legal/epl-2.0/
*
* SPDX-License-Identifier: EPL-2.0
*
* Contributors:
*   SmartCity Jena - initial
*   Stefan Bischof (bipolis.org) - initial
*/

// https://docs.oracle.com/cd/E57185_01/ESBTR/mdx_syn_gram.html
// https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ms717923(v=vs.85)
BASE_NAME = Mdx;
IGNORE_CASE = true;
PARSER_PACKAGE = org.eclipse.daanse.mdx.parser.ccc;
NODE_PACKAGE = org.eclipse.daanse.mdx.parser.ccc.tree;
TABS_TO_SPACES = 4;
NODE_PREFIX = "AST";
COPYRIGHT_BLURB="\n*\n* Copyright (c) 2023 Contributors to the Eclipse Foundation.\n*\n* This program and the accompanying materials are made\n* available under the terms of the Eclipse Public License 2.0\n* which is available at https://www.eclipse.org/legal/epl-2.0/\n*\n* SPDX-License-Identifier: EPL-2.0\n*\n* Contributors: see corresponding .ccc file\n";

INJECT PARSER_CLASS :
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.concurrent.CancellationException;
import org.eclipse.daanse.mdx.model.Axis;
import org.eclipse.daanse.mdx.model.CallExpression;
import org.eclipse.daanse.mdx.model.CellProperty;
import org.eclipse.daanse.mdx.model.CompoundId;
import org.eclipse.daanse.mdx.model.DrillthroughStatement;
import org.eclipse.daanse.mdx.model.Expression;
import org.eclipse.daanse.mdx.model.FormulaExpression;
import org.eclipse.daanse.mdx.model.KeyObjectIdentifier;
import org.eclipse.daanse.mdx.model.MdxStatement;
import org.eclipse.daanse.mdx.model.MemberPropertyDefinition;
import org.eclipse.daanse.mdx.model.NameObjectIdentifier;
import org.eclipse.daanse.mdx.model.NullLiteral;
import org.eclipse.daanse.mdx.model.NumericLiteral;
import org.eclipse.daanse.mdx.model.ObjectIdentifier;
import org.eclipse.daanse.mdx.model.ReturnItem;
import org.eclipse.daanse.mdx.model.SelectStatement;
import org.eclipse.daanse.mdx.model.StringLiteral;
import org.eclipse.daanse.mdx.model.SymbolLiteral;
import org.eclipse.daanse.mdx.model.select.CreateCellCalculationBodyClause;
import org.eclipse.daanse.mdx.model.select.CreateMemberBodyClause;
import org.eclipse.daanse.mdx.model.select.CreateSetBodyClause;
import org.eclipse.daanse.mdx.model.select.MeasureBodyClause;
import org.eclipse.daanse.mdx.model.select.SelectCellPropertyListClause;
import org.eclipse.daanse.mdx.model.select.SelectDimensionPropertyListClause;
import org.eclipse.daanse.mdx.model.select.SelectQueryAsteriskClause;
import org.eclipse.daanse.mdx.model.select.SelectQueryAxesClause;
import org.eclipse.daanse.mdx.model.select.SelectQueryAxisClause;
import org.eclipse.daanse.mdx.model.select.SelectQueryEmptyClause;
import org.eclipse.daanse.mdx.model.select.SelectQueryClause;
import org.eclipse.daanse.mdx.model.select.SelectSlicerAxisClause;
import org.eclipse.daanse.mdx.model.select.SelectSubcubeClause;
import org.eclipse.daanse.mdx.model.select.SelectSubcubeClauseName;
import org.eclipse.daanse.mdx.model.select.SelectSubcubeClauseStatement;
import org.eclipse.daanse.mdx.model.select.SelectWithClause;
{


    private static String stripQuotes(String s, String prefix, String suffix, String quoted) {
        assert s.startsWith(prefix) && s.endsWith(suffix);
        s = s.substring(prefix.length(), s.length() - suffix.length());
        s = s.replace(quoted, suffix);
        return s;
    }
    
    private Expression createCall(Expression left, ObjectIdentifier objectIdentifier, List<Expression> expressions) {
        final String name = objectIdentifier instanceof NameObjectIdentifier ? ((NameObjectIdentifier) objectIdentifier).name() : null;
        if (expressions != null) {
            if (left != null) {
                // Method syntax: "x.foo(arg1, arg2)" or "x.foo()"
                expressions.add(0, left);
                return new CallExpression(name, CallExpression.Type.Method, expressions);
            } else {
                // Function syntax: "foo(arg1, arg2)" or "foo()"
                return new CallExpression(name, CallExpression.Type.Function, expressions);
            }
        } else {
            // Member syntax: "foo.bar"
            // or property syntax: "foo.RESERVED_WORD"
            CallExpression.Type type;
            boolean call = false;
            switch(objectIdentifier.quoting()) {
                case UNQUOTED : 
                    type = CallExpression.Type.Property;
                    call = true;
                    //funTable.isProperty(name); TODO: all is call
                    break;
                case QUOTED : 
                    type = CallExpression.Type.PropertyQuoted;
                    break;
                default : 
                    type = CallExpression.Type.PropertyAmpersAndQuoted;
                    break;
            }
            if (left instanceof CompoundId && !call) {
                List<ObjectIdentifier> newObjectIdentifiers = new ArrayList<ObjectIdentifier> (((CompoundId) left).objectIdentifiers());
                newObjectIdentifiers.add(objectIdentifier);
                return new CompoundId(newObjectIdentifiers);
            } else if (left == null) {
                return new CompoundId(List.of(objectIdentifier));
            } else {
                return new CallExpression(name, type, List.of(left));
            }
        }
    }

}



TOKEN :
  < AND : "AND" >
| < AS : "AS" >
| < AXIS : "AXIS" >
| < BEGIN : "BEGIN" >
| < BY : "BY" >
| < CASE : "CASE" >
| < CALCULATION : "CALCULATION" >
| < CAST : "CAST" >
| < CELL : "CELL" >
| < CHAPTERS : "CHAPTERS" >
| < CREATE : "CREATE" >
| < COLUMNS : "COLUMNS" >
| < COMMIT : "COMMIT" >
| < CUBE : "CUBE" >
| < CURRENTCUBE : "CURRENTCUBE" >
| < DIMENSION : "DIMENSION" >
| < DRILLTHROUGH : "DRILLTHROUGH" >
| < ELSE : "ELSE" >
| < EMPTY : "EMPTY" >
| < END : "END" >
| < EXPLAIN : "EXPLAIN" >
| < FIRSTROWSET : "FIRSTROWSET" >
| < FOR : "FOR" >
| < FROM : "FROM" >
| < IN : "IN" >
| < IS : "IS" >
| < MATCHES : "MATCHES" >
| < MAXROWS : "MAXROWS" >
| < MEMBER : "MEMBER" >
| < MEASURE : "MEASURE" >
| < NON : "NON" >
| < NOT : "NOT" >
| < NULL : "NULL" >
| < ON : "ON" >
| < OR : "OR" >
| < PAGES : "PAGES" >
| < PLAN : "PLAN" >
| < PROPERTIES : "PROPERTIES" >
| < REFRESH : "REFRESH" >
| < RETURN : "RETURN" >
| < ROLLBACK : "ROLLBACK" >
| < ROWS : "ROWS" >
| < SECTIONS : "SECTIONS" >
| < SELECT : "SELECT" >
| < SESSION : "SESSION" >
| < SET : "SET" >
| < THEN : "THEN" >
| < TRAN : "TRAN" >
| < TRANSACTION : "TRANSACTION" >
| < UPDATE : "UPDATE" >
| < USE_EQUAL_ALLOCATION : "USE_EQUAL_ALLOCATION" >
| < USE_EQUAL_INCREMENT : "USE_EQUAL_INCREMENT" >
| < USE_WEIGHTED_ALLOCATION : "USE_WEIGHTED_ALLOCATION" >
| < USE_WEIGHTED_INCREMENT : "USE_WEIGHTED_INCREMENT" >
| < WHEN : "WHEN" >
| < WHERE : "WHERE" >
| < XOR : "XOR" >
| < WITH : "WITH" >
| < EXISTING : "EXISTING" >
| < $SYSTEM : "$SYSTEM" >
;


// White space
SKIP :
  " "
| "\t"
| "\n"
| "\r"
| "\f"
;


/*
 * Comments
 * https://javacc.github.io/javacc/documentation/bnf.html#comments
 * additional --
 */

< DEFAULT >
MORE :
  "//" : IN_SINGLE_LINE_COMMENT
| < "/**" ~[ "/" ] > : IN_FORMAL_COMMENT
| "--" : IN_SINGLE_LINE_COMMENT
| "/*" : IN_MULTI_LINE_COMMENT
;


< IN_SINGLE_LINE_COMMENT >
UNPARSED :
  < SINGLE_LINE_COMMENT :
    "\n"
  | "\r"
  | "\r\n" > : DEFAULT
;


< IN_FORMAL_COMMENT >
UNPARSED :
  < FORMAL_COMMENT : "*/" > : DEFAULT
;


< IN_MULTI_LINE_COMMENT >
UNPARSED :
  < MULTI_LINE_COMMENT : "*/" > : DEFAULT
;


< IN_SINGLE_LINE_COMMENT, IN_FORMAL_COMMENT, IN_MULTI_LINE_COMMENT >
MORE :
  < ~[ ] >
;


/*
 * Separators
 */
< DEFAULT >
TOKEN :
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < COMMA : "," >
| < SEMICOLON : ";" >
| < DOT : "." >
;


/*
 * Operators
 */
< DEFAULT >
TOKEN :
  < ASTERISK : "*" >
| < BANG : "!" >
| < COLON : ":" >
| < CONCAT : "||" >
| < EQ : "=" >
| < GE : ">=" >
| < GT : ">" >
| < LE : "<=" >
| < LT : "<" >
| < MINUS : "-" >
| < NE : "<>" >
| < PLUS : "+" >
| < SOLIDUS : "/" >
| < ATSIGN : "@" >
;


/*
 * Identifiers
 * - https://javacc.github.io/javacc/documentation/bnf.html#identifiers
 */
< DEFAULT >
TOKEN :
  < ID :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| 
  < QUOTED_ID :
    < LBRACKET >
    (
      (~[ "]", "\n", "\r" ])
    | ("]]")
    )*
    < RBRACKET > 
  >
| 
  < AMP_QUOTED_ID : "&" < QUOTED_ID > >
| 
  < AMP_UNQUOTED_ID :
    "&" [ "a"-"z", "A"-"Z" ]
    (
      < LETTER >
    | < DIGIT >
    )* >
| 
  < #LETTER : 
    [ 
    "$", 
    "A"-"Z", 
    "_", 
    "a"-"z", 
    "\u00c0"-"\u00d6", 
    "\u00d8"-"\u00f6", 
    "\u00f8"-"\u00ff", 
    "\u0100"-"\u1fff", 
    "\u3040"-"\u318f", 
    "\u3300"-"\u337f", 
    "\u3400"-"\u3d2d", 
    "\u4e00"-"\u9fff", 
    "\uf900"-"\ufaff" 
    ] 
  >
| 
  < #DIGIT : 
    [ 
    "0"-"9", 
    "\u0660"-"\u0669", 
    "\u06f0"-"\u06f9", 
    "\u0966"-"\u096f", 
    "\u09e6"-"\u09ef", 
    "\u0a66"-"\u0a6f", 
    "\u0ae6"-"\u0aef", 
    "\u0b66"-"\u0b6f", 
    "\u0be7"-"\u0bef", 
    "\u0c66"-"\u0c6f", 
    "\u0ce6"-"\u0cef", 
    "\u0d66"-"\u0d6f", 
    "\u0e50"-"\u0e59", 
    "\u0ed0"-"\u0ed9", 
    "\u1040"-"\u1049" 
    ] 
  >
;


// Literals
TOKEN :
  < UNSIGNED_INTEGER_LITERAL : ([ "0"-"9" ])+ >
| 
  < APPROX_NUMERIC_LITERAL :
    (
      < UNSIGNED_INTEGER_LITERAL >
    | < DECIMAL_NUMERIC_LITERAL >
    )
    < EXPONENT > >
| 
  < DECIMAL_NUMERIC_LITERAL :
    ([ "0"-"9" ])+ (".")? ([ "0"-"9" ])*
  | "." ([ "0"-"9" ])+ 
  >
| 
  < FLOATING_POINT_LITERAL :
    ([ "0"-"9" ])+ "." ([ "0"-"9" ])* (< EXPONENT >)? ([ "f", "F", "d", "D" ])?
  | "." ([ "0"-"9" ])+ (< EXPONENT >)? ([ "f", "F", "d", "D" ])?
  | ([ "0"-"9" ])+ < EXPONENT > ([ "f", "F", "d", "D" ])?
  | ([ "0"-"9" ])+ (< EXPONENT >)? [ "f", "F", "d", "D" ] 
  >
| 
  < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >
| 
  < STRING :
    < SINGLE_QUOTED_STRING >
  | < DOUBLE_QUOTED_STRING > >
| 
  < SINGLE_QUOTED_STRING :
    "'"
    (
      (~[ "'" ])
    | ("''")
    )*
    "'" >
| 
  < DOUBLE_QUOTED_STRING :
    "\""
    (
      (~[ "\"" ])
    | ("\"\"")
    )*
    "\"" >
| 
  < #WHITESPACE : 
    [ " ", "\t", "\n", "\r", "\f" ] 
  >
;


// ----------------------------------------------------------------------------
// MDX Statement
//
// <statement> ::= <selectStatement>
//                   | <drillthroughStatement>
//                   | <explainStatement>
//
// <selectStatement> ::= [WITH <formulaSpecification>]
//                         SELECT [<SelectQueryAxisClause>
//                                [, <SelectQueryAxisClause>...]]
//                         FROM [<cubeSpecification>]
//                         [WHERE <slicerSpecification>]
//                         [<cellProps>]
//
// <drillthroughStatment> ::=
//     DRILLTHROUGH
//     [ MAXROWS <count> ]
//     [ FIRSTROWSET <count> ]
//     <selectStatement>
//     [ RETURN <memberOrAttribute> [, <memberOrAttribute>...] ]
//
// <explainStatement> ::=
//     EXPLAIN PLAN FOR ( <selectStatement> | <drillthroughStatement> )
//
MdxStatement parseMdxStatement :
{
  MdxStatement mdxStatement = null;
}
  mdxStatement = parseSelectStatement 
  //	|
  //	DrillthroughStatement
  //    |
  //	CreateFormulaStatement
  //    |
  //    ExplainStatement
  //    |
  //    RefreshStatement
  //    |
  //    UpdateStatement
  //    |
  //    TransactionCommandStatement	
  < EOF >
  {
    return mdxStatement;
  }
;


DrillthroughStatement parseDrillthroughStatement :
{
  SelectStatement selectStatement = null;
  List < ReturnItem > returnItems = null;
}
  < DRILLTHROUGH > 
  (< MAXROWS > < UNSIGNED_INTEGER_LITERAL >)? 
  (< FIRSTROWSET > < UNSIGNED_INTEGER_LITERAL >)? 
  selectStatement = parseSelectStatement
  (
    < RETURN > returnItems = parseReturnItems
  )?
  {
    return new DrillthroughStatement();
  }
;


List < ReturnItem > parseReturnItems :
{
  List < ReturnItem > returnItems = new LinkedList < ReturnItem > ();
  ReturnItem item;
}
  item = parseReturnItem
  {
    returnItems.add(item);
  }
  (
    < COMMA > item = parseReturnItem
    {
      returnItems.add(item);
    }
  )*
  {
    return returnItems;
  }
;


ReturnItem parseReturnItem :
{
  CompoundId compoundId;
}
  compoundId = parseCompoundId
  {
    return new ReturnItem(compoundId);
  }
;

//https://learn.microsoft.com/en-us/sql/mdx/mdx-data-definition-create-cell-calculation?view=sql-server-ver16

CreateCellCalculationBodyClause parseCreateCellCalculationBodyClause:
{
  CreateCellCalculationBodyClause createCellCalculationBC = null;
}
 <NOT><NOT><NOT><NOT><NOT><NOT><NOT>
  {
    return createCellCalculationBC;
  }
;

// https://learn.microsoft.com/en-us/analysis-services/multidimensional-models/mdx/mdx-building-measures?view=asallproducts-allversions
MeasureBodyClause parseMeasureBodyClause:
  <NOT><NOT><NOT><NOT><NOT><NOT><NOT>
  {
    return new MeasureBodyClause();
  }
;


https://docs.oracle.com/cd/E57185_01/ESBTR/mdx_grammar_rules.html
SelectWithClause parseSelectWithClause :
{
  SelectWithClause selectWithClause = null;
}
  ( <CELL> <CALCULATION> selectWithClause = parseCreateCellCalculationBodyClause
  | ("CALCULATED")? < MEMBER > selectWithClause = parseCreateMemberBodyClause
  | < SET > selectWithClause = parseCreateSetBodyClause
  | <MEASURE> selectWithClause = parseMeasureBodyClause
  )
  {
    return selectWithClause;
  }
;

//https://learn.microsoft.com/en-us/sql/mdx/mdx-data-manipulation-select?view=sql-server-ver16
SelectStatement parseSelectStatement :
{
  List<SelectWithClause> selectWithClauses = new LinkedList<SelectWithClause>();
  SelectSlicerAxisClause selectSlicerAxisClause = null;
  SelectQueryClause selectQueryClause = null;
  SelectSubcubeClause selectSubcubeClause = null;
  SelectCellPropertyListClause selectCellPropertyListClause = null;
  SelectWithClause selectWithClause = null;
}
  (
    < WITH >
      selectWithClause = parseSelectWithClause
    {
      selectWithClauses.add(selectWithClause);
    }
    
    (
      < COMMA > selectWithClause = parseSelectWithClause
      {
        selectWithClauses.add(selectWithClause);
      }
    )*
    
  )?
  < SELECT >
  (
    selectQueryClause = parseSelectQueryAsteriskClause
  | 
    selectQueryClause = parseSelectQueryAxesClause
  | /* empty */
    {
      selectQueryClause = new SelectQueryEmptyClause();
    }
  )
  < FROM > selectSubcubeClause = parseSelectSubcubeClause
  (
    selectSlicerAxisClause = parseSelectSlicerAxisClause
  )?
  (
    selectCellPropertyListClause = parseSelectCellPropertyListClause
  )?
  {
    return new SelectStatement(selectWithClauses, selectQueryClause, selectSubcubeClause, selectSlicerAxisClause, selectCellPropertyListClause);
  }
;


SelectSubcubeClause parseSelectSubcubeClause :
{
  SelectSubcubeClause selectSubcubeClause = null;
}
  (
    selectSubcubeClause = parseSelectSubcubeClauseName
  | 
    selectSubcubeClause = parseSelectSubcubeClauseStatement
  )
  {
    return selectSubcubeClause;
  }
;


SelectSubcubeClauseName parseSelectSubcubeClauseName :
{
  NameObjectIdentifier nameObjectIdentifier;
}
  nameObjectIdentifier = parseNameObjectIdentifier
  {
    return new SelectSubcubeClauseName(nameObjectIdentifier);
  }
;


SelectSubcubeClauseStatement parseSelectSubcubeClauseStatement :
{
  SelectSlicerAxisClause selectSlicerAxisClause = null;
  SelectQueryClause selectQueryClause = null;
  SelectSubcubeClause selectSubcubeClause = null;
}
  (
    < LPAREN > < SELECT >
    (
      selectQueryClause = parseSelectQueryAsteriskClause
    | 
      selectQueryClause = parseSelectQueryAxesClause
    )?
    < FROM > selectSubcubeClause = parseSelectSubcubeClause
    (
      selectSlicerAxisClause = parseSelectSlicerAxisClause
    )?
    < RPAREN >
  )
  {
    return new SelectSubcubeClauseStatement(selectQueryClause, selectSubcubeClause, selectSlicerAxisClause);
  }
;


SelectQueryAsteriskClause parseSelectQueryAsteriskClause :
  < ASTERISK >
  {
    return new SelectQueryAsteriskClause();
  }
;


SelectQueryAxesClause parseSelectQueryAxesClause :
{
  List < SelectQueryAxisClause > selectQueryAxisClauses = new LinkedList < SelectQueryAxisClause > ();
  SelectQueryAxisClause selectQueryAxisClause;
}
  selectQueryAxisClause = parseSelectQueryAxisClause
  {
    selectQueryAxisClauses.add(selectQueryAxisClause);
  }
  (
    < COMMA > selectQueryAxisClause = parseSelectQueryAxisClause
    {
      selectQueryAxisClauses.add(selectQueryAxisClause);
    }
  )*
  {
    return new SelectQueryAxesClause(selectQueryAxisClauses);
  }
;


SelectSlicerAxisClause parseSelectSlicerAxisClause :
{
  Expression expression = null;
}
  < WHERE > expression = parseExpression
  {
    return new SelectSlicerAxisClause();
  }
;


SelectCellPropertyListClause parseSelectCellPropertyListClause :
{
  List < CellProperty > cellPropertys = new LinkedList < CellProperty > ();
}
  (< CELL >)? < PROPERTIES > parseCellProperty
  (
    < COMMA > parseCellProperty
  )*
  {
    return new SelectCellPropertyListClause();
  }
;

// https://learn.microsoft.com/en-us/sql/mdx/mdx-data-definition-create-member?view=sql-server-ver16
CreateMemberBodyClause parseCreateMemberBodyClause :
{
 ObjectIdentifier objectIdentifier=null;
}
  <CURRENTCUBE>
  | objectIdentifier = parseIdentifier
    < AS >
   parseFormulaExpression
  (
    < COMMA > parseMemberPropertyDefinition
  )*
  {
    return new CreateMemberBodyClause();
  }
;


MemberPropertyDefinition parseMemberPropertyDefinition :
  parseIdentifier < EQ > parseExpression
  {
    return new MemberPropertyDefinition();
  }
;


FormulaExpression parseFormulaExpression :
  parseIdentifier < EQ > parseIdentifier
  {
    return new FormulaExpression();
  }
;


Expression parseExpression :
{
  Expression expression;
  ObjectIdentifier objectIdentifier;
}
  expression = unaliasedExpression
  (
    < AS > objectIdentifier = parseIdentifier
    {
      CompoundId compundId = new CompoundId(List.of(objectIdentifier));
      expression = new CallExpression("AS", CallExpression.Type.Term_Infix, List.of(
      expression, compundId
      )
      );
    }
  )*
  {
    return expression;
  }
;


Expression expressionOrEmpty :
{
  Expression expression;
}
  expression = parseExpression
  {
    return expression;
  }
| /* empty */
  {
    return new CallExpression("", CallExpression.Type.Empty, List.of()
    );
  }
;


// Comma-separated list of expressions, some of which may be empty. Used
// for functions.
List < Expression > expOrEmptyList :
{
  Expression expression;
  List < Expression > list = new LinkedList < Expression > ();
}
  expression = expressionOrEmpty
  {
    list.add(expression);
  }
  (
    < COMMA > 
    expression = expressionOrEmpty
    {
      list.add(expression);
    }
  )*
  {
    return list;
  }
;


// List of expressions, none of which may be empty.
List < Expression > expList :
{
  Expression expression;
  List < Expression > list = new LinkedList < Expression > ();
}
  expression = parseExpression
  {
    list.add(expression);
  }
  (
    < COMMA > 
    expression = parseExpression
    {
      list.add(expression);
    }
  )*
  {
    return list;
  }
;


Expression expressionEof :
{
  Expression expression;
}
  expression = parseExpression < EOF >
  {
    return expression;
  }
;


ObjectIdentifier parseIdentifier :
{
  ObjectIdentifier objectIdentifier;
}
  (
    objectIdentifier = parseNameObjectIdentifier
  | 
    objectIdentifier = parseKeyIdentifier
  )
  {
    return objectIdentifier;
  }
;


NameObjectIdentifier parseNameObjectIdentifier :
{
  String id;
}
  id = parseKeyword
  {
    // Keywords that are  not Reserved could be used
    return new NameObjectIdentifier(id, ObjectIdentifier.Quoting.UNQUOTED);
  }
| < ID >
  {
    return new NameObjectIdentifier(getToken(0).getImage(), ObjectIdentifier.Quoting.UNQUOTED);
  }
| < ATSIGN > < ID >
  {
    return new NameObjectIdentifier("@" + getToken(0).getImage(), ObjectIdentifier.Quoting.UNQUOTED);
  }
| < QUOTED_ID >
  {
    return new NameObjectIdentifier(
    stripQuotes(getToken(0).getImage(), "[", "]", "]]"), 
    ObjectIdentifier.Quoting.QUOTED);
  }
;


// for example '&foo&[1]&bar' in '[x].&foo&[1]&bar.[y]'
KeyObjectIdentifier parseKeyIdentifier :
{
  List < NameObjectIdentifier > list = new ArrayList < NameObjectIdentifier > ();
  NameObjectIdentifier key;
}
  (
    key = parseAmpId
    {
      list.add(key);
    }
  )+
  {
    return new KeyObjectIdentifier(list);
  }
;


NameObjectIdentifier parseAmpId :
  < AMP_QUOTED_ID >
  {
    return new NameObjectIdentifier(
    stripQuotes(getToken(0).getImage(), "&[", "]", "]]"), 
    ObjectIdentifier.Quoting.QUOTED);
  }
| 
  < AMP_UNQUOTED_ID >
  {
    return new NameObjectIdentifier(
    getToken(0).getImage().substring(1), 
    ObjectIdentifier.Quoting.UNQUOTED);
  }
;


// a keyword that is not a RESERVED_WORD could be used as identifier
String parseKeyword :
  (
    < DIMENSION >
  | < PROPERTIES >
  )
  {
    return getToken(0).getImage();
  }
;


CompoundId parseCompoundId :
{
  CompoundId compoundId;
  List < ObjectIdentifier > list = new ArrayList < ObjectIdentifier > ();
  ObjectIdentifier s;
}
  s = parseIdentifier
  {
    list.add(s);
  }
  (
    SCAN < DOT > =>
    < DOT > s = parseIdentifier
    {
      list.add(s);
    }
  )*
  {
    return new CompoundId(list);
  }
;


// ----------------------------------------------------------------------------
// Expressions
Expression unaliasedExpression :
{
  Expression x, y;
}
  x = term5
  (
    < OR > y = term5
    {
      x = new CallExpression("OR", CallExpression.Type.Term_Infix, List.of(
      x, y
      )
      );
    }
  | < XOR > y = term5
    {
      x = new CallExpression("XOR", CallExpression.Type.Term_Infix, List.of(
      x, y
      )
      );
    }
  | 
    // range 'm1 : m2' yields set of members
    < COLON > y = term5
    {
      x = new CallExpression(":", CallExpression.Type.Term_Infix, List.of(
      x, y
      )
      );
    }
  )*
  {
    return x;
  }
;


Expression term5 :
{
  Expression x, y;
}
  x = term4
  (
    < AND > y = term4
    {
      x = new CallExpression("AND", CallExpression.Type.Term_Infix, List.of(
      x, y
      )
      );
    }
  )*
  {
    return x;
  }
;


Expression term4 :
{
  Expression x;
}
  x = term3
  {
    return x;
  }
| < NOT > x = term4
  {
    return new CallExpression("NOT", CallExpression.Type.Term_Prefix, List.of(
    x
    )
    );
  }
;


Expression term3 :
{
  Expression x, y;
  Token op;
}
  x = term2
  (
    // e.g. "1 < 5"
    (
      < EQ >
      {
        op = getToken(0);
      }
    | < NE >
      {
        op = getToken(0);
      }
    | < LT >
      {
        op = getToken(0);
      }
    | < GT >
      {
        op = getToken(0);
      }
    | < LE >
      {
        op = getToken(0);
      }
    | < GE >
      {
        op = getToken(0);
      }
    )
    y = term2
    {
      x = new CallExpression(op.getImage(), CallExpression.Type.Term_Infix, List.of(
      x, y
      )
      );
    }
  | 
    // We expect a shift-reduce conflict here, because NULL is a literal and
    // so is a valid argument to the IS operator. We want to shift.
    SCAN 2 =>
    < IS > < NULL >
    {
      x = new CallExpression("IS NULL", CallExpression.Type.Term_Postfix, List.of(
      x
      )
      );
    }
  | 
    // e.g. "x IS y"; but "x IS NULL" is handled elsewhere
    SCAN 2 =>
    < IS > y = term2
    {
      x = new CallExpression("IS", CallExpression.Type.Term_Infix, List.of(
      x, y
      )
      );
    }
  | < IS > < EMPTY >
    {
      x = new CallExpression(
      "IS EMPTY", CallExpression.Type.Term_Postfix, List.of(x));
    }
  | < MATCHES > y = term2
    {
      x = new CallExpression("MATCHES", CallExpression.Type.Term_Infix, List.of(
      x, y
      )
      );
    }
  | SCAN 2 =>
    < NOT > < MATCHES > y = term2
    {
      x = new CallExpression(
      "NOT", CallExpression.Type.Term_Prefix, List.of(
      new CallExpression(
      "MATCHES", CallExpression.Type.Term_Infix, List.of(
      x, y
      )
      )
      )
      );
    }
  | < IN > y = term2
    {
      x = new CallExpression("IN", CallExpression.Type.Term_Infix, List.of(
      x, y
      )
      );
    }
  | < NOT > < IN > y = term2
    {
      x = new CallExpression(
      "NOT", CallExpression.Type.Term_Prefix, List.of(
      new CallExpression(
      "IN", CallExpression.Type.Term_Infix, List.of(
      x, y
      )
      )
      )
      );
    }
  )*
  {
    return x;
  }
;


Expression term2 :
{
  Expression x, y;
}
  x = term
  (
    < PLUS > y = term
    {
      x = new CallExpression("+", CallExpression.Type.Term_Infix, List.of(
      x, y
      )
      );
    }
  | < MINUS > y = term
    {
      x = new CallExpression("-", CallExpression.Type.Term_Infix, List.of(
      x, y
      )
      );
    }
  | < CONCAT > y = term
    {
      x = new CallExpression("||", CallExpression.Type.Term_Infix, List.of(
      x, y
      )
      );
    }
  )*
  {
    return x;
  }
;


Expression term :
{
  Expression x, y;
}
  x = factor
  (
    < ASTERISK > y = factor
    {
      x = new CallExpression("*", CallExpression.Type.Term_Infix, List.of(
      x, y
      )
      );
    }
  | < SOLIDUS > y = factor
    {
      x = new CallExpression("/", CallExpression.Type.Term_Infix, List.of(
      x, y
      )
      );
    }
  )*
  {
    return x;
  }
;


Expression factor :
{
  Expression p;
}
  p = primary
  {
    return p;
  }
| < PLUS > p = primary
  {
    return p;
  }
| < MINUS > p = primary
  {
    return new CallExpression("-", CallExpression.Type.Term_Prefix, List.of(
    p
    )
    );
  }
| < EXISTING > p = primary
  {
    return new CallExpression("Existing", CallExpression.Type.Term_Prefix, List.of(
    p
    )
    );
  }
;


Expression primary :
{
  Expression expression;
}
  expression = atom
  (
    < DOT > expression = objectIdentifierOrFuncall(expression)
  )*
  {
    return expression;
  }
;


Expression objectIdentifierOrFuncall(Expression left) :
{
  ObjectIdentifier objectIdentifier;
  List < Expression > argList = null;
}
  objectIdentifier = parseIdentifier
  (
    < LPAREN >
    (
      SCAN < RPAREN > =>
      {
        argList = Collections.emptyList();
      }
    | 
      argList = expOrEmptyList
    )
    < RPAREN >
  )?
  {
    return createCall(left, objectIdentifier, argList);
  }
;


NumericLiteral parseNumericLiteral :
  < DECIMAL_NUMERIC_LITERAL >
  {
    return new NumericLiteral(new BigDecimal(getToken(0).getImage()));
  }
| < UNSIGNED_INTEGER_LITERAL >
  {
    return new NumericLiteral(new BigDecimal(getToken(0).getImage()));
  }
| < APPROX_NUMERIC_LITERAL >
  {
    return new NumericLiteral(new BigDecimal(getToken(0).getImage()));
  }
;


Expression atom :
{
  Expression expression;
  NameObjectIdentifier nameObjectIdentifier;
  List < Expression > expressions;
}
  < SINGLE_QUOTED_STRING >
  {
    return new StringLiteral(stripQuotes(getToken(0).getImage(), "'", "'", "''"));
  }
| < DOUBLE_QUOTED_STRING >
  {
    return new StringLiteral(stripQuotes(getToken(0).getImage(), '"' + "", '"' + "", '"' + "" + '"'));
  }
| expression = parseNumericLiteral
  {
    return expression;
  }
| < NULL >
  {
    return NullLiteral.SINGLETON;
  }
| < CAST > < LPAREN > expression = unaliasedExpression 
  < AS > nameObjectIdentifier = parseNameObjectIdentifier < RPAREN >
  {
    return new CallExpression(
    "CAST", CallExpression.Type.Cast, List.of(
    expression, 
    new SymbolLiteral(nameObjectIdentifier.name())
    )
    );
  }
| < LPAREN > expressions = expList < RPAREN >
  {
    // Whereas ([Sales],[Time]) and () are tuples, ([Sales]) and (5)
    // are just expressions.
    return new CallExpression(
    "()", CallExpression.Type.Parentheses, expressions);
  }
| 
  // set built from sets/tuples
  < LBRACE >
  (
    SCAN < RBRACE > =>
    {
      expressions = Collections.emptyList();
    }
  | 
    expressions = expList
  )
  < RBRACE >
  {
    return new CallExpression(
    "{}", CallExpression.Type.Braces, expressions);
  }
| expression = caseExpression
  {
    return expression;
  }
| 
  // Function call "foo(a, b)" or "whiz!bang!foo(a, b)".
  // Properties "x.PROP" and methods "exp.meth(a)" are in primary().
  nameObjectIdentifier = parseNameObjectIdentifier
  (
    < BANG > nameObjectIdentifier = parseNameObjectIdentifier
    {
    // We support the syntax for qualifying function names with package
    // names separated by bang ('!'), e.g. 'whiz!bang!foo(a, b)'
    // but currently we ignore the qualifiers. The previous example is
    // equivalent to 'foo(a, b)'.
    }
  )*
  (
    < LPAREN >
    (
      SCAN < RPAREN > =>
      {
        expressions = Collections.emptyList();
      }
    | 
      expressions = expOrEmptyList
    )
    < RPAREN >
  |
    /* empty */{
      expressions = null;
    }
  )
  {
    return createCall(null, nameObjectIdentifier, expressions);
  }
;


Expression caseExpression :
{
  Expression expression, expression2;
  List < Expression > expressions = new ArrayList < Expression > ();
  boolean match = false;
}
  < CASE >
  (
    expression = parseExpression
    {
      match = true;
      expressions.add(expression);
    }
  )?
  (
    < WHEN > expression = parseExpression < THEN > expression2 = parseExpression
    {
      expressions.add(expression);
      expressions.add(expression2);
    }
  )*
  (
    < ELSE > expression = parseExpression
    {
      expressions.add(expression);
    }
  )?
  < END >
  {
    if (match)
    {
      return new CallExpression(
      "_CaseMatch", CallExpression.Type.Term_Case, expressions);
    }
    else
    {
      return new CallExpression(
      "_CaseTest", CallExpression.Type.Term_Case, expressions);
    }
  }
;


CellProperty parseCellProperty :
  parseIdentifier
  {
    return new CellProperty(List.of());
  }
;


CreateSetBodyClause parseCreateSetBodyClause :
  parseIdentifier < AS > parseIdentifier
  {
    return new CreateSetBodyClause();
  }
;


SelectDimensionPropertyListClause parseSelectDimensionPropertyListClause :
  (< DIMENSION >)? < PROPERTIES > 
  parseIdentifier
  (
    < COMMA > parseIdentifier
  )*
  {
    return new SelectDimensionPropertyListClause();
  }
;


// <SelectQueryAxisClause> ::= [NON EMPTY] <set> [<dimProps>] ON <axis_name>
SelectQueryAxisClause parseSelectQueryAxisClause :
{
  boolean nonEmpty = false;
  SelectDimensionPropertyListClause selectDimensionPropertyListClause = null;
  Expression expression;
  int n;
  Axis axis;
}
  (< NON > < EMPTY >
  {
    nonEmpty = true;
  }
  )? 
  expression = parseExpression
  (
    selectDimensionPropertyListClause = parseSelectDimensionPropertyListClause
  )?
  < ON >
  (
    (
      < UNSIGNED_INTEGER_LITERAL >
      {
        n = Integer.valueOf(getToken(0).getImage()).intValue();
      }
    | < AXIS > < LPAREN > < UNSIGNED_INTEGER_LITERAL >
      {
        n = Integer.valueOf(getToken(0).getImage()).intValue();
      }
      < RPAREN >
    )
    {
      if (n < 0)
      {
        throw new IllegalArgumentException("Only axis numbers >= 0 allowed.");
      }
      else
      {
        axis = Axis.create(n);
      }
    }
  |
    (
      < COLUMNS >
      {
        axis = Axis.COLUMNS;
      }
    | < ROWS >
      {
        axis = Axis.ROWS;
      }
    | < PAGES >
      {
        axis = Axis.PAGES;
      }
    | < SECTIONS >
      {
        axis = Axis.SECTIONS;
      }
    | < CHAPTERS >
      {
        axis = Axis.CHAPTERS;
      }
    )
  )
  {
    return new SelectQueryAxisClause(nonEmpty, expression, axis, selectDimensionPropertyListClause);
  }
;


