/* Generated by: CongoCC Parser Generator. MDXParser.java
*
* Copyright (c) 2023 Contributors to the Eclipse Foundation.
*
* This program and the accompanying materials are made
* available under the terms of the Eclipse Public License 2.0
* which is available at https://www.eclipse.org/legal/epl-2.0/
*
* SPDX-License-Identifier: EPL-2.0
*
* Contributors: see .ccc file
*/
package org.eclipse.daanse.mdx.parser.ccc;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.ListIterator;
import java.util.concurrent.CancellationException;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseMdxStatement;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseDrillthroughStatement;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseReturnItems;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseReturnItem;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectWithClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectStatement;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectSubcubeClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectSubcubeClauseName;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectSubcubeClauseStatement;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectQueryAsteriskClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectQueryAxesClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectSlicerAxisClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectCellPropertyListClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseCreateMemberBodyClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseMemberPropertyDefinition;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseFormulaExpression;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseExpression;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTexpressionOrEmpty;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTexpOrEmptyList;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTexpList;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTexpressionEof;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseIdentifier;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseNameObjectIdentifier;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseKeyIdentifier;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseAmpId;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseKeyword;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseCompoundId;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTunaliasedExpression;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTterm5;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTterm4;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTterm3;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTterm2;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTterm;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTfactor;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTprimary;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTobjectIdentifierOrFuncall;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseNumericLiteral;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTatom;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTcaseExpression;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseCellProperty;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseCreateSetBodyClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectDimensionPropertyListClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectQueryAxisClause;
import static org.eclipse.daanse.mdx.parser.ccc.TokenType.*;
import java.util.HashMap;
import java.nio.file.Path;
import org.eclipse.daanse.mdx.model.SymbolLiteral;
import org.eclipse.daanse.mdx.model.CallExpression;
import org.eclipse.daanse.mdx.model.select.SelectWithClause;
import org.eclipse.daanse.mdx.model.select.SelectQueryAxisClause;
import java.io.PrintStream;
import org.eclipse.daanse.mdx.model.FormulaExpression;
import org.eclipse.daanse.mdx.model.NameObjectIdentifier;
import org.eclipse.daanse.mdx.model.select.SelectDimensionPropertyListClause;
import org.eclipse.daanse.mdx.model.CellProperty;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.ListIterator;
import org.eclipse.daanse.mdx.model.StringLiteral;
import org.eclipse.daanse.mdx.model.NumericLiteral;
import java.nio.charset.Charset;
import java.io.Reader;
import org.eclipse.daanse.mdx.model.select.SelectQueryEmptyClause;
import org.eclipse.daanse.mdx.model.DrillthroughStatement;
import org.eclipse.daanse.mdx.model.select.SelectSubcubeClause;
import org.eclipse.daanse.mdx.model.select.SelectSubcubeClauseStatement;
import java.nio.file.Files;
import org.eclipse.daanse.mdx.model.KeyObjectIdentifier;
import java.util.concurrent.CancellationException;
import java.io.IOException;
import org.eclipse.daanse.mdx.model.MemberPropertyDefinition;
import org.eclipse.daanse.mdx.model.select.CreateSetBodyClause;
import org.eclipse.daanse.mdx.model.ObjectIdentifier;
import java.util.ArrayList;
import org.eclipse.daanse.mdx.model.MdxStatement;
import org.eclipse.daanse.mdx.model.select.SelectQueryAsteriskClause;
import java.io.InputStreamReader;
import org.eclipse.daanse.mdx.model.ReturnItem;
import java.math.BigDecimal;
import java.util.List;
import org.eclipse.daanse.mdx.model.Expression;
import org.eclipse.daanse.mdx.model.select.SelectQueryAxesClause;
import org.eclipse.daanse.mdx.model.SelectStatement;
import org.eclipse.daanse.mdx.model.CompoundId;
import org.eclipse.daanse.mdx.model.select.SelectSubcubeClauseName;
import org.eclipse.daanse.mdx.model.NullLiteral;
import org.eclipse.daanse.mdx.model.select.SelectQueryClause;
import org.eclipse.daanse.mdx.model.Axis;
import java.util.EnumSet;
import org.eclipse.daanse.mdx.model.select.CreateMemberBodyClause;
import org.eclipse.daanse.mdx.model.select.SelectCellPropertyListClause;
import org.eclipse.daanse.mdx.model.select.SelectSlicerAxisClause;
import java.util.Collections;


public class MDXParser {

    private static String stripQuotes(String s, String prefix, String suffix, String quoted) {
        assert s.startsWith(prefix) && s.endsWith(suffix);
        s = s.substring(prefix.length(), s.length() - suffix.length());
        s = s.replace(quoted, suffix);
        return s;
    }

    private Expression createCall(Expression left, ObjectIdentifier objectIdentifier, List<Expression> expressions) {
        final String name = objectIdentifier instanceof NameObjectIdentifier ? ((NameObjectIdentifier) objectIdentifier).name() : null;
        if (expressions != null) {
            if (left != null) {
                // Method syntax: "x.foo(arg1, arg2)" or "x.foo()"
                expressions.add(0, left);
                return new CallExpression(name, CallExpression.Type.Method, expressions);
            } else {
                // Function syntax: "foo(arg1, arg2)" or "foo()"
                return new CallExpression(name, CallExpression.Type.Function, expressions);
            }
        } else {
            // Member syntax: "foo.bar"
            // or property syntax: "foo.RESERVED_WORD"
            CallExpression.Type type;
            boolean call = false;
            switch(objectIdentifier.quoting()) {
                case UNQUOTED : 
                    type = CallExpression.Type.Property;
                    call = true;
                    //funTable.isProperty(name); TODO: all is call
                    break;
                case QUOTED : 
                    type = CallExpression.Type.PropertyQuoted;
                    break;
                default : 
                    type = CallExpression.Type.PropertyAmpersAndQuoted;
                    break;
            }
            if (left instanceof CompoundId && !call) {
                List<ObjectIdentifier> newObjectIdentifiers = new ArrayList<ObjectIdentifier>(((CompoundId) left).objectIdentifiers());
                newObjectIdentifiers.add(objectIdentifier);
                return new CompoundId(newObjectIdentifiers);
            } else if (left == null) {
                return new CompoundId(List.of(objectIdentifier));
            } else {
                return new CallExpression(name, type, List.of(left));
            }
        }
    }

    static final int UNLIMITED = Integer.MAX_VALUE;
    // The last token successfully "consumed"
    Token lastConsumedToken;
    private TokenType nextTokenType;
    private Token currentLookaheadToken;
    private int remainingLookahead;
    private boolean hitFailure, passedPredicate;
    private String currentlyParsedProduction, currentLookaheadProduction;
    private int lookaheadRoutineNesting, passedPredicateThreshold = -1;
    private boolean legacyGlitchyLookahead = false;
    private boolean cancelled;

    public void cancel() {
        cancelled = true;
    }

    public boolean isCancelled() {
        return cancelled;
    }

    /** Generated Lexer. */
    public mdxLexer token_source;

    public void setInputSource(String inputSource) {
        token_source.setInputSource(inputSource);
    }

    String getInputSource() {
        return token_source.getInputSource();
    }

    //=================================
    // Generated constructors
    //=================================
    public MDXParser(String inputSource, CharSequence content) {
        this(new mdxLexer(inputSource, content));
    }

    public MDXParser(CharSequence content) {
        this("input", content);
    }

    /**
    * @param inputSource just the name of the input source (typically the filename) that
    * will be used in error messages and so on.
    * @param path The location (typically the filename) from which to get the input to parse
    */
    public MDXParser(String inputSource, Path path) throws IOException {
        this(inputSource, mdxLexer.stringFromBytes(Files.readAllBytes(path)));
    }

    public MDXParser(String inputSource, Path path, Charset charset) throws IOException {
        this(inputSource, mdxLexer.stringFromBytes(Files.readAllBytes(path), charset));
    }

    /**
    * @param path The location (typically the filename) from which to get the input to parse
    */
    public MDXParser(Path path) throws IOException {
        this(path.toString(), path);
    }

    /**
    * @Deprecated Use the constructor that takes a #java.nio.files.Path or just
    * a String (i.e. CharSequence) directly.
    */
    public MDXParser(java.io.InputStream stream) {
        this(new InputStreamReader(stream));
    }

    /**
    * @Deprecated Use the constructor that takes a #java.nio.files.Path or just
    * a String (i.e. CharSequence) directly.
    */
    public MDXParser(Reader reader) {
        this(new mdxLexer("input", reader));
    }

    /** Constructor with user supplied Lexer. */
    public MDXParser(mdxLexer lexer) {
        token_source = lexer;
        lastConsumedToken = lexer.DUMMY_START_TOKEN;
        lastConsumedToken.setTokenSource(lexer);
    }

    // If the next token is cached, it returns that
    // Otherwise, it goes to the token_source, i.e. the Lexer.
    final private Token nextToken(final Token tok) {
        Token result = token_source.getNextToken(tok);
        while (result.isUnparsed()) {
            result = token_source.getNextToken(result);
        }
        nextTokenType = null;
        return result;
    }

    /**
    * @return the next Token off the stream. This is the same as #getToken(1)
    */
    final public Token getNextToken() {
        return getToken(1);
    }

    /**
    * @param index how many tokens to look ahead
    * @return the specific regular (i.e. parsed) Token index ahead/behind in the stream.
    * If we are in a lookahead, it looks ahead from the currentLookaheadToken
    * Otherwise, it is the lastConsumedToken. If you pass in a negative
    * number it goes backward.
    */
    final public Token getToken(final int index) {
        Token t = currentLookaheadToken == null ? lastConsumedToken : currentLookaheadToken;
        for (int i = 0; i < index; i++) {
            t = nextToken(t);
        }
        for (int i = 0; i > index; i--) {
            t = t.getPrevious();
            if (t == null) break;
        }
        return t;
    }

    private final TokenType nextTokenType() {
        if (nextTokenType == null) {
            nextTokenType = nextToken(lastConsumedToken).getType();
        }
        return nextTokenType;
    }

    boolean activateTokenTypes(TokenType...types) {
        boolean result = false;
        for (TokenType tt : types) {
            result |= token_source.activeTokenTypes.add(tt);
        }
        if (result) {
            token_source.reset(getToken(0));
            nextTokenType = null;
        }
        return result;
    }

    boolean deactivateTokenTypes(TokenType...types) {
        boolean result = false;
        for (TokenType tt : types) {
            result |= token_source.activeTokenTypes.remove(tt);
        }
        if (result) {
            token_source.reset(getToken(0));
            nextTokenType = null;
        }
        return result;
    }

    private static HashMap<TokenType[], EnumSet<TokenType>> enumSetCache = new HashMap<>();

    private static EnumSet<TokenType> tokenTypeSet(TokenType first, TokenType...rest) {
        TokenType[] key = new TokenType[1 + rest.length];
        key[0] = first;
        if (rest.length > 0) {
            System.arraycopy(rest, 0, key, 1, rest.length);
        }
        Arrays.sort(key);
        if (enumSetCache.containsKey(key)) {
            return enumSetCache.get(key);
        }
        EnumSet<TokenType> result = (rest.length == 0) ? EnumSet.of(first) : EnumSet.of(first, rest);
        enumSetCache.put(key, result);
        return result;
    }

    // ccc/mdx.ccc:433:1
    final public
    // ----------------------------------------------------------------------------
    // MDX Statement
    //
    // <statement> ::= <selectStatement>
    //                   | <drillthroughStatement>
    //                   | <explainStatement>
    //
    // <selectStatement> ::= [WITH <formulaSpecification>]
    //                         SELECT [<SelectQueryAxisClause>
    //                                [, <SelectQueryAxisClause>...]]
    //                         FROM [<cubeSpecification>]
    //                         [WHERE <slicerSpecification>]
    //                         [<cellProps>]
    //
    // <drillthroughStatment> ::=
    //     DRILLTHROUGH
    //     [ MAXROWS <count> ]
    //     [ FIRSTROWSET <count> ]
    //     <selectStatement>
    //     [ RETURN <memberOrAttribute> [, <memberOrAttribute>...] ]
    //
    // <explainStatement> ::=
    //     EXPLAIN PLAN FOR ( <selectStatement> | <drillthroughStatement> )
    //
    MdxStatement parseMdxStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseMdxStatement";
        ASTparseMdxStatement parseMdxStatement1 = null;
        if (buildTree) {
            parseMdxStatement1 = new ASTparseMdxStatement();
            openNodeScope(parseMdxStatement1);
        }
        MdxStatement mdxStatement = null;
        ParseException parseException2 = null;
        int callStackSize3 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:437:3
            pushOntoCallStack("parseMdxStatement", "ccc/mdx.ccc", 437, 3);
            try {
                mdxStatement = parseSelectStatement();
            } finally {
                popCallStack();
            }
            // Code for EndOfFile specified at ccc/mdx.ccc:450:3
            consumeToken(EOF);
            // Code for CodeBlock specified at ccc/mdx.ccc:451:3
            return mdxStatement;
        } catch (ParseException e) {
            parseException2 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize3);
            if (parseMdxStatement1 != null) {
                if (parseException2 == null) {
                    closeNodeScope(parseMdxStatement1, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:457:1
    final public DrillthroughStatement parseDrillthroughStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseDrillthroughStatement";
        ASTparseDrillthroughStatement parseDrillthroughStatement2 = null;
        if (buildTree) {
            parseDrillthroughStatement2 = new ASTparseDrillthroughStatement();
            openNodeScope(parseDrillthroughStatement2);
        }
        SelectStatement selectStatement = null;
        List<ReturnItem> returnItems = null;
        ParseException parseException18 = null;
        int callStackSize19 = parsingStack.size();
        try {
            // Code for RegexpRef specified at ccc/mdx.ccc:462:3
            consumeToken(DRILLTHROUGH);
            // Code for ZeroOrOne specified at ccc/mdx.ccc:463:3
            if (nextTokenType() == MAXROWS) {
                // Code for RegexpRef specified at ccc/mdx.ccc:463:4
                consumeToken(MAXROWS);
                // Code for RegexpRef specified at ccc/mdx.ccc:463:16
                consumeToken(UNSIGNED_INTEGER_LITERAL);
            }
            // Code for ZeroOrOne specified at ccc/mdx.ccc:464:3
            if (nextTokenType() == FIRSTROWSET) {
                // Code for RegexpRef specified at ccc/mdx.ccc:464:4
                consumeToken(FIRSTROWSET);
                // Code for RegexpRef specified at ccc/mdx.ccc:464:20
                consumeToken(UNSIGNED_INTEGER_LITERAL);
            }
            // Code for NonTerminal specified at ccc/mdx.ccc:465:3
            pushOntoCallStack("parseDrillthroughStatement", "ccc/mdx.ccc", 465, 3);
            try {
                selectStatement = parseSelectStatement();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at ccc/mdx.ccc:466:3
            if (nextTokenType() == RETURN) {
                // Code for RegexpRef specified at ccc/mdx.ccc:467:5
                consumeToken(RETURN);
                // Code for NonTerminal specified at ccc/mdx.ccc:467:16
                pushOntoCallStack("parseDrillthroughStatement", "ccc/mdx.ccc", 467, 16);
                try {
                    returnItems = parseReturnItems();
                } finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:469:3
            return new DrillthroughStatement();
        } catch (ParseException e) {
            parseException18 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize19);
            if (parseDrillthroughStatement2 != null) {
                if (parseException18 == null) {
                    closeNodeScope(parseDrillthroughStatement2, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:475:1
    final public List<ReturnItem> parseReturnItems() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseReturnItems";
        ASTparseReturnItems parseReturnItems3 = null;
        if (buildTree) {
            parseReturnItems3 = new ASTparseReturnItems();
            openNodeScope(parseReturnItems3);
        }
        List<ReturnItem> returnItems = new LinkedList<ReturnItem>();
        ReturnItem item;
        ParseException parseException82 = null;
        int callStackSize83 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:480:3
            pushOntoCallStack("parseReturnItems", "ccc/mdx.ccc", 480, 3);
            try {
                item = parseReturnItem();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:481:3
            returnItems.add(item);
            // Code for ZeroOrMore specified at ccc/mdx.ccc:484:3
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:485:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at ccc/mdx.ccc:485:15
                pushOntoCallStack("parseReturnItems", "ccc/mdx.ccc", 485, 15);
                try {
                    item = parseReturnItem();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:486:5
                returnItems.add(item);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:490:3
            return returnItems;
        } catch (ParseException e) {
            parseException82 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize83);
            if (parseReturnItems3 != null) {
                if (parseException82 == null) {
                    closeNodeScope(parseReturnItems3, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:496:1
    final public ReturnItem parseReturnItem() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseReturnItem";
        ASTparseReturnItem parseReturnItem4 = null;
        if (buildTree) {
            parseReturnItem4 = new ASTparseReturnItem();
            openNodeScope(parseReturnItem4);
        }
        CompoundId compoundId;
        ParseException parseException118 = null;
        int callStackSize119 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:500:3
            pushOntoCallStack("parseReturnItem", "ccc/mdx.ccc", 500, 3);
            try {
                compoundId = parseCompoundId();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:501:3
            return new ReturnItem(compoundId);
        } catch (ParseException e) {
            parseException118 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize119);
            if (parseReturnItem4 != null) {
                if (parseException118 == null) {
                    closeNodeScope(parseReturnItem4, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:512:1
    final public
    //CreateCellCalculationBodyClause:
    //;
    //MeasureBodyClause:
    //  <APPROX_NUMERIC_LITERAL>
    //;
    SelectWithClause parseSelectWithClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectWithClause";
        ASTparseSelectWithClause parseSelectWithClause5 = null;
        if (buildTree) {
            parseSelectWithClause5 = new ASTparseSelectWithClause();
            openNodeScope(parseSelectWithClause5);
        }
        CreateMemberBodyClause createMemberBodyClause = null;
        CreateSetBodyClause createSetBodyClause = null;
        ParseException parseException130 = null;
        int callStackSize131 = parsingStack.size();
        try {
            if (nextTokenType() == MEMBER || nextTokenType == CALCULATED) {
                // Code for ZeroOrOne specified at ccc/mdx.ccc:518:5
                if (nextTokenType() == CALCULATED) {
                    // Code for RegexpStringLiteral specified at ccc/mdx.ccc:518:6
                    consumeToken(CALCULATED);
                }
                // Code for RegexpRef specified at ccc/mdx.ccc:518:21
                consumeToken(MEMBER);
                // Code for NonTerminal specified at ccc/mdx.ccc:518:32
                pushOntoCallStack("parseSelectWithClause", "ccc/mdx.ccc", 518, 32);
                try {
                    createMemberBodyClause = parseCreateMemberBodyClause();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == SET) {
                // Code for RegexpRef specified at ccc/mdx.ccc:519:5
                consumeToken(SET);
                // Code for NonTerminal specified at ccc/mdx.ccc:519:13
                pushOntoCallStack("parseSelectWithClause", "ccc/mdx.ccc", 519, 13);
                try {
                    createSetBodyClause = parseCreateSetBodyClause();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("parseSelectWithClause", "ccc/mdx.ccc", 518, 5);
                throw new ParseException(this, first_set$mdx_ccc$518$5, parsingStack);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:522:3
            return new SelectWithClause();
        } catch (ParseException e) {
            parseException130 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize131);
            if (parseSelectWithClause5 != null) {
                if (parseException130 == null) {
                    closeNodeScope(parseSelectWithClause5, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:528:1
    final public SelectStatement parseSelectStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectStatement";
        ASTparseSelectStatement parseSelectStatement6 = null;
        if (buildTree) {
            parseSelectStatement6 = new ASTparseSelectStatement();
            openNodeScope(parseSelectStatement6);
        }
        SelectWithClause selectWithClause = null;
        SelectSlicerAxisClause selectSlicerAxisClause = null;
        SelectQueryClause selectQueryClause = null;
        SelectSubcubeClause selectSubcubeClause = null;
        SelectCellPropertyListClause selectCellPropertyListClause = null;
        ParseException parseException179 = null;
        int callStackSize180 = parsingStack.size();
        try {
            // Code for ZeroOrOne specified at ccc/mdx.ccc:536:3
            if (nextTokenType() == WITH) {
                // Code for RegexpRef specified at ccc/mdx.ccc:537:5
                consumeToken(WITH);
                // Code for OneOrMore specified at ccc/mdx.ccc:538:5
                while (true) {
                    // Code for NonTerminal specified at ccc/mdx.ccc:539:7
                    pushOntoCallStack("parseSelectStatement", "ccc/mdx.ccc", 539, 7);
                    try {
                        selectWithClause = parseSelectWithClause();
                    } finally {
                        popCallStack();
                    }
                    if (!(nextTokenType() == MEMBER || nextTokenType == SET || nextTokenType == CALCULATED)) break;
                }
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:542:3
            consumeToken(SELECT);
            if (nextTokenType() == ASTERISK) {
                // Code for NonTerminal specified at ccc/mdx.ccc:544:5
                pushOntoCallStack("parseSelectStatement", "ccc/mdx.ccc", 544, 5);
                try {
                    selectQueryClause = parseSelectQueryAsteriskClause();
                } finally {
                    popCallStack();
                }
            } else if (first_set$mdx_ccc$546$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at ccc/mdx.ccc:546:5
                pushOntoCallStack("parseSelectStatement", "ccc/mdx.ccc", 546, 5);
                try {
                    selectQueryClause = parseSelectQueryAxesClause();
                } finally {
                    popCallStack();
                }
            } else {
                // Code for CodeBlock specified at ccc/mdx.ccc:548:5
                selectQueryClause = new SelectQueryEmptyClause();
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:552:3
            consumeToken(FROM);
            // Code for NonTerminal specified at ccc/mdx.ccc:552:12
            pushOntoCallStack("parseSelectStatement", "ccc/mdx.ccc", 552, 12);
            try {
                selectSubcubeClause = parseSelectSubcubeClause();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at ccc/mdx.ccc:553:3
            if (nextTokenType() == WHERE) {
                // Code for NonTerminal specified at ccc/mdx.ccc:554:5
                pushOntoCallStack("parseSelectStatement", "ccc/mdx.ccc", 554, 5);
                try {
                    selectSlicerAxisClause = parseSelectSlicerAxisClause();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at ccc/mdx.ccc:556:3
            if (nextTokenType() == CELL || nextTokenType == PROPERTIES) {
                // Code for NonTerminal specified at ccc/mdx.ccc:557:5
                pushOntoCallStack("parseSelectStatement", "ccc/mdx.ccc", 557, 5);
                try {
                    selectCellPropertyListClause = parseSelectCellPropertyListClause();
                } finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:559:3
            return new SelectStatement(selectWithClause, selectQueryClause, selectSubcubeClause, selectSlicerAxisClause, selectCellPropertyListClause);
        } catch (ParseException e) {
            parseException179 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize180);
            if (parseSelectStatement6 != null) {
                if (parseException179 == null) {
                    closeNodeScope(parseSelectStatement6, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:565:1
    final public SelectSubcubeClause parseSelectSubcubeClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectSubcubeClause";
        ASTparseSelectSubcubeClause parseSelectSubcubeClause7 = null;
        if (buildTree) {
            parseSelectSubcubeClause7 = new ASTparseSelectSubcubeClause();
            openNodeScope(parseSelectSubcubeClause7);
        }
        SelectSubcubeClause selectSubcubeClause = null;
        ParseException parseException276 = null;
        int callStackSize277 = parsingStack.size();
        try {
            if (first_set$mdx_ccc$570$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at ccc/mdx.ccc:570:5
                pushOntoCallStack("parseSelectSubcubeClause", "ccc/mdx.ccc", 570, 5);
                try {
                    selectSubcubeClause = parseSelectSubcubeClauseName();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == LPAREN) {
                // Code for NonTerminal specified at ccc/mdx.ccc:572:5
                pushOntoCallStack("parseSelectSubcubeClause", "ccc/mdx.ccc", 572, 5);
                try {
                    selectSubcubeClause = parseSelectSubcubeClauseStatement();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("parseSelectSubcubeClause", "ccc/mdx.ccc", 570, 5);
                throw new ParseException(this, first_set$mdx_ccc$570$5$, parsingStack);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:574:3
            return selectSubcubeClause;
        } catch (ParseException e) {
            parseException276 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize277);
            if (parseSelectSubcubeClause7 != null) {
                if (parseException276 == null) {
                    closeNodeScope(parseSelectSubcubeClause7, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:580:1
    final public SelectSubcubeClauseName parseSelectSubcubeClauseName() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectSubcubeClauseName";
        ASTparseSelectSubcubeClauseName parseSelectSubcubeClauseName8 = null;
        if (buildTree) {
            parseSelectSubcubeClauseName8 = new ASTparseSelectSubcubeClauseName();
            openNodeScope(parseSelectSubcubeClauseName8);
        }
        NameObjectIdentifier nameObjectIdentifier;
        ParseException parseException305 = null;
        int callStackSize306 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:584:3
            pushOntoCallStack("parseSelectSubcubeClauseName", "ccc/mdx.ccc", 584, 3);
            try {
                nameObjectIdentifier = parseNameObjectIdentifier();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:585:3
            return new SelectSubcubeClauseName(nameObjectIdentifier);
        } catch (ParseException e) {
            parseException305 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize306);
            if (parseSelectSubcubeClauseName8 != null) {
                if (parseException305 == null) {
                    closeNodeScope(parseSelectSubcubeClauseName8, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:591:1
    final public SelectSubcubeClauseStatement parseSelectSubcubeClauseStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectSubcubeClauseStatement";
        ASTparseSelectSubcubeClauseStatement parseSelectSubcubeClauseStatement9 = null;
        if (buildTree) {
            parseSelectSubcubeClauseStatement9 = new ASTparseSelectSubcubeClauseStatement();
            openNodeScope(parseSelectSubcubeClauseStatement9);
        }
        SelectSlicerAxisClause selectSlicerAxisClause = null;
        SelectQueryClause selectQueryClause = null;
        SelectSubcubeClause selectSubcubeClause = null;
        ParseException parseException317 = null;
        int callStackSize318 = parsingStack.size();
        try {
            // Code for RegexpRef specified at ccc/mdx.ccc:598:5
            consumeToken(LPAREN);
            // Code for RegexpRef specified at ccc/mdx.ccc:598:16
            consumeToken(SELECT);
            // Code for ZeroOrOne specified at ccc/mdx.ccc:599:5
            // Code for ExpansionChoice specified at ccc/mdx.ccc:600:7
            if (nextTokenType() == ASTERISK) {
                // Code for NonTerminal specified at ccc/mdx.ccc:600:7
                pushOntoCallStack("parseSelectSubcubeClauseStatement", "ccc/mdx.ccc", 600, 7);
                try {
                    selectQueryClause = parseSelectQueryAsteriskClause();
                } finally {
                    popCallStack();
                }
            } else if (first_set$mdx_ccc$602$7.contains(nextTokenType())) {
                // Code for NonTerminal specified at ccc/mdx.ccc:602:7
                pushOntoCallStack("parseSelectSubcubeClauseStatement", "ccc/mdx.ccc", 602, 7);
                try {
                    selectQueryClause = parseSelectQueryAxesClause();
                } finally {
                    popCallStack();
                }
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:604:5
            consumeToken(FROM);
            // Code for NonTerminal specified at ccc/mdx.ccc:604:14
            pushOntoCallStack("parseSelectSubcubeClauseStatement", "ccc/mdx.ccc", 604, 14);
            try {
                selectSubcubeClause = parseSelectSubcubeClause();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at ccc/mdx.ccc:605:5
            if (nextTokenType() == WHERE) {
                // Code for NonTerminal specified at ccc/mdx.ccc:606:7
                pushOntoCallStack("parseSelectSubcubeClauseStatement", "ccc/mdx.ccc", 606, 7);
                try {
                    selectSlicerAxisClause = parseSelectSlicerAxisClause();
                } finally {
                    popCallStack();
                }
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:608:5
            consumeToken(RPAREN);
            // Code for CodeBlock specified at ccc/mdx.ccc:610:3
            return new SelectSubcubeClauseStatement(selectQueryClause, selectSubcubeClause, selectSlicerAxisClause);
        } catch (ParseException e) {
            parseException317 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize318);
            if (parseSelectSubcubeClauseStatement9 != null) {
                if (parseException317 == null) {
                    closeNodeScope(parseSelectSubcubeClauseStatement9, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:616:1
    final public SelectQueryAsteriskClause parseSelectQueryAsteriskClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectQueryAsteriskClause";
        ASTparseSelectQueryAsteriskClause parseSelectQueryAsteriskClause10 = null;
        if (buildTree) {
            parseSelectQueryAsteriskClause10 = new ASTparseSelectQueryAsteriskClause();
            openNodeScope(parseSelectQueryAsteriskClause10);
        }
        ParseException parseException386 = null;
        int callStackSize387 = parsingStack.size();
        try {
            // Code for RegexpRef specified at ccc/mdx.ccc:617:3
            consumeToken(ASTERISK);
            // Code for CodeBlock specified at ccc/mdx.ccc:618:3
            return new SelectQueryAsteriskClause();
        } catch (ParseException e) {
            parseException386 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize387);
            if (parseSelectQueryAsteriskClause10 != null) {
                if (parseException386 == null) {
                    closeNodeScope(parseSelectQueryAsteriskClause10, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:624:1
    final public SelectQueryAxesClause parseSelectQueryAxesClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectQueryAxesClause";
        ASTparseSelectQueryAxesClause parseSelectQueryAxesClause11 = null;
        if (buildTree) {
            parseSelectQueryAxesClause11 = new ASTparseSelectQueryAxesClause();
            openNodeScope(parseSelectQueryAxesClause11);
        }
        List<SelectQueryAxisClause> selectQueryAxisClauses = new LinkedList<SelectQueryAxisClause>();
        SelectQueryAxisClause selectQueryAxisClause;
        ParseException parseException398 = null;
        int callStackSize399 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:629:3
            pushOntoCallStack("parseSelectQueryAxesClause", "ccc/mdx.ccc", 629, 3);
            try {
                selectQueryAxisClause = parseSelectQueryAxisClause();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:630:3
            selectQueryAxisClauses.add(selectQueryAxisClause);
            // Code for ZeroOrMore specified at ccc/mdx.ccc:633:3
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:634:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at ccc/mdx.ccc:634:15
                pushOntoCallStack("parseSelectQueryAxesClause", "ccc/mdx.ccc", 634, 15);
                try {
                    selectQueryAxisClause = parseSelectQueryAxisClause();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:635:5
                selectQueryAxisClauses.add(selectQueryAxisClause);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:639:3
            return new SelectQueryAxesClause(selectQueryAxisClauses);
        } catch (ParseException e) {
            parseException398 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize399);
            if (parseSelectQueryAxesClause11 != null) {
                if (parseException398 == null) {
                    closeNodeScope(parseSelectQueryAxesClause11, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:645:1
    final public SelectSlicerAxisClause parseSelectSlicerAxisClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectSlicerAxisClause";
        ASTparseSelectSlicerAxisClause parseSelectSlicerAxisClause12 = null;
        if (buildTree) {
            parseSelectSlicerAxisClause12 = new ASTparseSelectSlicerAxisClause();
            openNodeScope(parseSelectSlicerAxisClause12);
        }
        Expression expression = null;
        ParseException parseException434 = null;
        int callStackSize435 = parsingStack.size();
        try {
            // Code for RegexpRef specified at ccc/mdx.ccc:649:3
            consumeToken(WHERE);
            // Code for NonTerminal specified at ccc/mdx.ccc:649:13
            pushOntoCallStack("parseSelectSlicerAxisClause", "ccc/mdx.ccc", 649, 13);
            try {
                expression = parseExpression();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:650:3
            return new SelectSlicerAxisClause();
        } catch (ParseException e) {
            parseException434 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize435);
            if (parseSelectSlicerAxisClause12 != null) {
                if (parseException434 == null) {
                    closeNodeScope(parseSelectSlicerAxisClause12, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:656:1
    final public SelectCellPropertyListClause parseSelectCellPropertyListClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectCellPropertyListClause";
        ASTparseSelectCellPropertyListClause parseSelectCellPropertyListClause13 = null;
        if (buildTree) {
            parseSelectCellPropertyListClause13 = new ASTparseSelectCellPropertyListClause();
            openNodeScope(parseSelectCellPropertyListClause13);
        }
        List<CellProperty> cellPropertys = new LinkedList<CellProperty>();
        ParseException parseException450 = null;
        int callStackSize451 = parsingStack.size();
        try {
            // Code for ZeroOrOne specified at ccc/mdx.ccc:660:3
            if (nextTokenType() == CELL) {
                // Code for RegexpRef specified at ccc/mdx.ccc:660:4
                consumeToken(CELL);
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:660:15
            consumeToken(PROPERTIES);
            // Code for NonTerminal specified at ccc/mdx.ccc:660:30
            pushOntoCallStack("parseSelectCellPropertyListClause", "ccc/mdx.ccc", 660, 30);
            try {
                parseCellProperty();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at ccc/mdx.ccc:661:3
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:662:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at ccc/mdx.ccc:662:15
                pushOntoCallStack("parseSelectCellPropertyListClause", "ccc/mdx.ccc", 662, 15);
                try {
                    parseCellProperty();
                } finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:664:3
            return new SelectCellPropertyListClause();
        } catch (ParseException e) {
            parseException450 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize451);
            if (parseSelectCellPropertyListClause13 != null) {
                if (parseException450 == null) {
                    closeNodeScope(parseSelectCellPropertyListClause13, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:670:1
    final public CreateMemberBodyClause parseCreateMemberBodyClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseCreateMemberBodyClause";
        ASTparseCreateMemberBodyClause parseCreateMemberBodyClause14 = null;
        if (buildTree) {
            parseCreateMemberBodyClause14 = new ASTparseCreateMemberBodyClause();
            openNodeScope(parseCreateMemberBodyClause14);
        }
        ParseException parseException494 = null;
        int callStackSize495 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:671:3
            pushOntoCallStack("parseCreateMemberBodyClause", "ccc/mdx.ccc", 671, 3);
            try {
                parseIdentifier();
            } finally {
                popCallStack();
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:671:19
            consumeToken(AS);
            // Code for NonTerminal specified at ccc/mdx.ccc:671:26
            pushOntoCallStack("parseCreateMemberBodyClause", "ccc/mdx.ccc", 671, 26);
            try {
                parseFormulaExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at ccc/mdx.ccc:672:3
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:673:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at ccc/mdx.ccc:673:15
                pushOntoCallStack("parseCreateMemberBodyClause", "ccc/mdx.ccc", 673, 15);
                try {
                    parseMemberPropertyDefinition();
                } finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:675:3
            return new CreateMemberBodyClause();
        } catch (ParseException e) {
            parseException494 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize495);
            if (parseCreateMemberBodyClause14 != null) {
                if (parseException494 == null) {
                    closeNodeScope(parseCreateMemberBodyClause14, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:681:1
    final public MemberPropertyDefinition parseMemberPropertyDefinition() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseMemberPropertyDefinition";
        ASTparseMemberPropertyDefinition parseMemberPropertyDefinition15 = null;
        if (buildTree) {
            parseMemberPropertyDefinition15 = new ASTparseMemberPropertyDefinition();
            openNodeScope(parseMemberPropertyDefinition15);
        }
        ParseException parseException530 = null;
        int callStackSize531 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:682:3
            pushOntoCallStack("parseMemberPropertyDefinition", "ccc/mdx.ccc", 682, 3);
            try {
                parseIdentifier();
            } finally {
                popCallStack();
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:682:19
            consumeToken(EQ);
            // Code for NonTerminal specified at ccc/mdx.ccc:682:26
            pushOntoCallStack("parseMemberPropertyDefinition", "ccc/mdx.ccc", 682, 26);
            try {
                parseExpression();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:683:3
            return new MemberPropertyDefinition();
        } catch (ParseException e) {
            parseException530 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize531);
            if (parseMemberPropertyDefinition15 != null) {
                if (parseException530 == null) {
                    closeNodeScope(parseMemberPropertyDefinition15, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:689:1
    final public FormulaExpression parseFormulaExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseFormulaExpression";
        ASTparseFormulaExpression parseFormulaExpression16 = null;
        if (buildTree) {
            parseFormulaExpression16 = new ASTparseFormulaExpression();
            openNodeScope(parseFormulaExpression16);
        }
        ParseException parseException550 = null;
        int callStackSize551 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:690:3
            pushOntoCallStack("parseFormulaExpression", "ccc/mdx.ccc", 690, 3);
            try {
                parseIdentifier();
            } finally {
                popCallStack();
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:690:19
            consumeToken(EQ);
            // Code for NonTerminal specified at ccc/mdx.ccc:690:26
            pushOntoCallStack("parseFormulaExpression", "ccc/mdx.ccc", 690, 26);
            try {
                parseIdentifier();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:691:3
            return new FormulaExpression();
        } catch (ParseException e) {
            parseException550 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize551);
            if (parseFormulaExpression16 != null) {
                if (parseException550 == null) {
                    closeNodeScope(parseFormulaExpression16, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:697:1
    final public Expression parseExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseExpression";
        ASTparseExpression parseExpression17 = null;
        if (buildTree) {
            parseExpression17 = new ASTparseExpression();
            openNodeScope(parseExpression17);
        }
        Expression expression;
        ObjectIdentifier objectIdentifier;
        ParseException parseException570 = null;
        int callStackSize571 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:702:3
            pushOntoCallStack("parseExpression", "ccc/mdx.ccc", 702, 3);
            try {
                expression = unaliasedExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at ccc/mdx.ccc:703:3
            while (true) {
                if (!(nextTokenType() == AS)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:704:5
                consumeToken(AS);
                // Code for NonTerminal specified at ccc/mdx.ccc:704:12
                pushOntoCallStack("parseExpression", "ccc/mdx.ccc", 704, 12);
                try {
                    objectIdentifier = parseIdentifier();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:705:5
                CompoundId compundId = new CompoundId(List.of(objectIdentifier));
                expression = new CallExpression("AS", CallExpression.Type.Term_Infix, List.of(expression, compundId));
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:713:3
            return expression;
        } catch (ParseException e) {
            parseException570 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize571);
            if (parseExpression17 != null) {
                if (parseException570 == null) {
                    closeNodeScope(parseExpression17, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:719:1
    final public Expression expressionOrEmpty() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "expressionOrEmpty";
        // Code for ExpansionChoice specified at ccc/mdx.ccc:723:3
        ASTexpressionOrEmpty expressionOrEmpty18 = null;
        if (buildTree) {
            expressionOrEmpty18 = new ASTexpressionOrEmpty();
            openNodeScope(expressionOrEmpty18);
        }
        Expression expression;
        ParseException parseException602 = null;
        int callStackSize603 = parsingStack.size();
        try {
            if (first_set$mdx_ccc$723$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at ccc/mdx.ccc:723:3
                pushOntoCallStack("expressionOrEmpty", "ccc/mdx.ccc", 723, 3);
                try {
                    expression = parseExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:724:3
                return expression;
            } else {
                // Code for CodeBlock specified at ccc/mdx.ccc:728:3
                return new CallExpression("", CallExpression.Type.Empty, List.of());
            }
        } catch (ParseException e) {
            parseException602 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize603);
            if (expressionOrEmpty18 != null) {
                if (parseException602 == null) {
                    closeNodeScope(expressionOrEmpty18, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:737:1
    final public
    // Comma-separated list of expressions, some of which may be empty. Used
    // for functions.
    List<Expression> expOrEmptyList() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "expOrEmptyList";
        ASTexpOrEmptyList expOrEmptyList19 = null;
        if (buildTree) {
            expOrEmptyList19 = new ASTexpOrEmptyList();
            openNodeScope(expOrEmptyList19);
        }
        Expression expression;
        List<Expression> list = new LinkedList<Expression>();
        ParseException parseException626 = null;
        int callStackSize627 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:742:3
            pushOntoCallStack("expOrEmptyList", "ccc/mdx.ccc", 742, 3);
            try {
                expression = expressionOrEmpty();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:743:3
            list.add(expression);
            // Code for ZeroOrMore specified at ccc/mdx.ccc:746:3
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:747:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at ccc/mdx.ccc:748:5
                pushOntoCallStack("expOrEmptyList", "ccc/mdx.ccc", 748, 5);
                try {
                    expression = expressionOrEmpty();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:749:5
                list.add(expression);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:753:3
            return list;
        } catch (ParseException e) {
            parseException626 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize627);
            if (expOrEmptyList19 != null) {
                if (parseException626 == null) {
                    closeNodeScope(expOrEmptyList19, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:760:1
    final public
    // List of expressions, none of which may be empty.
    List<Expression> expList() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "expList";
        ASTexpList expList20 = null;
        if (buildTree) {
            expList20 = new ASTexpList();
            openNodeScope(expList20);
        }
        Expression expression;
        List<Expression> list = new LinkedList<Expression>();
        ParseException parseException662 = null;
        int callStackSize663 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:765:3
            pushOntoCallStack("expList", "ccc/mdx.ccc", 765, 3);
            try {
                expression = parseExpression();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:766:3
            list.add(expression);
            // Code for ZeroOrMore specified at ccc/mdx.ccc:769:3
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:770:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at ccc/mdx.ccc:771:5
                pushOntoCallStack("expList", "ccc/mdx.ccc", 771, 5);
                try {
                    expression = parseExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:772:5
                list.add(expression);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:776:3
            return list;
        } catch (ParseException e) {
            parseException662 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize663);
            if (expList20 != null) {
                if (parseException662 == null) {
                    closeNodeScope(expList20, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:782:1
    final public Expression expressionEof() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "expressionEof";
        ASTexpressionEof expressionEof21 = null;
        if (buildTree) {
            expressionEof21 = new ASTexpressionEof();
            openNodeScope(expressionEof21);
        }
        Expression expression;
        ParseException parseException698 = null;
        int callStackSize699 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:786:3
            pushOntoCallStack("expressionEof", "ccc/mdx.ccc", 786, 3);
            try {
                expression = parseExpression();
            } finally {
                popCallStack();
            }
            // Code for EndOfFile specified at ccc/mdx.ccc:786:32
            consumeToken(EOF);
            // Code for CodeBlock specified at ccc/mdx.ccc:787:3
            return expression;
        } catch (ParseException e) {
            parseException698 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize699);
            if (expressionEof21 != null) {
                if (parseException698 == null) {
                    closeNodeScope(expressionEof21, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:793:1
    final public ObjectIdentifier parseIdentifier() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseIdentifier";
        ASTparseIdentifier parseIdentifier22 = null;
        if (buildTree) {
            parseIdentifier22 = new ASTparseIdentifier();
            openNodeScope(parseIdentifier22);
        }
        ObjectIdentifier objectIdentifier;
        ParseException parseException714 = null;
        int callStackSize715 = parsingStack.size();
        try {
            if (first_set$mdx_ccc$798$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at ccc/mdx.ccc:798:5
                pushOntoCallStack("parseIdentifier", "ccc/mdx.ccc", 798, 5);
                try {
                    objectIdentifier = parseNameObjectIdentifier();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == AMP_QUOTED_ID || nextTokenType == AMP_UNQUOTED_ID) {
                // Code for NonTerminal specified at ccc/mdx.ccc:800:5
                pushOntoCallStack("parseIdentifier", "ccc/mdx.ccc", 800, 5);
                try {
                    objectIdentifier = parseKeyIdentifier();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("parseIdentifier", "ccc/mdx.ccc", 798, 5);
                throw new ParseException(this, first_set$mdx_ccc$798$5$, parsingStack);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:802:3
            return objectIdentifier;
        } catch (ParseException e) {
            parseException714 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize715);
            if (parseIdentifier22 != null) {
                if (parseException714 == null) {
                    closeNodeScope(parseIdentifier22, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    static private final EnumSet<TokenType> parseNameObjectIdentifier_FIRST_SET = tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID);

    // ccc/mdx.ccc:808:1
    final public NameObjectIdentifier parseNameObjectIdentifier() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseNameObjectIdentifier";
        // Code for ExpansionChoice specified at ccc/mdx.ccc:812:3
        ASTparseNameObjectIdentifier parseNameObjectIdentifier23 = null;
        if (buildTree) {
            parseNameObjectIdentifier23 = new ASTparseNameObjectIdentifier();
            openNodeScope(parseNameObjectIdentifier23);
        }
        String id;
        ParseException parseException743 = null;
        int callStackSize744 = parsingStack.size();
        try {
            if (nextTokenType() == DIMENSION || nextTokenType == PROPERTIES) {
                // Code for NonTerminal specified at ccc/mdx.ccc:812:3
                pushOntoCallStack("parseNameObjectIdentifier", "ccc/mdx.ccc", 812, 3);
                try {
                    id = parseKeyword();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:813:3
                // Keywords that are  not Reserved could be used
                return new NameObjectIdentifier(id, ObjectIdentifier.Quoting.UNQUOTED);
            } else if (nextTokenType() == ID) {
                // Code for RegexpRef specified at ccc/mdx.ccc:817:3
                consumeToken(ID);
                // Code for CodeBlock specified at ccc/mdx.ccc:818:3
                return new NameObjectIdentifier(getToken(0).getImage(), ObjectIdentifier.Quoting.UNQUOTED);
            } else if (nextTokenType() == ATSIGN) {
                // Code for RegexpRef specified at ccc/mdx.ccc:821:3
                consumeToken(ATSIGN);
                // Code for RegexpRef specified at ccc/mdx.ccc:821:14
                consumeToken(ID);
                // Code for CodeBlock specified at ccc/mdx.ccc:822:3
                return new NameObjectIdentifier("@" + getToken(0).getImage(), ObjectIdentifier.Quoting.UNQUOTED);
            } else if (nextTokenType() == QUOTED_ID) {
                // Code for RegexpRef specified at ccc/mdx.ccc:825:3
                consumeToken(QUOTED_ID);
                // Code for CodeBlock specified at ccc/mdx.ccc:826:3
                return new NameObjectIdentifier(stripQuotes(getToken(0).getImage(), "[", "]", "]]"), ObjectIdentifier.Quoting.QUOTED);
            } else {
                pushOntoCallStack("parseNameObjectIdentifier", "ccc/mdx.ccc", 812, 3);
                throw new ParseException(this, parseNameObjectIdentifier_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException743 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize744);
            if (parseNameObjectIdentifier23 != null) {
                if (parseException743 == null) {
                    closeNodeScope(parseNameObjectIdentifier23, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:835:1
    final public
    // for example '&foo&[1]&bar' in '[x].&foo&[1]&bar.[y]'
    KeyObjectIdentifier parseKeyIdentifier() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseKeyIdentifier";
        ASTparseKeyIdentifier parseKeyIdentifier24 = null;
        if (buildTree) {
            parseKeyIdentifier24 = new ASTparseKeyIdentifier();
            openNodeScope(parseKeyIdentifier24);
        }
        List<NameObjectIdentifier> list = new ArrayList<NameObjectIdentifier>();
        NameObjectIdentifier key;
        ParseException parseException799 = null;
        int callStackSize800 = parsingStack.size();
        try {
            // Code for OneOrMore specified at ccc/mdx.ccc:840:3
            while (true) {
                // Code for NonTerminal specified at ccc/mdx.ccc:841:5
                pushOntoCallStack("parseKeyIdentifier", "ccc/mdx.ccc", 841, 5);
                try {
                    key = parseAmpId();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:842:5
                list.add(key);
                if (!(nextTokenType() == AMP_QUOTED_ID || nextTokenType == AMP_UNQUOTED_ID)) break;
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:846:3
            return new KeyObjectIdentifier(list);
        } catch (ParseException e) {
            parseException799 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize800);
            if (parseKeyIdentifier24 != null) {
                if (parseException799 == null) {
                    closeNodeScope(parseKeyIdentifier24, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    static private final EnumSet<TokenType> parseAmpId_FIRST_SET = tokenTypeSet(AMP_QUOTED_ID, AMP_UNQUOTED_ID);

    // ccc/mdx.ccc:852:1
    final public NameObjectIdentifier parseAmpId() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseAmpId";
        // Code for ExpansionChoice specified at ccc/mdx.ccc:853:3
        ASTparseAmpId parseAmpId25 = null;
        if (buildTree) {
            parseAmpId25 = new ASTparseAmpId();
            openNodeScope(parseAmpId25);
        }
        ParseException parseException823 = null;
        int callStackSize824 = parsingStack.size();
        try {
            if (nextTokenType() == AMP_QUOTED_ID) {
                // Code for RegexpRef specified at ccc/mdx.ccc:853:3
                consumeToken(AMP_QUOTED_ID);
                // Code for CodeBlock specified at ccc/mdx.ccc:854:3
                return new NameObjectIdentifier(stripQuotes(getToken(0).getImage(), "&[", "]", "]]"), ObjectIdentifier.Quoting.QUOTED);
            } else if (nextTokenType() == AMP_UNQUOTED_ID) {
                // Code for RegexpRef specified at ccc/mdx.ccc:860:3
                consumeToken(AMP_UNQUOTED_ID);
                // Code for CodeBlock specified at ccc/mdx.ccc:861:3
                return new NameObjectIdentifier(getToken(0).getImage().substring(1), ObjectIdentifier.Quoting.UNQUOTED);
            } else {
                pushOntoCallStack("parseAmpId", "ccc/mdx.ccc", 853, 3);
                throw new ParseException(this, parseAmpId_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException823 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize824);
            if (parseAmpId25 != null) {
                if (parseException823 == null) {
                    closeNodeScope(parseAmpId25, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:870:1
    final public
    // a keyword that is not a RESERVED_WORD could be used as identifier
    String parseKeyword() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseKeyword";
        ASTparseKeyword parseKeyword26 = null;
        if (buildTree) {
            parseKeyword26 = new ASTparseKeyword();
            openNodeScope(parseKeyword26);
        }
        ParseException parseException851 = null;
        int callStackSize852 = parsingStack.size();
        try {
            if (nextTokenType() == DIMENSION) {
                // Code for RegexpRef specified at ccc/mdx.ccc:872:5
                consumeToken(DIMENSION);
            } else if (nextTokenType() == PROPERTIES) {
                // Code for RegexpRef specified at ccc/mdx.ccc:873:5
                consumeToken(PROPERTIES);
            } else {
                pushOntoCallStack("parseKeyword", "ccc/mdx.ccc", 872, 5);
                throw new ParseException(this, first_set$mdx_ccc$872$5, parsingStack);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:875:3
            return getToken(0).getImage();
        } catch (ParseException e) {
            parseException851 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize852);
            if (parseKeyword26 != null) {
                if (parseException851 == null) {
                    closeNodeScope(parseKeyword26, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:881:1
    final public CompoundId parseCompoundId() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseCompoundId";
        ASTparseCompoundId parseCompoundId27 = null;
        if (buildTree) {
            parseCompoundId27 = new ASTparseCompoundId();
            openNodeScope(parseCompoundId27);
        }
        CompoundId compoundId;
        List<ObjectIdentifier> list = new ArrayList<ObjectIdentifier>();
        ObjectIdentifier s;
        ParseException parseException880 = null;
        int callStackSize881 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:887:3
            pushOntoCallStack("parseCompoundId", "ccc/mdx.ccc", 887, 3);
            try {
                s = parseIdentifier();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:888:3
            list.add(s);
            // Code for ZeroOrMore specified at ccc/mdx.ccc:891:3
            while (true) {
                if (!(scan$mdx_ccc$892$5())) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:893:5
                consumeToken(DOT);
                // Code for NonTerminal specified at ccc/mdx.ccc:893:13
                pushOntoCallStack("parseCompoundId", "ccc/mdx.ccc", 893, 13);
                try {
                    s = parseIdentifier();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:894:5
                list.add(s);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:898:3
            return new CompoundId(list);
        } catch (ParseException e) {
            parseException880 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize881);
            if (parseCompoundId27 != null) {
                if (parseException880 == null) {
                    closeNodeScope(parseCompoundId27, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:906:1
    final public
    // ----------------------------------------------------------------------------
    // Expressions
    Expression unaliasedExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "unaliasedExpression";
        ASTunaliasedExpression unaliasedExpression28 = null;
        if (buildTree) {
            unaliasedExpression28 = new ASTunaliasedExpression();
            openNodeScope(unaliasedExpression28);
        }
        Expression x, y;
        ParseException parseException916 = null;
        int callStackSize917 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:910:3
            pushOntoCallStack("unaliasedExpression", "ccc/mdx.ccc", 910, 3);
            try {
                x = term5();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at ccc/mdx.ccc:911:3
            while (true) {
                // Code for ExpansionChoice specified at ccc/mdx.ccc:912:5
                if (nextTokenType() == OR) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:912:5
                    consumeToken(OR);
                    // Code for NonTerminal specified at ccc/mdx.ccc:912:12
                    pushOntoCallStack("unaliasedExpression", "ccc/mdx.ccc", 912, 12);
                    try {
                        y = term5();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:913:5
                    x = new CallExpression("OR", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (nextTokenType() == XOR) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:919:5
                    consumeToken(XOR);
                    // Code for NonTerminal specified at ccc/mdx.ccc:919:13
                    pushOntoCallStack("unaliasedExpression", "ccc/mdx.ccc", 919, 13);
                    try {
                        y = term5();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:920:5
                    x = new CallExpression("XOR", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (nextTokenType() == COLON) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:928:5
                    consumeToken(COLON);
                    // Code for NonTerminal specified at ccc/mdx.ccc:928:15
                    pushOntoCallStack("unaliasedExpression", "ccc/mdx.ccc", 928, 15);
                    try {
                        y = term5();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:929:5
                    x = new CallExpression(":", CallExpression.Type.Term_Infix, List.of(x, y));
                } else {
                    break;
                }
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:936:3
            return x;
        } catch (ParseException e) {
            parseException916 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize917);
            if (unaliasedExpression28 != null) {
                if (parseException916 == null) {
                    closeNodeScope(unaliasedExpression28, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:942:1
    final public Expression term5() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "term5";
        ASTterm5 term529 = null;
        if (buildTree) {
            term529 = new ASTterm5();
            openNodeScope(term529);
        }
        Expression x, y;
        ParseException parseException984 = null;
        int callStackSize985 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:946:3
            pushOntoCallStack("term5", "ccc/mdx.ccc", 946, 3);
            try {
                x = term4();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at ccc/mdx.ccc:947:3
            while (true) {
                if (!(nextTokenType() == AND)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:948:5
                consumeToken(AND);
                // Code for NonTerminal specified at ccc/mdx.ccc:948:13
                pushOntoCallStack("term5", "ccc/mdx.ccc", 948, 13);
                try {
                    y = term4();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:949:5
                x = new CallExpression("AND", CallExpression.Type.Term_Infix, List.of(x, y));
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:956:3
            return x;
        } catch (ParseException e) {
            parseException984 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize985);
            if (term529 != null) {
                if (parseException984 == null) {
                    closeNodeScope(term529, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    static private final EnumSet<TokenType> term4_FIRST_SET = term4_FIRST_SET_init();

    static private EnumSet<TokenType> term4_FIRST_SET_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    // ccc/mdx.ccc:962:1
    final public Expression term4() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "term4";
        // Code for ExpansionChoice specified at ccc/mdx.ccc:966:3
        ASTterm4 term430 = null;
        if (buildTree) {
            term430 = new ASTterm4();
            openNodeScope(term430);
        }
        Expression x;
        ParseException parseException1016 = null;
        int callStackSize1017 = parsingStack.size();
        try {
            if (first_set$mdx_ccc$966$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at ccc/mdx.ccc:966:3
                pushOntoCallStack("term4", "ccc/mdx.ccc", 966, 3);
                try {
                    x = term3();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:967:3
                return x;
            } else if (nextTokenType() == NOT) {
                // Code for RegexpRef specified at ccc/mdx.ccc:970:3
                consumeToken(NOT);
                // Code for NonTerminal specified at ccc/mdx.ccc:970:11
                pushOntoCallStack("term4", "ccc/mdx.ccc", 970, 11);
                try {
                    x = term4();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:971:3
                return new CallExpression("NOT", CallExpression.Type.Term_Prefix, List.of(x));
            } else {
                pushOntoCallStack("term4", "ccc/mdx.ccc", 966, 3);
                throw new ParseException(this, term4_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException1016 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1017);
            if (term430 != null) {
                if (parseException1016 == null) {
                    closeNodeScope(term430, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:980:1
    final public Expression term3() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "term3";
        ASTterm3 term331 = null;
        if (buildTree) {
            term331 = new ASTterm3();
            openNodeScope(term331);
        }
        Expression x, y;
        Token op;
        ParseException parseException1048 = null;
        int callStackSize1049 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:985:3
            pushOntoCallStack("term3", "ccc/mdx.ccc", 985, 3);
            try {
                x = term2();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at ccc/mdx.ccc:986:3
            while (true) {
                // Code for ExpansionChoice specified at ccc/mdx.ccc:988:5
                if (first_set$mdx_ccc$988$5.contains(nextTokenType())) {
                    if (nextTokenType() == EQ) {
                        // Code for RegexpRef specified at ccc/mdx.ccc:989:7
                        consumeToken(EQ);
                        // Code for CodeBlock specified at ccc/mdx.ccc:990:7
                        op = getToken(0);
                    } else if (nextTokenType() == NE) {
                        // Code for RegexpRef specified at ccc/mdx.ccc:993:7
                        consumeToken(NE);
                        // Code for CodeBlock specified at ccc/mdx.ccc:994:7
                        op = getToken(0);
                    } else if (nextTokenType() == LT) {
                        // Code for RegexpRef specified at ccc/mdx.ccc:997:7
                        consumeToken(LT);
                        // Code for CodeBlock specified at ccc/mdx.ccc:998:7
                        op = getToken(0);
                    } else if (nextTokenType() == GT) {
                        // Code for RegexpRef specified at ccc/mdx.ccc:1001:7
                        consumeToken(GT);
                        // Code for CodeBlock specified at ccc/mdx.ccc:1002:7
                        op = getToken(0);
                    } else if (nextTokenType() == LE) {
                        // Code for RegexpRef specified at ccc/mdx.ccc:1005:7
                        consumeToken(LE);
                        // Code for CodeBlock specified at ccc/mdx.ccc:1006:7
                        op = getToken(0);
                    } else if (nextTokenType() == GE) {
                        // Code for RegexpRef specified at ccc/mdx.ccc:1009:7
                        consumeToken(GE);
                        // Code for CodeBlock specified at ccc/mdx.ccc:1010:7
                        op = getToken(0);
                    } else {
                        pushOntoCallStack("term3", "ccc/mdx.ccc", 989, 7);
                        throw new ParseException(this, first_set$mdx_ccc$989$7, parsingStack);
                    }
                    // Code for NonTerminal specified at ccc/mdx.ccc:1014:5
                    pushOntoCallStack("term3", "ccc/mdx.ccc", 1014, 5);
                    try {
                        y = term2();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1015:5
                    x = new CallExpression(op.getImage(), CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (scan$mdx_ccc$1024$5()) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1025:5
                    consumeToken(IS);
                    // Code for RegexpRef specified at ccc/mdx.ccc:1025:12
                    consumeToken(NULL);
                    // Code for CodeBlock specified at ccc/mdx.ccc:1026:5
                    x = new CallExpression("IS NULL", CallExpression.Type.Term_Postfix, List.of(x));
                } else if (scan$mdx_ccc$1034$5()) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1035:5
                    consumeToken(IS);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1035:12
                    pushOntoCallStack("term3", "ccc/mdx.ccc", 1035, 12);
                    try {
                        y = term2();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1036:5
                    x = new CallExpression("IS", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (nextTokenType() == IS) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1042:5
                    consumeToken(IS);
                    // Code for RegexpRef specified at ccc/mdx.ccc:1042:12
                    consumeToken(EMPTY);
                    // Code for CodeBlock specified at ccc/mdx.ccc:1043:5
                    x = new CallExpression("IS EMPTY", CallExpression.Type.Term_Postfix, List.of(x));
                } else if (nextTokenType() == MATCHES) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1047:5
                    consumeToken(MATCHES);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1047:17
                    pushOntoCallStack("term3", "ccc/mdx.ccc", 1047, 17);
                    try {
                        y = term2();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1048:5
                    x = new CallExpression("MATCHES", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (scan$mdx_ccc$1054$5()) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1055:5
                    consumeToken(NOT);
                    // Code for RegexpRef specified at ccc/mdx.ccc:1055:13
                    consumeToken(MATCHES);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1055:25
                    pushOntoCallStack("term3", "ccc/mdx.ccc", 1055, 25);
                    try {
                        y = term2();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1056:5
                    x = new CallExpression("NOT", CallExpression.Type.Term_Prefix, List.of(new CallExpression("MATCHES", CallExpression.Type.Term_Infix, List.of(x, y))));
                } else if (nextTokenType() == IN) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1067:5
                    consumeToken(IN);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1067:12
                    pushOntoCallStack("term3", "ccc/mdx.ccc", 1067, 12);
                    try {
                        y = term2();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1068:5
                    x = new CallExpression("IN", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (nextTokenType() == NOT) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1074:5
                    consumeToken(NOT);
                    // Code for RegexpRef specified at ccc/mdx.ccc:1074:13
                    consumeToken(IN);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1074:20
                    pushOntoCallStack("term3", "ccc/mdx.ccc", 1074, 20);
                    try {
                        y = term2();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1075:5
                    x = new CallExpression("NOT", CallExpression.Type.Term_Prefix, List.of(new CallExpression("IN", CallExpression.Type.Term_Infix, List.of(x, y))));
                } else {
                    break;
                }
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:1087:3
            return x;
        } catch (ParseException e) {
            parseException1048 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1049);
            if (term331 != null) {
                if (parseException1048 == null) {
                    closeNodeScope(term331, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:1093:1
    final public Expression term2() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "term2";
        ASTterm2 term232 = null;
        if (buildTree) {
            term232 = new ASTterm2();
            openNodeScope(term232);
        }
        Expression x, y;
        ParseException parseException1277 = null;
        int callStackSize1278 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:1097:3
            pushOntoCallStack("term2", "ccc/mdx.ccc", 1097, 3);
            try {
                x = term();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at ccc/mdx.ccc:1098:3
            while (true) {
                // Code for ExpansionChoice specified at ccc/mdx.ccc:1099:5
                if (nextTokenType() == PLUS) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1099:5
                    consumeToken(PLUS);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1099:14
                    pushOntoCallStack("term2", "ccc/mdx.ccc", 1099, 14);
                    try {
                        y = term();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1100:5
                    x = new CallExpression("+", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (nextTokenType() == MINUS) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1106:5
                    consumeToken(MINUS);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1106:15
                    pushOntoCallStack("term2", "ccc/mdx.ccc", 1106, 15);
                    try {
                        y = term();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1107:5
                    x = new CallExpression("-", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (nextTokenType() == CONCAT) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1113:5
                    consumeToken(CONCAT);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1113:16
                    pushOntoCallStack("term2", "ccc/mdx.ccc", 1113, 16);
                    try {
                        y = term();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1114:5
                    x = new CallExpression("||", CallExpression.Type.Term_Infix, List.of(x, y));
                } else {
                    break;
                }
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:1121:3
            return x;
        } catch (ParseException e) {
            parseException1277 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1278);
            if (term232 != null) {
                if (parseException1277 == null) {
                    closeNodeScope(term232, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:1127:1
    final public Expression term() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "term";
        ASTterm term33 = null;
        if (buildTree) {
            term33 = new ASTterm();
            openNodeScope(term33);
        }
        Expression x, y;
        ParseException parseException1345 = null;
        int callStackSize1346 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:1131:3
            pushOntoCallStack("term", "ccc/mdx.ccc", 1131, 3);
            try {
                x = factor();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at ccc/mdx.ccc:1132:3
            while (true) {
                // Code for ExpansionChoice specified at ccc/mdx.ccc:1133:5
                if (nextTokenType() == ASTERISK) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1133:5
                    consumeToken(ASTERISK);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1133:18
                    pushOntoCallStack("term", "ccc/mdx.ccc", 1133, 18);
                    try {
                        y = factor();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1134:5
                    x = new CallExpression("*", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (nextTokenType() == SOLIDUS) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1140:5
                    consumeToken(SOLIDUS);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1140:17
                    pushOntoCallStack("term", "ccc/mdx.ccc", 1140, 17);
                    try {
                        y = factor();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1141:5
                    x = new CallExpression("/", CallExpression.Type.Term_Infix, List.of(x, y));
                } else {
                    break;
                }
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:1148:3
            return x;
        } catch (ParseException e) {
            parseException1345 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1346);
            if (term33 != null) {
                if (parseException1345 == null) {
                    closeNodeScope(term33, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    static private final EnumSet<TokenType> factor_FIRST_SET = factor_FIRST_SET_init();

    static private EnumSet<TokenType> factor_FIRST_SET_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    // ccc/mdx.ccc:1154:1
    final public Expression factor() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "factor";
        // Code for ExpansionChoice specified at ccc/mdx.ccc:1158:3
        ASTfactor factor34 = null;
        if (buildTree) {
            factor34 = new ASTfactor();
            openNodeScope(factor34);
        }
        Expression p;
        ParseException parseException1397 = null;
        int callStackSize1398 = parsingStack.size();
        try {
            if (first_set$mdx_ccc$1158$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at ccc/mdx.ccc:1158:3
                pushOntoCallStack("factor", "ccc/mdx.ccc", 1158, 3);
                try {
                    p = primary();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1159:3
                return p;
            } else if (nextTokenType() == PLUS) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1162:3
                consumeToken(PLUS);
                // Code for NonTerminal specified at ccc/mdx.ccc:1162:12
                pushOntoCallStack("factor", "ccc/mdx.ccc", 1162, 12);
                try {
                    p = primary();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1163:3
                return p;
            } else if (nextTokenType() == MINUS) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1166:3
                consumeToken(MINUS);
                // Code for NonTerminal specified at ccc/mdx.ccc:1166:13
                pushOntoCallStack("factor", "ccc/mdx.ccc", 1166, 13);
                try {
                    p = primary();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1167:3
                return new CallExpression("-", CallExpression.Type.Term_Prefix, List.of(p));
            } else if (nextTokenType() == EXISTING) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1173:3
                consumeToken(EXISTING);
                // Code for NonTerminal specified at ccc/mdx.ccc:1173:16
                pushOntoCallStack("factor", "ccc/mdx.ccc", 1173, 16);
                try {
                    p = primary();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1174:3
                return new CallExpression("Existing", CallExpression.Type.Term_Prefix, List.of(p));
            } else {
                pushOntoCallStack("factor", "ccc/mdx.ccc", 1158, 3);
                throw new ParseException(this, factor_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException1397 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1398);
            if (factor34 != null) {
                if (parseException1397 == null) {
                    closeNodeScope(factor34, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:1183:1
    final public Expression primary() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "primary";
        ASTprimary primary35 = null;
        if (buildTree) {
            primary35 = new ASTprimary();
            openNodeScope(primary35);
        }
        Expression expression;
        ParseException parseException1461 = null;
        int callStackSize1462 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:1187:3
            pushOntoCallStack("primary", "ccc/mdx.ccc", 1187, 3);
            try {
                expression = atom();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at ccc/mdx.ccc:1188:3
            while (true) {
                if (!(nextTokenType() == DOT)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:1189:5
                consumeToken(DOT);
                // Code for NonTerminal specified at ccc/mdx.ccc:1189:13
                pushOntoCallStack("primary", "ccc/mdx.ccc", 1189, 13);
                try {
                    expression = objectIdentifierOrFuncall(expression);
                } finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:1191:3
            return expression;
        } catch (ParseException e) {
            parseException1461 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1462);
            if (primary35 != null) {
                if (parseException1461 == null) {
                    closeNodeScope(primary35, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:1197:1
    final public Expression objectIdentifierOrFuncall(Expression left) {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "objectIdentifierOrFuncall";
        ASTobjectIdentifierOrFuncall objectIdentifierOrFuncall36 = null;
        if (buildTree) {
            objectIdentifierOrFuncall36 = new ASTobjectIdentifierOrFuncall();
            openNodeScope(objectIdentifierOrFuncall36);
        }
        ObjectIdentifier objectIdentifier;
        List<Expression> argList = null;
        ParseException parseException1489 = null;
        int callStackSize1490 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:1202:3
            pushOntoCallStack("objectIdentifierOrFuncall", "ccc/mdx.ccc", 1202, 3);
            try {
                objectIdentifier = parseIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at ccc/mdx.ccc:1203:3
            if (nextTokenType() == LPAREN) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1204:5
                consumeToken(LPAREN);
                if (scan$mdx_ccc$1206$7()) {
                    // Code for CodeBlock specified at ccc/mdx.ccc:1207:7
                    argList = Collections.emptyList();
                } else {
                    // Code for NonTerminal specified at ccc/mdx.ccc:1211:7
                    pushOntoCallStack("objectIdentifierOrFuncall", "ccc/mdx.ccc", 1211, 7);
                    try {
                        argList = expOrEmptyList();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for RegexpRef specified at ccc/mdx.ccc:1213:5
                consumeToken(RPAREN);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:1215:3
            return createCall(left, objectIdentifier, argList);
        } catch (ParseException e) {
            parseException1489 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1490);
            if (objectIdentifierOrFuncall36 != null) {
                if (parseException1489 == null) {
                    closeNodeScope(objectIdentifierOrFuncall36, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    static private final EnumSet<TokenType> parseNumericLiteral_FIRST_SET = tokenTypeSet(UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL);

    // ccc/mdx.ccc:1221:1
    final public NumericLiteral parseNumericLiteral() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseNumericLiteral";
        // Code for ExpansionChoice specified at ccc/mdx.ccc:1222:3
        ASTparseNumericLiteral parseNumericLiteral37 = null;
        if (buildTree) {
            parseNumericLiteral37 = new ASTparseNumericLiteral();
            openNodeScope(parseNumericLiteral37);
        }
        ParseException parseException1538 = null;
        int callStackSize1539 = parsingStack.size();
        try {
            if (nextTokenType() == DECIMAL_NUMERIC_LITERAL) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1222:3
                consumeToken(DECIMAL_NUMERIC_LITERAL);
                // Code for CodeBlock specified at ccc/mdx.ccc:1223:3
                return new NumericLiteral(new BigDecimal(getToken(0).getImage()));
            } else if (nextTokenType() == UNSIGNED_INTEGER_LITERAL) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1226:3
                consumeToken(UNSIGNED_INTEGER_LITERAL);
                // Code for CodeBlock specified at ccc/mdx.ccc:1227:3
                return new NumericLiteral(new BigDecimal(getToken(0).getImage()));
            } else if (nextTokenType() == APPROX_NUMERIC_LITERAL) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1230:3
                consumeToken(APPROX_NUMERIC_LITERAL);
                // Code for CodeBlock specified at ccc/mdx.ccc:1231:3
                return new NumericLiteral(new BigDecimal(getToken(0).getImage()));
            } else {
                pushOntoCallStack("parseNumericLiteral", "ccc/mdx.ccc", 1222, 3);
                throw new ParseException(this, parseNumericLiteral_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException1538 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1539);
            if (parseNumericLiteral37 != null) {
                if (parseException1538 == null) {
                    closeNodeScope(parseNumericLiteral37, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    static private final EnumSet<TokenType> atom_FIRST_SET = atom_FIRST_SET_init();

    static private EnumSet<TokenType> atom_FIRST_SET_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NULL, PROPERTIES, LPAREN, LBRACE, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    // ccc/mdx.ccc:1237:1
    final public Expression atom() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "atom";
        // Code for ExpansionChoice specified at ccc/mdx.ccc:1243:3
        ASTatom atom38 = null;
        if (buildTree) {
            atom38 = new ASTatom();
            openNodeScope(atom38);
        }
        Expression expression;
        NameObjectIdentifier nameObjectIdentifier;
        List<Expression> expressions;
        ParseException parseException1578 = null;
        int callStackSize1579 = parsingStack.size();
        try {
            if (nextTokenType() == SINGLE_QUOTED_STRING) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1243:3
                consumeToken(SINGLE_QUOTED_STRING);
                // Code for CodeBlock specified at ccc/mdx.ccc:1244:3
                return new StringLiteral(stripQuotes(getToken(0).getImage(), "'", "'", "''"));
            } else if (nextTokenType() == DOUBLE_QUOTED_STRING) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1247:3
                consumeToken(DOUBLE_QUOTED_STRING);
                // Code for CodeBlock specified at ccc/mdx.ccc:1248:3
                return new StringLiteral(stripQuotes(getToken(0).getImage(), '"' + "", '"' + "", '"' + "" + '"'));
            } else if (nextTokenType() == UNSIGNED_INTEGER_LITERAL || nextTokenType == APPROX_NUMERIC_LITERAL || nextTokenType == DECIMAL_NUMERIC_LITERAL) {
                // Code for NonTerminal specified at ccc/mdx.ccc:1251:3
                pushOntoCallStack("atom", "ccc/mdx.ccc", 1251, 3);
                try {
                    expression = parseNumericLiteral();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1252:3
                return expression;
            } else if (nextTokenType() == NULL) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1255:3
                consumeToken(NULL);
                // Code for CodeBlock specified at ccc/mdx.ccc:1256:3
                return NullLiteral.SINGLETON;
            } else if (nextTokenType() == CAST) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1259:3
                consumeToken(CAST);
                // Code for RegexpRef specified at ccc/mdx.ccc:1259:12
                consumeToken(LPAREN);
                // Code for NonTerminal specified at ccc/mdx.ccc:1259:23
                pushOntoCallStack("atom", "ccc/mdx.ccc", 1259, 23);
                try {
                    expression = unaliasedExpression();
                } finally {
                    popCallStack();
                }
                // Code for RegexpRef specified at ccc/mdx.ccc:1260:3
                consumeToken(AS);
                // Code for NonTerminal specified at ccc/mdx.ccc:1260:10
                pushOntoCallStack("atom", "ccc/mdx.ccc", 1260, 10);
                try {
                    nameObjectIdentifier = parseNameObjectIdentifier();
                } finally {
                    popCallStack();
                }
                // Code for RegexpRef specified at ccc/mdx.ccc:1260:59
                consumeToken(RPAREN);
                // Code for CodeBlock specified at ccc/mdx.ccc:1261:3
                return new CallExpression("CAST", CallExpression.Type.Cast, List.of(expression, new SymbolLiteral(nameObjectIdentifier.name())));
            } else if (nextTokenType() == LPAREN) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1269:3
                consumeToken(LPAREN);
                // Code for NonTerminal specified at ccc/mdx.ccc:1269:14
                pushOntoCallStack("atom", "ccc/mdx.ccc", 1269, 14);
                try {
                    expressions = expList();
                } finally {
                    popCallStack();
                }
                // Code for RegexpRef specified at ccc/mdx.ccc:1269:36
                consumeToken(RPAREN);
                // Code for CodeBlock specified at ccc/mdx.ccc:1270:3
                // Whereas ([Sales],[Time]) and () are tuples, ([Sales]) and (5)
                // are just expressions.
                return new CallExpression("()", CallExpression.Type.Parentheses, expressions);
            } else if (nextTokenType() == LBRACE) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1278:3
                consumeToken(LBRACE);
                if (scan$mdx_ccc$1280$5()) {
                    // Code for CodeBlock specified at ccc/mdx.ccc:1281:5
                    expressions = Collections.emptyList();
                } else if (first_set$mdx_ccc$1285$5.contains(nextTokenType())) {
                    // Code for NonTerminal specified at ccc/mdx.ccc:1285:5
                    pushOntoCallStack("atom", "ccc/mdx.ccc", 1285, 5);
                    try {
                        expressions = expList();
                    } finally {
                        popCallStack();
                    }
                } else {
                    pushOntoCallStack("atom", "ccc/mdx.ccc", 1280, 5);
                    throw new ParseException(this, first_set$mdx_ccc$1280$5, parsingStack);
                }
                // Code for RegexpRef specified at ccc/mdx.ccc:1287:3
                consumeToken(RBRACE);
                // Code for CodeBlock specified at ccc/mdx.ccc:1288:3
                return new CallExpression("{}", CallExpression.Type.Braces, expressions);
            } else if (nextTokenType() == CASE) {
                // Code for NonTerminal specified at ccc/mdx.ccc:1292:3
                pushOntoCallStack("atom", "ccc/mdx.ccc", 1292, 3);
                try {
                    expression = caseExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1293:3
                return expression;
            } else if (first_set$mdx_ccc$1299$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at ccc/mdx.ccc:1299:3
                pushOntoCallStack("atom", "ccc/mdx.ccc", 1299, 3);
                try {
                    // Function call "foo(a, b)" or "whiz!bang!foo(a, b)".
                    // Properties "x.PROP" and methods "exp.meth(a)" are in primary().
                    nameObjectIdentifier = parseNameObjectIdentifier();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at ccc/mdx.ccc:1300:3
                while (true) {
                    if (!(nextTokenType() == BANG)) break;
                    // Code for RegexpRef specified at ccc/mdx.ccc:1301:5
                    consumeToken(BANG);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1301:14
                    pushOntoCallStack("atom", "ccc/mdx.ccc", 1301, 14);
                    try {
                        nameObjectIdentifier = parseNameObjectIdentifier();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1302:5
                    // We support the syntax for qualifying function names with package
                    // names separated by bang ('!'), e.g. 'whiz!bang!foo(a, b)'
                    // but currently we ignore the qualifiers. The previous example is
                    // equivalent to 'foo(a, b)'.
                }
                if (nextTokenType() == LPAREN) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1310:5
                    consumeToken(LPAREN);
                    if (scan$mdx_ccc$1312$7()) {
                        // Code for CodeBlock specified at ccc/mdx.ccc:1313:7
                        expressions = Collections.emptyList();
                    } else {
                        // Code for NonTerminal specified at ccc/mdx.ccc:1317:7
                        pushOntoCallStack("atom", "ccc/mdx.ccc", 1317, 7);
                        try {
                            expressions = expOrEmptyList();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for RegexpRef specified at ccc/mdx.ccc:1319:5
                    consumeToken(RPAREN);
                } else {
                    // Code for CodeBlock specified at ccc/mdx.ccc:1321:16
                    expressions = null;
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1325:3
                return createCall(null, nameObjectIdentifier, expressions);
            } else {
                pushOntoCallStack("atom", "ccc/mdx.ccc", 1243, 3);
                throw new ParseException(this, atom_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException1578 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1579);
            if (atom38 != null) {
                if (parseException1578 == null) {
                    closeNodeScope(atom38, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:1331:1
    final public Expression caseExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "caseExpression";
        ASTcaseExpression caseExpression39 = null;
        if (buildTree) {
            caseExpression39 = new ASTcaseExpression();
            openNodeScope(caseExpression39);
        }
        Expression expression, expression2;
        List<Expression> expressions = new ArrayList<Expression>();
        boolean match = false;
        ParseException parseException1809 = null;
        int callStackSize1810 = parsingStack.size();
        try {
            // Code for RegexpRef specified at ccc/mdx.ccc:1337:3
            consumeToken(CASE);
            // Code for ZeroOrOne specified at ccc/mdx.ccc:1338:3
            if (first_set$mdx_ccc$1339$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at ccc/mdx.ccc:1339:5
                pushOntoCallStack("caseExpression", "ccc/mdx.ccc", 1339, 5);
                try {
                    expression = parseExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1340:5
                match = true;
                expressions.add(expression);
            }
            // Code for ZeroOrMore specified at ccc/mdx.ccc:1345:3
            while (true) {
                if (!(nextTokenType() == WHEN)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:1346:5
                consumeToken(WHEN);
                // Code for NonTerminal specified at ccc/mdx.ccc:1346:14
                pushOntoCallStack("caseExpression", "ccc/mdx.ccc", 1346, 14);
                try {
                    expression = parseExpression();
                } finally {
                    popCallStack();
                }
                // Code for RegexpRef specified at ccc/mdx.ccc:1346:43
                consumeToken(THEN);
                // Code for NonTerminal specified at ccc/mdx.ccc:1346:52
                pushOntoCallStack("caseExpression", "ccc/mdx.ccc", 1346, 52);
                try {
                    expression2 = parseExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1347:5
                expressions.add(expression);
                expressions.add(expression2);
            }
            // Code for ZeroOrOne specified at ccc/mdx.ccc:1352:3
            if (nextTokenType() == ELSE) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1353:5
                consumeToken(ELSE);
                // Code for NonTerminal specified at ccc/mdx.ccc:1353:14
                pushOntoCallStack("caseExpression", "ccc/mdx.ccc", 1353, 14);
                try {
                    expression = parseExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1354:5
                expressions.add(expression);
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:1358:3
            consumeToken(END);
            // Code for CodeBlock specified at ccc/mdx.ccc:1359:3
            if (match) {
                return new CallExpression("_CaseMatch", CallExpression.Type.Term_Case, expressions);
            } else {
                return new CallExpression("_CaseTest", CallExpression.Type.Term_Case, expressions);
            }
        } catch (ParseException e) {
            parseException1809 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1810);
            if (caseExpression39 != null) {
                if (parseException1809 == null) {
                    closeNodeScope(caseExpression39, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:1374:1
    final public CellProperty parseCellProperty() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseCellProperty";
        ASTparseCellProperty parseCellProperty40 = null;
        if (buildTree) {
            parseCellProperty40 = new ASTparseCellProperty();
            openNodeScope(parseCellProperty40);
        }
        ParseException parseException1889 = null;
        int callStackSize1890 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:1375:3
            pushOntoCallStack("parseCellProperty", "ccc/mdx.ccc", 1375, 3);
            try {
                parseIdentifier();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:1376:3
            return new CellProperty(List.of());
        } catch (ParseException e) {
            parseException1889 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1890);
            if (parseCellProperty40 != null) {
                if (parseException1889 == null) {
                    closeNodeScope(parseCellProperty40, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:1382:1
    final public CreateSetBodyClause parseCreateSetBodyClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseCreateSetBodyClause";
        ASTparseCreateSetBodyClause parseCreateSetBodyClause41 = null;
        if (buildTree) {
            parseCreateSetBodyClause41 = new ASTparseCreateSetBodyClause();
            openNodeScope(parseCreateSetBodyClause41);
        }
        ParseException parseException1901 = null;
        int callStackSize1902 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:1383:3
            pushOntoCallStack("parseCreateSetBodyClause", "ccc/mdx.ccc", 1383, 3);
            try {
                parseIdentifier();
            } finally {
                popCallStack();
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:1383:19
            consumeToken(AS);
            // Code for NonTerminal specified at ccc/mdx.ccc:1383:26
            pushOntoCallStack("parseCreateSetBodyClause", "ccc/mdx.ccc", 1383, 26);
            try {
                parseIdentifier();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:1384:3
            return new CreateSetBodyClause();
        } catch (ParseException e) {
            parseException1901 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1902);
            if (parseCreateSetBodyClause41 != null) {
                if (parseException1901 == null) {
                    closeNodeScope(parseCreateSetBodyClause41, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:1390:1
    final public SelectDimensionPropertyListClause parseSelectDimensionPropertyListClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectDimensionPropertyListClause";
        ASTparseSelectDimensionPropertyListClause parseSelectDimensionPropertyListClause42 = null;
        if (buildTree) {
            parseSelectDimensionPropertyListClause42 = new ASTparseSelectDimensionPropertyListClause();
            openNodeScope(parseSelectDimensionPropertyListClause42);
        }
        ParseException parseException1921 = null;
        int callStackSize1922 = parsingStack.size();
        try {
            // Code for ZeroOrOne specified at ccc/mdx.ccc:1391:3
            if (nextTokenType() == DIMENSION) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1391:4
                consumeToken(DIMENSION);
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:1391:20
            consumeToken(PROPERTIES);
            // Code for NonTerminal specified at ccc/mdx.ccc:1392:3
            pushOntoCallStack("parseSelectDimensionPropertyListClause", "ccc/mdx.ccc", 1392, 3);
            try {
                parseIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at ccc/mdx.ccc:1393:3
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:1394:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at ccc/mdx.ccc:1394:15
                pushOntoCallStack("parseSelectDimensionPropertyListClause", "ccc/mdx.ccc", 1394, 15);
                try {
                    parseIdentifier();
                } finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:1396:3
            return new SelectDimensionPropertyListClause();
        } catch (ParseException e) {
            parseException1921 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1922);
            if (parseSelectDimensionPropertyListClause42 != null) {
                if (parseException1921 == null) {
                    closeNodeScope(parseSelectDimensionPropertyListClause42, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:1403:1
    final public
    // <SelectQueryAxisClause> ::= [NON EMPTY] <set> [<dimProps>] ON <axis_name>
    SelectQueryAxisClause parseSelectQueryAxisClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectQueryAxisClause";
        ASTparseSelectQueryAxisClause parseSelectQueryAxisClause43 = null;
        if (buildTree) {
            parseSelectQueryAxisClause43 = new ASTparseSelectQueryAxisClause();
            openNodeScope(parseSelectQueryAxisClause43);
        }
        boolean nonEmpty = false;
        SelectDimensionPropertyListClause selectDimensionPropertyListClause = null;
        Expression expression;
        int n;
        Axis axis;
        ParseException parseException1965 = null;
        int callStackSize1966 = parsingStack.size();
        try {
            // Code for ZeroOrOne specified at ccc/mdx.ccc:1411:3
            if (nextTokenType() == NON) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1411:4
                consumeToken(NON);
                // Code for RegexpRef specified at ccc/mdx.ccc:1411:12
                consumeToken(EMPTY);
                // Code for CodeBlock specified at ccc/mdx.ccc:1412:3
                nonEmpty = true;
            }
            // Code for NonTerminal specified at ccc/mdx.ccc:1416:3
            pushOntoCallStack("parseSelectQueryAxisClause", "ccc/mdx.ccc", 1416, 3);
            try {
                expression = parseExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at ccc/mdx.ccc:1417:3
            if (nextTokenType() == DIMENSION || nextTokenType == PROPERTIES) {
                // Code for NonTerminal specified at ccc/mdx.ccc:1418:5
                pushOntoCallStack("parseSelectQueryAxisClause", "ccc/mdx.ccc", 1418, 5);
                try {
                    selectDimensionPropertyListClause = parseSelectDimensionPropertyListClause();
                } finally {
                    popCallStack();
                }
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:1420:3
            consumeToken(ON);
            if (nextTokenType() == AXIS || nextTokenType == UNSIGNED_INTEGER_LITERAL) {
                if (nextTokenType() == UNSIGNED_INTEGER_LITERAL) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1423:7
                    consumeToken(UNSIGNED_INTEGER_LITERAL);
                    // Code for CodeBlock specified at ccc/mdx.ccc:1424:7
                    n = Integer.valueOf(getToken(0).getImage()).intValue();
                } else if (nextTokenType() == AXIS) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1427:7
                    consumeToken(AXIS);
                    // Code for RegexpRef specified at ccc/mdx.ccc:1427:16
                    consumeToken(LPAREN);
                    // Code for RegexpRef specified at ccc/mdx.ccc:1427:27
                    consumeToken(UNSIGNED_INTEGER_LITERAL);
                    // Code for CodeBlock specified at ccc/mdx.ccc:1428:7
                    n = Integer.valueOf(getToken(0).getImage()).intValue();
                    // Code for RegexpRef specified at ccc/mdx.ccc:1431:7
                    consumeToken(RPAREN);
                } else {
                    pushOntoCallStack("parseSelectQueryAxisClause", "ccc/mdx.ccc", 1423, 7);
                    throw new ParseException(this, first_set$mdx_ccc$1423$7, parsingStack);
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1433:5
                if (n < 0) {
                    throw new IllegalArgumentException("Only axis numbers >= 0 allowed.");
                } else {
                    axis = Axis.create(n);
                }
            } else if (first_set$mdx_ccc$1444$5.contains(nextTokenType())) {
                if (nextTokenType() == COLUMNS) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1445:7
                    consumeToken(COLUMNS);
                    // Code for CodeBlock specified at ccc/mdx.ccc:1446:7
                    axis = Axis.COLUMNS;
                } else if (nextTokenType() == ROWS) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1449:7
                    consumeToken(ROWS);
                    // Code for CodeBlock specified at ccc/mdx.ccc:1450:7
                    axis = Axis.ROWS;
                } else if (nextTokenType() == PAGES) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1453:7
                    consumeToken(PAGES);
                    // Code for CodeBlock specified at ccc/mdx.ccc:1454:7
                    axis = Axis.PAGES;
                } else if (nextTokenType() == SECTIONS) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1457:7
                    consumeToken(SECTIONS);
                    // Code for CodeBlock specified at ccc/mdx.ccc:1458:7
                    axis = Axis.SECTIONS;
                } else if (nextTokenType() == CHAPTERS) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1461:7
                    consumeToken(CHAPTERS);
                    // Code for CodeBlock specified at ccc/mdx.ccc:1462:7
                    axis = Axis.CHAPTERS;
                } else {
                    pushOntoCallStack("parseSelectQueryAxisClause", "ccc/mdx.ccc", 1445, 7);
                    throw new ParseException(this, first_set$mdx_ccc$1445$7, parsingStack);
                }
            } else {
                pushOntoCallStack("parseSelectQueryAxisClause", "ccc/mdx.ccc", 1422, 5);
                throw new ParseException(this, first_set$mdx_ccc$1422$5, parsingStack);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:1467:3
            return new SelectQueryAxisClause(nonEmpty, expression, axis, selectDimensionPropertyListClause);
        } catch (ParseException e) {
            parseException1965 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1966);
            if (parseSelectQueryAxisClause43 != null) {
                if (parseException1965 == null) {
                    closeNodeScope(parseSelectQueryAxisClause43, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    static private final EnumSet<TokenType> first_set$mdx_ccc$518$5 = tokenTypeSet(MEMBER, SET, CALCULATED);
    static private final EnumSet<TokenType> first_set$mdx_ccc$546$5 = first_set$mdx_ccc$546$5_init();

    static private EnumSet<TokenType> first_set$mdx_ccc$546$5_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NON, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_ccc$570$5$ = tokenTypeSet(DIMENSION, PROPERTIES, LPAREN, ATSIGN, ID, QUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_ccc$570$5 = tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_ccc$602$7 = first_set$mdx_ccc$602$7_init();

    static private EnumSet<TokenType> first_set$mdx_ccc$602$7_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NON, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_ccc$723$3 = first_set$mdx_ccc$723$3_init();

    static private EnumSet<TokenType> first_set$mdx_ccc$723$3_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_ccc$798$5$ = tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID, AMP_QUOTED_ID, AMP_UNQUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_ccc$798$5 = tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_ccc$872$5 = tokenTypeSet(DIMENSION, PROPERTIES);
    static private final EnumSet<TokenType> first_set$mdx_ccc$966$3 = first_set$mdx_ccc$966$3_init();

    static private EnumSet<TokenType> first_set$mdx_ccc$966$3_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_ccc$988$5 = tokenTypeSet(EQ, GE, GT, LE, LT, NE);
    static private final EnumSet<TokenType> first_set$mdx_ccc$989$7 = tokenTypeSet(EQ, GE, GT, LE, LT, NE);
    static private final EnumSet<TokenType> first_set$mdx_ccc$1158$3 = first_set$mdx_ccc$1158$3_init();

    static private EnumSet<TokenType> first_set$mdx_ccc$1158$3_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NULL, PROPERTIES, LPAREN, LBRACE, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_ccc$1280$5 = first_set$mdx_ccc$1280$5_init();

    static private EnumSet<TokenType> first_set$mdx_ccc$1280$5_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, RBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_ccc$1285$5 = first_set$mdx_ccc$1285$5_init();

    static private EnumSet<TokenType> first_set$mdx_ccc$1285$5_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_ccc$1299$3 = tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_ccc$1339$5 = first_set$mdx_ccc$1339$5_init();

    static private EnumSet<TokenType> first_set$mdx_ccc$1339$5_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_ccc$1422$5 = tokenTypeSet(AXIS, CHAPTERS, COLUMNS, PAGES, ROWS, SECTIONS, UNSIGNED_INTEGER_LITERAL);
    static private final EnumSet<TokenType> first_set$mdx_ccc$1423$7 = tokenTypeSet(AXIS, UNSIGNED_INTEGER_LITERAL);
    static private final EnumSet<TokenType> first_set$mdx_ccc$1444$5 = tokenTypeSet(CHAPTERS, COLUMNS, PAGES, ROWS, SECTIONS);
    static private final EnumSet<TokenType> first_set$mdx_ccc$1445$7 = tokenTypeSet(CHAPTERS, COLUMNS, PAGES, ROWS, SECTIONS);

    private final boolean scanToken(TokenType expectedType, TokenType...additionalTypes) {
        Token peekedToken = nextToken(currentLookaheadToken);
        TokenType type = peekedToken.getType();
        if (type != expectedType) {
            boolean matched = false;
            for (TokenType tt : additionalTypes) {
                if (type == tt) {
                    matched = true;
                    break;
                }
            }
            if (!matched) return false;
        }
        --remainingLookahead;
        currentLookaheadToken = peekedToken;
        return true;
    }

    private final boolean scanToken(EnumSet<TokenType> types) {
        Token peekedToken = nextToken(currentLookaheadToken);
        TokenType type = peekedToken.getType();
        if (!types.contains(type)) return false;
        --remainingLookahead;
        currentLookaheadToken = peekedToken;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:704:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$704$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:704:5
            if (!scanToken(AS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:704:12
            // NonTerminal parseIdentifier at ccc/mdx.ccc:704:12
            pushOntoLookaheadStack("parseExpression", "ccc/mdx.ccc", 704, 12);
            currentLookaheadProduction = "parseIdentifier";
            try {
                if (!check$parseIdentifier(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:705:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:723:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$723$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:723:3
            // NonTerminal parseExpression at ccc/mdx.ccc:723:3
            pushOntoLookaheadStack("expressionOrEmpty", "ccc/mdx.ccc", 723, 3);
            currentLookaheadProduction = "parseExpression";
            try {
                if (!check$parseExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:724:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:728:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$728$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:728:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:747:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$747$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:747:5
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:748:5
            // NonTerminal expressionOrEmpty at ccc/mdx.ccc:748:5
            pushOntoLookaheadStack("expOrEmptyList", "ccc/mdx.ccc", 748, 5);
            currentLookaheadProduction = "expressionOrEmpty";
            try {
                if (!check$expressionOrEmpty(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:749:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:770:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$770$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:770:5
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:771:5
            // NonTerminal parseExpression at ccc/mdx.ccc:771:5
            pushOntoLookaheadStack("expList", "ccc/mdx.ccc", 771, 5);
            currentLookaheadProduction = "parseExpression";
            try {
                if (!check$parseExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:772:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:798:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$798$5$(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:798:5
            // NonTerminal parseNameObjectIdentifier at ccc/mdx.ccc:798:5
            pushOntoLookaheadStack("parseIdentifier", "ccc/mdx.ccc", 798, 5);
            currentLookaheadProduction = "parseNameObjectIdentifier";
            try {
                if (!check$parseNameObjectIdentifier(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:800:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$800$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:800:5
            // NonTerminal parseKeyIdentifier at ccc/mdx.ccc:800:5
            pushOntoLookaheadStack("parseIdentifier", "ccc/mdx.ccc", 800, 5);
            currentLookaheadProduction = "parseKeyIdentifier";
            try {
                if (!check$parseKeyIdentifier(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:821:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$821$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:821:3
            if (!scanToken(ATSIGN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:821:14
            if (!scanToken(ID)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:822:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:912:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$912$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:912:5
            Token token2239 = currentLookaheadToken;
            int remainingLookahead2239 = remainingLookahead;
            boolean hitFailure2239 = hitFailure, passedPredicate2239 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$mdx_ccc$912$5$(false)) {
                    currentLookaheadToken = token2239;
                    remainingLookahead = remainingLookahead2239;
                    hitFailure = hitFailure2239;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$mdx_ccc$919$5(false)) {
                        currentLookaheadToken = token2239;
                        remainingLookahead = remainingLookahead2239;
                        hitFailure = hitFailure2239;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$mdx_ccc$928$5(false)) {
                            currentLookaheadToken = token2239;
                            remainingLookahead = remainingLookahead2239;
                            hitFailure = hitFailure2239;
                            return false;
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate2239;
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:912:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$912$5$(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:912:5
            if (!scanToken(OR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:912:12
            // NonTerminal term5 at ccc/mdx.ccc:912:12
            pushOntoLookaheadStack("unaliasedExpression", "ccc/mdx.ccc", 912, 12);
            currentLookaheadProduction = "term5";
            try {
                if (!check$term5(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:913:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:919:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$919$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:919:5
            if (!scanToken(XOR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:919:13
            // NonTerminal term5 at ccc/mdx.ccc:919:13
            pushOntoLookaheadStack("unaliasedExpression", "ccc/mdx.ccc", 919, 13);
            currentLookaheadProduction = "term5";
            try {
                if (!check$term5(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:920:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:928:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$928$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:928:5
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:928:15
            // NonTerminal term5 at ccc/mdx.ccc:928:15
            pushOntoLookaheadStack("unaliasedExpression", "ccc/mdx.ccc", 928, 15);
            currentLookaheadProduction = "term5";
            try {
                if (!check$term5(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:929:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:948:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$948$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:948:5
            if (!scanToken(AND)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:948:13
            // NonTerminal term4 at ccc/mdx.ccc:948:13
            pushOntoLookaheadStack("term5", "ccc/mdx.ccc", 948, 13);
            currentLookaheadProduction = "term4";
            try {
                if (!check$term4(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:949:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:966:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$966$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:966:3
            // NonTerminal term3 at ccc/mdx.ccc:966:3
            pushOntoLookaheadStack("term4", "ccc/mdx.ccc", 966, 3);
            currentLookaheadProduction = "term3";
            try {
                if (!check$term3(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:967:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:970:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$970$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:970:3
            if (!scanToken(NOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:970:11
            // NonTerminal term4 at ccc/mdx.ccc:970:11
            pushOntoLookaheadStack("term4", "ccc/mdx.ccc", 970, 11);
            currentLookaheadProduction = "term4";
            try {
                if (!check$term4(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:971:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:988:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$988$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:988:5
            Token token2264 = currentLookaheadToken;
            int remainingLookahead2264 = remainingLookahead;
            boolean hitFailure2264 = hitFailure, passedPredicate2264 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$mdx_ccc$988$5$(false)) {
                    currentLookaheadToken = token2264;
                    remainingLookahead = remainingLookahead2264;
                    hitFailure = hitFailure2264;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$mdx_ccc$1024$5(false)) {
                        currentLookaheadToken = token2264;
                        remainingLookahead = remainingLookahead2264;
                        hitFailure = hitFailure2264;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$mdx_ccc$1034$5(false)) {
                            currentLookaheadToken = token2264;
                            remainingLookahead = remainingLookahead2264;
                            hitFailure = hitFailure2264;
                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                            passedPredicate = false;
                            if (!check$mdx_ccc$1042$5(false)) {
                                currentLookaheadToken = token2264;
                                remainingLookahead = remainingLookahead2264;
                                hitFailure = hitFailure2264;
                                if (passedPredicate && !legacyGlitchyLookahead) return false;
                                passedPredicate = false;
                                if (!check$mdx_ccc$1047$5(false)) {
                                    currentLookaheadToken = token2264;
                                    remainingLookahead = remainingLookahead2264;
                                    hitFailure = hitFailure2264;
                                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                                    passedPredicate = false;
                                    if (!check$mdx_ccc$1054$5(false)) {
                                        currentLookaheadToken = token2264;
                                        remainingLookahead = remainingLookahead2264;
                                        hitFailure = hitFailure2264;
                                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                                        passedPredicate = false;
                                        if (!check$mdx_ccc$1067$5(false)) {
                                            currentLookaheadToken = token2264;
                                            remainingLookahead = remainingLookahead2264;
                                            hitFailure = hitFailure2264;
                                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                                            passedPredicate = false;
                                            if (!check$mdx_ccc$1074$5(false)) {
                                                currentLookaheadToken = token2264;
                                                remainingLookahead = remainingLookahead2264;
                                                hitFailure = hitFailure2264;
                                                return false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate2264;
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:988:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$988$5$(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:989:7
            if (!scanToken(first_set$mdx_ccc$989$7)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1014:5
            // NonTerminal term2 at ccc/mdx.ccc:1014:5
            pushOntoLookaheadStack("term3", "ccc/mdx.ccc", 1014, 5);
            currentLookaheadProduction = "term2";
            try {
                if (!check$term2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1015:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1024:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1024$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1025:5
            if (!scanToken(IS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1025:12
            if (!scanToken(NULL)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1026:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1034:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1034$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1035:5
            if (!scanToken(IS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1035:12
            // NonTerminal term2 at ccc/mdx.ccc:1035:12
            pushOntoLookaheadStack("term3", "ccc/mdx.ccc", 1035, 12);
            currentLookaheadProduction = "term2";
            try {
                if (!check$term2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1036:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1042:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1042$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1042:5
            if (!scanToken(IS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1042:12
            if (!scanToken(EMPTY)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1043:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1047:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1047$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1047:5
            if (!scanToken(MATCHES)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1047:17
            // NonTerminal term2 at ccc/mdx.ccc:1047:17
            pushOntoLookaheadStack("term3", "ccc/mdx.ccc", 1047, 17);
            currentLookaheadProduction = "term2";
            try {
                if (!check$term2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1048:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1054:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1054$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1055:5
            if (!scanToken(NOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1055:13
            if (!scanToken(MATCHES)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1055:25
            // NonTerminal term2 at ccc/mdx.ccc:1055:25
            pushOntoLookaheadStack("term3", "ccc/mdx.ccc", 1055, 25);
            currentLookaheadProduction = "term2";
            try {
                if (!check$term2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1056:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1067:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1067$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1067:5
            if (!scanToken(IN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1067:12
            // NonTerminal term2 at ccc/mdx.ccc:1067:12
            pushOntoLookaheadStack("term3", "ccc/mdx.ccc", 1067, 12);
            currentLookaheadProduction = "term2";
            try {
                if (!check$term2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1068:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1074:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1074$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1074:5
            if (!scanToken(NOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1074:13
            if (!scanToken(IN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1074:20
            // NonTerminal term2 at ccc/mdx.ccc:1074:20
            pushOntoLookaheadStack("term3", "ccc/mdx.ccc", 1074, 20);
            currentLookaheadProduction = "term2";
            try {
                if (!check$term2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1075:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1099:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1099$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:1099:5
            Token token2301 = currentLookaheadToken;
            int remainingLookahead2301 = remainingLookahead;
            boolean hitFailure2301 = hitFailure, passedPredicate2301 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$mdx_ccc$1099$5$(false)) {
                    currentLookaheadToken = token2301;
                    remainingLookahead = remainingLookahead2301;
                    hitFailure = hitFailure2301;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$mdx_ccc$1106$5(false)) {
                        currentLookaheadToken = token2301;
                        remainingLookahead = remainingLookahead2301;
                        hitFailure = hitFailure2301;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$mdx_ccc$1113$5(false)) {
                            currentLookaheadToken = token2301;
                            remainingLookahead = remainingLookahead2301;
                            hitFailure = hitFailure2301;
                            return false;
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate2301;
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1099:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1099$5$(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1099:5
            if (!scanToken(PLUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1099:14
            // NonTerminal term at ccc/mdx.ccc:1099:14
            pushOntoLookaheadStack("term2", "ccc/mdx.ccc", 1099, 14);
            currentLookaheadProduction = "term";
            try {
                if (!check$term(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1100:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1106:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1106$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1106:5
            if (!scanToken(MINUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1106:15
            // NonTerminal term at ccc/mdx.ccc:1106:15
            pushOntoLookaheadStack("term2", "ccc/mdx.ccc", 1106, 15);
            currentLookaheadProduction = "term";
            try {
                if (!check$term(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1107:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1113:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1113$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1113:5
            if (!scanToken(CONCAT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1113:16
            // NonTerminal term at ccc/mdx.ccc:1113:16
            pushOntoLookaheadStack("term2", "ccc/mdx.ccc", 1113, 16);
            currentLookaheadProduction = "term";
            try {
                if (!check$term(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1114:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1133:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1133$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:1133:5
            Token token2315 = currentLookaheadToken;
            int remainingLookahead2315 = remainingLookahead;
            boolean hitFailure2315 = hitFailure, passedPredicate2315 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$mdx_ccc$1133$5$(false)) {
                    currentLookaheadToken = token2315;
                    remainingLookahead = remainingLookahead2315;
                    hitFailure = hitFailure2315;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$mdx_ccc$1140$5(false)) {
                        currentLookaheadToken = token2315;
                        remainingLookahead = remainingLookahead2315;
                        hitFailure = hitFailure2315;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2315;
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1133:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1133$5$(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1133:5
            if (!scanToken(ASTERISK)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1133:18
            // NonTerminal factor at ccc/mdx.ccc:1133:18
            pushOntoLookaheadStack("term", "ccc/mdx.ccc", 1133, 18);
            currentLookaheadProduction = "factor";
            try {
                if (!check$factor(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1134:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1140:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1140$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1140:5
            if (!scanToken(SOLIDUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1140:17
            // NonTerminal factor at ccc/mdx.ccc:1140:17
            pushOntoLookaheadStack("term", "ccc/mdx.ccc", 1140, 17);
            currentLookaheadProduction = "factor";
            try {
                if (!check$factor(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1141:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1158:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1158$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1158:3
            // NonTerminal primary at ccc/mdx.ccc:1158:3
            pushOntoLookaheadStack("factor", "ccc/mdx.ccc", 1158, 3);
            currentLookaheadProduction = "primary";
            try {
                if (!check$primary(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1159:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1162:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1162$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1162:3
            if (!scanToken(PLUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1162:12
            // NonTerminal primary at ccc/mdx.ccc:1162:12
            pushOntoLookaheadStack("factor", "ccc/mdx.ccc", 1162, 12);
            currentLookaheadProduction = "primary";
            try {
                if (!check$primary(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1163:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1166:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1166$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1166:3
            if (!scanToken(MINUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1166:13
            // NonTerminal primary at ccc/mdx.ccc:1166:13
            pushOntoLookaheadStack("factor", "ccc/mdx.ccc", 1166, 13);
            currentLookaheadProduction = "primary";
            try {
                if (!check$primary(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1167:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1173:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1173$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1173:3
            if (!scanToken(EXISTING)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1173:16
            // NonTerminal primary at ccc/mdx.ccc:1173:16
            pushOntoLookaheadStack("factor", "ccc/mdx.ccc", 1173, 16);
            currentLookaheadProduction = "primary";
            try {
                if (!check$primary(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1174:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1189:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1189$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1189:5
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1189:13
            // NonTerminal objectIdentifierOrFuncall at ccc/mdx.ccc:1189:13
            pushOntoLookaheadStack("primary", "ccc/mdx.ccc", 1189, 13);
            currentLookaheadProduction = "objectIdentifierOrFuncall";
            try {
                if (!check$objectIdentifierOrFuncall(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1204:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1204$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1204:5
            if (!scanToken(LPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:1206:7
            Token token2346 = currentLookaheadToken;
            int remainingLookahead2346 = remainingLookahead;
            boolean hitFailure2346 = hitFailure, passedPredicate2346 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$mdx_ccc$1206$7(false)) {
                    currentLookaheadToken = token2346;
                    remainingLookahead = remainingLookahead2346;
                    hitFailure = hitFailure2346;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$mdx_ccc$1211$7(false)) {
                        currentLookaheadToken = token2346;
                        remainingLookahead = remainingLookahead2346;
                        hitFailure = hitFailure2346;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2346;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1213:5
            if (!scanToken(RPAREN)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1206:7
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1206$7(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$mdx_ccc$1206$12(true)) return false;
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1207:7
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1211:7
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1211$7(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1211:7
            // NonTerminal expOrEmptyList at ccc/mdx.ccc:1211:7
            pushOntoLookaheadStack("objectIdentifierOrFuncall", "ccc/mdx.ccc", 1211, 7);
            currentLookaheadProduction = "expOrEmptyList";
            try {
                if (!check$expOrEmptyList(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1259:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1259$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1259:3
            if (!scanToken(CAST)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1259:12
            if (!scanToken(LPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1259:23
            // NonTerminal unaliasedExpression at ccc/mdx.ccc:1259:23
            pushOntoLookaheadStack("atom", "ccc/mdx.ccc", 1259, 23);
            currentLookaheadProduction = "unaliasedExpression";
            try {
                if (!check$unaliasedExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1260:3
            if (!scanToken(AS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1260:10
            // NonTerminal parseNameObjectIdentifier at ccc/mdx.ccc:1260:10
            pushOntoLookaheadStack("atom", "ccc/mdx.ccc", 1260, 10);
            currentLookaheadProduction = "parseNameObjectIdentifier";
            try {
                if (!check$parseNameObjectIdentifier(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1260:59
            if (!scanToken(RPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1261:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1269:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1269$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1269:3
            if (!scanToken(LPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1269:14
            // NonTerminal expList at ccc/mdx.ccc:1269:14
            pushOntoLookaheadStack("atom", "ccc/mdx.ccc", 1269, 14);
            currentLookaheadProduction = "expList";
            try {
                if (!check$expList(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1269:36
            if (!scanToken(RPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1270:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1278:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1278$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1278:3
            if (!scanToken(LBRACE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:1280:5
            Token token2369 = currentLookaheadToken;
            int remainingLookahead2369 = remainingLookahead;
            boolean hitFailure2369 = hitFailure, passedPredicate2369 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$mdx_ccc$1280$5(false)) {
                    currentLookaheadToken = token2369;
                    remainingLookahead = remainingLookahead2369;
                    hitFailure = hitFailure2369;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$mdx_ccc$1285$5(false)) {
                        currentLookaheadToken = token2369;
                        remainingLookahead = remainingLookahead2369;
                        hitFailure = hitFailure2369;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2369;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1287:3
            if (!scanToken(RBRACE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1288:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1280:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1280$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$mdx_ccc$1280$10(true)) return false;
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1281:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1285:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1285$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1285:5
            // NonTerminal expList at ccc/mdx.ccc:1285:5
            pushOntoLookaheadStack("atom", "ccc/mdx.ccc", 1285, 5);
            currentLookaheadProduction = "expList";
            try {
                if (!check$expList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1292:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1292$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1292:3
            // NonTerminal caseExpression at ccc/mdx.ccc:1292:3
            pushOntoLookaheadStack("atom", "ccc/mdx.ccc", 1292, 3);
            currentLookaheadProduction = "caseExpression";
            try {
                if (!check$caseExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1293:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1299:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1299$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1299:3
            // NonTerminal parseNameObjectIdentifier at ccc/mdx.ccc:1299:3
            pushOntoLookaheadStack("atom", "ccc/mdx.ccc", 1299, 3);
            currentLookaheadProduction = "parseNameObjectIdentifier";
            try {
                if (!check$parseNameObjectIdentifier(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:1300:3
            boolean passedPredicate2382 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token2383 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$mdx_ccc$1301$5(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token2383;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2382;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:1310:5
            Token token2386 = currentLookaheadToken;
            int remainingLookahead2386 = remainingLookahead;
            boolean hitFailure2386 = hitFailure, passedPredicate2386 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$mdx_ccc$1310$5(false)) {
                    currentLookaheadToken = token2386;
                    remainingLookahead = remainingLookahead2386;
                    hitFailure = hitFailure2386;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$mdx_ccc$1321$16(false)) {
                        currentLookaheadToken = token2386;
                        remainingLookahead = remainingLookahead2386;
                        hitFailure = hitFailure2386;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2386;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1325:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1301:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1301$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1301:5
            if (!scanToken(BANG)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1301:14
            // NonTerminal parseNameObjectIdentifier at ccc/mdx.ccc:1301:14
            pushOntoLookaheadStack("atom", "ccc/mdx.ccc", 1301, 14);
            currentLookaheadProduction = "parseNameObjectIdentifier";
            try {
                if (!check$parseNameObjectIdentifier(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1302:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1310:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1310$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1310:5
            if (!scanToken(LPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:1312:7
            Token token2396 = currentLookaheadToken;
            int remainingLookahead2396 = remainingLookahead;
            boolean hitFailure2396 = hitFailure, passedPredicate2396 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$mdx_ccc$1312$7(false)) {
                    currentLookaheadToken = token2396;
                    remainingLookahead = remainingLookahead2396;
                    hitFailure = hitFailure2396;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$mdx_ccc$1317$7(false)) {
                        currentLookaheadToken = token2396;
                        remainingLookahead = remainingLookahead2396;
                        hitFailure = hitFailure2396;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2396;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1319:5
            if (!scanToken(RPAREN)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1312:7
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1312$7(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$mdx_ccc$1312$12(true)) return false;
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1313:7
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1317:7
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1317$7(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1317:7
            // NonTerminal expOrEmptyList at ccc/mdx.ccc:1317:7
            pushOntoLookaheadStack("atom", "ccc/mdx.ccc", 1317, 7);
            currentLookaheadProduction = "expOrEmptyList";
            try {
                if (!check$expOrEmptyList(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1321:16
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1321$16(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1321:16
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1339:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1339$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1339:5
            // NonTerminal parseExpression at ccc/mdx.ccc:1339:5
            pushOntoLookaheadStack("caseExpression", "ccc/mdx.ccc", 1339, 5);
            currentLookaheadProduction = "parseExpression";
            try {
                if (!check$parseExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1340:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1346:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1346$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1346:5
            if (!scanToken(WHEN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1346:14
            // NonTerminal parseExpression at ccc/mdx.ccc:1346:14
            pushOntoLookaheadStack("caseExpression", "ccc/mdx.ccc", 1346, 14);
            currentLookaheadProduction = "parseExpression";
            try {
                if (!check$parseExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1346:43
            if (!scanToken(THEN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1346:52
            // NonTerminal parseExpression at ccc/mdx.ccc:1346:52
            pushOntoLookaheadStack("caseExpression", "ccc/mdx.ccc", 1346, 52);
            currentLookaheadProduction = "parseExpression";
            try {
                if (!check$parseExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1347:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1353:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1353$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1353:5
            if (!scanToken(ELSE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1353:14
            // NonTerminal parseExpression at ccc/mdx.ccc:1353:14
            pushOntoLookaheadStack("caseExpression", "ccc/mdx.ccc", 1353, 14);
            currentLookaheadProduction = "parseExpression";
            try {
                if (!check$parseExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1354:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // BuildPredicateRoutine: expansion at ccc/mdx.ccc:892:5
    private final boolean scan$mdx_ccc$892$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$mdx_ccc$892$10(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at ccc/mdx.ccc:1024:5
    private final boolean scan$mdx_ccc$1024$5() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1025:5
            if (!scanToken(IS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1025:12
            if (!scanToken(NULL)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1026:5
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at ccc/mdx.ccc:1034:5
    private final boolean scan$mdx_ccc$1034$5() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1035:5
            if (!scanToken(IS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1035:12
            // NonTerminal term2 at ccc/mdx.ccc:1035:12
            pushOntoLookaheadStack("term3", "ccc/mdx.ccc", 1035, 12);
            currentLookaheadProduction = "term2";
            try {
                if (!check$term2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1036:5
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at ccc/mdx.ccc:1054:5
    private final boolean scan$mdx_ccc$1054$5() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1055:5
            if (!scanToken(NOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1055:13
            if (!scanToken(MATCHES)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1055:25
            // NonTerminal term2 at ccc/mdx.ccc:1055:25
            pushOntoLookaheadStack("term3", "ccc/mdx.ccc", 1055, 25);
            currentLookaheadProduction = "term2";
            try {
                if (!check$term2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1056:5
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at ccc/mdx.ccc:1206:7
    private final boolean scan$mdx_ccc$1206$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$mdx_ccc$1206$12(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at ccc/mdx.ccc:1280:5
    private final boolean scan$mdx_ccc$1280$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$mdx_ccc$1280$10(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at ccc/mdx.ccc:1312:7
    private final boolean scan$mdx_ccc$1312$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$mdx_ccc$1312$12(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // lookahead routine for lookahead at:
    // ccc/mdx.ccc:892:5
    private final boolean check$mdx_ccc$892$10(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(DOT)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // ccc/mdx.ccc:1206:7
    private final boolean check$mdx_ccc$1206$12(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RPAREN)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // ccc/mdx.ccc:1280:5
    private final boolean check$mdx_ccc$1280$10(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // ccc/mdx.ccc:1312:7
    private final boolean check$mdx_ccc$1312$12(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RPAREN)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:702:3
        // NonTerminal unaliasedExpression at ccc/mdx.ccc:702:3
        pushOntoLookaheadStack("parseExpression", "ccc/mdx.ccc", 702, 3);
        currentLookaheadProduction = "unaliasedExpression";
        try {
            if (!check$unaliasedExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:703:3
        boolean passedPredicate2562 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2563 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$mdx_ccc$704$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2563;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2562;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:713:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$expressionOrEmpty(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:723:3
        Token token2566 = currentLookaheadToken;
        int remainingLookahead2566 = remainingLookahead;
        boolean hitFailure2566 = hitFailure, passedPredicate2566 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$mdx_ccc$723$3(false)) {
                currentLookaheadToken = token2566;
                remainingLookahead = remainingLookahead2566;
                hitFailure = hitFailure2566;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$mdx_ccc$728$3(false)) {
                    currentLookaheadToken = token2566;
                    remainingLookahead = remainingLookahead2566;
                    hitFailure = hitFailure2566;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2566;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$expOrEmptyList(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:742:3
        // NonTerminal expressionOrEmpty at ccc/mdx.ccc:742:3
        pushOntoLookaheadStack("expOrEmptyList", "ccc/mdx.ccc", 742, 3);
        currentLookaheadProduction = "expressionOrEmpty";
        try {
            if (!check$expressionOrEmpty(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:743:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:746:3
        boolean passedPredicate2571 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2572 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$mdx_ccc$747$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2572;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2571;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:753:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$expList(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:765:3
        // NonTerminal parseExpression at ccc/mdx.ccc:765:3
        pushOntoLookaheadStack("expList", "ccc/mdx.ccc", 765, 3);
        currentLookaheadProduction = "parseExpression";
        try {
            if (!check$parseExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:766:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:769:3
        boolean passedPredicate2578 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2579 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$mdx_ccc$770$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2579;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2578;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:776:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseIdentifier(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:798:5
        Token token2588 = currentLookaheadToken;
        int remainingLookahead2588 = remainingLookahead;
        boolean hitFailure2588 = hitFailure, passedPredicate2588 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$mdx_ccc$798$5$(false)) {
                currentLookaheadToken = token2588;
                remainingLookahead = remainingLookahead2588;
                hitFailure = hitFailure2588;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$mdx_ccc$800$5(false)) {
                    currentLookaheadToken = token2588;
                    remainingLookahead = remainingLookahead2588;
                    hitFailure = hitFailure2588;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2588;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:802:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseNameObjectIdentifier(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:812:3
        Token token2591 = currentLookaheadToken;
        int remainingLookahead2591 = remainingLookahead;
        boolean hitFailure2591 = hitFailure, passedPredicate2591 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(DIMENSION, PROPERTIES)) {
                currentLookaheadToken = token2591;
                remainingLookahead = remainingLookahead2591;
                hitFailure = hitFailure2591;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!scanToken(ID)) {
                    currentLookaheadToken = token2591;
                    remainingLookahead = remainingLookahead2591;
                    hitFailure = hitFailure2591;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$mdx_ccc$821$3(false)) {
                        currentLookaheadToken = token2591;
                        remainingLookahead = remainingLookahead2591;
                        hitFailure = hitFailure2591;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!scanToken(QUOTED_ID)) {
                            currentLookaheadToken = token2591;
                            remainingLookahead = remainingLookahead2591;
                            hitFailure = hitFailure2591;
                            return false;
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2591;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseKeyIdentifier(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for OneOrMore specified at ccc/mdx.ccc:840:3
        if (!scanToken(AMP_QUOTED_ID, AMP_UNQUOTED_ID)) return false;
        boolean passedPredicate2595 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2596 = currentLookaheadToken;
                passedPredicate = false;
                if (!scanToken(AMP_QUOTED_ID, AMP_UNQUOTED_ID)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2596;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2595;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:846:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$unaliasedExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:910:3
        // NonTerminal term5 at ccc/mdx.ccc:910:3
        pushOntoLookaheadStack("unaliasedExpression", "ccc/mdx.ccc", 910, 3);
        currentLookaheadProduction = "term5";
        try {
            if (!check$term5(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:911:3
        boolean passedPredicate2610 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2611 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$mdx_ccc$912$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2611;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2610;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:936:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$term5(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:946:3
        // NonTerminal term4 at ccc/mdx.ccc:946:3
        pushOntoLookaheadStack("term5", "ccc/mdx.ccc", 946, 3);
        currentLookaheadProduction = "term4";
        try {
            if (!check$term4(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:947:3
        boolean passedPredicate2616 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2617 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$mdx_ccc$948$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2617;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2616;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:956:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$term4(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:966:3
        Token token2620 = currentLookaheadToken;
        int remainingLookahead2620 = remainingLookahead;
        boolean hitFailure2620 = hitFailure, passedPredicate2620 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$mdx_ccc$966$3(false)) {
                currentLookaheadToken = token2620;
                remainingLookahead = remainingLookahead2620;
                hitFailure = hitFailure2620;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$mdx_ccc$970$3(false)) {
                    currentLookaheadToken = token2620;
                    remainingLookahead = remainingLookahead2620;
                    hitFailure = hitFailure2620;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2620;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$term3(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:985:3
        // NonTerminal term2 at ccc/mdx.ccc:985:3
        pushOntoLookaheadStack("term3", "ccc/mdx.ccc", 985, 3);
        currentLookaheadProduction = "term2";
        try {
            if (!check$term2(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:986:3
        boolean passedPredicate2624 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2625 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$mdx_ccc$988$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2625;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2624;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1087:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$term2(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1097:3
        // NonTerminal term at ccc/mdx.ccc:1097:3
        pushOntoLookaheadStack("term2", "ccc/mdx.ccc", 1097, 3);
        currentLookaheadProduction = "term";
        try {
            if (!check$term(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:1098:3
        boolean passedPredicate2630 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2631 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$mdx_ccc$1099$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2631;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2630;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1121:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$term(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1131:3
        // NonTerminal factor at ccc/mdx.ccc:1131:3
        pushOntoLookaheadStack("term", "ccc/mdx.ccc", 1131, 3);
        currentLookaheadProduction = "factor";
        try {
            if (!check$factor(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:1132:3
        boolean passedPredicate2636 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2637 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$mdx_ccc$1133$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2637;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2636;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1148:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$factor(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:1158:3
        Token token2640 = currentLookaheadToken;
        int remainingLookahead2640 = remainingLookahead;
        boolean hitFailure2640 = hitFailure, passedPredicate2640 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$mdx_ccc$1158$3(false)) {
                currentLookaheadToken = token2640;
                remainingLookahead = remainingLookahead2640;
                hitFailure = hitFailure2640;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$mdx_ccc$1162$3(false)) {
                    currentLookaheadToken = token2640;
                    remainingLookahead = remainingLookahead2640;
                    hitFailure = hitFailure2640;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$mdx_ccc$1166$3(false)) {
                        currentLookaheadToken = token2640;
                        remainingLookahead = remainingLookahead2640;
                        hitFailure = hitFailure2640;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$mdx_ccc$1173$3(false)) {
                            currentLookaheadToken = token2640;
                            remainingLookahead = remainingLookahead2640;
                            hitFailure = hitFailure2640;
                            return false;
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2640;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$primary(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1187:3
        // NonTerminal atom at ccc/mdx.ccc:1187:3
        pushOntoLookaheadStack("primary", "ccc/mdx.ccc", 1187, 3);
        currentLookaheadProduction = "atom";
        try {
            if (!check$atom(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:1188:3
        boolean passedPredicate2644 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2645 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$mdx_ccc$1189$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2645;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2644;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1191:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$objectIdentifierOrFuncall(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1202:3
        // NonTerminal parseIdentifier at ccc/mdx.ccc:1202:3
        pushOntoLookaheadStack("objectIdentifierOrFuncall", "ccc/mdx.ccc", 1202, 3);
        currentLookaheadProduction = "parseIdentifier";
        try {
            if (!check$parseIdentifier(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at ccc/mdx.ccc:1203:3
        Token token2650 = currentLookaheadToken;
        boolean passedPredicate2650 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$mdx_ccc$1204$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token2650;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate2650;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1215:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$atom(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:1243:3
        Token token2654 = currentLookaheadToken;
        int remainingLookahead2654 = remainingLookahead;
        boolean hitFailure2654 = hitFailure, passedPredicate2654 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(SINGLE_QUOTED_STRING)) {
                currentLookaheadToken = token2654;
                remainingLookahead = remainingLookahead2654;
                hitFailure = hitFailure2654;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!scanToken(DOUBLE_QUOTED_STRING)) {
                    currentLookaheadToken = token2654;
                    remainingLookahead = remainingLookahead2654;
                    hitFailure = hitFailure2654;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!scanToken(UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL)) {
                        currentLookaheadToken = token2654;
                        remainingLookahead = remainingLookahead2654;
                        hitFailure = hitFailure2654;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!scanToken(NULL)) {
                            currentLookaheadToken = token2654;
                            remainingLookahead = remainingLookahead2654;
                            hitFailure = hitFailure2654;
                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                            passedPredicate = false;
                            if (!check$mdx_ccc$1259$3(false)) {
                                currentLookaheadToken = token2654;
                                remainingLookahead = remainingLookahead2654;
                                hitFailure = hitFailure2654;
                                if (passedPredicate && !legacyGlitchyLookahead) return false;
                                passedPredicate = false;
                                if (!check$mdx_ccc$1269$3(false)) {
                                    currentLookaheadToken = token2654;
                                    remainingLookahead = remainingLookahead2654;
                                    hitFailure = hitFailure2654;
                                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                                    passedPredicate = false;
                                    if (!check$mdx_ccc$1278$3(false)) {
                                        currentLookaheadToken = token2654;
                                        remainingLookahead = remainingLookahead2654;
                                        hitFailure = hitFailure2654;
                                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                                        passedPredicate = false;
                                        if (!check$mdx_ccc$1292$3(false)) {
                                            currentLookaheadToken = token2654;
                                            remainingLookahead = remainingLookahead2654;
                                            hitFailure = hitFailure2654;
                                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                                            passedPredicate = false;
                                            if (!check$mdx_ccc$1299$3(false)) {
                                                currentLookaheadToken = token2654;
                                                remainingLookahead = remainingLookahead2654;
                                                hitFailure = hitFailure2654;
                                                return false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2654;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$caseExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1337:3
        if (!scanToken(CASE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at ccc/mdx.ccc:1338:3
        Token token2658 = currentLookaheadToken;
        boolean passedPredicate2658 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$mdx_ccc$1339$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token2658;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate2658;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:1345:3
        boolean passedPredicate2660 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2661 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$mdx_ccc$1346$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2661;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2660;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at ccc/mdx.ccc:1352:3
        Token token2663 = currentLookaheadToken;
        boolean passedPredicate2663 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$mdx_ccc$1353$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token2663;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate2663;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1358:3
        if (!scanToken(END)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1359:3
        return true;
    }

    ArrayList<NonTerminalCall> parsingStack = new ArrayList<>();
    private ArrayList<NonTerminalCall> lookaheadStack = new ArrayList<>();

    /**
    * Inner class that represents entering a grammar production
    */
    class NonTerminalCall {
        final String sourceFile;
        final String productionName;
        final int line, column;

        NonTerminalCall(String sourceFile, String productionName, int line, int column) {
            this.sourceFile = sourceFile;
            this.productionName = productionName;
            this.line = line;
            this.column = column;
        }

        final mdxLexer getTokenSource() {
            return MDXParser.this.token_source;
        }

        StackTraceElement createStackTraceElement() {
            return new StackTraceElement("MDXParser", productionName, sourceFile, line);
        }

        void dump(PrintStream ps) {
            ps.println(productionName + ":" + line + ":" + column);
        }

    }


    private final void pushOntoCallStack(String methodName, String fileName, int line, int column) {
        parsingStack.add(new NonTerminalCall(fileName, methodName, line, column));
    }

    private final void popCallStack() {
        NonTerminalCall ntc = parsingStack.remove(parsingStack.size() - 1);
        this.currentlyParsedProduction = ntc.productionName;
    }

    private final void restoreCallStack(int prevSize) {
        while (parsingStack.size() > prevSize) {
            popCallStack();
        }
    }

    private final void pushOntoLookaheadStack(String methodName, String fileName, int line, int column) {
        lookaheadStack.add(new NonTerminalCall(fileName, methodName, line, column));
    }

    private final void popLookaheadStack() {
        NonTerminalCall ntc = lookaheadStack.remove(lookaheadStack.size() - 1);
        this.currentLookaheadProduction = ntc.productionName;
    }

    void dumpLookaheadStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it = lookaheadStack.listIterator(lookaheadStack.size());
        while (it.hasPrevious()) {
            it.previous().dump(ps);
        }
    }

    void dumpCallStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it = parsingStack.listIterator(parsingStack.size());
        while (it.hasPrevious()) {
            it.previous().dump(ps);
        }
    }

    void dumpLookaheadCallStack(PrintStream ps) {
        ps.println("Current Parser Production is: " + currentlyParsedProduction);
        ps.println("Current Lookahead Production is: " + currentLookaheadProduction);
        ps.println("---Lookahead Stack---");
        dumpLookaheadStack(ps);
        ps.println("---Call Stack---");
        dumpCallStack(ps);
    }

    public boolean isParserTolerant() {
        return false;
    }

    public void setParserTolerant(boolean tolerantParsing) {
        if (tolerantParsing) {
            throw new UnsupportedOperationException("This parser was not built with that feature!");
        }
    }

    private Token consumeToken(TokenType expectedType) {
        Token nextToken = nextToken(lastConsumedToken);
        if (nextToken.getType() != expectedType) {
            nextToken = handleUnexpectedTokenType(expectedType, nextToken);
        }
        this.lastConsumedToken = nextToken;
        this.nextTokenType = null;
        if (buildTree && tokensAreNodes) {
            pushNode(lastConsumedToken);
        }
        return lastConsumedToken;
    }

    private Token handleUnexpectedTokenType(TokenType expectedType, Token nextToken) {
        throw new ParseException(this, nextToken, EnumSet.of(expectedType), parsingStack);
    }

    private boolean buildTree = true;
    private boolean tokensAreNodes = true;
    private boolean unparsedTokensAreNodes = false;

    public boolean isTreeBuildingEnabled() {
        return buildTree;
    }

    public void setUnparsedTokensAreNodes(boolean unparsedTokensAreNodes) {
        this.unparsedTokensAreNodes = unparsedTokensAreNodes;
    }

    public void setTokensAreNodes(boolean tokensAreNodes) {
        this.tokensAreNodes = tokensAreNodes;
    }

    NodeScope currentNodeScope = new NodeScope();

    /**
    * @return the root node of the AST. It only makes sense to call
    * this after a successful parse.
    */
    public Node rootNode() {
        return currentNodeScope.rootNode();
    }

    /**
    * push a node onto the top of the node stack
    * @param n the node to push
    */
    public void pushNode(Node n) {
        currentNodeScope.add(n);
    }

    /**
    * @return the node on the top of the stack, and remove it from the
    * stack.
    */
    public Node popNode() {
        return currentNodeScope.pop();
    }

    /**
    * @return the node currently on the top of the tree-building stack.
    */
    public Node peekNode() {
        return currentNodeScope.peek();
    }

    /**
    * Puts the node on the top of the stack. However, unlike pushNode()
    * it replaces the node that is currently on the top of the stack.
    * This is effectively equivalent to popNode() followed by pushNode(n)
    * @param n the node to poke
    */
    public void pokeNode(Node n) {
        currentNodeScope.poke(n);
    }

    /**
    * @return the number of Nodes on the tree-building stack in the current node
    * scope.
    */
    public int nodeArity() {
        return currentNodeScope.size();
    }

    private void clearNodeScope() {
        currentNodeScope.clear();
    }

    private void openNodeScope(Node n) {
        new NodeScope();
        if (n != null) {
            Token next = nextToken(lastConsumedToken);
            n.setTokenSource(lastConsumedToken.getTokenSource());
            n.setBeginOffset(next.getBeginOffset());
            n.open();
        }
    }

    /* A definite node is constructed from a specified number of
    * children.  That number of nodes are popped from the stack and
    * made the children of the definite node.  Then the definite node
    * is pushed on to the stack.
    */
    private void closeNodeScope(Node n, int num) {
        n.setEndOffset(lastConsumedToken.getEndOffset());
        currentNodeScope.close();
        ArrayList<Node> nodes = new ArrayList<Node>();
        for (int i = 0; i < num; i++) {
            nodes.add(popNode());
        }
        Collections.reverse(nodes);
        for (Node child : nodes) {
            // FIXME deal with the UNPARSED_TOKENS_ARE_NODES case
            n.addChild(child);
        }
        n.close();
        pushNode(n);
    }

    /**
    * A conditional node is constructed if the condition is true.  All
    * the nodes that have been pushed since the node was opened are
    * made children of the conditional node, which is then pushed
    * on to the stack.  If the condition is false the node is not
    * constructed and they are left on the stack.
    */
    private void closeNodeScope(Node n, boolean condition) {
        if (n != null && condition) {
            n.setEndOffset(lastConsumedToken.getEndOffset());
            int a = nodeArity();
            currentNodeScope.close();
            ArrayList<Node> nodes = new ArrayList<Node>();
            while (a-- > 0) {
                nodes.add(popNode());
            }
            Collections.reverse(nodes);
            for (Node child : nodes) {
                if (unparsedTokensAreNodes && child instanceof Token) {
                    Token tok = (Token) child;
                    while (tok.previousCachedToken() != null && tok.previousCachedToken().isUnparsed()) {
                        tok = tok.previousCachedToken();
                    }
                    while (tok.isUnparsed()) {
                        n.addChild(tok);
                        tok = tok.nextCachedToken();
                    }
                }
                n.addChild(child);
            }
            n.close();
            pushNode(n);
        } else {
            currentNodeScope.close();
        }
    }

    public boolean getBuildTree() {
        return buildTree;
    }

    public void setBuildTree(boolean buildTree) {
        this.buildTree = buildTree;
    }


    @SuppressWarnings("serial")
    class NodeScope extends ArrayList<Node> {
        NodeScope parentScope;

        NodeScope() {
            this.parentScope = MDXParser.this.currentNodeScope;
            MDXParser.this.currentNodeScope = this;
        }

        boolean isRootScope() {
            return parentScope == null;
        }

        Node rootNode() {
            NodeScope ns = this;
            while (ns.parentScope != null) {
                ns = ns.parentScope;
            }
            return ns.isEmpty() ? null : ns.get(0);
        }

        Node peek() {
            if (isEmpty()) {
                return parentScope == null ? null : parentScope.peek();
            }
            return get(size() - 1);
        }

        Node pop() {
            return isEmpty() ? parentScope.pop() : remove(size() - 1);
        }

        void poke(Node n) {
            if (isEmpty()) {
                parentScope.poke(n);
            } else {
                set(size() - 1, n);
            }
        }

        void close() {
            parentScope.addAll(this);
            MDXParser.this.currentNodeScope = parentScope;
        }

        int nestingLevel() {
            int result = 0;
            NodeScope parent = this;
            while (parent.parentScope != null) {
                result++;
                parent = parent.parentScope;
            }
            return result;
        }

        public NodeScope clone() {
            NodeScope clone = (NodeScope) super.clone();
            if (parentScope != null) {
                clone.parentScope = parentScope.clone();
            }
            return clone;
        }

    }

}

