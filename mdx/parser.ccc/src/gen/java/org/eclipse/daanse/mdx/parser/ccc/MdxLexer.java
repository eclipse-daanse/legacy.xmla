/* Generated by: CongoCC Parser Generator. MdxLexer.java
*
* Copyright (c) 2023 Contributors to the Eclipse Foundation.
*
* This program and the accompanying materials are made
* available under the terms of the Eclipse Public License 2.0
* which is available at https://www.eclipse.org/legal/epl-2.0/
*
* SPDX-License-Identifier: EPL-2.0
*
* Contributors: see corresponding .ccc file
*/
package org.eclipse.daanse.mdx.parser.ccc;

import org.eclipse.daanse.mdx.parser.ccc.Token.TokenType;
import static org.eclipse.daanse.mdx.parser.ccc.Token.TokenType.*;
import java.util.BitSet;
import java.util.EnumMap;
import java.util.EnumSet;


public class MdxLexer extends TokenSource {

    public enum LexicalState {
        DEFAULT, IN_SINGLE_LINE_COMMENT, IN_FORMAL_COMMENT, IN_MULTI_LINE_COMMENT
    }

    LexicalState lexicalState = LexicalState.values()[0];
    EnumSet<TokenType> activeTokenTypes = EnumSet.allOf(TokenType.class);
    {
    }
    // A lookup for lexical state transitions triggered by a certain token type
    private static EnumMap<TokenType, LexicalState> tokenTypeToLexicalStateMap = new EnumMap<>(TokenType.class);
    // Token types that are "regular" tokens that participate in parsing,
    // i.e. declared as TOKEN
    static final EnumSet<TokenType> regularTokens = EnumSet.of(EOF, AND, AS, AXIS, BEGIN, BY, CASE, CALCULATION, CAST, CELL, CHAPTERS, CREATE, COLUMNS, COMMIT, CUBE, CURRENTCUBE, DIMENSION, DRILLTHROUGH, ELSE, EMPTY, END, EXPLAIN, FIRSTROWSET, FOR, FROM, IN, IS, MATCHES, MAXROWS, MEMBER, MEASURE, NON, NOT, NULL, ON, OR, PAGES, PLAN, PROPERTIES, REFRESH, RETURN, ROLLBACK, ROWS, SECTIONS, SELECT, SESSION, SET, THEN, TRAN, TRANSACTION, UPDATE, USE_EQUAL_ALLOCATION, USE_EQUAL_INCREMENT, USE_WEIGHTED_ALLOCATION, USE_WEIGHTED_INCREMENT, WHEN, WHERE, XOR, WITH, EXISTING, SYSTEM_CUBE, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, COMMA, SEMICOLON, DOT, ASTERISK, BANG, COLON, CONCAT, EQ, GE, GT, LE, LT, MINUS, NE, PLUS, SOLIDUS, ATSIGN, ID, QUOTED_ID, AMP_QUOTED_ID, AMP_UNQUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, FLOATING_POINT_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING, CALCULATED);
    // Token types that do not participate in parsing
    // i.e. declared as UNPARSED (or SPECIAL_TOKEN)
    static final EnumSet<TokenType> unparsedTokens = EnumSet.of(SINGLE_LINE_COMMENT, FORMAL_COMMENT, MULTI_LINE_COMMENT);
    // Tokens that are skipped, i.e. SKIP
    static final EnumSet<TokenType> skippedTokens = EnumSet.of(_TOKEN_61, _TOKEN_62, _TOKEN_63, _TOKEN_64, _TOKEN_65);
    // Tokens that correspond to a MORE, i.e. that are pending
    // additional input
    static final EnumSet<TokenType> moreTokens = EnumSet.of(_TOKEN_66, _TOKEN_67, _TOKEN_68, _TOKEN_69, _TOKEN_73);

    public MdxLexer(CharSequence input) {
        this("input", input);
    }

    /**
    * @param inputSource just the name of the input source (typically the filename)
    * that will be used in error messages and so on.
    * @param input the input
    */
    public MdxLexer(String inputSource, CharSequence input) {
        this(inputSource, input, LexicalState.DEFAULT, 1, 1);
    }

    /**
    * @param inputSource just the name of the input source (typically the filename) that
    * will be used in error messages and so on.
    * @param input the input
    * @param lexicalState The starting lexical state, may be null to indicate the default
    * starting state
    * @param line The line number at which we are starting for the purposes of location/error messages. In most
    * normal usage, this is 1.
    * @param column number at which we are starting for the purposes of location/error messages. In most normal
    * usages this is 1.
    */
    public MdxLexer(String inputSource, CharSequence input, LexicalState lexState, int startingLine, int startingColumn) {
        super(inputSource, input, startingLine, startingColumn, 4, false, false, false, "");
        if (lexicalState != null) switchTo(lexState);
    }

    /**
    * The public method for getting the next token.
    * It checks whether we have already cached
    * the token after this one. If not, it finally goes
    * to the NFA machinery
    */
    public Token getNextToken(Token tok) {
        if (tok == null) {
            tok = tokenizeAt(0);
            cacheToken(tok);
            return tok;
        }
        Token cachedToken = tok.nextCachedToken();
        // If the cached next token is not currently active, we
        // throw it away and go back to the XXXLexer
        if (cachedToken != null && activeTokenTypes != null && !activeTokenTypes.contains(cachedToken.getType())) {
            reset(tok);
            cachedToken = null;
        }
        if (cachedToken == null) {
            Token token = tokenizeAt(tok.getEndOffset());
            cacheToken(token);
            return token;
        }
        return cachedToken;
    }


    static class MatchInfo {
        TokenType matchedType;
        int matchLength;

        MatchInfo(TokenType matchedType, int matchLength) {
            this.matchedType = matchedType;
            this.matchLength = matchLength;
        }

    }


    /**
    * Core tokenization method. Note that this can be called from a static context.
    * Hence the extra parameters that need to be passed in.
    */
    static MatchInfo getMatchInfo(CharSequence input, int position, EnumSet<TokenType> activeTokenTypes, NfaFunction[] nfaFunctions) {
        if (position >= input.length()) {
            return new MatchInfo(EOF, 0);
        }
        int start = position;
        int matchLength = 0;
        TokenType matchedType = TokenType.INVALID;
        BitSet currentStates = new BitSet(500);
        BitSet nextStates = new BitSet(500);
        // the core NFA loop
        do {
            // Holder for the new type (if any) matched on this iteration
            if (position > start) {
                // What was nextStates on the last iteration
                // is now the currentStates!
                BitSet temp = currentStates;
                currentStates = nextStates;
                nextStates = temp;
                nextStates.clear();
            } else {
                currentStates.set(0);
            }
            if (position >= input.length()) {
                break;
            }
            int curChar = Character.codePointAt(input, position++);
            if (curChar > 0xFFFF) position++;
            int nextActive = currentStates.nextSetBit(0);
            while (nextActive != -1) {
                TokenType returnedType = nfaFunctions[nextActive].apply(curChar, nextStates, activeTokenTypes);
                if (returnedType != null && (position - start > matchLength || returnedType.ordinal() < matchedType.ordinal())) {
                    matchedType = returnedType;
                    matchLength = position - start;
                }
                nextActive = currentStates.nextSetBit(nextActive + 1);
            }
            if (position >= input.length()) break;
        }
        while (!nextStates.isEmpty());
        return new MatchInfo(matchedType, matchLength);
    }

    /**
    * @param position The position at which to tokenize.
    * @return the Token at position
    */
    final Token tokenizeAt(int position) {
        int tokenBeginOffset = position;
        boolean inMore = false;
        StringBuilder invalidChars = null;
        Token matchedToken = null;
        TokenType matchedType = null;
        // The core tokenization loop
        while (matchedToken == null) {
            // Get the NFA function table for the current lexical state.
            // If we are in a MORE, there is some possibility that there
            // was a lexical state change since the last iteration of this loop!
            NfaFunction[] nfaFunctions = functionTableMap.get(lexicalState);
            if (!inMore) tokenBeginOffset = position;
            MatchInfo matchInfo = getMatchInfo(this, position, activeTokenTypes, nfaFunctions);
            matchedType = matchInfo.matchedType;
            inMore = moreTokens.contains(matchedType);
            position += matchInfo.matchLength;
            LexicalState newState = tokenTypeToLexicalStateMap.get(matchedType);
            if (newState != null) {
                this.lexicalState = newState;
            }
            if (matchedType == TokenType.INVALID) {
                if (invalidChars == null) {
                    invalidChars = new StringBuilder();
                }
                int cp = Character.codePointAt(this, tokenBeginOffset);
                invalidChars.appendCodePoint(cp);
                ++position;
                if (cp > 0xFFFF) ++position;
                continue;
            }
            if (invalidChars != null) {
                return new InvalidToken(this, tokenBeginOffset - invalidChars.length(), tokenBeginOffset);
            }
            if (skippedTokens.contains(matchedType)) {
                skipTokens(tokenBeginOffset, position);
            } else if (regularTokens.contains(matchedType) || unparsedTokens.contains(matchedType)) {
                matchedToken = Token.newToken(matchedType, this, tokenBeginOffset, position);
                matchedToken.setUnparsed(!regularTokens.contains(matchedType));
            }
        }
        doLexicalStateSwitch(matchedToken.getType());
        return matchedToken;
    }

    // Generate the map for lexical state transitions from the various token types
    static {
        tokenTypeToLexicalStateMap.put(_TOKEN_66, LexicalState.IN_SINGLE_LINE_COMMENT);
        tokenTypeToLexicalStateMap.put(_TOKEN_67, LexicalState.IN_FORMAL_COMMENT);
        tokenTypeToLexicalStateMap.put(_TOKEN_68, LexicalState.IN_SINGLE_LINE_COMMENT);
        tokenTypeToLexicalStateMap.put(_TOKEN_69, LexicalState.IN_MULTI_LINE_COMMENT);
        tokenTypeToLexicalStateMap.put(SINGLE_LINE_COMMENT, LexicalState.DEFAULT);
        tokenTypeToLexicalStateMap.put(FORMAL_COMMENT, LexicalState.DEFAULT);
        tokenTypeToLexicalStateMap.put(MULTI_LINE_COMMENT, LexicalState.DEFAULT);
    }

    boolean doLexicalStateSwitch(TokenType tokenType) {
        LexicalState newState = tokenTypeToLexicalStateMap.get(tokenType);
        if (newState == null) return false;
        return switchTo(newState);
    }

    /**
    * Switch to specified lexical state.
    * @param lexState the lexical state to switch to
    * @return whether we switched (i.e. we weren't already in the desired lexical state)
    */
    public boolean switchTo(LexicalState lexState) {
        if (this.lexicalState != lexState) {
            this.lexicalState = lexState;
            return true;
        }
        return false;
    }

    // Reset the token source input
    // to just after the Token passed in.
    void reset(Token t, LexicalState state) {
        uncacheTokens(t);
        if (state != null) {
            switchTo(state);
        } else {
            doLexicalStateSwitch(t.getType());
        }
    }

    void reset(Token t) {
        reset(t, null);
    }

    void cacheToken(Token tok) {
        cacheTokenAt(tok, tok.getBeginOffset());
    }


    // NFA related code follows.
    // The functional interface that represents
    // the acceptance method of an NFA state
    static interface NfaFunction {

        TokenType apply(int ch, BitSet bs, EnumSet<TokenType> validTypes);

    }

    // A lookup of the NFA function tables for the respective lexical states.
    private static final EnumMap<LexicalState, NfaFunction[]> functionTableMap = new EnumMap<>(LexicalState.class);
    // Initialize the various NFA method tables
    static {
        DEFAULT.NFA_FUNCTIONS_init();
        IN_SINGLE_LINE_COMMENT.NFA_FUNCTIONS_init();
        IN_FORMAL_COMMENT.NFA_FUNCTIONS_init();
        IN_MULTI_LINE_COMMENT.NFA_FUNCTIONS_init();
    }

    //The Nitty-gritty of the NFA code follows.
    /**
    * Holder class for NFA code related to DEFAULT lexical state
    */
    private static class DEFAULT {

        private static TokenType getNfaIndex0(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '"') {
                nextStates.set(382);
            } else if (ch == '$') {
                nextStates.set(327);
            } else if (ch == '&') {
                nextStates.set(346);
                nextStates.set(349);
            } else if (ch == '\'') {
                nextStates.set(380);
            } else if (ch == '-') {
                nextStates.set(334);
            } else if (ch == '.') {
                nextStates.set(357);
                nextStates.set(361);
                nextStates.set(367);
            } else if (ch == '/') {
                nextStates.set(333);
                nextStates.set(335);
                nextStates.set(340);
            } else if (ch >= '0' && ch <= '9') {
                nextStates.set(352);
                nextStates.set(355);
                nextStates.set(362);
                nextStates.set(372);
                nextStates.set(376);
            } else if (ch == '<') {
                nextStates.set(338);
                nextStates.set(339);
            } else if (ch == '>') {
                nextStates.set(337);
            } else if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(1);
                nextStates.set(3);
                nextStates.set(4);
            } else if ((ch == 'B') || (ch == 'b')) {
                nextStates.set(7);
                nextStates.set(11);
            } else if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(12);
                nextStates.set(15);
                nextStates.set(25);
                nextStates.set(28);
                nextStates.set(31);
                nextStates.set(38);
                nextStates.set(43);
                nextStates.set(49);
                nextStates.set(54);
                nextStates.set(57);
            } else if ((ch == 'D') || (ch == 'd')) {
                nextStates.set(67);
                nextStates.set(75);
            } else if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(86);
                nextStates.set(89);
                nextStates.set(93);
                nextStates.set(95);
                nextStates.set(320);
            } else if ((ch == 'F') || (ch == 'f')) {
                nextStates.set(101);
                nextStates.set(111);
                nextStates.set(113);
            } else if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(116);
                nextStates.set(117);
            } else if ((ch == 'M') || (ch == 'm')) {
                nextStates.set(118);
                nextStates.set(124);
                nextStates.set(130);
                nextStates.set(135);
            } else if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(141);
                nextStates.set(143);
                nextStates.set(145);
            } else if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(148);
                nextStates.set(149);
            } else if ((ch == 'P') || (ch == 'p')) {
                nextStates.set(150);
                nextStates.set(154);
                nextStates.set(157);
            } else if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(166);
                nextStates.set(172);
                nextStates.set(177);
                nextStates.set(184);
            } else if ((ch == 'S') || (ch == 's')) {
                nextStates.set(187);
                nextStates.set(194);
                nextStates.set(199);
                nextStates.set(205);
            } else if ((ch == 'T') || (ch == 't')) {
                nextStates.set(207);
                nextStates.set(210);
                nextStates.set(213);
            } else if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(223);
                nextStates.set(228);
                nextStates.set(247);
                nextStates.set(265);
                nextStates.set(287);
            } else if ((ch == 'W') || (ch == 'w')) {
                nextStates.set(308);
                nextStates.set(311);
                nextStates.set(317);
            } else if ((ch == 'X') || (ch == 'x')) {
                nextStates.set(315);
            } else if (ch == '[') {
                nextStates.set(344);
            } else if (ch == '|') {
                nextStates.set(336);
            }
            if (ch >= '0' && ch <= '9') {
                nextStates.set(359);
                nextStates.set(351);
                if (validTypes == null || validTypes.contains(UNSIGNED_INTEGER_LITERAL)) type = UNSIGNED_INTEGER_LITERAL;
            } else if (((ch == '$') || ((ch >= 'A' && ch <= 'Z') || ((ch == '_') || (ch >= 'a' && ch <= 'z')))) || (ch >= 128 && checkIntervals(NFA_MOVES_434, ch))) {
                nextStates.set(343);
                if (validTypes == null || validTypes.contains(ID)) type = ID;
            } else if (ch == '@') {
                if (validTypes == null || validTypes.contains(ATSIGN)) type = ATSIGN;
            } else if (ch == '/') {
                if (validTypes == null || validTypes.contains(SOLIDUS)) type = SOLIDUS;
            } else if (ch == '+') {
                if (validTypes == null || validTypes.contains(PLUS)) type = PLUS;
            } else if (ch == '-') {
                if (validTypes == null || validTypes.contains(MINUS)) type = MINUS;
            } else if (ch == '<') {
                if (validTypes == null || validTypes.contains(LT)) type = LT;
            } else if (ch == '>') {
                if (validTypes == null || validTypes.contains(GT)) type = GT;
            } else if (ch == '=') {
                if (validTypes == null || validTypes.contains(EQ)) type = EQ;
            } else if (ch == ':') {
                if (validTypes == null || validTypes.contains(COLON)) type = COLON;
            } else if (ch == '!') {
                if (validTypes == null || validTypes.contains(BANG)) type = BANG;
            } else if (ch == '*') {
                if (validTypes == null || validTypes.contains(ASTERISK)) type = ASTERISK;
            } else if (ch == '.') {
                if (validTypes == null || validTypes.contains(DOT)) type = DOT;
            } else if (ch == ';') {
                if (validTypes == null || validTypes.contains(SEMICOLON)) type = SEMICOLON;
            } else if (ch == ',') {
                if (validTypes == null || validTypes.contains(COMMA)) type = COMMA;
            } else if (ch == ']') {
                if (validTypes == null || validTypes.contains(RBRACKET)) type = RBRACKET;
            } else if (ch == '[') {
                if (validTypes == null || validTypes.contains(LBRACKET)) type = LBRACKET;
            } else if (ch == '}') {
                if (validTypes == null || validTypes.contains(RBRACE)) type = RBRACE;
            } else if (ch == '{') {
                if (validTypes == null || validTypes.contains(LBRACE)) type = LBRACE;
            } else if (ch == ')') {
                if (validTypes == null || validTypes.contains(RPAREN)) type = RPAREN;
            } else if (ch == '(') {
                if (validTypes == null || validTypes.contains(LPAREN)) type = LPAREN;
            } else if (ch == '\f') {
                if (validTypes == null || validTypes.contains(_TOKEN_65)) type = _TOKEN_65;
            } else if (ch == '\r') {
                if (validTypes == null || validTypes.contains(_TOKEN_64)) type = _TOKEN_64;
            } else if (ch == '\n') {
                if (validTypes == null || validTypes.contains(_TOKEN_63)) type = _TOKEN_63;
            } else if (ch == '\t') {
                if (validTypes == null || validTypes.contains(_TOKEN_62)) type = _TOKEN_62;
            } else if (ch == ' ') {
                if (validTypes == null || validTypes.contains(_TOKEN_61)) type = _TOKEN_61;
            }
            return type;
        }

        private static TokenType getNfaIndex1(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(2);
            }
            return type;
        }

        private static TokenType getNfaIndex2(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'D') || (ch == 'd')) {
                if (validTypes == null || validTypes.contains(AND)) type = AND;
            }
            return type;
        }

        private static TokenType getNfaIndex3(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes == null || validTypes.contains(AS)) type = AS;
            }
            return type;
        }

        private static TokenType getNfaIndex4(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'X') || (ch == 'x')) {
                nextStates.set(5);
            }
            return type;
        }

        private static TokenType getNfaIndex5(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(6);
            }
            return type;
        }

        private static TokenType getNfaIndex6(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes == null || validTypes.contains(AXIS)) type = AXIS;
            }
            return type;
        }

        private static TokenType getNfaIndex7(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(8);
            }
            return type;
        }

        private static TokenType getNfaIndex8(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'G') || (ch == 'g')) {
                nextStates.set(9);
            }
            return type;
        }

        private static TokenType getNfaIndex9(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(10);
            }
            return type;
        }

        private static TokenType getNfaIndex10(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes == null || validTypes.contains(BEGIN)) type = BEGIN;
            }
            return type;
        }

        private static TokenType getNfaIndex11(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'Y') || (ch == 'y')) {
                if (validTypes == null || validTypes.contains(BY)) type = BY;
            }
            return type;
        }

        private static TokenType getNfaIndex12(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(13);
            }
            return type;
        }

        private static TokenType getNfaIndex13(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(14);
            }
            return type;
        }

        private static TokenType getNfaIndex14(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                if (validTypes == null || validTypes.contains(CASE)) type = CASE;
            }
            return type;
        }

        private static TokenType getNfaIndex15(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(16);
            }
            return type;
        }

        private static TokenType getNfaIndex16(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(17);
            }
            return type;
        }

        private static TokenType getNfaIndex17(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(18);
            }
            return type;
        }

        private static TokenType getNfaIndex18(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(19);
            }
            return type;
        }

        private static TokenType getNfaIndex19(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(20);
            }
            return type;
        }

        private static TokenType getNfaIndex20(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(21);
            }
            return type;
        }

        private static TokenType getNfaIndex21(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(22);
            }
            return type;
        }

        private static TokenType getNfaIndex22(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(23);
            }
            return type;
        }

        private static TokenType getNfaIndex23(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(24);
            }
            return type;
        }

        private static TokenType getNfaIndex24(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes == null || validTypes.contains(CALCULATION)) type = CALCULATION;
            }
            return type;
        }

        private static TokenType getNfaIndex25(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(26);
            }
            return type;
        }

        private static TokenType getNfaIndex26(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(27);
            }
            return type;
        }

        private static TokenType getNfaIndex27(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                if (validTypes == null || validTypes.contains(CAST)) type = CAST;
            }
            return type;
        }

        private static TokenType getNfaIndex28(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(29);
            }
            return type;
        }

        private static TokenType getNfaIndex29(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(30);
            }
            return type;
        }

        private static TokenType getNfaIndex30(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                if (validTypes == null || validTypes.contains(CELL)) type = CELL;
            }
            return type;
        }

        private static TokenType getNfaIndex31(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                nextStates.set(32);
            }
            return type;
        }

        private static TokenType getNfaIndex32(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(33);
            }
            return type;
        }

        private static TokenType getNfaIndex33(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'P') || (ch == 'p')) {
                nextStates.set(34);
            }
            return type;
        }

        private static TokenType getNfaIndex34(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(35);
            }
            return type;
        }

        private static TokenType getNfaIndex35(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(36);
            }
            return type;
        }

        private static TokenType getNfaIndex36(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(37);
            }
            return type;
        }

        private static TokenType getNfaIndex37(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes == null || validTypes.contains(CHAPTERS)) type = CHAPTERS;
            }
            return type;
        }

        private static TokenType getNfaIndex38(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(39);
            }
            return type;
        }

        private static TokenType getNfaIndex39(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(40);
            }
            return type;
        }

        private static TokenType getNfaIndex40(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(41);
            }
            return type;
        }

        private static TokenType getNfaIndex41(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(42);
            }
            return type;
        }

        private static TokenType getNfaIndex42(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                if (validTypes == null || validTypes.contains(CREATE)) type = CREATE;
            }
            return type;
        }

        private static TokenType getNfaIndex43(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(44);
            }
            return type;
        }

        private static TokenType getNfaIndex44(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(45);
            }
            return type;
        }

        private static TokenType getNfaIndex45(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(46);
            }
            return type;
        }

        private static TokenType getNfaIndex46(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'M') || (ch == 'm')) {
                nextStates.set(47);
            }
            return type;
        }

        private static TokenType getNfaIndex47(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(48);
            }
            return type;
        }

        private static TokenType getNfaIndex48(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes == null || validTypes.contains(COLUMNS)) type = COLUMNS;
            }
            return type;
        }

        private static TokenType getNfaIndex49(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(50);
            }
            return type;
        }

        private static TokenType getNfaIndex50(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'M') || (ch == 'm')) {
                nextStates.set(51);
            }
            return type;
        }

        private static TokenType getNfaIndex51(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'M') || (ch == 'm')) {
                nextStates.set(52);
            }
            return type;
        }

        private static TokenType getNfaIndex52(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(53);
            }
            return type;
        }

        private static TokenType getNfaIndex53(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                if (validTypes == null || validTypes.contains(COMMIT)) type = COMMIT;
            }
            return type;
        }

        private static TokenType getNfaIndex54(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(55);
            }
            return type;
        }

        private static TokenType getNfaIndex55(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'B') || (ch == 'b')) {
                nextStates.set(56);
            }
            return type;
        }

        private static TokenType getNfaIndex56(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                if (validTypes == null || validTypes.contains(CUBE)) type = CUBE;
            }
            return type;
        }

        private static TokenType getNfaIndex57(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(58);
            }
            return type;
        }

        private static TokenType getNfaIndex58(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(59);
            }
            return type;
        }

        private static TokenType getNfaIndex59(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(60);
            }
            return type;
        }

        private static TokenType getNfaIndex60(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(61);
            }
            return type;
        }

        private static TokenType getNfaIndex61(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(62);
            }
            return type;
        }

        private static TokenType getNfaIndex62(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(63);
            }
            return type;
        }

        private static TokenType getNfaIndex63(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(64);
            }
            return type;
        }

        private static TokenType getNfaIndex64(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(65);
            }
            return type;
        }

        private static TokenType getNfaIndex65(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'B') || (ch == 'b')) {
                nextStates.set(66);
            }
            return type;
        }

        private static TokenType getNfaIndex66(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                if (validTypes == null || validTypes.contains(CURRENTCUBE)) type = CURRENTCUBE;
            }
            return type;
        }

        private static TokenType getNfaIndex67(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(68);
            }
            return type;
        }

        private static TokenType getNfaIndex68(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'M') || (ch == 'm')) {
                nextStates.set(69);
            }
            return type;
        }

        private static TokenType getNfaIndex69(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(70);
            }
            return type;
        }

        private static TokenType getNfaIndex70(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(71);
            }
            return type;
        }

        private static TokenType getNfaIndex71(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(72);
            }
            return type;
        }

        private static TokenType getNfaIndex72(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(73);
            }
            return type;
        }

        private static TokenType getNfaIndex73(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(74);
            }
            return type;
        }

        private static TokenType getNfaIndex74(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes == null || validTypes.contains(DIMENSION)) type = DIMENSION;
            }
            return type;
        }

        private static TokenType getNfaIndex75(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(76);
            }
            return type;
        }

        private static TokenType getNfaIndex76(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(77);
            }
            return type;
        }

        private static TokenType getNfaIndex77(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(78);
            }
            return type;
        }

        private static TokenType getNfaIndex78(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(79);
            }
            return type;
        }

        private static TokenType getNfaIndex79(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(80);
            }
            return type;
        }

        private static TokenType getNfaIndex80(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                nextStates.set(81);
            }
            return type;
        }

        private static TokenType getNfaIndex81(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(82);
            }
            return type;
        }

        private static TokenType getNfaIndex82(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(83);
            }
            return type;
        }

        private static TokenType getNfaIndex83(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(84);
            }
            return type;
        }

        private static TokenType getNfaIndex84(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'G') || (ch == 'g')) {
                nextStates.set(85);
            }
            return type;
        }

        private static TokenType getNfaIndex85(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                if (validTypes == null || validTypes.contains(DRILLTHROUGH)) type = DRILLTHROUGH;
            }
            return type;
        }

        private static TokenType getNfaIndex86(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(87);
            }
            return type;
        }

        private static TokenType getNfaIndex87(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(88);
            }
            return type;
        }

        private static TokenType getNfaIndex88(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                if (validTypes == null || validTypes.contains(ELSE)) type = ELSE;
            }
            return type;
        }

        private static TokenType getNfaIndex89(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'M') || (ch == 'm')) {
                nextStates.set(90);
            }
            return type;
        }

        private static TokenType getNfaIndex90(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'P') || (ch == 'p')) {
                nextStates.set(91);
            }
            return type;
        }

        private static TokenType getNfaIndex91(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(92);
            }
            return type;
        }

        private static TokenType getNfaIndex92(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'Y') || (ch == 'y')) {
                if (validTypes == null || validTypes.contains(EMPTY)) type = EMPTY;
            }
            return type;
        }

        private static TokenType getNfaIndex93(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(94);
            }
            return type;
        }

        private static TokenType getNfaIndex94(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'D') || (ch == 'd')) {
                if (validTypes == null || validTypes.contains(END)) type = END;
            }
            return type;
        }

        private static TokenType getNfaIndex95(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'X') || (ch == 'x')) {
                nextStates.set(96);
            }
            return type;
        }

        private static TokenType getNfaIndex96(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'P') || (ch == 'p')) {
                nextStates.set(97);
            }
            return type;
        }

        private static TokenType getNfaIndex97(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(98);
            }
            return type;
        }

        private static TokenType getNfaIndex98(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(99);
            }
            return type;
        }

        private static TokenType getNfaIndex99(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(100);
            }
            return type;
        }

        private static TokenType getNfaIndex100(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes == null || validTypes.contains(EXPLAIN)) type = EXPLAIN;
            }
            return type;
        }

        private static TokenType getNfaIndex101(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(102);
            }
            return type;
        }

        private static TokenType getNfaIndex102(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(103);
            }
            return type;
        }

        private static TokenType getNfaIndex103(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(104);
            }
            return type;
        }

        private static TokenType getNfaIndex104(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(105);
            }
            return type;
        }

        private static TokenType getNfaIndex105(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(106);
            }
            return type;
        }

        private static TokenType getNfaIndex106(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(107);
            }
            return type;
        }

        private static TokenType getNfaIndex107(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'W') || (ch == 'w')) {
                nextStates.set(108);
            }
            return type;
        }

        private static TokenType getNfaIndex108(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(109);
            }
            return type;
        }

        private static TokenType getNfaIndex109(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(110);
            }
            return type;
        }

        private static TokenType getNfaIndex110(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                if (validTypes == null || validTypes.contains(FIRSTROWSET)) type = FIRSTROWSET;
            }
            return type;
        }

        private static TokenType getNfaIndex111(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(112);
            }
            return type;
        }

        private static TokenType getNfaIndex112(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                if (validTypes == null || validTypes.contains(FOR)) type = FOR;
            }
            return type;
        }

        private static TokenType getNfaIndex113(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(114);
            }
            return type;
        }

        private static TokenType getNfaIndex114(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(115);
            }
            return type;
        }

        private static TokenType getNfaIndex115(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'M') || (ch == 'm')) {
                if (validTypes == null || validTypes.contains(FROM)) type = FROM;
            }
            return type;
        }

        private static TokenType getNfaIndex116(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes == null || validTypes.contains(IN)) type = IN;
            }
            return type;
        }

        private static TokenType getNfaIndex117(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes == null || validTypes.contains(IS)) type = IS;
            }
            return type;
        }

        private static TokenType getNfaIndex118(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(119);
            }
            return type;
        }

        private static TokenType getNfaIndex119(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(120);
            }
            return type;
        }

        private static TokenType getNfaIndex120(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(121);
            }
            return type;
        }

        private static TokenType getNfaIndex121(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                nextStates.set(122);
            }
            return type;
        }

        private static TokenType getNfaIndex122(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(123);
            }
            return type;
        }

        private static TokenType getNfaIndex123(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes == null || validTypes.contains(MATCHES)) type = MATCHES;
            }
            return type;
        }

        private static TokenType getNfaIndex124(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(125);
            }
            return type;
        }

        private static TokenType getNfaIndex125(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'X') || (ch == 'x')) {
                nextStates.set(126);
            }
            return type;
        }

        private static TokenType getNfaIndex126(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(127);
            }
            return type;
        }

        private static TokenType getNfaIndex127(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(128);
            }
            return type;
        }

        private static TokenType getNfaIndex128(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'W') || (ch == 'w')) {
                nextStates.set(129);
            }
            return type;
        }

        private static TokenType getNfaIndex129(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes == null || validTypes.contains(MAXROWS)) type = MAXROWS;
            }
            return type;
        }

        private static TokenType getNfaIndex130(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(131);
            }
            return type;
        }

        private static TokenType getNfaIndex131(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'M') || (ch == 'm')) {
                nextStates.set(132);
            }
            return type;
        }

        private static TokenType getNfaIndex132(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'B') || (ch == 'b')) {
                nextStates.set(133);
            }
            return type;
        }

        private static TokenType getNfaIndex133(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(134);
            }
            return type;
        }

        private static TokenType getNfaIndex134(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                if (validTypes == null || validTypes.contains(MEMBER)) type = MEMBER;
            }
            return type;
        }

        private static TokenType getNfaIndex135(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(136);
            }
            return type;
        }

        private static TokenType getNfaIndex136(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(137);
            }
            return type;
        }

        private static TokenType getNfaIndex137(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(138);
            }
            return type;
        }

        private static TokenType getNfaIndex138(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(139);
            }
            return type;
        }

        private static TokenType getNfaIndex139(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(140);
            }
            return type;
        }

        private static TokenType getNfaIndex140(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                if (validTypes == null || validTypes.contains(MEASURE)) type = MEASURE;
            }
            return type;
        }

        private static TokenType getNfaIndex141(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(142);
            }
            return type;
        }

        private static TokenType getNfaIndex142(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes == null || validTypes.contains(NON)) type = NON;
            }
            return type;
        }

        private static TokenType getNfaIndex143(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(144);
            }
            return type;
        }

        private static TokenType getNfaIndex144(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                if (validTypes == null || validTypes.contains(NOT)) type = NOT;
            }
            return type;
        }

        private static TokenType getNfaIndex145(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(146);
            }
            return type;
        }

        private static TokenType getNfaIndex146(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(147);
            }
            return type;
        }

        private static TokenType getNfaIndex147(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                if (validTypes == null || validTypes.contains(NULL)) type = NULL;
            }
            return type;
        }

        private static TokenType getNfaIndex148(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes == null || validTypes.contains(ON)) type = ON;
            }
            return type;
        }

        private static TokenType getNfaIndex149(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                if (validTypes == null || validTypes.contains(OR)) type = OR;
            }
            return type;
        }

        private static TokenType getNfaIndex150(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(151);
            }
            return type;
        }

        private static TokenType getNfaIndex151(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'G') || (ch == 'g')) {
                nextStates.set(152);
            }
            return type;
        }

        private static TokenType getNfaIndex152(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(153);
            }
            return type;
        }

        private static TokenType getNfaIndex153(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes == null || validTypes.contains(PAGES)) type = PAGES;
            }
            return type;
        }

        private static TokenType getNfaIndex154(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(155);
            }
            return type;
        }

        private static TokenType getNfaIndex155(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(156);
            }
            return type;
        }

        private static TokenType getNfaIndex156(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes == null || validTypes.contains(PLAN)) type = PLAN;
            }
            return type;
        }

        private static TokenType getNfaIndex157(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(158);
            }
            return type;
        }

        private static TokenType getNfaIndex158(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(159);
            }
            return type;
        }

        private static TokenType getNfaIndex159(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'P') || (ch == 'p')) {
                nextStates.set(160);
            }
            return type;
        }

        private static TokenType getNfaIndex160(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(161);
            }
            return type;
        }

        private static TokenType getNfaIndex161(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(162);
            }
            return type;
        }

        private static TokenType getNfaIndex162(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(163);
            }
            return type;
        }

        private static TokenType getNfaIndex163(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(164);
            }
            return type;
        }

        private static TokenType getNfaIndex164(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(165);
            }
            return type;
        }

        private static TokenType getNfaIndex165(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes == null || validTypes.contains(PROPERTIES)) type = PROPERTIES;
            }
            return type;
        }

        private static TokenType getNfaIndex166(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(167);
            }
            return type;
        }

        private static TokenType getNfaIndex167(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'F') || (ch == 'f')) {
                nextStates.set(168);
            }
            return type;
        }

        private static TokenType getNfaIndex168(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(169);
            }
            return type;
        }

        private static TokenType getNfaIndex169(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(170);
            }
            return type;
        }

        private static TokenType getNfaIndex170(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(171);
            }
            return type;
        }

        private static TokenType getNfaIndex171(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                if (validTypes == null || validTypes.contains(REFRESH)) type = REFRESH;
            }
            return type;
        }

        private static TokenType getNfaIndex172(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(173);
            }
            return type;
        }

        private static TokenType getNfaIndex173(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(174);
            }
            return type;
        }

        private static TokenType getNfaIndex174(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(175);
            }
            return type;
        }

        private static TokenType getNfaIndex175(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(176);
            }
            return type;
        }

        private static TokenType getNfaIndex176(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes == null || validTypes.contains(RETURN)) type = RETURN;
            }
            return type;
        }

        private static TokenType getNfaIndex177(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(178);
            }
            return type;
        }

        private static TokenType getNfaIndex178(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(179);
            }
            return type;
        }

        private static TokenType getNfaIndex179(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(180);
            }
            return type;
        }

        private static TokenType getNfaIndex180(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'B') || (ch == 'b')) {
                nextStates.set(181);
            }
            return type;
        }

        private static TokenType getNfaIndex181(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(182);
            }
            return type;
        }

        private static TokenType getNfaIndex182(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(183);
            }
            return type;
        }

        private static TokenType getNfaIndex183(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'K') || (ch == 'k')) {
                if (validTypes == null || validTypes.contains(ROLLBACK)) type = ROLLBACK;
            }
            return type;
        }

        private static TokenType getNfaIndex184(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(185);
            }
            return type;
        }

        private static TokenType getNfaIndex185(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'W') || (ch == 'w')) {
                nextStates.set(186);
            }
            return type;
        }

        private static TokenType getNfaIndex186(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes == null || validTypes.contains(ROWS)) type = ROWS;
            }
            return type;
        }

        private static TokenType getNfaIndex187(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(188);
            }
            return type;
        }

        private static TokenType getNfaIndex188(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(189);
            }
            return type;
        }

        private static TokenType getNfaIndex189(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(190);
            }
            return type;
        }

        private static TokenType getNfaIndex190(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(191);
            }
            return type;
        }

        private static TokenType getNfaIndex191(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(192);
            }
            return type;
        }

        private static TokenType getNfaIndex192(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(193);
            }
            return type;
        }

        private static TokenType getNfaIndex193(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes == null || validTypes.contains(SECTIONS)) type = SECTIONS;
            }
            return type;
        }

        private static TokenType getNfaIndex194(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(195);
            }
            return type;
        }

        private static TokenType getNfaIndex195(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(196);
            }
            return type;
        }

        private static TokenType getNfaIndex196(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(197);
            }
            return type;
        }

        private static TokenType getNfaIndex197(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(198);
            }
            return type;
        }

        private static TokenType getNfaIndex198(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                if (validTypes == null || validTypes.contains(SELECT)) type = SELECT;
            }
            return type;
        }

        private static TokenType getNfaIndex199(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(200);
            }
            return type;
        }

        private static TokenType getNfaIndex200(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(201);
            }
            return type;
        }

        private static TokenType getNfaIndex201(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(202);
            }
            return type;
        }

        private static TokenType getNfaIndex202(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(203);
            }
            return type;
        }

        private static TokenType getNfaIndex203(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(204);
            }
            return type;
        }

        private static TokenType getNfaIndex204(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes == null || validTypes.contains(SESSION)) type = SESSION;
            }
            return type;
        }

        private static TokenType getNfaIndex205(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(206);
            }
            return type;
        }

        private static TokenType getNfaIndex206(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                if (validTypes == null || validTypes.contains(SET)) type = SET;
            }
            return type;
        }

        private static TokenType getNfaIndex207(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                nextStates.set(208);
            }
            return type;
        }

        private static TokenType getNfaIndex208(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(209);
            }
            return type;
        }

        private static TokenType getNfaIndex209(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes == null || validTypes.contains(THEN)) type = THEN;
            }
            return type;
        }

        private static TokenType getNfaIndex210(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(211);
            }
            return type;
        }

        private static TokenType getNfaIndex211(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(212);
            }
            return type;
        }

        private static TokenType getNfaIndex212(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes == null || validTypes.contains(TRAN)) type = TRAN;
            }
            return type;
        }

        private static TokenType getNfaIndex213(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(214);
            }
            return type;
        }

        private static TokenType getNfaIndex214(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(215);
            }
            return type;
        }

        private static TokenType getNfaIndex215(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(216);
            }
            return type;
        }

        private static TokenType getNfaIndex216(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(217);
            }
            return type;
        }

        private static TokenType getNfaIndex217(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(218);
            }
            return type;
        }

        private static TokenType getNfaIndex218(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(219);
            }
            return type;
        }

        private static TokenType getNfaIndex219(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(220);
            }
            return type;
        }

        private static TokenType getNfaIndex220(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(221);
            }
            return type;
        }

        private static TokenType getNfaIndex221(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(222);
            }
            return type;
        }

        private static TokenType getNfaIndex222(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes == null || validTypes.contains(TRANSACTION)) type = TRANSACTION;
            }
            return type;
        }

        private static TokenType getNfaIndex223(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'P') || (ch == 'p')) {
                nextStates.set(224);
            }
            return type;
        }

        private static TokenType getNfaIndex224(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'D') || (ch == 'd')) {
                nextStates.set(225);
            }
            return type;
        }

        private static TokenType getNfaIndex225(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(226);
            }
            return type;
        }

        private static TokenType getNfaIndex226(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(227);
            }
            return type;
        }

        private static TokenType getNfaIndex227(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                if (validTypes == null || validTypes.contains(UPDATE)) type = UPDATE;
            }
            return type;
        }

        private static TokenType getNfaIndex228(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(229);
            }
            return type;
        }

        private static TokenType getNfaIndex229(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(230);
            }
            return type;
        }

        private static TokenType getNfaIndex230(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '_') {
                nextStates.set(231);
            }
            return type;
        }

        private static TokenType getNfaIndex231(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(232);
            }
            return type;
        }

        private static TokenType getNfaIndex232(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'Q') || (ch == 'q')) {
                nextStates.set(233);
            }
            return type;
        }

        private static TokenType getNfaIndex233(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(234);
            }
            return type;
        }

        private static TokenType getNfaIndex234(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(235);
            }
            return type;
        }

        private static TokenType getNfaIndex235(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(236);
            }
            return type;
        }

        private static TokenType getNfaIndex236(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '_') {
                nextStates.set(237);
            }
            return type;
        }

        private static TokenType getNfaIndex237(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(238);
            }
            return type;
        }

        private static TokenType getNfaIndex238(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(239);
            }
            return type;
        }

        private static TokenType getNfaIndex239(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(240);
            }
            return type;
        }

        private static TokenType getNfaIndex240(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(241);
            }
            return type;
        }

        private static TokenType getNfaIndex241(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(242);
            }
            return type;
        }

        private static TokenType getNfaIndex242(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(243);
            }
            return type;
        }

        private static TokenType getNfaIndex243(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(244);
            }
            return type;
        }

        private static TokenType getNfaIndex244(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(245);
            }
            return type;
        }

        private static TokenType getNfaIndex245(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(246);
            }
            return type;
        }

        private static TokenType getNfaIndex246(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes == null || validTypes.contains(USE_EQUAL_ALLOCATION)) type = USE_EQUAL_ALLOCATION;
            }
            return type;
        }

        private static TokenType getNfaIndex247(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(248);
            }
            return type;
        }

        private static TokenType getNfaIndex248(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(249);
            }
            return type;
        }

        private static TokenType getNfaIndex249(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '_') {
                nextStates.set(250);
            }
            return type;
        }

        private static TokenType getNfaIndex250(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(251);
            }
            return type;
        }

        private static TokenType getNfaIndex251(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'Q') || (ch == 'q')) {
                nextStates.set(252);
            }
            return type;
        }

        private static TokenType getNfaIndex252(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(253);
            }
            return type;
        }

        private static TokenType getNfaIndex253(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(254);
            }
            return type;
        }

        private static TokenType getNfaIndex254(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(255);
            }
            return type;
        }

        private static TokenType getNfaIndex255(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '_') {
                nextStates.set(256);
            }
            return type;
        }

        private static TokenType getNfaIndex256(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(257);
            }
            return type;
        }

        private static TokenType getNfaIndex257(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(258);
            }
            return type;
        }

        private static TokenType getNfaIndex258(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(259);
            }
            return type;
        }

        private static TokenType getNfaIndex259(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(260);
            }
            return type;
        }

        private static TokenType getNfaIndex260(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(261);
            }
            return type;
        }

        private static TokenType getNfaIndex261(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'M') || (ch == 'm')) {
                nextStates.set(262);
            }
            return type;
        }

        private static TokenType getNfaIndex262(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(263);
            }
            return type;
        }

        private static TokenType getNfaIndex263(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(264);
            }
            return type;
        }

        private static TokenType getNfaIndex264(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                if (validTypes == null || validTypes.contains(USE_EQUAL_INCREMENT)) type = USE_EQUAL_INCREMENT;
            }
            return type;
        }

        private static TokenType getNfaIndex265(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(266);
            }
            return type;
        }

        private static TokenType getNfaIndex266(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(267);
            }
            return type;
        }

        private static TokenType getNfaIndex267(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '_') {
                nextStates.set(268);
            }
            return type;
        }

        private static TokenType getNfaIndex268(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'W') || (ch == 'w')) {
                nextStates.set(269);
            }
            return type;
        }

        private static TokenType getNfaIndex269(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(270);
            }
            return type;
        }

        private static TokenType getNfaIndex270(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(271);
            }
            return type;
        }

        private static TokenType getNfaIndex271(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'G') || (ch == 'g')) {
                nextStates.set(272);
            }
            return type;
        }

        private static TokenType getNfaIndex272(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                nextStates.set(273);
            }
            return type;
        }

        private static TokenType getNfaIndex273(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(274);
            }
            return type;
        }

        private static TokenType getNfaIndex274(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(275);
            }
            return type;
        }

        private static TokenType getNfaIndex275(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'D') || (ch == 'd')) {
                nextStates.set(276);
            }
            return type;
        }

        private static TokenType getNfaIndex276(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '_') {
                nextStates.set(277);
            }
            return type;
        }

        private static TokenType getNfaIndex277(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(278);
            }
            return type;
        }

        private static TokenType getNfaIndex278(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(279);
            }
            return type;
        }

        private static TokenType getNfaIndex279(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(280);
            }
            return type;
        }

        private static TokenType getNfaIndex280(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(281);
            }
            return type;
        }

        private static TokenType getNfaIndex281(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(282);
            }
            return type;
        }

        private static TokenType getNfaIndex282(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(283);
            }
            return type;
        }

        private static TokenType getNfaIndex283(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(284);
            }
            return type;
        }

        private static TokenType getNfaIndex284(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(285);
            }
            return type;
        }

        private static TokenType getNfaIndex285(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(286);
            }
            return type;
        }

        private static TokenType getNfaIndex286(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes == null || validTypes.contains(USE_WEIGHTED_ALLOCATION)) type = USE_WEIGHTED_ALLOCATION;
            }
            return type;
        }

        private static TokenType getNfaIndex287(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(288);
            }
            return type;
        }

        private static TokenType getNfaIndex288(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(289);
            }
            return type;
        }

        private static TokenType getNfaIndex289(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '_') {
                nextStates.set(290);
            }
            return type;
        }

        private static TokenType getNfaIndex290(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'W') || (ch == 'w')) {
                nextStates.set(291);
            }
            return type;
        }

        private static TokenType getNfaIndex291(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(292);
            }
            return type;
        }

        private static TokenType getNfaIndex292(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(293);
            }
            return type;
        }

        private static TokenType getNfaIndex293(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'G') || (ch == 'g')) {
                nextStates.set(294);
            }
            return type;
        }

        private static TokenType getNfaIndex294(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                nextStates.set(295);
            }
            return type;
        }

        private static TokenType getNfaIndex295(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(296);
            }
            return type;
        }

        private static TokenType getNfaIndex296(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(297);
            }
            return type;
        }

        private static TokenType getNfaIndex297(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'D') || (ch == 'd')) {
                nextStates.set(298);
            }
            return type;
        }

        private static TokenType getNfaIndex298(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '_') {
                nextStates.set(299);
            }
            return type;
        }

        private static TokenType getNfaIndex299(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(300);
            }
            return type;
        }

        private static TokenType getNfaIndex300(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(301);
            }
            return type;
        }

        private static TokenType getNfaIndex301(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(302);
            }
            return type;
        }

        private static TokenType getNfaIndex302(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(303);
            }
            return type;
        }

        private static TokenType getNfaIndex303(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(304);
            }
            return type;
        }

        private static TokenType getNfaIndex304(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'M') || (ch == 'm')) {
                nextStates.set(305);
            }
            return type;
        }

        private static TokenType getNfaIndex305(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(306);
            }
            return type;
        }

        private static TokenType getNfaIndex306(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(307);
            }
            return type;
        }

        private static TokenType getNfaIndex307(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                if (validTypes == null || validTypes.contains(USE_WEIGHTED_INCREMENT)) type = USE_WEIGHTED_INCREMENT;
            }
            return type;
        }

        private static TokenType getNfaIndex308(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                nextStates.set(309);
            }
            return type;
        }

        private static TokenType getNfaIndex309(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(310);
            }
            return type;
        }

        private static TokenType getNfaIndex310(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes == null || validTypes.contains(WHEN)) type = WHEN;
            }
            return type;
        }

        private static TokenType getNfaIndex311(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                nextStates.set(312);
            }
            return type;
        }

        private static TokenType getNfaIndex312(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(313);
            }
            return type;
        }

        private static TokenType getNfaIndex313(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(314);
            }
            return type;
        }

        private static TokenType getNfaIndex314(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                if (validTypes == null || validTypes.contains(WHERE)) type = WHERE;
            }
            return type;
        }

        private static TokenType getNfaIndex315(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(316);
            }
            return type;
        }

        private static TokenType getNfaIndex316(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                if (validTypes == null || validTypes.contains(XOR)) type = XOR;
            }
            return type;
        }

        private static TokenType getNfaIndex317(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(318);
            }
            return type;
        }

        private static TokenType getNfaIndex318(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(319);
            }
            return type;
        }

        private static TokenType getNfaIndex319(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                if (validTypes == null || validTypes.contains(WITH)) type = WITH;
            }
            return type;
        }

        private static TokenType getNfaIndex320(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'X') || (ch == 'x')) {
                nextStates.set(321);
            }
            return type;
        }

        private static TokenType getNfaIndex321(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(322);
            }
            return type;
        }

        private static TokenType getNfaIndex322(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(323);
            }
            return type;
        }

        private static TokenType getNfaIndex323(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(324);
            }
            return type;
        }

        private static TokenType getNfaIndex324(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(325);
            }
            return type;
        }

        private static TokenType getNfaIndex325(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(326);
            }
            return type;
        }

        private static TokenType getNfaIndex326(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'G') || (ch == 'g')) {
                if (validTypes == null || validTypes.contains(EXISTING)) type = EXISTING;
            }
            return type;
        }

        private static TokenType getNfaIndex327(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(328);
            }
            return type;
        }

        private static TokenType getNfaIndex328(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'Y') || (ch == 'y')) {
                nextStates.set(329);
            }
            return type;
        }

        private static TokenType getNfaIndex329(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(330);
            }
            return type;
        }

        private static TokenType getNfaIndex330(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(331);
            }
            return type;
        }

        private static TokenType getNfaIndex331(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(332);
            }
            return type;
        }

        private static TokenType getNfaIndex332(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'M') || (ch == 'm')) {
                if (validTypes == null || validTypes.contains(SYSTEM_CUBE)) type = SYSTEM_CUBE;
            }
            return type;
        }

        private static TokenType getNfaIndex333(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '/') {
                if (validTypes == null || validTypes.contains(_TOKEN_66)) type = _TOKEN_66;
            }
            return type;
        }

        private static TokenType getNfaIndex334(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '-') {
                if (validTypes == null || validTypes.contains(_TOKEN_68)) type = _TOKEN_68;
            }
            return type;
        }

        private static TokenType getNfaIndex335(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '*') {
                if (validTypes == null || validTypes.contains(_TOKEN_69)) type = _TOKEN_69;
            }
            return type;
        }

        private static TokenType getNfaIndex336(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '|') {
                if (validTypes == null || validTypes.contains(CONCAT)) type = CONCAT;
            }
            return type;
        }

        private static TokenType getNfaIndex337(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '=') {
                if (validTypes == null || validTypes.contains(GE)) type = GE;
            }
            return type;
        }

        private static TokenType getNfaIndex338(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '=') {
                if (validTypes == null || validTypes.contains(LE)) type = LE;
            }
            return type;
        }

        private static TokenType getNfaIndex339(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '>') {
                if (validTypes == null || validTypes.contains(NE)) type = NE;
            }
            return type;
        }

        private static TokenType getNfaIndex340(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '*') {
                nextStates.set(341);
            }
            return type;
        }

        private static TokenType getNfaIndex341(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '*') {
                nextStates.set(342);
            }
            return type;
        }

        private static TokenType getNfaIndex342(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch >= 0x0 && ch <= '.') || (ch >= '0')) {
                if (validTypes == null || validTypes.contains(_TOKEN_67)) type = _TOKEN_67;
            }
            return type;
        }

        private static TokenType getNfaIndex343(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (((ch == '$') || ((ch >= 'A' && ch <= 'Z') || ((ch == '_') || (ch >= 'a' && ch <= 'z')))) || (ch >= 128 && checkIntervals(NFA_MOVES_435, ch))) {
                nextStates.set(343);
                if (validTypes == null || validTypes.contains(ID)) type = ID;
            }
            if ((ch >= '0' && ch <= '9') || (ch >= 128 && checkIntervals(NFA_MOVES_436, ch))) {
                nextStates.set(343);
                if (validTypes == null || validTypes.contains(ID)) type = ID;
            }
            return type;
        }

        private static TokenType getNfaIndex344(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch >= 0x0 && ch <= '\t') || ((ch == 0xb || ch == '\f') || ((ch >= 0xe && ch <= '\\') || (ch >= '^')))) {
                nextStates.set(344);
            } else if (ch == ']') {
                nextStates.set(345);
                if (validTypes == null || validTypes.contains(QUOTED_ID)) type = QUOTED_ID;
            }
            return type;
        }

        private static TokenType getNfaIndex345(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == ']') {
                nextStates.set(344);
            }
            return type;
        }

        private static TokenType getNfaIndex346(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '[') {
                nextStates.set(347);
            }
            return type;
        }

        private static TokenType getNfaIndex347(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch >= 0x0 && ch <= '\t') || ((ch == 0xb || ch == '\f') || ((ch >= 0xe && ch <= '\\') || (ch >= '^')))) {
                nextStates.set(347);
            } else if (ch == ']') {
                nextStates.set(348);
                if (validTypes == null || validTypes.contains(AMP_QUOTED_ID)) type = AMP_QUOTED_ID;
            }
            return type;
        }

        private static TokenType getNfaIndex348(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == ']') {
                nextStates.set(347);
            }
            return type;
        }

        private static TokenType getNfaIndex349(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z')) {
                nextStates.set(350);
                if (validTypes == null || validTypes.contains(AMP_UNQUOTED_ID)) type = AMP_UNQUOTED_ID;
            }
            return type;
        }

        private static TokenType getNfaIndex350(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (((ch == '$') || ((ch >= 'A' && ch <= 'Z') || ((ch == '_') || (ch >= 'a' && ch <= 'z')))) || (ch >= 128 && checkIntervals(NFA_MOVES_450, ch))) {
                nextStates.set(350);
                if (validTypes == null || validTypes.contains(AMP_UNQUOTED_ID)) type = AMP_UNQUOTED_ID;
            }
            if ((ch >= '0' && ch <= '9') || (ch >= 128 && checkIntervals(NFA_MOVES_451, ch))) {
                nextStates.set(350);
                if (validTypes == null || validTypes.contains(AMP_UNQUOTED_ID)) type = AMP_UNQUOTED_ID;
            }
            return type;
        }

        private static TokenType getNfaIndex351(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(351);
                if (validTypes == null || validTypes.contains(UNSIGNED_INTEGER_LITERAL)) type = UNSIGNED_INTEGER_LITERAL;
            }
            return type;
        }

        private static TokenType getNfaIndex352(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(352);
            } else if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(353);
            }
            return type;
        }

        private static TokenType getNfaIndex353(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == '+') || (ch == '-')) {
                nextStates.set(354);
            } else if (ch >= '0' && ch <= '9') {
                nextStates.set(354);
                if (validTypes == null || validTypes.contains(APPROX_NUMERIC_LITERAL)) type = APPROX_NUMERIC_LITERAL;
            }
            return type;
        }

        private static TokenType getNfaIndex354(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(354);
                if (validTypes == null || validTypes.contains(APPROX_NUMERIC_LITERAL)) type = APPROX_NUMERIC_LITERAL;
            }
            return type;
        }

        private static TokenType getNfaIndex355(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '.') {
                nextStates.set(356);
            } else if (ch >= '0' && ch <= '9') {
                nextStates.set(355);
                nextStates.set(356);
            } else if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(353);
            }
            return type;
        }

        private static TokenType getNfaIndex356(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(356);
            } else if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(353);
            }
            return type;
        }

        private static TokenType getNfaIndex357(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(358);
            }
            return type;
        }

        private static TokenType getNfaIndex358(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(358);
            } else if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(353);
            }
            return type;
        }

        private static TokenType getNfaIndex359(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '.') {
                nextStates.set(360);
                if (validTypes == null || validTypes.contains(DECIMAL_NUMERIC_LITERAL)) type = DECIMAL_NUMERIC_LITERAL;
            } else if (ch >= '0' && ch <= '9') {
                nextStates.set(359);
                nextStates.set(360);
                if (validTypes == null || validTypes.contains(DECIMAL_NUMERIC_LITERAL)) type = DECIMAL_NUMERIC_LITERAL;
            }
            return type;
        }

        private static TokenType getNfaIndex360(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(360);
                if (validTypes == null || validTypes.contains(DECIMAL_NUMERIC_LITERAL)) type = DECIMAL_NUMERIC_LITERAL;
            }
            return type;
        }

        private static TokenType getNfaIndex361(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(361);
                if (validTypes == null || validTypes.contains(DECIMAL_NUMERIC_LITERAL)) type = DECIMAL_NUMERIC_LITERAL;
            }
            return type;
        }

        private static TokenType getNfaIndex362(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(362);
            } else if (ch == '.') {
                nextStates.set(363);
                if (validTypes == null || validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        private static TokenType getNfaIndex363(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(364);
            } else if (ch >= '0' && ch <= '9') {
                nextStates.set(363);
                if (validTypes == null || validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            } else if ((ch == 'D') || ((ch == 'F') || ((ch == 'd') || (ch == 'f')))) {
                if (validTypes == null || validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        private static TokenType getNfaIndex364(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == '+') || (ch == '-')) {
                nextStates.set(365);
            } else if (ch >= '0' && ch <= '9') {
                nextStates.set(366);
                if (validTypes == null || validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        private static TokenType getNfaIndex365(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(366);
                if (validTypes == null || validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        private static TokenType getNfaIndex366(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(366);
                if (validTypes == null || validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            } else if ((ch == 'D') || ((ch == 'F') || ((ch == 'd') || (ch == 'f')))) {
                if (validTypes == null || validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        private static TokenType getNfaIndex367(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(368);
                if (validTypes == null || validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        private static TokenType getNfaIndex368(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(369);
            } else if (ch >= '0' && ch <= '9') {
                nextStates.set(368);
                if (validTypes == null || validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            } else if ((ch == 'D') || ((ch == 'F') || ((ch == 'd') || (ch == 'f')))) {
                if (validTypes == null || validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        private static TokenType getNfaIndex369(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == '+') || (ch == '-')) {
                nextStates.set(370);
            } else if (ch >= '0' && ch <= '9') {
                nextStates.set(371);
                if (validTypes == null || validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        private static TokenType getNfaIndex370(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(371);
                if (validTypes == null || validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        private static TokenType getNfaIndex371(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(371);
                if (validTypes == null || validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            } else if ((ch == 'D') || ((ch == 'F') || ((ch == 'd') || (ch == 'f')))) {
                if (validTypes == null || validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        private static TokenType getNfaIndex372(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(372);
            } else if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(373);
            }
            return type;
        }

        private static TokenType getNfaIndex373(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == '+') || (ch == '-')) {
                nextStates.set(374);
            } else if (ch >= '0' && ch <= '9') {
                nextStates.set(375);
                if (validTypes == null || validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        private static TokenType getNfaIndex374(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(375);
                if (validTypes == null || validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        private static TokenType getNfaIndex375(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(375);
                if (validTypes == null || validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            } else if ((ch == 'D') || ((ch == 'F') || ((ch == 'd') || (ch == 'f')))) {
                if (validTypes == null || validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        private static TokenType getNfaIndex376(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(376);
            } else if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(377);
            } else if ((ch == 'D') || ((ch == 'F') || ((ch == 'd') || (ch == 'f')))) {
                if (validTypes == null || validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        private static TokenType getNfaIndex377(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == '+') || (ch == '-')) {
                nextStates.set(378);
            } else if (ch >= '0' && ch <= '9') {
                nextStates.set(379);
            }
            return type;
        }

        private static TokenType getNfaIndex378(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(379);
            }
            return type;
        }

        private static TokenType getNfaIndex379(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(379);
            } else if ((ch == 'D') || ((ch == 'F') || ((ch == 'd') || (ch == 'f')))) {
                if (validTypes == null || validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        private static TokenType getNfaIndex380(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch >= 0x0 && ch <= '&') || (ch >= '(')) {
                nextStates.set(380);
            } else if (ch == '\'') {
                nextStates.set(381);
                if (validTypes == null || validTypes.contains(SINGLE_QUOTED_STRING)) type = SINGLE_QUOTED_STRING;
            }
            return type;
        }

        private static TokenType getNfaIndex381(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '\'') {
                nextStates.set(380);
            }
            return type;
        }

        private static TokenType getNfaIndex382(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch >= 0x0 && ch <= '!') || (ch >= '#')) {
                nextStates.set(382);
            } else if (ch == '"') {
                nextStates.set(383);
                if (validTypes == null || validTypes.contains(DOUBLE_QUOTED_STRING)) type = DOUBLE_QUOTED_STRING;
            }
            return type;
        }

        private static TokenType getNfaIndex383(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '"') {
                nextStates.set(382);
            }
            return type;
        }

        private static int[] NFA_MOVES_434 = NFA_MOVES_434_init();

        private static int[] NFA_MOVES_434_init() {
            return new int[] {'$', '$', 'A', 'Z', '_', '_', 'a', 'z', 0xc0, 0xd6,
            0xd8, 0xf6, 0xf8, 0x1fff, 0x2c62, 0x2c66, 0x2c6d, 0x2c70, 0x2c7e, 0x2c7f,
            0x2d00, 0x2d25, 0x2d27, 0x2d27, 0x2d2d, 0x2d2d, 0x3040, 0x318f, 0x3300,
            0x337f, 0x3400, 0x3d2d, 0x4e00, 0x9fff, 0xa64a, 0xa64a, 0xa77d, 0xa77d,
            0xa78d, 0xa78d, 0xa7aa, 0xa7ae, 0xa7b0, 0xa7b2, 0xa7c5, 0xa7c6, 0xab70,
            0xabbf, 0xf900, 0xfaff};
        }

        private static int[] NFA_MOVES_435 = NFA_MOVES_435_init();

        private static int[] NFA_MOVES_435_init() {
            return new int[] {'$', '$', 'A', 'Z', '_', '_', 'a', 'z', 0xc0, 0xd6,
            0xd8, 0xf6, 0xf8, 0x1fff, 0x2c62, 0x2c66, 0x2c6d, 0x2c70, 0x2c7e, 0x2c7f,
            0x2d00, 0x2d25, 0x2d27, 0x2d27, 0x2d2d, 0x2d2d, 0x3040, 0x318f, 0x3300,
            0x337f, 0x3400, 0x3d2d, 0x4e00, 0x9fff, 0xa64a, 0xa64a, 0xa77d, 0xa77d,
            0xa78d, 0xa78d, 0xa7aa, 0xa7ae, 0xa7b0, 0xa7b2, 0xa7c5, 0xa7c6, 0xab70,
            0xabbf, 0xf900, 0xfaff};
        }

        private static int[] NFA_MOVES_436 = NFA_MOVES_436_init();

        private static int[] NFA_MOVES_436_init() {
            return new int[] {'0', '9', 0x660, 0x669, 0x6f0, 0x6f9, 0x966, 0x96f,
            0x9e6, 0x9ef, 0xa66, 0xa6f, 0xae6, 0xaef, 0xb66, 0xb6f, 0xbe7, 0xbef,
            0xc66, 0xc6f, 0xce6, 0xcef, 0xd66, 0xd6f, 0xe50, 0xe59, 0xed0, 0xed9,
            0x1040, 0x1049};
        }

        private static int[] NFA_MOVES_450 = NFA_MOVES_450_init();

        private static int[] NFA_MOVES_450_init() {
            return new int[] {'$', '$', 'A', 'Z', '_', '_', 'a', 'z', 0xc0, 0xd6,
            0xd8, 0xf6, 0xf8, 0x1fff, 0x2c62, 0x2c66, 0x2c6d, 0x2c70, 0x2c7e, 0x2c7f,
            0x2d00, 0x2d25, 0x2d27, 0x2d27, 0x2d2d, 0x2d2d, 0x3040, 0x318f, 0x3300,
            0x337f, 0x3400, 0x3d2d, 0x4e00, 0x9fff, 0xa64a, 0xa64a, 0xa77d, 0xa77d,
            0xa78d, 0xa78d, 0xa7aa, 0xa7ae, 0xa7b0, 0xa7b2, 0xa7c5, 0xa7c6, 0xab70,
            0xabbf, 0xf900, 0xfaff};
        }

        private static int[] NFA_MOVES_451 = NFA_MOVES_451_init();

        private static int[] NFA_MOVES_451_init() {
            return new int[] {'0', '9', 0x660, 0x669, 0x6f0, 0x6f9, 0x966, 0x96f,
            0x9e6, 0x9ef, 0xa66, 0xa6f, 0xae6, 0xaef, 0xb66, 0xb6f, 0xbe7, 0xbef,
            0xc66, 0xc6f, 0xce6, 0xcef, 0xd66, 0xd6f, 0xe50, 0xe59, 0xed0, 0xed9,
            0x1040, 0x1049};
        }

        private static void NFA_FUNCTIONS_init() {
            NfaFunction[] functions = new NfaFunction[] {DEFAULT::getNfaIndex0, DEFAULT::getNfaIndex1,
            DEFAULT::getNfaIndex2, DEFAULT::getNfaIndex3, DEFAULT::getNfaIndex4, DEFAULT::getNfaIndex5,
            DEFAULT::getNfaIndex6, DEFAULT::getNfaIndex7, DEFAULT::getNfaIndex8, DEFAULT::getNfaIndex9,
            DEFAULT::getNfaIndex10, DEFAULT::getNfaIndex11, DEFAULT::getNfaIndex12,
            DEFAULT::getNfaIndex13, DEFAULT::getNfaIndex14, DEFAULT::getNfaIndex15,
            DEFAULT::getNfaIndex16, DEFAULT::getNfaIndex17, DEFAULT::getNfaIndex18,
            DEFAULT::getNfaIndex19, DEFAULT::getNfaIndex20, DEFAULT::getNfaIndex21,
            DEFAULT::getNfaIndex22, DEFAULT::getNfaIndex23, DEFAULT::getNfaIndex24,
            DEFAULT::getNfaIndex25, DEFAULT::getNfaIndex26, DEFAULT::getNfaIndex27,
            DEFAULT::getNfaIndex28, DEFAULT::getNfaIndex29, DEFAULT::getNfaIndex30,
            DEFAULT::getNfaIndex31, DEFAULT::getNfaIndex32, DEFAULT::getNfaIndex33,
            DEFAULT::getNfaIndex34, DEFAULT::getNfaIndex35, DEFAULT::getNfaIndex36,
            DEFAULT::getNfaIndex37, DEFAULT::getNfaIndex38, DEFAULT::getNfaIndex39,
            DEFAULT::getNfaIndex40, DEFAULT::getNfaIndex41, DEFAULT::getNfaIndex42,
            DEFAULT::getNfaIndex43, DEFAULT::getNfaIndex44, DEFAULT::getNfaIndex45,
            DEFAULT::getNfaIndex46, DEFAULT::getNfaIndex47, DEFAULT::getNfaIndex48,
            DEFAULT::getNfaIndex49, DEFAULT::getNfaIndex50, DEFAULT::getNfaIndex51,
            DEFAULT::getNfaIndex52, DEFAULT::getNfaIndex53, DEFAULT::getNfaIndex54,
            DEFAULT::getNfaIndex55, DEFAULT::getNfaIndex56, DEFAULT::getNfaIndex57,
            DEFAULT::getNfaIndex58, DEFAULT::getNfaIndex59, DEFAULT::getNfaIndex60,
            DEFAULT::getNfaIndex61, DEFAULT::getNfaIndex62, DEFAULT::getNfaIndex63,
            DEFAULT::getNfaIndex64, DEFAULT::getNfaIndex65, DEFAULT::getNfaIndex66,
            DEFAULT::getNfaIndex67, DEFAULT::getNfaIndex68, DEFAULT::getNfaIndex69,
            DEFAULT::getNfaIndex70, DEFAULT::getNfaIndex71, DEFAULT::getNfaIndex72,
            DEFAULT::getNfaIndex73, DEFAULT::getNfaIndex74, DEFAULT::getNfaIndex75,
            DEFAULT::getNfaIndex76, DEFAULT::getNfaIndex77, DEFAULT::getNfaIndex78,
            DEFAULT::getNfaIndex79, DEFAULT::getNfaIndex80, DEFAULT::getNfaIndex81,
            DEFAULT::getNfaIndex82, DEFAULT::getNfaIndex83, DEFAULT::getNfaIndex84,
            DEFAULT::getNfaIndex85, DEFAULT::getNfaIndex86, DEFAULT::getNfaIndex87,
            DEFAULT::getNfaIndex88, DEFAULT::getNfaIndex89, DEFAULT::getNfaIndex90,
            DEFAULT::getNfaIndex91, DEFAULT::getNfaIndex92, DEFAULT::getNfaIndex93,
            DEFAULT::getNfaIndex94, DEFAULT::getNfaIndex95, DEFAULT::getNfaIndex96,
            DEFAULT::getNfaIndex97, DEFAULT::getNfaIndex98, DEFAULT::getNfaIndex99,
            DEFAULT::getNfaIndex100, DEFAULT::getNfaIndex101, DEFAULT::getNfaIndex102,
            DEFAULT::getNfaIndex103, DEFAULT::getNfaIndex104, DEFAULT::getNfaIndex105,
            DEFAULT::getNfaIndex106, DEFAULT::getNfaIndex107, DEFAULT::getNfaIndex108,
            DEFAULT::getNfaIndex109, DEFAULT::getNfaIndex110, DEFAULT::getNfaIndex111,
            DEFAULT::getNfaIndex112, DEFAULT::getNfaIndex113, DEFAULT::getNfaIndex114,
            DEFAULT::getNfaIndex115, DEFAULT::getNfaIndex116, DEFAULT::getNfaIndex117,
            DEFAULT::getNfaIndex118, DEFAULT::getNfaIndex119, DEFAULT::getNfaIndex120,
            DEFAULT::getNfaIndex121, DEFAULT::getNfaIndex122, DEFAULT::getNfaIndex123,
            DEFAULT::getNfaIndex124, DEFAULT::getNfaIndex125, DEFAULT::getNfaIndex126,
            DEFAULT::getNfaIndex127, DEFAULT::getNfaIndex128, DEFAULT::getNfaIndex129,
            DEFAULT::getNfaIndex130, DEFAULT::getNfaIndex131, DEFAULT::getNfaIndex132,
            DEFAULT::getNfaIndex133, DEFAULT::getNfaIndex134, DEFAULT::getNfaIndex135,
            DEFAULT::getNfaIndex136, DEFAULT::getNfaIndex137, DEFAULT::getNfaIndex138,
            DEFAULT::getNfaIndex139, DEFAULT::getNfaIndex140, DEFAULT::getNfaIndex141,
            DEFAULT::getNfaIndex142, DEFAULT::getNfaIndex143, DEFAULT::getNfaIndex144,
            DEFAULT::getNfaIndex145, DEFAULT::getNfaIndex146, DEFAULT::getNfaIndex147,
            DEFAULT::getNfaIndex148, DEFAULT::getNfaIndex149, DEFAULT::getNfaIndex150,
            DEFAULT::getNfaIndex151, DEFAULT::getNfaIndex152, DEFAULT::getNfaIndex153,
            DEFAULT::getNfaIndex154, DEFAULT::getNfaIndex155, DEFAULT::getNfaIndex156,
            DEFAULT::getNfaIndex157, DEFAULT::getNfaIndex158, DEFAULT::getNfaIndex159,
            DEFAULT::getNfaIndex160, DEFAULT::getNfaIndex161, DEFAULT::getNfaIndex162,
            DEFAULT::getNfaIndex163, DEFAULT::getNfaIndex164, DEFAULT::getNfaIndex165,
            DEFAULT::getNfaIndex166, DEFAULT::getNfaIndex167, DEFAULT::getNfaIndex168,
            DEFAULT::getNfaIndex169, DEFAULT::getNfaIndex170, DEFAULT::getNfaIndex171,
            DEFAULT::getNfaIndex172, DEFAULT::getNfaIndex173, DEFAULT::getNfaIndex174,
            DEFAULT::getNfaIndex175, DEFAULT::getNfaIndex176, DEFAULT::getNfaIndex177,
            DEFAULT::getNfaIndex178, DEFAULT::getNfaIndex179, DEFAULT::getNfaIndex180,
            DEFAULT::getNfaIndex181, DEFAULT::getNfaIndex182, DEFAULT::getNfaIndex183,
            DEFAULT::getNfaIndex184, DEFAULT::getNfaIndex185, DEFAULT::getNfaIndex186,
            DEFAULT::getNfaIndex187, DEFAULT::getNfaIndex188, DEFAULT::getNfaIndex189,
            DEFAULT::getNfaIndex190, DEFAULT::getNfaIndex191, DEFAULT::getNfaIndex192,
            DEFAULT::getNfaIndex193, DEFAULT::getNfaIndex194, DEFAULT::getNfaIndex195,
            DEFAULT::getNfaIndex196, DEFAULT::getNfaIndex197, DEFAULT::getNfaIndex198,
            DEFAULT::getNfaIndex199, DEFAULT::getNfaIndex200, DEFAULT::getNfaIndex201,
            DEFAULT::getNfaIndex202, DEFAULT::getNfaIndex203, DEFAULT::getNfaIndex204,
            DEFAULT::getNfaIndex205, DEFAULT::getNfaIndex206, DEFAULT::getNfaIndex207,
            DEFAULT::getNfaIndex208, DEFAULT::getNfaIndex209, DEFAULT::getNfaIndex210,
            DEFAULT::getNfaIndex211, DEFAULT::getNfaIndex212, DEFAULT::getNfaIndex213,
            DEFAULT::getNfaIndex214, DEFAULT::getNfaIndex215, DEFAULT::getNfaIndex216,
            DEFAULT::getNfaIndex217, DEFAULT::getNfaIndex218, DEFAULT::getNfaIndex219,
            DEFAULT::getNfaIndex220, DEFAULT::getNfaIndex221, DEFAULT::getNfaIndex222,
            DEFAULT::getNfaIndex223, DEFAULT::getNfaIndex224, DEFAULT::getNfaIndex225,
            DEFAULT::getNfaIndex226, DEFAULT::getNfaIndex227, DEFAULT::getNfaIndex228,
            DEFAULT::getNfaIndex229, DEFAULT::getNfaIndex230, DEFAULT::getNfaIndex231,
            DEFAULT::getNfaIndex232, DEFAULT::getNfaIndex233, DEFAULT::getNfaIndex234,
            DEFAULT::getNfaIndex235, DEFAULT::getNfaIndex236, DEFAULT::getNfaIndex237,
            DEFAULT::getNfaIndex238, DEFAULT::getNfaIndex239, DEFAULT::getNfaIndex240,
            DEFAULT::getNfaIndex241, DEFAULT::getNfaIndex242, DEFAULT::getNfaIndex243,
            DEFAULT::getNfaIndex244, DEFAULT::getNfaIndex245, DEFAULT::getNfaIndex246,
            DEFAULT::getNfaIndex247, DEFAULT::getNfaIndex248, DEFAULT::getNfaIndex249,
            DEFAULT::getNfaIndex250, DEFAULT::getNfaIndex251, DEFAULT::getNfaIndex252,
            DEFAULT::getNfaIndex253, DEFAULT::getNfaIndex254, DEFAULT::getNfaIndex255,
            DEFAULT::getNfaIndex256, DEFAULT::getNfaIndex257, DEFAULT::getNfaIndex258,
            DEFAULT::getNfaIndex259, DEFAULT::getNfaIndex260, DEFAULT::getNfaIndex261,
            DEFAULT::getNfaIndex262, DEFAULT::getNfaIndex263, DEFAULT::getNfaIndex264,
            DEFAULT::getNfaIndex265, DEFAULT::getNfaIndex266, DEFAULT::getNfaIndex267,
            DEFAULT::getNfaIndex268, DEFAULT::getNfaIndex269, DEFAULT::getNfaIndex270,
            DEFAULT::getNfaIndex271, DEFAULT::getNfaIndex272, DEFAULT::getNfaIndex273,
            DEFAULT::getNfaIndex274, DEFAULT::getNfaIndex275, DEFAULT::getNfaIndex276,
            DEFAULT::getNfaIndex277, DEFAULT::getNfaIndex278, DEFAULT::getNfaIndex279,
            DEFAULT::getNfaIndex280, DEFAULT::getNfaIndex281, DEFAULT::getNfaIndex282,
            DEFAULT::getNfaIndex283, DEFAULT::getNfaIndex284, DEFAULT::getNfaIndex285,
            DEFAULT::getNfaIndex286, DEFAULT::getNfaIndex287, DEFAULT::getNfaIndex288,
            DEFAULT::getNfaIndex289, DEFAULT::getNfaIndex290, DEFAULT::getNfaIndex291,
            DEFAULT::getNfaIndex292, DEFAULT::getNfaIndex293, DEFAULT::getNfaIndex294,
            DEFAULT::getNfaIndex295, DEFAULT::getNfaIndex296, DEFAULT::getNfaIndex297,
            DEFAULT::getNfaIndex298, DEFAULT::getNfaIndex299, DEFAULT::getNfaIndex300,
            DEFAULT::getNfaIndex301, DEFAULT::getNfaIndex302, DEFAULT::getNfaIndex303,
            DEFAULT::getNfaIndex304, DEFAULT::getNfaIndex305, DEFAULT::getNfaIndex306,
            DEFAULT::getNfaIndex307, DEFAULT::getNfaIndex308, DEFAULT::getNfaIndex309,
            DEFAULT::getNfaIndex310, DEFAULT::getNfaIndex311, DEFAULT::getNfaIndex312,
            DEFAULT::getNfaIndex313, DEFAULT::getNfaIndex314, DEFAULT::getNfaIndex315,
            DEFAULT::getNfaIndex316, DEFAULT::getNfaIndex317, DEFAULT::getNfaIndex318,
            DEFAULT::getNfaIndex319, DEFAULT::getNfaIndex320, DEFAULT::getNfaIndex321,
            DEFAULT::getNfaIndex322, DEFAULT::getNfaIndex323, DEFAULT::getNfaIndex324,
            DEFAULT::getNfaIndex325, DEFAULT::getNfaIndex326, DEFAULT::getNfaIndex327,
            DEFAULT::getNfaIndex328, DEFAULT::getNfaIndex329, DEFAULT::getNfaIndex330,
            DEFAULT::getNfaIndex331, DEFAULT::getNfaIndex332, DEFAULT::getNfaIndex333,
            DEFAULT::getNfaIndex334, DEFAULT::getNfaIndex335, DEFAULT::getNfaIndex336,
            DEFAULT::getNfaIndex337, DEFAULT::getNfaIndex338, DEFAULT::getNfaIndex339,
            DEFAULT::getNfaIndex340, DEFAULT::getNfaIndex341, DEFAULT::getNfaIndex342,
            DEFAULT::getNfaIndex343, DEFAULT::getNfaIndex344, DEFAULT::getNfaIndex345,
            DEFAULT::getNfaIndex346, DEFAULT::getNfaIndex347, DEFAULT::getNfaIndex348,
            DEFAULT::getNfaIndex349, DEFAULT::getNfaIndex350, DEFAULT::getNfaIndex351,
            DEFAULT::getNfaIndex352, DEFAULT::getNfaIndex353, DEFAULT::getNfaIndex354,
            DEFAULT::getNfaIndex355, DEFAULT::getNfaIndex356, DEFAULT::getNfaIndex357,
            DEFAULT::getNfaIndex358, DEFAULT::getNfaIndex359, DEFAULT::getNfaIndex360,
            DEFAULT::getNfaIndex361, DEFAULT::getNfaIndex362, DEFAULT::getNfaIndex363,
            DEFAULT::getNfaIndex364, DEFAULT::getNfaIndex365, DEFAULT::getNfaIndex366,
            DEFAULT::getNfaIndex367, DEFAULT::getNfaIndex368, DEFAULT::getNfaIndex369,
            DEFAULT::getNfaIndex370, DEFAULT::getNfaIndex371, DEFAULT::getNfaIndex372,
            DEFAULT::getNfaIndex373, DEFAULT::getNfaIndex374, DEFAULT::getNfaIndex375,
            DEFAULT::getNfaIndex376, DEFAULT::getNfaIndex377, DEFAULT::getNfaIndex378,
            DEFAULT::getNfaIndex379, DEFAULT::getNfaIndex380, DEFAULT::getNfaIndex381,
            DEFAULT::getNfaIndex382, DEFAULT::getNfaIndex383};
            functionTableMap.put(LexicalState.DEFAULT, functions);
        }

    }


    /**
    * Holder class for NFA code related to IN_SINGLE_LINE_COMMENT lexical state
    */
    private static class IN_SINGLE_LINE_COMMENT {

        private static TokenType getNfaNameIN_SINGLE_LINE_COMMENTIndex0(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '\r') {
                nextStates.set(1);
            }
            if (ch >= 0x0) {
                if (validTypes == null || validTypes.contains(_TOKEN_73)) type = _TOKEN_73;
            }
            if (ch == '\n') {
                if (validTypes == null || validTypes.contains(SINGLE_LINE_COMMENT)) type = SINGLE_LINE_COMMENT;
            } else if (ch == '\r') {
                if (validTypes == null || validTypes.contains(SINGLE_LINE_COMMENT)) type = SINGLE_LINE_COMMENT;
            }
            return type;
        }

        private static TokenType getNfaNameIN_SINGLE_LINE_COMMENTIndex1(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '\n') {
                if (validTypes == null || validTypes.contains(SINGLE_LINE_COMMENT)) type = SINGLE_LINE_COMMENT;
            }
            return type;
        }

        private static void NFA_FUNCTIONS_init() {
            NfaFunction[] functions = new NfaFunction[] {IN_SINGLE_LINE_COMMENT::getNfaNameIN_SINGLE_LINE_COMMENTIndex0,
            IN_SINGLE_LINE_COMMENT::getNfaNameIN_SINGLE_LINE_COMMENTIndex1};
            functionTableMap.put(LexicalState.IN_SINGLE_LINE_COMMENT, functions);
        }

    }


    /**
    * Holder class for NFA code related to IN_FORMAL_COMMENT lexical state
    */
    private static class IN_FORMAL_COMMENT {

        private static TokenType getNfaNameIN_FORMAL_COMMENTIndex0(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '*') {
                nextStates.set(1);
            }
            if (ch >= 0x0) {
                if (validTypes == null || validTypes.contains(_TOKEN_73)) type = _TOKEN_73;
            }
            return type;
        }

        private static TokenType getNfaNameIN_FORMAL_COMMENTIndex1(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '/') {
                if (validTypes == null || validTypes.contains(FORMAL_COMMENT)) type = FORMAL_COMMENT;
            }
            return type;
        }

        private static void NFA_FUNCTIONS_init() {
            NfaFunction[] functions = new NfaFunction[] {IN_FORMAL_COMMENT::getNfaNameIN_FORMAL_COMMENTIndex0,
            IN_FORMAL_COMMENT::getNfaNameIN_FORMAL_COMMENTIndex1};
            functionTableMap.put(LexicalState.IN_FORMAL_COMMENT, functions);
        }

    }


    /**
    * Holder class for NFA code related to IN_MULTI_LINE_COMMENT lexical state
    */
    private static class IN_MULTI_LINE_COMMENT {

        private static TokenType getNfaNameIN_MULTI_LINE_COMMENTIndex0(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '*') {
                nextStates.set(1);
            }
            if (ch >= 0x0) {
                if (validTypes == null || validTypes.contains(_TOKEN_73)) type = _TOKEN_73;
            }
            return type;
        }

        private static TokenType getNfaNameIN_MULTI_LINE_COMMENTIndex1(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '/') {
                if (validTypes == null || validTypes.contains(MULTI_LINE_COMMENT)) type = MULTI_LINE_COMMENT;
            }
            return type;
        }

        private static void NFA_FUNCTIONS_init() {
            NfaFunction[] functions = new NfaFunction[] {IN_MULTI_LINE_COMMENT::getNfaNameIN_MULTI_LINE_COMMENTIndex0,
            IN_MULTI_LINE_COMMENT::getNfaNameIN_MULTI_LINE_COMMENTIndex1};
            functionTableMap.put(LexicalState.IN_MULTI_LINE_COMMENT, functions);
        }

    }

}


