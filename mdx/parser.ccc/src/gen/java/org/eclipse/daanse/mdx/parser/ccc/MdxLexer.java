/* Generated by: CongoCC Parser Generator. MdxLexer.java
*
* Copyright (c) 2023 Contributors to the Eclipse Foundation.
*
* This program and the accompanying materials are made
* available under the terms of the Eclipse Public License 2.0
* which is available at https://www.eclipse.org/legal/epl-2.0/
*
* SPDX-License-Identifier: EPL-2.0
*
* Contributors: see corresponding .ccc file
*/
package org.eclipse.daanse.mdx.parser.ccc;

import org.eclipse.daanse.mdx.parser.ccc.Token.TokenType;
import static org.eclipse.daanse.mdx.parser.ccc.Token.TokenType.*;
import java.util.BitSet;
import java.util.EnumMap;
import java.util.EnumSet;


public class MdxLexer extends TokenSource {

    public enum LexicalState {
        DEFAULT, IN_SINGLE_LINE_COMMENT, IN_FORMAL_COMMENT, IN_MULTI_LINE_COMMENT
    }

    // The following two BitSets are used to store
    // the current active NFA states in the core tokenization loop
    private BitSet nextStates = new BitSet(520), currentStates = new BitSet(520);
    EnumSet<TokenType> activeTokenTypes = EnumSet.allOf(TokenType.class);
    {
    }
    // A lookup for lexical state transitions triggered by a certain token type
    private static EnumMap<TokenType, LexicalState> tokenTypeToLexicalStateMap = new EnumMap<>(TokenType.class);
    // Token types that are "regular" tokens that participate in parsing,
    // i.e. declared as TOKEN
    static final EnumSet<TokenType> regularTokens = EnumSet.of(EOF, AND, AS, AXIS, BEGIN, BY, CASE, CALCULATION, CAST, CELL, CHAPTERS, CREATE, COLUMNS, COMMIT, CUBE, CURRENTCUBE, DIMENSION, DRILLTHROUGH, ELSE, EMPTY, END, EXPLAIN, FIRSTROWSET, FOR, FROM, IN, IS, MATCHES, MAXROWS, MEMBER, MEASURE, NON, NOT, NULL, ON, OR, PAGES, PLAN, PROPERTIES, REFRESH, RETURN, ROLLBACK, ROWS, SECTIONS, SELECT, SESSION, SET, THEN, TRAN, TRANSACTION, UPDATE, USE_EQUAL_ALLOCATION, USE_EQUAL_INCREMENT, USE_WEIGHTED_ALLOCATION, USE_WEIGHTED_INCREMENT, WHEN, WHERE, XOR, WITH, EXISTING, $SYSTEM, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, COMMA, SEMICOLON, DOT, ASTERISK, BANG, COLON, CONCAT, EQ, GE, GT, LE, LT, MINUS, NE, PLUS, SOLIDUS, ATSIGN, ID, QUOTED_ID, AMP_QUOTED_ID, AMP_UNQUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, FLOATING_POINT_LITERAL, STRING, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING, CALCULATED);
    // Token types that do not participate in parsing
    // i.e. declared as UNPARSED (or SPECIAL_TOKEN)
    static final EnumSet<TokenType> unparsedTokens = EnumSet.of(SINGLE_LINE_COMMENT, FORMAL_COMMENT, MULTI_LINE_COMMENT);
    // Tokens that are skipped, i.e. SKIP
    static final EnumSet<TokenType> skippedTokens = EnumSet.of(_TOKEN_61, _TOKEN_62, _TOKEN_63, _TOKEN_64, _TOKEN_65);
    // Tokens that correspond to a MORE, i.e. that are pending
    // additional input
    static final EnumSet<TokenType> moreTokens = EnumSet.of(_TOKEN_66, _TOKEN_67, _TOKEN_68, _TOKEN_69, _TOKEN_73);

    public MdxLexer(CharSequence input) {
        this("input", input);
    }

    /**
    * @param inputSource just the naem of the input source (typically the filename)
    * that will be used in error messages and so on.
    * @param input the input
    */
    public MdxLexer(String inputSource, CharSequence input) {
        this(inputSource, input, LexicalState.DEFAULT, 1, 1);
    }

    /**
    * @param inputSource just the name of the input source (typically the filename) that
    * will be used in error messages and so on.
    * @param input the input
    * @param line The line number at which we are starting for the purposes of location/error messages. In most
    * normal usage, this is 1.
    * @param column number at which we are starting for the purposes of location/error messages. In most normal
    * usages this is 1.
    */
    public MdxLexer(String inputSource, CharSequence input, LexicalState lexState, int startingLine, int startingColumn) {
        super(inputSource, input, startingLine, startingColumn);
        setContent(mungeContent(input, false, getTabSize(), false, false, false));
        createLineOffsetsTable();
        createTokenLocationTable();
        setStartingPos(startingLine, startingColumn);
        switchTo(lexState);
    }

    private Token getNextToken() {
        InvalidToken invalidToken = null;
        Token token = nextToken();
        while (token instanceof InvalidToken) {
            if (invalidToken == null) {
                invalidToken = (InvalidToken) token;
            } else {
                invalidToken.setEndOffset(token.getEndOffset());
            }
            token = nextToken();
        }
        if (invalidToken != null) cacheToken(invalidToken);
        cacheToken(token);
        if (invalidToken != null) {
            goTo(invalidToken.getEndOffset());
            return invalidToken;
        }
        return token;
    }

    /**
    * The public method for getting the next token.
    * If the tok parameter is null, it just tokenizes
    * starting at the internal bufferPosition
    * Otherwise, it checks whether we have already cached
    * the token after this one. If not, it finally goes
    * to the NFA machinery
    */
    public Token getNextToken(Token tok) {
        if (tok == null) {
            return getNextToken();
        }
        Token cachedToken = tok.nextCachedToken();
        // If the cached next token is not currently active, we
        // throw it away and go back to the XXXLexer
        if (cachedToken != null && !activeTokenTypes.contains(cachedToken.getType())) {
            reset(tok);
            cachedToken = null;
        }
        return cachedToken != null ? cachedToken : getNextToken(tok.getEndOffset());
    }

    /**
    * A lower level method to tokenize, that takes the absolute
    * offset into the content buffer as a parameter
    * @param offset where to start
    * @return the token that results from scanning from the given starting point
    */
    public Token getNextToken(int offset) {
        goTo(offset);
        return getNextToken();
    }

    // The main method to invoke the NFA machinery
    private final Token nextToken() {
        Token matchedToken = null;
        boolean inMore = false;
        int tokenBeginOffset = getBufferPosition(), firstChar = 0;
        // The core tokenization loop
        while (matchedToken == null) {
            int curChar, codePointsRead = 0, matchedPos = 0;
            TokenType matchedType = null;
            boolean reachedEnd = false;
            if (inMore) {
                curChar = readChar();
                if (curChar == -1) reachedEnd = true;
            } else {
                tokenBeginOffset = getBufferPosition();
                firstChar = curChar = readChar();
                if (curChar == -1) {
                    matchedType = EOF;
                    reachedEnd = true;
                }
            }
            // Get the NFA function table current lexical state
            // There is some possibility that there was a lexical state change
            // since the last iteration of this loop!
            NfaFunction[] nfaFunctions = functionTableMap.get(lexicalState);
            // the core NFA loop
            if (!reachedEnd) do {
                // Holder for the new type (if any) matched on this iteration
                TokenType newType = null;
                if (codePointsRead > 0) {
                    // What was nextStates on the last iteration
                    // is now the currentStates!
                    BitSet temp = currentStates;
                    currentStates = nextStates;
                    nextStates = temp;
                    int retval = readChar();
                    if (retval >= 0) {
                        curChar = retval;
                    } else {
                        reachedEnd = true;
                        break;
                    }
                }
                nextStates.clear();
                int nextActive = codePointsRead == 0 ? 0 : currentStates.nextSetBit(0);
                do {
                    TokenType returnedType = nfaFunctions[nextActive] .apply(curChar, nextStates, activeTokenTypes);
                    if (returnedType != null && (newType == null || returnedType.ordinal() < newType.ordinal())) {
                        newType = returnedType;
                    }
                    nextActive = codePointsRead == 0 ? -1 : currentStates.nextSetBit(nextActive + 1);
                }
                while (nextActive != -1);
                ++codePointsRead;
                if (newType != null) {
                    matchedType = newType;
                    inMore = moreTokens.contains(matchedType);
                    matchedPos = codePointsRead;
                }
            }
            while (!nextStates.isEmpty());
            if (matchedType == null) {
                setBufferPosition(tokenBeginOffset);
                forward(1);
                return new InvalidToken(this, tokenBeginOffset, getBufferPosition());
            }
            backup(codePointsRead - matchedPos);
            if (skippedTokens.contains(matchedType)) {
                skipTokens(tokenBeginOffset, getBufferPosition());
            } else if (regularTokens.contains(matchedType) || unparsedTokens.contains(matchedType)) {
                matchedToken = Token.newToken(matchedType, this, tokenBeginOffset, getBufferPosition());
                matchedToken.setUnparsed(!regularTokens.contains(matchedType));
            }
            doLexicalStateSwitch(matchedType);
        }
        return matchedToken;
    }

    LexicalState lexicalState = LexicalState.values()[0];
    // Generate the map for lexical state transitions from the various token types
    static {
        tokenTypeToLexicalStateMap.put(_TOKEN_66, LexicalState.IN_SINGLE_LINE_COMMENT);
        tokenTypeToLexicalStateMap.put(_TOKEN_67, LexicalState.IN_FORMAL_COMMENT);
        tokenTypeToLexicalStateMap.put(_TOKEN_68, LexicalState.IN_SINGLE_LINE_COMMENT);
        tokenTypeToLexicalStateMap.put(_TOKEN_69, LexicalState.IN_MULTI_LINE_COMMENT);
        tokenTypeToLexicalStateMap.put(SINGLE_LINE_COMMENT, LexicalState.DEFAULT);
        tokenTypeToLexicalStateMap.put(FORMAL_COMMENT, LexicalState.DEFAULT);
        tokenTypeToLexicalStateMap.put(MULTI_LINE_COMMENT, LexicalState.DEFAULT);
    }

    boolean doLexicalStateSwitch(TokenType tokenType) {
        LexicalState newState = tokenTypeToLexicalStateMap.get(tokenType);
        if (newState == null) return false;
        return switchTo(newState);
    }

    /**
    * Switch to specified lexical state.
    * @param lexState the lexical state to switch to
    * @return whether we switched (i.e. we weren't already in the desired lexical state)
    */
    public boolean switchTo(LexicalState lexState) {
        if (this.lexicalState != lexState) {
            this.lexicalState = lexState;
            return true;
        }
        return false;
    }

    // Reset the token source input
    // to just after the Token passed in.
    void reset(Token t, LexicalState state) {
        goTo(t.getEndOffset());
        uncacheTokens(t);
        if (state != null) {
            switchTo(state);
        } else {
            doLexicalStateSwitch(t.getType());
        }
    }

    void reset(Token t) {
        reset(t, null);
    }

    void cacheToken(Token tok) {
        if (tok.isInserted()) {
            Token next = tok.nextCachedToken();
            if (next != null) cacheToken(next);
            return;
        }
        cacheTokenAt(tok, tok.getBeginOffset());
    }

    @Override
    void uncacheTokens(Node.TerminalNode lastToken) {
        super.uncacheTokens(lastToken);
        ((Token) lastToken).unsetAppendedToken();
    }


    // NFA related code follows.
    // The functional interface that represents
    // the acceptance method of an NFA state
    static interface NfaFunction {

        TokenType apply(int ch, BitSet bs, EnumSet<TokenType> validTypes);

    }

    // A lookup of the NFA function tables for the respective lexical states.
    private static final EnumMap<LexicalState, NfaFunction[]> functionTableMap = new EnumMap<>(LexicalState.class);
    // Initialize the various NFA method tables
    static {
        DEFAULT.NFA_FUNCTIONS_init();
        IN_SINGLE_LINE_COMMENT.NFA_FUNCTIONS_init();
        IN_FORMAL_COMMENT.NFA_FUNCTIONS_init();
        IN_MULTI_LINE_COMMENT.NFA_FUNCTIONS_init();
    }

    //The Nitty-gritty of the NFA code is in this loop.
    /**
    * Holder class for NFA code related to DEFAULT lexical state
    */
    private static class DEFAULT {

        static private TokenType NFA_0(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '"') {
                nextStates.set(227);
                nextStates.set(396);
            } else if (ch == '$') {
                nextStates.set(103);
            } else if (ch == '&') {
                nextStates.set(228);
                nextStates.set(3);
            } else if (ch == '\'') {
                nextStates.set(42);
                nextStates.set(235);
            } else if (ch == '-') {
                nextStates.set(151);
            } else if (ch == '.') {
                nextStates.set(54);
                nextStates.set(161);
                nextStates.set(142);
            } else if (ch == '/') {
                nextStates.set(73);
                nextStates.set(322);
                nextStates.set(301);
            } else if (ch >= '0' && ch <= '9') {
                nextStates.set(27);
                nextStates.set(336);
                nextStates.set(236);
                nextStates.set(12);
                nextStates.set(108);
            } else if (ch == '<') {
                nextStates.set(327);
                nextStates.set(244);
            } else if (ch == '>') {
                nextStates.set(135);
            } else if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(382);
                nextStates.set(39);
                nextStates.set(131);
            } else if ((ch == 'B') || (ch == 'b')) {
                nextStates.set(314);
                nextStates.set(346);
            } else if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(385);
                nextStates.set(146);
                nextStates.set(332);
                nextStates.set(96);
                nextStates.set(268);
                nextStates.set(166);
                nextStates.set(195);
                nextStates.set(316);
                nextStates.set(61);
                nextStates.set(287);
                nextStates.set(194);
            } else if ((ch == 'D') || (ch == 'd')) {
                nextStates.set(179);
                nextStates.set(279);
            } else if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(112);
                nextStates.set(309);
                nextStates.set(307);
                nextStates.set(263);
                nextStates.set(57);
            } else if ((ch == 'F') || (ch == 'f')) {
                nextStates.set(364);
                nextStates.set(152);
                nextStates.set(76);
            } else if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(41);
                nextStates.set(93);
            } else if ((ch == 'M') || (ch == 'm')) {
                nextStates.set(303);
                nextStates.set(284);
                nextStates.set(115);
                nextStates.set(63);
            } else if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(224);
                nextStates.set(381);
                nextStates.set(78);
            } else if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(313);
                nextStates.set(274);
            } else if ((ch == 'P') || (ch == 'p')) {
                nextStates.set(208);
                nextStates.set(10);
                nextStates.set(68);
            } else if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(174);
                nextStates.set(168);
                nextStates.set(119);
                nextStates.set(186);
            } else if ((ch == 'S') || (ch == 's')) {
                nextStates.set(91);
                nextStates.set(193);
                nextStates.set(185);
                nextStates.set(22);
            } else if ((ch == 'T') || (ch == 't')) {
                nextStates.set(383);
                nextStates.set(150);
                nextStates.set(201);
            } else if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(32);
                nextStates.set(129);
                nextStates.set(114);
                nextStates.set(343);
                nextStates.set(157);
            } else if ((ch == 'W') || (ch == 'w')) {
                nextStates.set(266);
                nextStates.set(233);
                nextStates.set(315);
            } else if ((ch == 'X') || (ch == 'x')) {
                nextStates.set(94);
            } else if (ch == '[') {
                nextStates.set(260);
            } else if (ch == '|') {
                nextStates.set(145);
            }
            if (ch >= '0' && ch <= '9') {
                nextStates.set(333);
                nextStates.set(285);
                if (validTypes.contains(UNSIGNED_INTEGER_LITERAL)) type = UNSIGNED_INTEGER_LITERAL;
            } else if (((ch == '$') || ((ch >= 'A' && ch <= 'Z') || ((ch == '_') || (ch >= 'a' && ch <= 'z')))) || (ch >= 128 && checkIntervals(NFA_MOVES_331, ch))) {
                nextStates.set(245);
                if (validTypes.contains(ID)) type = ID;
            } else if (ch == '@') {
                if (validTypes.contains(ATSIGN)) type = ATSIGN;
            } else if (ch == '/') {
                if (validTypes.contains(SOLIDUS)) type = SOLIDUS;
            } else if (ch == '+') {
                if (validTypes.contains(PLUS)) type = PLUS;
            } else if (ch == '-') {
                if (validTypes.contains(MINUS)) type = MINUS;
            } else if (ch == '<') {
                if (validTypes.contains(LT)) type = LT;
            } else if (ch == '>') {
                if (validTypes.contains(GT)) type = GT;
            } else if (ch == '=') {
                if (validTypes.contains(EQ)) type = EQ;
            } else if (ch == ':') {
                if (validTypes.contains(COLON)) type = COLON;
            } else if (ch == '!') {
                if (validTypes.contains(BANG)) type = BANG;
            } else if (ch == '*') {
                if (validTypes.contains(ASTERISK)) type = ASTERISK;
            } else if (ch == '.') {
                if (validTypes.contains(DOT)) type = DOT;
            } else if (ch == ';') {
                if (validTypes.contains(SEMICOLON)) type = SEMICOLON;
            } else if (ch == ',') {
                if (validTypes.contains(COMMA)) type = COMMA;
            } else if (ch == ']') {
                if (validTypes.contains(RBRACKET)) type = RBRACKET;
            } else if (ch == '[') {
                if (validTypes.contains(LBRACKET)) type = LBRACKET;
            } else if (ch == '}') {
                if (validTypes.contains(RBRACE)) type = RBRACE;
            } else if (ch == '{') {
                if (validTypes.contains(LBRACE)) type = LBRACE;
            } else if (ch == ')') {
                if (validTypes.contains(RPAREN)) type = RPAREN;
            } else if (ch == '(') {
                if (validTypes.contains(LPAREN)) type = LPAREN;
            } else if (ch == '\f') {
                if (validTypes.contains(_TOKEN_65)) type = _TOKEN_65;
            } else if (ch == '\r') {
                if (validTypes.contains(_TOKEN_64)) type = _TOKEN_64;
            } else if (ch == '\n') {
                if (validTypes.contains(_TOKEN_63)) type = _TOKEN_63;
            } else if (ch == '\t') {
                if (validTypes.contains(_TOKEN_62)) type = _TOKEN_62;
            } else if (ch == ' ') {
                if (validTypes.contains(_TOKEN_61)) type = _TOKEN_61;
            }
            return type;
        }

        static private TokenType NFA_1(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(15);
            }
            return type;
        }

        static private TokenType NFA_2(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'W') || (ch == 'w')) {
                nextStates.set(298);
            }
            return type;
        }

        static private TokenType NFA_3(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z')) {
                nextStates.set(362);
                if (validTypes.contains(AMP_UNQUOTED_ID)) type = AMP_UNQUOTED_ID;
            }
            return type;
        }

        static private TokenType NFA_4(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'G') || (ch == 'g')) {
                if (validTypes.contains(EXISTING)) type = EXISTING;
            }
            return type;
        }

        static private TokenType NFA_5(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(250);
            }
            return type;
        }

        static private TokenType NFA_6(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '_') {
                nextStates.set(2);
            }
            return type;
        }

        static private TokenType NFA_7(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(295);
            }
            return type;
        }

        static private TokenType NFA_8(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                nextStates.set(310);
            }
            return type;
        }

        static private TokenType NFA_9(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                if (validTypes.contains(MEMBER)) type = MEMBER;
            }
            return type;
        }

        static private TokenType NFA_10(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(376);
            }
            return type;
        }

        static private TokenType NFA_11(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(225);
            }
            return type;
        }

        static private TokenType NFA_12(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(12);
            } else if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(24);
            }
            return type;
        }

        static private TokenType NFA_13(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(230);
            }
            return type;
        }

        static private TokenType NFA_14(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(387);
            }
            return type;
        }

        static private TokenType NFA_15(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(211);
            }
            return type;
        }

        static private TokenType NFA_16(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(356);
            }
            return type;
        }

        static private TokenType NFA_17(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(273);
            }
            return type;
        }

        static private TokenType NFA_18(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'W') || (ch == 'w')) {
                nextStates.set(190);
            }
            return type;
        }

        static private TokenType NFA_19(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes.contains(MATCHES)) type = MATCHES;
            }
            return type;
        }

        static private TokenType NFA_20(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(326);
            }
            return type;
        }

        static private TokenType NFA_21(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(392);
            }
            return type;
        }

        static private TokenType NFA_22(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(159);
            }
            return type;
        }

        static private TokenType NFA_23(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(226);
            }
            return type;
        }

        static private TokenType NFA_24(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == '+') || (ch == '-')) {
                nextStates.set(371);
            } else if (ch >= '0' && ch <= '9') {
                nextStates.set(83);
                if (validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_25(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(319);
            }
            return type;
        }

        static private TokenType NFA_26(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'G') || (ch == 'g')) {
                nextStates.set(44);
            }
            return type;
        }

        static private TokenType NFA_27(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(27);
            } else if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(165);
            } else if ((ch == 'D') || ((ch == 'F') || ((ch == 'd') || (ch == 'f')))) {
                if (validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_28(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(120);
            }
            return type;
        }

        static private TokenType NFA_29(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '"') {
                nextStates.set(227);
            }
            return type;
        }

        static private TokenType NFA_30(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(348);
            }
            return type;
        }

        static private TokenType NFA_31(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == ']') {
                nextStates.set(260);
            }
            return type;
        }

        static private TokenType NFA_32(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'P') || (ch == 'p')) {
                nextStates.set(52);
            }
            return type;
        }

        static private TokenType NFA_33(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(5);
            }
            return type;
        }

        static private TokenType NFA_34(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(130);
            }
            return type;
        }

        static private TokenType NFA_35(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(339);
            }
            return type;
        }

        static private TokenType NFA_36(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(81);
            }
            return type;
        }

        static private TokenType NFA_37(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(109);
            }
            return type;
        }

        static private TokenType NFA_38(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(138);
            }
            return type;
        }

        static private TokenType NFA_39(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'X') || (ch == 'x')) {
                nextStates.set(79);
            }
            return type;
        }

        static private TokenType NFA_40(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(55);
                if (validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_41(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes.contains(IS)) type = IS;
            }
            return type;
        }

        static private TokenType NFA_42(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch >= 0x0 && ch <= '&') || (ch >= '(')) {
                nextStates.set(42);
            } else if (ch == '\'') {
                nextStates.set(51);
                if (validTypes.contains(SINGLE_QUOTED_STRING)) type = SINGLE_QUOTED_STRING;
            }
            return type;
        }

        static private TokenType NFA_43(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(292);
            }
            return type;
        }

        static private TokenType NFA_44(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                nextStates.set(241);
            }
            return type;
        }

        static private TokenType NFA_45(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(169);
            }
            return type;
        }

        static private TokenType NFA_46(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(262);
            }
            return type;
        }

        static private TokenType NFA_47(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(187);
            }
            return type;
        }

        static private TokenType NFA_48(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(86);
            }
            return type;
        }

        static private TokenType NFA_49(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(49);
            } else if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(60);
            }
            return type;
        }

        static private TokenType NFA_50(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'B') || (ch == 'b')) {
                nextStates.set(84);
            }
            return type;
        }

        static private TokenType NFA_51(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '\'') {
                nextStates.set(42);
            }
            return type;
        }

        static private TokenType NFA_52(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'D') || (ch == 'd')) {
                nextStates.set(47);
            }
            return type;
        }

        static private TokenType NFA_53(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(229);
            }
            return type;
        }

        static private TokenType NFA_54(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(253);
                if (validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_55(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(55);
                if (validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            } else if ((ch == 'D') || ((ch == 'F') || ((ch == 'd') || (ch == 'f')))) {
                if (validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_56(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(243);
            }
            return type;
        }

        static private TokenType NFA_57(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(69);
            }
            return type;
        }

        static private TokenType NFA_58(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(239);
            }
            return type;
        }

        static private TokenType NFA_59(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(13);
            }
            return type;
        }

        static private TokenType NFA_60(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == '+') || (ch == '-')) {
                nextStates.set(370);
            } else if (ch >= '0' && ch <= '9') {
                nextStates.set(370);
                if (validTypes.contains(APPROX_NUMERIC_LITERAL)) type = APPROX_NUMERIC_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_61(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                nextStates.set(282);
            }
            return type;
        }

        static private TokenType NFA_62(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(358);
            }
            return type;
        }

        static private TokenType NFA_63(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(393);
            }
            return type;
        }

        static private TokenType NFA_64(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '_') {
                nextStates.set(232);
            }
            return type;
        }

        static private TokenType NFA_65(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'G') || (ch == 'g')) {
                nextStates.set(254);
            }
            return type;
        }

        static private TokenType NFA_66(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'F') || (ch == 'f')) {
                nextStates.set(369);
            }
            return type;
        }

        static private TokenType NFA_67(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(28);
            }
            return type;
        }

        static private TokenType NFA_68(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(133);
            }
            return type;
        }

        static private TokenType NFA_69(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'D') || (ch == 'd')) {
                if (validTypes.contains(END)) type = END;
            }
            return type;
        }

        static private TokenType NFA_70(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(175);
            }
            return type;
        }

        static private TokenType NFA_71(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(372);
            }
            return type;
        }

        static private TokenType NFA_72(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes.contains(SESSION)) type = SESSION;
            }
            return type;
        }

        static private TokenType NFA_73(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '/') {
                if (validTypes.contains(_TOKEN_66)) type = _TOKEN_66;
            }
            return type;
        }

        static private TokenType NFA_74(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch >= 0x0 && ch <= '\t') || ((ch == 0xb || ch == '\f') || ((ch >= 0xe && ch <= '\\') || (ch >= '^')))) {
                nextStates.set(74);
            } else if (ch == ']') {
                nextStates.set(104);
                if (validTypes.contains(AMP_QUOTED_ID)) type = AMP_QUOTED_ID;
            }
            return type;
        }

        static private TokenType NFA_75(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(329);
            }
            return type;
        }

        static private TokenType NFA_76(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(43);
            }
            return type;
        }

        static private TokenType NFA_77(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'D') || (ch == 'd')) {
                if (validTypes.contains(CALCULATED)) type = CALCULATED;
            }
            return type;
        }

        static private TokenType NFA_78(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(154);
            }
            return type;
        }

        static private TokenType NFA_79(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(293);
            }
            return type;
        }

        static private TokenType NFA_80(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(147);
            }
            return type;
        }

        static private TokenType NFA_81(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(140);
            }
            return type;
        }

        static private TokenType NFA_82(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(320);
            }
            return type;
        }

        static private TokenType NFA_83(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(83);
                if (validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            } else if ((ch == 'D') || ((ch == 'F') || ((ch == 'd') || (ch == 'f')))) {
                if (validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_84(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(9);
            }
            return type;
        }

        static private TokenType NFA_85(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(4);
            }
            return type;
        }

        static private TokenType NFA_86(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                if (validTypes.contains(ELSE)) type = ELSE;
            }
            return type;
        }

        static private TokenType NFA_87(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(377);
            }
            return type;
        }

        static private TokenType NFA_88(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(127);
            }
            return type;
        }

        static private TokenType NFA_89(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(65);
            }
            return type;
        }

        static private TokenType NFA_90(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(210);
            }
            return type;
        }

        static private TokenType NFA_91(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(163);
            }
            return type;
        }

        static private TokenType NFA_92(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(249);
            }
            return type;
        }

        static private TokenType NFA_93(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes.contains(IN)) type = IN;
            }
            return type;
        }

        static private TokenType NFA_94(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(351);
            }
            return type;
        }

        static private TokenType NFA_95(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes.contains(MAXROWS)) type = MAXROWS;
            }
            return type;
        }

        static private TokenType NFA_96(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(296);
            }
            return type;
        }

        static private TokenType NFA_97(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(261);
            }
            return type;
        }

        static private TokenType NFA_98(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(98);
            } else if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(60);
            }
            return type;
        }

        static private TokenType NFA_99(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes.contains(TRANSACTION)) type = TRANSACTION;
            }
            return type;
        }

        static private TokenType NFA_100(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(380);
            }
            return type;
        }

        static private TokenType NFA_101(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(341);
            }
            return type;
        }

        static private TokenType NFA_102(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes.contains(SECTIONS)) type = SECTIONS;
            }
            return type;
        }

        static private TokenType NFA_103(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(277);
            }
            return type;
        }

        static private TokenType NFA_104(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == ']') {
                nextStates.set(74);
            }
            return type;
        }

        static private TokenType NFA_105(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes.contains(USE_WEIGHTED_ALLOCATION)) type = USE_WEIGHTED_ALLOCATION;
            }
            return type;
        }

        static private TokenType NFA_106(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(394);
            }
            return type;
        }

        static private TokenType NFA_107(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(107);
                if (validTypes.contains(DECIMAL_NUMERIC_LITERAL)) type = DECIMAL_NUMERIC_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_108(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(108);
            } else if (ch == '.') {
                nextStates.set(325);
                if (validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_109(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(219);
            }
            return type;
        }

        static private TokenType NFA_110(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes.contains(NON)) type = NON;
            }
            return type;
        }

        static private TokenType NFA_111(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(205);
            }
            return type;
        }

        static private TokenType NFA_112(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'M') || (ch == 'm')) {
                nextStates.set(395);
            }
            return type;
        }

        static private TokenType NFA_113(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                if (validTypes.contains(DRILLTHROUGH)) type = DRILLTHROUGH;
            }
            return type;
        }

        static private TokenType NFA_114(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(196);
            }
            return type;
        }

        static private TokenType NFA_115(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(181);
            }
            return type;
        }

        static private TokenType NFA_116(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(178);
            }
            return type;
        }

        static private TokenType NFA_117(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'P') || (ch == 'p')) {
                nextStates.set(252);
            }
            return type;
        }

        static private TokenType NFA_118(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(264);
            }
            return type;
        }

        static private TokenType NFA_119(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(18);
            }
            return type;
        }

        static private TokenType NFA_120(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(30);
            }
            return type;
        }

        static private TokenType NFA_121(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(202);
            }
            return type;
        }

        static private TokenType NFA_122(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(137);
            }
            return type;
        }

        static private TokenType NFA_123(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(290);
            }
            return type;
        }

        static private TokenType NFA_124(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(378);
                if (validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_125(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(188);
            }
            return type;
        }

        static private TokenType NFA_126(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(162);
            }
            return type;
        }

        static private TokenType NFA_127(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(238);
            }
            return type;
        }

        static private TokenType NFA_128(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(118);
            }
            return type;
        }

        static private TokenType NFA_129(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(334);
            }
            return type;
        }

        static private TokenType NFA_130(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(33);
            }
            return type;
        }

        static private TokenType NFA_131(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes.contains(AS)) type = AS;
            }
            return type;
        }

        static private TokenType NFA_132(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '_') {
                nextStates.set(173);
            }
            return type;
        }

        static private TokenType NFA_133(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(306);
            }
            return type;
        }

        static private TokenType NFA_134(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(246);
            }
            return type;
        }

        static private TokenType NFA_135(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '=') {
                if (validTypes.contains(GE)) type = GE;
            }
            return type;
        }

        static private TokenType NFA_136(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(128);
            }
            return type;
        }

        static private TokenType NFA_137(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(357);
            }
            return type;
        }

        static private TokenType NFA_138(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(62);
            }
            return type;
        }

        static private TokenType NFA_139(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(77);
            }
            return type;
        }

        static private TokenType NFA_140(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(361);
            }
            return type;
        }

        static private TokenType NFA_141(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes.contains(WHEN)) type = WHEN;
            }
            return type;
        }

        static private TokenType NFA_142(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(142);
                if (validTypes.contains(DECIMAL_NUMERIC_LITERAL)) type = DECIMAL_NUMERIC_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_143(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'M') || (ch == 'm')) {
                nextStates.set(50);
            }
            return type;
        }

        static private TokenType NFA_144(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                if (validTypes.contains(USE_EQUAL_INCREMENT)) type = USE_EQUAL_INCREMENT;
            }
            return type;
        }

        static private TokenType NFA_145(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '|') {
                if (validTypes.contains(CONCAT)) type = CONCAT;
            }
            return type;
        }

        static private TokenType NFA_146(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(100);
            }
            return type;
        }

        static private TokenType NFA_147(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'Y') || (ch == 'y')) {
                if (validTypes.contains(EMPTY)) type = EMPTY;
            }
            return type;
        }

        static private TokenType NFA_148(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'G') || (ch == 'g')) {
                nextStates.set(106);
            }
            return type;
        }

        static private TokenType NFA_149(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(167);
            }
            return type;
        }

        static private TokenType NFA_150(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(338);
            }
            return type;
        }

        static private TokenType NFA_151(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '-') {
                if (validTypes.contains(_TOKEN_68)) type = _TOKEN_68;
            }
            return type;
        }

        static private TokenType NFA_152(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(215);
            }
            return type;
        }

        static private TokenType NFA_153(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                if (validTypes.contains(CURRENTCUBE)) type = CURRENTCUBE;
            }
            return type;
        }

        static private TokenType NFA_154(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                if (validTypes.contains(NOT)) type = NOT;
            }
            return type;
        }

        static private TokenType NFA_155(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '_') {
                nextStates.set(34);
            }
            return type;
        }

        static private TokenType NFA_156(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(324);
            }
            return type;
        }

        static private TokenType NFA_157(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(256);
            }
            return type;
        }

        static private TokenType NFA_158(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(1);
            }
            return type;
        }

        static private TokenType NFA_159(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(352);
            }
            return type;
        }

        static private TokenType NFA_160(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'B') || (ch == 'b')) {
                nextStates.set(53);
            }
            return type;
        }

        static private TokenType NFA_161(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(98);
            }
            return type;
        }

        static private TokenType NFA_162(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                if (validTypes.contains(MEASURE)) type = MEASURE;
            }
            return type;
        }

        static private TokenType NFA_163(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                if (validTypes.contains(SET)) type = SET;
            }
            return type;
        }

        static private TokenType NFA_164(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(126);
            }
            return type;
        }

        static private TokenType NFA_165(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == '+') || (ch == '-')) {
                nextStates.set(221);
            } else if (ch >= '0' && ch <= '9') {
                nextStates.set(342);
            }
            return type;
        }

        static private TokenType NFA_166(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(125);
            }
            return type;
        }

        static private TokenType NFA_167(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(390);
            }
            return type;
        }

        static private TokenType NFA_168(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(25);
            }
            return type;
        }

        static private TokenType NFA_169(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes.contains(CHAPTERS)) type = CHAPTERS;
            }
            return type;
        }

        static private TokenType NFA_170(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                if (validTypes.contains(UPDATE)) type = UPDATE;
            }
            return type;
        }

        static private TokenType NFA_171(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(365);
            }
            return type;
        }

        static private TokenType NFA_172(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(171);
            }
            return type;
        }

        static private TokenType NFA_173(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(172);
            }
            return type;
        }

        static private TokenType NFA_174(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(66);
            }
            return type;
        }

        static private TokenType NFA_175(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                nextStates.set(220);
            }
            return type;
        }

        static private TokenType NFA_176(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(101);
            }
            return type;
        }

        static private TokenType NFA_177(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                if (validTypes.contains(WITH)) type = WITH;
            }
            return type;
        }

        static private TokenType NFA_178(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                if (validTypes.contains(NULL)) type = NULL;
            }
            return type;
        }

        static private TokenType NFA_179(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(275);
            }
            return type;
        }

        static private TokenType NFA_180(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(216);
            }
            return type;
        }

        static private TokenType NFA_181(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(349);
            }
            return type;
        }

        static private TokenType NFA_182(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'B') || (ch == 'b')) {
                nextStates.set(366);
            }
            return type;
        }

        static private TokenType NFA_183(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(305);
            }
            return type;
        }

        static private TokenType NFA_184(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(87);
            }
            return type;
        }

        static private TokenType NFA_185(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(88);
            }
            return type;
        }

        static private TokenType NFA_186(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(36);
            }
            return type;
        }

        static private TokenType NFA_187(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(170);
            }
            return type;
        }

        static private TokenType NFA_188(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                if (validTypes.contains(CELL)) type = CELL;
            }
            return type;
        }

        static private TokenType NFA_189(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(388);
            }
            return type;
        }

        static private TokenType NFA_190(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes.contains(ROWS)) type = ROWS;
            }
            return type;
        }

        static private TokenType NFA_191(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'M') || (ch == 'm')) {
                nextStates.set(207);
            }
            return type;
        }

        static private TokenType NFA_192(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'P') || (ch == 'p')) {
                nextStates.set(259);
            }
            return type;
        }

        static private TokenType NFA_193(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(199);
            }
            return type;
        }

        static private TokenType NFA_194(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(257);
            }
            return type;
        }

        static private TokenType NFA_195(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(191);
            }
            return type;
        }

        static private TokenType NFA_196(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(6);
            }
            return type;
        }

        static private TokenType NFA_197(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'D') || (ch == 'd')) {
                if (validTypes.contains(AND)) type = AND;
            }
            return type;
        }

        static private TokenType NFA_198(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'G') || (ch == 'g')) {
                nextStates.set(113);
            }
            return type;
        }

        static private TokenType NFA_199(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(35);
            }
            return type;
        }

        static private TokenType NFA_200(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(280);
            }
            return type;
        }

        static private TokenType NFA_201(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(58);
            }
            return type;
        }

        static private TokenType NFA_202(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(272);
            }
            return type;
        }

        static private TokenType NFA_203(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(189);
            }
            return type;
        }

        static private TokenType NFA_204(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(350);
            }
            return type;
        }

        static private TokenType NFA_205(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'Q') || (ch == 'q')) {
                nextStates.set(20);
            }
            return type;
        }

        static private TokenType NFA_206(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes.contains(PLAN)) type = PLAN;
            }
            return type;
        }

        static private TokenType NFA_207(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'M') || (ch == 'm')) {
                nextStates.set(359);
            }
            return type;
        }

        static private TokenType NFA_208(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(374);
            }
            return type;
        }

        static private TokenType NFA_209(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(218);
            }
            return type;
        }

        static private TokenType NFA_210(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                if (validTypes.contains(CAST)) type = CAST;
            }
            return type;
        }

        static private TokenType NFA_211(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(139);
            }
            return type;
        }

        static private TokenType NFA_212(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '"') {
                nextStates.set(396);
            }
            return type;
        }

        static private TokenType NFA_213(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                if (validTypes.contains(CASE)) type = CASE;
            }
            return type;
        }

        static private TokenType NFA_214(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes.contains(USE_EQUAL_ALLOCATION)) type = USE_EQUAL_ALLOCATION;
            }
            return type;
        }

        static private TokenType NFA_215(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                if (validTypes.contains(FOR)) type = FOR;
            }
            return type;
        }

        static private TokenType NFA_216(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(331);
            }
            return type;
        }

        static private TokenType NFA_217(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(46);
            }
            return type;
        }

        static private TokenType NFA_218(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(231);
            }
            return type;
        }

        static private TokenType NFA_219(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(302);
            }
            return type;
        }

        static private TokenType NFA_220(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(19);
            }
            return type;
        }

        static private TokenType NFA_221(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(342);
            }
            return type;
        }

        static private TokenType NFA_222(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(299);
            }
            return type;
        }

        static private TokenType NFA_223(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(269);
            }
            return type;
        }

        static private TokenType NFA_224(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(116);
            }
            return type;
        }

        static private TokenType NFA_225(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(99);
            }
            return type;
        }

        static private TokenType NFA_226(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(198);
            }
            return type;
        }

        static private TokenType NFA_227(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch >= 0x0 && ch <= '!') || (ch >= '#')) {
                nextStates.set(227);
            } else if (ch == '"') {
                nextStates.set(29);
                if (validTypes.contains(DOUBLE_QUOTED_STRING)) type = DOUBLE_QUOTED_STRING;
            }
            return type;
        }

        static private TokenType NFA_228(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '[') {
                nextStates.set(74);
            }
            return type;
        }

        static private TokenType NFA_229(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(386);
            }
            return type;
        }

        static private TokenType NFA_230(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(85);
            }
            return type;
        }

        static private TokenType NFA_231(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(176);
            }
            return type;
        }

        static private TokenType NFA_232(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'W') || (ch == 'w')) {
                nextStates.set(328);
            }
            return type;
        }

        static private TokenType NFA_233(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(237);
            }
            return type;
        }

        static private TokenType NFA_234(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(276);
            }
            return type;
        }

        static private TokenType NFA_235(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch >= 0x0 && ch <= '&') || (ch >= '(')) {
                nextStates.set(235);
            } else if (ch == '\'') {
                nextStates.set(311);
                if (validTypes.contains(STRING)) type = STRING;
            }
            return type;
        }

        static private TokenType NFA_236(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '.') {
                nextStates.set(49);
            } else if (ch >= '0' && ch <= '9') {
                nextStates.set(236);
                nextStates.set(49);
            } else if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(60);
            }
            return type;
        }

        static private TokenType NFA_237(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(177);
            }
            return type;
        }

        static private TokenType NFA_238(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(353);
            }
            return type;
        }

        static private TokenType NFA_239(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes.contains(TRAN)) type = TRAN;
            }
            return type;
        }

        static private TokenType NFA_240(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'M') || (ch == 'm')) {
                nextStates.set(82);
            }
            return type;
        }

        static private TokenType NFA_241(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(234);
            }
            return type;
        }

        static private TokenType NFA_242(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '_') {
                nextStates.set(37);
            }
            return type;
        }

        static private TokenType NFA_243(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(337);
            }
            return type;
        }

        static private TokenType NFA_244(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '=') {
                if (validTypes.contains(LE)) type = LE;
            }
            return type;
        }

        static private TokenType NFA_245(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (((ch == '$') || ((ch >= 'A' && ch <= 'Z') || ((ch == '_') || (ch >= 'a' && ch <= 'z')))) || (ch >= 128 && checkIntervals(NFA_MOVES_388, ch))) {
                nextStates.set(245);
                if (validTypes.contains(ID)) type = ID;
            }
            if ((ch >= '0' && ch <= '9') || (ch >= 128 && checkIntervals(NFA_MOVES_134, ch))) {
                nextStates.set(245);
                if (validTypes.contains(ID)) type = ID;
            }
            return type;
        }

        static private TokenType NFA_246(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes.contains(EXPLAIN)) type = EXPLAIN;
            }
            return type;
        }

        static private TokenType NFA_247(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                if (validTypes.contains(SELECT)) type = SELECT;
            }
            return type;
        }

        static private TokenType NFA_248(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(59);
            }
            return type;
        }

        static private TokenType NFA_249(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'B') || (ch == 'b')) {
                nextStates.set(153);
            }
            return type;
        }

        static private TokenType NFA_250(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(240);
            }
            return type;
        }

        static private TokenType NFA_251(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(283);
            }
            return type;
        }

        static private TokenType NFA_252(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(384);
            }
            return type;
        }

        static private TokenType NFA_253(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(335);
            } else if (ch >= '0' && ch <= '9') {
                nextStates.set(253);
                if (validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            } else if ((ch == 'D') || ((ch == 'F') || ((ch == 'd') || (ch == 'f')))) {
                if (validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_254(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                nextStates.set(180);
            }
            return type;
        }

        static private TokenType NFA_255(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == '+') || (ch == '-')) {
                nextStates.set(40);
            } else if (ch >= '0' && ch <= '9') {
                nextStates.set(55);
                if (validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_256(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(64);
            }
            return type;
        }

        static private TokenType NFA_257(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(340);
            }
            return type;
        }

        static private TokenType NFA_258(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                if (validTypes.contains(COMMIT)) type = COMMIT;
            }
            return type;
        }

        static private TokenType NFA_259(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(300);
            }
            return type;
        }

        static private TokenType NFA_260(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch >= 0x0 && ch <= '\t') || ((ch == 0xb || ch == '\f') || ((ch >= 0xe && ch <= '\\') || (ch >= '^')))) {
                nextStates.set(260);
            } else if (ch == ']') {
                nextStates.set(31);
                if (validTypes.contains(QUOTED_ID)) type = QUOTED_ID;
            }
            return type;
        }

        static private TokenType NFA_261(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(345);
            }
            return type;
        }

        static private TokenType NFA_262(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(347);
            }
            return type;
        }

        static private TokenType NFA_263(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(48);
            }
            return type;
        }

        static private TokenType NFA_264(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(105);
            }
            return type;
        }

        static private TokenType NFA_265(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(136);
            }
            return type;
        }

        static private TokenType NFA_266(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                nextStates.set(312);
            }
            return type;
        }

        static private TokenType NFA_267(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'X') || (ch == 'x')) {
                nextStates.set(71);
            }
            return type;
        }

        static private TokenType NFA_268(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(373);
            }
            return type;
        }

        static private TokenType NFA_269(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(102);
            }
            return type;
        }

        static private TokenType NFA_270(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(67);
            }
            return type;
        }

        static private TokenType NFA_271(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'M') || (ch == 'm')) {
                nextStates.set(308);
            }
            return type;
        }

        static private TokenType NFA_272(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'W') || (ch == 'w')) {
                nextStates.set(203);
            }
            return type;
        }

        static private TokenType NFA_273(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(56);
            }
            return type;
        }

        static private TokenType NFA_274(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                if (validTypes.contains(OR)) type = OR;
            }
            return type;
        }

        static private TokenType NFA_275(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'M') || (ch == 'm')) {
                nextStates.set(297);
            }
            return type;
        }

        static private TokenType NFA_276(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'D') || (ch == 'd')) {
                nextStates.set(242);
            }
            return type;
        }

        static private TokenType NFA_277(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'Y') || (ch == 'y')) {
                nextStates.set(355);
            }
            return type;
        }

        static private TokenType NFA_278(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(97);
            }
            return type;
        }

        static private TokenType NFA_279(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(217);
            }
            return type;
        }

        static private TokenType NFA_280(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(144);
            }
            return type;
        }

        static private TokenType NFA_281(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch >= 0x0 && ch <= '.') || (ch >= '0')) {
                if (validTypes.contains(_TOKEN_67)) type = _TOKEN_67;
            }
            return type;
        }

        static private TokenType NFA_282(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(117);
            }
            return type;
        }

        static private TokenType NFA_283(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes.contains(THEN)) type = THEN;
            }
            return type;
        }

        static private TokenType NFA_284(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(143);
            }
            return type;
        }

        static private TokenType NFA_285(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(285);
                if (validTypes.contains(UNSIGNED_INTEGER_LITERAL)) type = UNSIGNED_INTEGER_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_286(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(223);
            }
            return type;
        }

        static private TokenType NFA_287(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(38);
            }
            return type;
        }

        static private TokenType NFA_288(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes.contains(COLUMNS)) type = COLUMNS;
            }
            return type;
        }

        static private TokenType NFA_289(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'M') || (ch == 'm')) {
                if (validTypes.contains($SYSTEM)) type = $SYSTEM;
            }
            return type;
        }

        static private TokenType NFA_290(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'Q') || (ch == 'q')) {
                nextStates.set(360);
            }
            return type;
        }

        static private TokenType NFA_291(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(132);
            }
            return type;
        }

        static private TokenType NFA_292(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(344);
            }
            return type;
        }

        static private TokenType NFA_293(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes.contains(AXIS)) type = AXIS;
            }
            return type;
        }

        static private TokenType NFA_294(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(304);
            }
            return type;
        }

        static private TokenType NFA_295(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(156);
            }
            return type;
        }

        static private TokenType NFA_296(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(213);
            }
            return type;
        }

        static private TokenType NFA_297(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(278);
            }
            return type;
        }

        static private TokenType NFA_298(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(89);
            }
            return type;
        }

        static private TokenType NFA_299(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(11);
            }
            return type;
        }

        static private TokenType NFA_300(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(134);
            }
            return type;
        }

        static private TokenType NFA_301(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '*') {
                if (validTypes.contains(_TOKEN_69)) type = _TOKEN_69;
            }
            return type;
        }

        static private TokenType NFA_302(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(265);
            }
            return type;
        }

        static private TokenType NFA_303(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(267);
            }
            return type;
        }

        static private TokenType NFA_304(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes.contains(PAGES)) type = PAGES;
            }
            return type;
        }

        static private TokenType NFA_305(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '_') {
                nextStates.set(111);
            }
            return type;
        }

        static private TokenType NFA_306(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'P') || (ch == 'p')) {
                nextStates.set(209);
            }
            return type;
        }

        static private TokenType NFA_307(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'X') || (ch == 'x')) {
                nextStates.set(248);
            }
            return type;
        }

        static private TokenType NFA_308(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(288);
            }
            return type;
        }

        static private TokenType NFA_309(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'X') || (ch == 'x')) {
                nextStates.set(192);
            }
            return type;
        }

        static private TokenType NFA_310(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(23);
            }
            return type;
        }

        static private TokenType NFA_311(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '\'') {
                nextStates.set(235);
            }
            return type;
        }

        static private TokenType NFA_312(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(367);
            }
            return type;
        }

        static private TokenType NFA_313(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes.contains(ON)) type = ON;
            }
            return type;
        }

        static private TokenType NFA_314(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(148);
            }
            return type;
        }

        static private TokenType NFA_315(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                nextStates.set(375);
            }
            return type;
        }

        static private TokenType NFA_316(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(182);
            }
            return type;
        }

        static private TokenType NFA_317(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'W') || (ch == 'w')) {
                nextStates.set(95);
            }
            return type;
        }

        static private TokenType NFA_318(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(26);
            }
            return type;
        }

        static private TokenType NFA_319(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(160);
            }
            return type;
        }

        static private TokenType NFA_320(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(368);
            }
            return type;
        }

        static private TokenType NFA_321(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '_') {
                nextStates.set(123);
            }
            return type;
        }

        static private TokenType NFA_322(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '*') {
                nextStates.set(389);
            }
            return type;
        }

        static private TokenType NFA_323(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(7);
            }
            return type;
        }

        static private TokenType NFA_324(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(214);
            }
            return type;
        }

        static private TokenType NFA_325(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(255);
            } else if (ch >= '0' && ch <= '9') {
                nextStates.set(325);
                if (validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            } else if ((ch == 'D') || ((ch == 'F') || ((ch == 'd') || (ch == 'f')))) {
                if (validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_326(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(291);
            }
            return type;
        }

        static private TokenType NFA_327(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '>') {
                if (validTypes.contains(NE)) type = NE;
            }
            return type;
        }

        static private TokenType NFA_328(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(318);
            }
            return type;
        }

        static private TokenType NFA_329(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(92);
            }
            return type;
        }

        static private TokenType NFA_330(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'M') || (ch == 'm')) {
                nextStates.set(200);
            }
            return type;
        }

        static private TokenType NFA_331(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'D') || (ch == 'd')) {
                nextStates.set(155);
            }
            return type;
        }

        static private TokenType NFA_332(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(90);
            }
            return type;
        }

        static private TokenType NFA_333(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '.') {
                nextStates.set(107);
                if (validTypes.contains(DECIMAL_NUMERIC_LITERAL)) type = DECIMAL_NUMERIC_LITERAL;
            } else if (ch >= '0' && ch <= '9') {
                nextStates.set(107);
                nextStates.set(333);
                if (validTypes.contains(DECIMAL_NUMERIC_LITERAL)) type = DECIMAL_NUMERIC_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_334(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(321);
            }
            return type;
        }

        static private TokenType NFA_335(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == '+') || (ch == '-')) {
                nextStates.set(124);
            } else if (ch >= '0' && ch <= '9') {
                nextStates.set(378);
                if (validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_336(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(336);
            } else if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(60);
            }
            return type;
        }

        static private TokenType NFA_337(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(330);
            }
            return type;
        }

        static private TokenType NFA_338(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(204);
            }
            return type;
        }

        static private TokenType NFA_339(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(247);
            }
            return type;
        }

        static private TokenType NFA_340(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'C') || (ch == 'c')) {
                nextStates.set(158);
            }
            return type;
        }

        static private TokenType NFA_341(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                if (validTypes.contains(PROPERTIES)) type = PROPERTIES;
            }
            return type;
        }

        static private TokenType NFA_342(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(342);
            } else if ((ch == 'D') || ((ch == 'F') || ((ch == 'd') || (ch == 'f')))) {
                if (validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_343(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(183);
            }
            return type;
        }

        static private TokenType NFA_344(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(121);
            }
            return type;
        }

        static private TokenType NFA_345(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(354);
            }
            return type;
        }

        static private TokenType NFA_346(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'Y') || (ch == 'y')) {
                if (validTypes.contains(BY)) type = BY;
            }
            return type;
        }

        static private TokenType NFA_347(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(8);
            }
            return type;
        }

        static private TokenType NFA_348(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes.contains(CALCULATION)) type = CALCULATION;
            }
            return type;
        }

        static private TokenType NFA_349(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(164);
            }
            return type;
        }

        static private TokenType NFA_350(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(379);
            }
            return type;
        }

        static private TokenType NFA_351(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                if (validTypes.contains(XOR)) type = XOR;
            }
            return type;
        }

        static private TokenType NFA_352(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(286);
            }
            return type;
        }

        static private TokenType NFA_353(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(72);
            }
            return type;
        }

        static private TokenType NFA_354(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes.contains(DIMENSION)) type = DIMENSION;
            }
            return type;
        }

        static private TokenType NFA_355(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'S') || (ch == 's')) {
                nextStates.set(14);
            }
            return type;
        }

        static private TokenType NFA_356(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'L') || (ch == 'l')) {
                nextStates.set(363);
            }
            return type;
        }

        static private TokenType NFA_357(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                if (validTypes.contains(REFRESH)) type = REFRESH;
            }
            return type;
        }

        static private TokenType NFA_358(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(75);
            }
            return type;
        }

        static private TokenType NFA_359(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'I') || (ch == 'i')) {
                nextStates.set(258);
            }
            return type;
        }

        static private TokenType NFA_360(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(16);
            }
            return type;
        }

        static private TokenType NFA_361(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes.contains(RETURN)) type = RETURN;
            }
            return type;
        }

        static private TokenType NFA_362(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (((ch == '$') || ((ch >= 'A' && ch <= 'Z') || ((ch == '_') || (ch >= 'a' && ch <= 'z')))) || (ch >= 128 && checkIntervals(NFA_MOVES_77, ch))) {
                nextStates.set(362);
                if (validTypes.contains(AMP_UNQUOTED_ID)) type = AMP_UNQUOTED_ID;
            }
            if ((ch >= '0' && ch <= '9') || (ch >= 128 && checkIntervals(NFA_MOVES_436, ch))) {
                nextStates.set(362);
                if (validTypes.contains(AMP_UNQUOTED_ID)) type = AMP_UNQUOTED_ID;
            }
            return type;
        }

        static private TokenType NFA_363(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '_') {
                nextStates.set(17);
            }
            return type;
        }

        static private TokenType NFA_364(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(21);
            }
            return type;
        }

        static private TokenType NFA_365(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(323);
            }
            return type;
        }

        static private TokenType NFA_366(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                if (validTypes.contains(CUBE)) type = CUBE;
            }
            return type;
        }

        static private TokenType NFA_367(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(391);
            }
            return type;
        }

        static private TokenType NFA_368(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                if (validTypes.contains(USE_WEIGHTED_INCREMENT)) type = USE_WEIGHTED_INCREMENT;
            }
            return type;
        }

        static private TokenType NFA_369(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'R') || (ch == 'r')) {
                nextStates.set(122);
            }
            return type;
        }

        static private TokenType NFA_370(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(370);
                if (validTypes.contains(APPROX_NUMERIC_LITERAL)) type = APPROX_NUMERIC_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_371(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(83);
                if (validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_372(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(317);
            }
            return type;
        }

        static private TokenType NFA_373(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(149);
            }
            return type;
        }

        static private TokenType NFA_374(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'G') || (ch == 'g')) {
                nextStates.set(294);
            }
            return type;
        }

        static private TokenType NFA_375(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(141);
            }
            return type;
        }

        static private TokenType NFA_376(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(206);
            }
            return type;
        }

        static private TokenType NFA_377(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(270);
            }
            return type;
        }

        static private TokenType NFA_378(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch >= '0' && ch <= '9') {
                nextStates.set(378);
                if (validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            } else if ((ch == 'D') || ((ch == 'F') || ((ch == 'd') || (ch == 'f')))) {
                if (validTypes.contains(FLOATING_POINT_LITERAL)) type = FLOATING_POINT_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_379(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(222);
            }
            return type;
        }

        static private TokenType NFA_380(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'U') || (ch == 'u')) {
                nextStates.set(271);
            }
            return type;
        }

        static private TokenType NFA_381(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'O') || (ch == 'o')) {
                nextStates.set(110);
            }
            return type;
        }

        static private TokenType NFA_382(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                nextStates.set(197);
            }
            return type;
        }

        static private TokenType NFA_383(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'H') || (ch == 'h')) {
                nextStates.set(251);
            }
            return type;
        }

        static private TokenType NFA_384(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(45);
            }
            return type;
        }

        static private TokenType NFA_385(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'A') || (ch == 'a')) {
                nextStates.set(184);
            }
            return type;
        }

        static private TokenType NFA_386(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'K') || (ch == 'k')) {
                if (validTypes.contains(ROLLBACK)) type = ROLLBACK;
            }
            return type;
        }

        static private TokenType NFA_387(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                nextStates.set(289);
            }
            return type;
        }

        static private TokenType NFA_388(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                if (validTypes.contains(FIRSTROWSET)) type = FIRSTROWSET;
            }
            return type;
        }

        static private TokenType NFA_389(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '*') {
                nextStates.set(281);
            }
            return type;
        }

        static private TokenType NFA_390(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                if (validTypes.contains(CREATE)) type = CREATE;
            }
            return type;
        }

        static private TokenType NFA_391(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'E') || (ch == 'e')) {
                if (validTypes.contains(WHERE)) type = WHERE;
            }
            return type;
        }

        static private TokenType NFA_392(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'M') || (ch == 'm')) {
                if (validTypes.contains(FROM)) type = FROM;
            }
            return type;
        }

        static private TokenType NFA_393(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'T') || (ch == 't')) {
                nextStates.set(70);
            }
            return type;
        }

        static private TokenType NFA_394(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'N') || (ch == 'n')) {
                if (validTypes.contains(BEGIN)) type = BEGIN;
            }
            return type;
        }

        static private TokenType NFA_395(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch == 'P') || (ch == 'p')) {
                nextStates.set(80);
            }
            return type;
        }

        static private TokenType NFA_396(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if ((ch >= 0x0 && ch <= '!') || (ch >= '#')) {
                nextStates.set(396);
            } else if (ch == '"') {
                nextStates.set(212);
                if (validTypes.contains(STRING)) type = STRING;
            }
            return type;
        }

        static private int[] NFA_MOVES_77 = NFA_MOVES_77_init();

        static private int[] NFA_MOVES_77_init() {
            return new int[] {'$', '$', 'A', 'Z', '_', '_', 'a', 'z', 0xc0, 0xd6,
            0xd8, 0xf6, 0xf8, 0x1fff, 0x2c62, 0x2c66, 0x2c6d, 0x2c70, 0x2c7e, 0x2c7f,
            0x2d00, 0x2d25, 0x2d27, 0x2d27, 0x2d2d, 0x2d2d, 0x3040, 0x318f, 0x3300,
            0x337f, 0x3400, 0x3d2d, 0x4e00, 0x9fff, 0xa64a, 0xa64a, 0xa77d, 0xa77d,
            0xa78d, 0xa78d, 0xa7aa, 0xa7ae, 0xa7b0, 0xa7b2, 0xa7c5, 0xa7c6, 0xab70,
            0xabbf, 0xf900, 0xfaff};
        }

        static private int[] NFA_MOVES_134 = NFA_MOVES_134_init();

        static private int[] NFA_MOVES_134_init() {
            return new int[] {'0', '9', 0x660, 0x669, 0x6f0, 0x6f9, 0x966, 0x96f,
            0x9e6, 0x9ef, 0xa66, 0xa6f, 0xae6, 0xaef, 0xb66, 0xb6f, 0xbe7, 0xbef,
            0xc66, 0xc6f, 0xce6, 0xcef, 0xd66, 0xd6f, 0xe50, 0xe59, 0xed0, 0xed9,
            0x1040, 0x1049};
        }

        static private int[] NFA_MOVES_331 = NFA_MOVES_331_init();

        static private int[] NFA_MOVES_331_init() {
            return new int[] {'$', '$', 'A', 'Z', '_', '_', 'a', 'z', 0xc0, 0xd6,
            0xd8, 0xf6, 0xf8, 0x1fff, 0x2c62, 0x2c66, 0x2c6d, 0x2c70, 0x2c7e, 0x2c7f,
            0x2d00, 0x2d25, 0x2d27, 0x2d27, 0x2d2d, 0x2d2d, 0x3040, 0x318f, 0x3300,
            0x337f, 0x3400, 0x3d2d, 0x4e00, 0x9fff, 0xa64a, 0xa64a, 0xa77d, 0xa77d,
            0xa78d, 0xa78d, 0xa7aa, 0xa7ae, 0xa7b0, 0xa7b2, 0xa7c5, 0xa7c6, 0xab70,
            0xabbf, 0xf900, 0xfaff};
        }

        static private int[] NFA_MOVES_388 = NFA_MOVES_388_init();

        static private int[] NFA_MOVES_388_init() {
            return new int[] {'$', '$', 'A', 'Z', '_', '_', 'a', 'z', 0xc0, 0xd6,
            0xd8, 0xf6, 0xf8, 0x1fff, 0x2c62, 0x2c66, 0x2c6d, 0x2c70, 0x2c7e, 0x2c7f,
            0x2d00, 0x2d25, 0x2d27, 0x2d27, 0x2d2d, 0x2d2d, 0x3040, 0x318f, 0x3300,
            0x337f, 0x3400, 0x3d2d, 0x4e00, 0x9fff, 0xa64a, 0xa64a, 0xa77d, 0xa77d,
            0xa78d, 0xa78d, 0xa7aa, 0xa7ae, 0xa7b0, 0xa7b2, 0xa7c5, 0xa7c6, 0xab70,
            0xabbf, 0xf900, 0xfaff};
        }

        static private int[] NFA_MOVES_436 = NFA_MOVES_436_init();

        static private int[] NFA_MOVES_436_init() {
            return new int[] {'0', '9', 0x660, 0x669, 0x6f0, 0x6f9, 0x966, 0x96f,
            0x9e6, 0x9ef, 0xa66, 0xa6f, 0xae6, 0xaef, 0xb66, 0xb6f, 0xbe7, 0xbef,
            0xc66, 0xc6f, 0xce6, 0xcef, 0xd66, 0xd6f, 0xe50, 0xe59, 0xed0, 0xed9,
            0x1040, 0x1049};
        }

        static private void NFA_FUNCTIONS_init() {
            NfaFunction[] functions = new NfaFunction[] {DEFAULT::NFA_0, DEFAULT::NFA_1,
            DEFAULT::NFA_2, DEFAULT::NFA_3, DEFAULT::NFA_4, DEFAULT::NFA_5, DEFAULT::NFA_6,
            DEFAULT::NFA_7, DEFAULT::NFA_8, DEFAULT::NFA_9, DEFAULT::NFA_10, DEFAULT::NFA_11,
            DEFAULT::NFA_12, DEFAULT::NFA_13, DEFAULT::NFA_14, DEFAULT::NFA_15, DEFAULT::NFA_16,
            DEFAULT::NFA_17, DEFAULT::NFA_18, DEFAULT::NFA_19, DEFAULT::NFA_20, DEFAULT::NFA_21,
            DEFAULT::NFA_22, DEFAULT::NFA_23, DEFAULT::NFA_24, DEFAULT::NFA_25, DEFAULT::NFA_26,
            DEFAULT::NFA_27, DEFAULT::NFA_28, DEFAULT::NFA_29, DEFAULT::NFA_30, DEFAULT::NFA_31,
            DEFAULT::NFA_32, DEFAULT::NFA_33, DEFAULT::NFA_34, DEFAULT::NFA_35, DEFAULT::NFA_36,
            DEFAULT::NFA_37, DEFAULT::NFA_38, DEFAULT::NFA_39, DEFAULT::NFA_40, DEFAULT::NFA_41,
            DEFAULT::NFA_42, DEFAULT::NFA_43, DEFAULT::NFA_44, DEFAULT::NFA_45, DEFAULT::NFA_46,
            DEFAULT::NFA_47, DEFAULT::NFA_48, DEFAULT::NFA_49, DEFAULT::NFA_50, DEFAULT::NFA_51,
            DEFAULT::NFA_52, DEFAULT::NFA_53, DEFAULT::NFA_54, DEFAULT::NFA_55, DEFAULT::NFA_56,
            DEFAULT::NFA_57, DEFAULT::NFA_58, DEFAULT::NFA_59, DEFAULT::NFA_60, DEFAULT::NFA_61,
            DEFAULT::NFA_62, DEFAULT::NFA_63, DEFAULT::NFA_64, DEFAULT::NFA_65, DEFAULT::NFA_66,
            DEFAULT::NFA_67, DEFAULT::NFA_68, DEFAULT::NFA_69, DEFAULT::NFA_70, DEFAULT::NFA_71,
            DEFAULT::NFA_72, DEFAULT::NFA_73, DEFAULT::NFA_74, DEFAULT::NFA_75, DEFAULT::NFA_76,
            DEFAULT::NFA_77, DEFAULT::NFA_78, DEFAULT::NFA_79, DEFAULT::NFA_80, DEFAULT::NFA_81,
            DEFAULT::NFA_82, DEFAULT::NFA_83, DEFAULT::NFA_84, DEFAULT::NFA_85, DEFAULT::NFA_86,
            DEFAULT::NFA_87, DEFAULT::NFA_88, DEFAULT::NFA_89, DEFAULT::NFA_90, DEFAULT::NFA_91,
            DEFAULT::NFA_92, DEFAULT::NFA_93, DEFAULT::NFA_94, DEFAULT::NFA_95, DEFAULT::NFA_96,
            DEFAULT::NFA_97, DEFAULT::NFA_98, DEFAULT::NFA_99, DEFAULT::NFA_100, DEFAULT::NFA_101,
            DEFAULT::NFA_102, DEFAULT::NFA_103, DEFAULT::NFA_104, DEFAULT::NFA_105,
            DEFAULT::NFA_106, DEFAULT::NFA_107, DEFAULT::NFA_108, DEFAULT::NFA_109,
            DEFAULT::NFA_110, DEFAULT::NFA_111, DEFAULT::NFA_112, DEFAULT::NFA_113,
            DEFAULT::NFA_114, DEFAULT::NFA_115, DEFAULT::NFA_116, DEFAULT::NFA_117,
            DEFAULT::NFA_118, DEFAULT::NFA_119, DEFAULT::NFA_120, DEFAULT::NFA_121,
            DEFAULT::NFA_122, DEFAULT::NFA_123, DEFAULT::NFA_124, DEFAULT::NFA_125,
            DEFAULT::NFA_126, DEFAULT::NFA_127, DEFAULT::NFA_128, DEFAULT::NFA_129,
            DEFAULT::NFA_130, DEFAULT::NFA_131, DEFAULT::NFA_132, DEFAULT::NFA_133,
            DEFAULT::NFA_134, DEFAULT::NFA_135, DEFAULT::NFA_136, DEFAULT::NFA_137,
            DEFAULT::NFA_138, DEFAULT::NFA_139, DEFAULT::NFA_140, DEFAULT::NFA_141,
            DEFAULT::NFA_142, DEFAULT::NFA_143, DEFAULT::NFA_144, DEFAULT::NFA_145,
            DEFAULT::NFA_146, DEFAULT::NFA_147, DEFAULT::NFA_148, DEFAULT::NFA_149,
            DEFAULT::NFA_150, DEFAULT::NFA_151, DEFAULT::NFA_152, DEFAULT::NFA_153,
            DEFAULT::NFA_154, DEFAULT::NFA_155, DEFAULT::NFA_156, DEFAULT::NFA_157,
            DEFAULT::NFA_158, DEFAULT::NFA_159, DEFAULT::NFA_160, DEFAULT::NFA_161,
            DEFAULT::NFA_162, DEFAULT::NFA_163, DEFAULT::NFA_164, DEFAULT::NFA_165,
            DEFAULT::NFA_166, DEFAULT::NFA_167, DEFAULT::NFA_168, DEFAULT::NFA_169,
            DEFAULT::NFA_170, DEFAULT::NFA_171, DEFAULT::NFA_172, DEFAULT::NFA_173,
            DEFAULT::NFA_174, DEFAULT::NFA_175, DEFAULT::NFA_176, DEFAULT::NFA_177,
            DEFAULT::NFA_178, DEFAULT::NFA_179, DEFAULT::NFA_180, DEFAULT::NFA_181,
            DEFAULT::NFA_182, DEFAULT::NFA_183, DEFAULT::NFA_184, DEFAULT::NFA_185,
            DEFAULT::NFA_186, DEFAULT::NFA_187, DEFAULT::NFA_188, DEFAULT::NFA_189,
            DEFAULT::NFA_190, DEFAULT::NFA_191, DEFAULT::NFA_192, DEFAULT::NFA_193,
            DEFAULT::NFA_194, DEFAULT::NFA_195, DEFAULT::NFA_196, DEFAULT::NFA_197,
            DEFAULT::NFA_198, DEFAULT::NFA_199, DEFAULT::NFA_200, DEFAULT::NFA_201,
            DEFAULT::NFA_202, DEFAULT::NFA_203, DEFAULT::NFA_204, DEFAULT::NFA_205,
            DEFAULT::NFA_206, DEFAULT::NFA_207, DEFAULT::NFA_208, DEFAULT::NFA_209,
            DEFAULT::NFA_210, DEFAULT::NFA_211, DEFAULT::NFA_212, DEFAULT::NFA_213,
            DEFAULT::NFA_214, DEFAULT::NFA_215, DEFAULT::NFA_216, DEFAULT::NFA_217,
            DEFAULT::NFA_218, DEFAULT::NFA_219, DEFAULT::NFA_220, DEFAULT::NFA_221,
            DEFAULT::NFA_222, DEFAULT::NFA_223, DEFAULT::NFA_224, DEFAULT::NFA_225,
            DEFAULT::NFA_226, DEFAULT::NFA_227, DEFAULT::NFA_228, DEFAULT::NFA_229,
            DEFAULT::NFA_230, DEFAULT::NFA_231, DEFAULT::NFA_232, DEFAULT::NFA_233,
            DEFAULT::NFA_234, DEFAULT::NFA_235, DEFAULT::NFA_236, DEFAULT::NFA_237,
            DEFAULT::NFA_238, DEFAULT::NFA_239, DEFAULT::NFA_240, DEFAULT::NFA_241,
            DEFAULT::NFA_242, DEFAULT::NFA_243, DEFAULT::NFA_244, DEFAULT::NFA_245,
            DEFAULT::NFA_246, DEFAULT::NFA_247, DEFAULT::NFA_248, DEFAULT::NFA_249,
            DEFAULT::NFA_250, DEFAULT::NFA_251, DEFAULT::NFA_252, DEFAULT::NFA_253,
            DEFAULT::NFA_254, DEFAULT::NFA_255, DEFAULT::NFA_256, DEFAULT::NFA_257,
            DEFAULT::NFA_258, DEFAULT::NFA_259, DEFAULT::NFA_260, DEFAULT::NFA_261,
            DEFAULT::NFA_262, DEFAULT::NFA_263, DEFAULT::NFA_264, DEFAULT::NFA_265,
            DEFAULT::NFA_266, DEFAULT::NFA_267, DEFAULT::NFA_268, DEFAULT::NFA_269,
            DEFAULT::NFA_270, DEFAULT::NFA_271, DEFAULT::NFA_272, DEFAULT::NFA_273,
            DEFAULT::NFA_274, DEFAULT::NFA_275, DEFAULT::NFA_276, DEFAULT::NFA_277,
            DEFAULT::NFA_278, DEFAULT::NFA_279, DEFAULT::NFA_280, DEFAULT::NFA_281,
            DEFAULT::NFA_282, DEFAULT::NFA_283, DEFAULT::NFA_284, DEFAULT::NFA_285,
            DEFAULT::NFA_286, DEFAULT::NFA_287, DEFAULT::NFA_288, DEFAULT::NFA_289,
            DEFAULT::NFA_290, DEFAULT::NFA_291, DEFAULT::NFA_292, DEFAULT::NFA_293,
            DEFAULT::NFA_294, DEFAULT::NFA_295, DEFAULT::NFA_296, DEFAULT::NFA_297,
            DEFAULT::NFA_298, DEFAULT::NFA_299, DEFAULT::NFA_300, DEFAULT::NFA_301,
            DEFAULT::NFA_302, DEFAULT::NFA_303, DEFAULT::NFA_304, DEFAULT::NFA_305,
            DEFAULT::NFA_306, DEFAULT::NFA_307, DEFAULT::NFA_308, DEFAULT::NFA_309,
            DEFAULT::NFA_310, DEFAULT::NFA_311, DEFAULT::NFA_312, DEFAULT::NFA_313,
            DEFAULT::NFA_314, DEFAULT::NFA_315, DEFAULT::NFA_316, DEFAULT::NFA_317,
            DEFAULT::NFA_318, DEFAULT::NFA_319, DEFAULT::NFA_320, DEFAULT::NFA_321,
            DEFAULT::NFA_322, DEFAULT::NFA_323, DEFAULT::NFA_324, DEFAULT::NFA_325,
            DEFAULT::NFA_326, DEFAULT::NFA_327, DEFAULT::NFA_328, DEFAULT::NFA_329,
            DEFAULT::NFA_330, DEFAULT::NFA_331, DEFAULT::NFA_332, DEFAULT::NFA_333,
            DEFAULT::NFA_334, DEFAULT::NFA_335, DEFAULT::NFA_336, DEFAULT::NFA_337,
            DEFAULT::NFA_338, DEFAULT::NFA_339, DEFAULT::NFA_340, DEFAULT::NFA_341,
            DEFAULT::NFA_342, DEFAULT::NFA_343, DEFAULT::NFA_344, DEFAULT::NFA_345,
            DEFAULT::NFA_346, DEFAULT::NFA_347, DEFAULT::NFA_348, DEFAULT::NFA_349,
            DEFAULT::NFA_350, DEFAULT::NFA_351, DEFAULT::NFA_352, DEFAULT::NFA_353,
            DEFAULT::NFA_354, DEFAULT::NFA_355, DEFAULT::NFA_356, DEFAULT::NFA_357,
            DEFAULT::NFA_358, DEFAULT::NFA_359, DEFAULT::NFA_360, DEFAULT::NFA_361,
            DEFAULT::NFA_362, DEFAULT::NFA_363, DEFAULT::NFA_364, DEFAULT::NFA_365,
            DEFAULT::NFA_366, DEFAULT::NFA_367, DEFAULT::NFA_368, DEFAULT::NFA_369,
            DEFAULT::NFA_370, DEFAULT::NFA_371, DEFAULT::NFA_372, DEFAULT::NFA_373,
            DEFAULT::NFA_374, DEFAULT::NFA_375, DEFAULT::NFA_376, DEFAULT::NFA_377,
            DEFAULT::NFA_378, DEFAULT::NFA_379, DEFAULT::NFA_380, DEFAULT::NFA_381,
            DEFAULT::NFA_382, DEFAULT::NFA_383, DEFAULT::NFA_384, DEFAULT::NFA_385,
            DEFAULT::NFA_386, DEFAULT::NFA_387, DEFAULT::NFA_388, DEFAULT::NFA_389,
            DEFAULT::NFA_390, DEFAULT::NFA_391, DEFAULT::NFA_392, DEFAULT::NFA_393,
            DEFAULT::NFA_394, DEFAULT::NFA_395, DEFAULT::NFA_396};
            functionTableMap.put(LexicalState.DEFAULT, functions);
        }

    }


    /**
    * Holder class for NFA code related to IN_SINGLE_LINE_COMMENT lexical state
    */
    private static class IN_SINGLE_LINE_COMMENT {

        static private TokenType NFA_IN_SINGLE_LINE_COMMENT_0(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '\r') {
                nextStates.set(1);
            }
            if (ch >= 0x0) {
                if (validTypes.contains(_TOKEN_73)) type = _TOKEN_73;
            }
            if (ch == '\n') {
                if (validTypes.contains(SINGLE_LINE_COMMENT)) type = SINGLE_LINE_COMMENT;
            } else if (ch == '\r') {
                if (validTypes.contains(SINGLE_LINE_COMMENT)) type = SINGLE_LINE_COMMENT;
            }
            return type;
        }

        static private TokenType NFA_IN_SINGLE_LINE_COMMENT_1(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '\n') {
                if (validTypes.contains(SINGLE_LINE_COMMENT)) type = SINGLE_LINE_COMMENT;
            }
            return type;
        }

        static private void NFA_FUNCTIONS_init() {
            NfaFunction[] functions = new NfaFunction[] {IN_SINGLE_LINE_COMMENT::NFA_IN_SINGLE_LINE_COMMENT_0,
            IN_SINGLE_LINE_COMMENT::NFA_IN_SINGLE_LINE_COMMENT_1};
            functionTableMap.put(LexicalState.IN_SINGLE_LINE_COMMENT, functions);
        }

    }


    /**
    * Holder class for NFA code related to IN_FORMAL_COMMENT lexical state
    */
    private static class IN_FORMAL_COMMENT {

        static private TokenType NFA_IN_FORMAL_COMMENT_0(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '*') {
                nextStates.set(1);
            }
            if (ch >= 0x0) {
                if (validTypes.contains(_TOKEN_73)) type = _TOKEN_73;
            }
            return type;
        }

        static private TokenType NFA_IN_FORMAL_COMMENT_1(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '/') {
                if (validTypes.contains(FORMAL_COMMENT)) type = FORMAL_COMMENT;
            }
            return type;
        }

        static private void NFA_FUNCTIONS_init() {
            NfaFunction[] functions = new NfaFunction[] {IN_FORMAL_COMMENT::NFA_IN_FORMAL_COMMENT_0,
            IN_FORMAL_COMMENT::NFA_IN_FORMAL_COMMENT_1};
            functionTableMap.put(LexicalState.IN_FORMAL_COMMENT, functions);
        }

    }


    /**
    * Holder class for NFA code related to IN_MULTI_LINE_COMMENT lexical state
    */
    private static class IN_MULTI_LINE_COMMENT {

        static private TokenType NFA_IN_MULTI_LINE_COMMENT_0(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '*') {
                nextStates.set(1);
            }
            if (ch >= 0x0) {
                if (validTypes.contains(_TOKEN_73)) type = _TOKEN_73;
            }
            return type;
        }

        static private TokenType NFA_IN_MULTI_LINE_COMMENT_1(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type = null;
            if (ch == '/') {
                if (validTypes.contains(MULTI_LINE_COMMENT)) type = MULTI_LINE_COMMENT;
            }
            return type;
        }

        static private void NFA_FUNCTIONS_init() {
            NfaFunction[] functions = new NfaFunction[] {IN_MULTI_LINE_COMMENT::NFA_IN_MULTI_LINE_COMMENT_0,
            IN_MULTI_LINE_COMMENT::NFA_IN_MULTI_LINE_COMMENT_1};
            functionTableMap.put(LexicalState.IN_MULTI_LINE_COMMENT, functions);
        }

    }

}


