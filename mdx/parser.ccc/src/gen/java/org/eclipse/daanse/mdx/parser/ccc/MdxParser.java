/* Generated by: CongoCC Parser Generator. MdxParser.java
*
* Copyright (c) 2023 Contributors to the Eclipse Foundation.
*
* This program and the accompanying materials are made
* available under the terms of the Eclipse Public License 2.0
* which is available at https://www.eclipse.org/legal/epl-2.0/
*
* SPDX-License-Identifier: EPL-2.0
*
* Contributors: see corresponding .ccc file
*/
package org.eclipse.daanse.mdx.parser.ccc;

import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.ListIterator;
import java.util.concurrent.CancellationException;
import org.eclipse.daanse.mdx.parser.ccc.Token.TokenType;
import static org.eclipse.daanse.mdx.parser.ccc.Token.TokenType.*;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseMdxStatement;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseDrillthroughStatement;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseExplainStatement;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseReturnItems;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseReturnItem;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseCreateCellCalculationBodyClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseMeasureBodyClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectWithClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectStatement;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectSubcubeClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectSubcubeClauseName;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectSubcubeClauseStatement;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectQueryAsteriskClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectQueryAxesClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectSlicerAxisClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectCellPropertyListClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseCreateMemberBodyClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseMemberPropertyDefinition;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseFormulaExpression;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseExpression;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseExpressionOrEmpty;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTexpOrEmptyList;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTexpList;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseExpressionEof;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseIdentifier;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseNameObjectIdentifier;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseKeyIdentifier;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseAmpId;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseKeyword;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseCompoundId;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseUnaliasedExpression;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseTerm5;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseTerm4;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseTerm3;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseTerm2;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseTerm;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseFactor;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparsePrimary;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTobjectIdentifierOrFuncall;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseNumericLiteral;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseAtom;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseCaseExpression;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseCreateSetBodyClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectDimensionPropertyListClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseRefreshStatement;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseDMVStatement;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectQueryAxisClause;
import java.util.LinkedList;
import org.eclipse.daanse.mdx.model.api.MdxStatement;
import org.eclipse.daanse.mdx.model.api.expression.NumericLiteral;
import org.eclipse.daanse.mdx.model.record.select.CreateSetBodyClauseR;
import org.eclipse.daanse.mdx.model.api.expression.NameObjectIdentifier;
import org.eclipse.daanse.mdx.model.record.DrillthroughStatementR;
import org.eclipse.daanse.mdx.model.api.select.CreateCellCalculationBodyClause;
import org.eclipse.daanse.mdx.model.api.select.SelectQueryAxisClause;
import org.eclipse.daanse.mdx.model.record.select.SelectSubcubeClauseStatementR;
import java.math.BigDecimal;
import org.eclipse.daanse.mdx.model.record.expression.StringLiteralR;
import org.eclipse.daanse.mdx.model.record.select.SelectQueryEmptyClauseR;
import org.eclipse.daanse.mdx.model.api.ExplainStatement;
import org.eclipse.daanse.mdx.model.record.expression.CompoundIdR;
import org.eclipse.daanse.mdx.model.api.select.SelectQueryAxesClause;
import org.eclipse.daanse.mdx.model.api.select.SelectSlicerAxisClause;
import org.eclipse.daanse.mdx.model.api.expression.CallExpression;
import org.eclipse.daanse.mdx.model.api.select.SelectSubcubeClause;
import org.eclipse.daanse.mdx.model.record.expression.KeyObjectIdentifierR;
import org.eclipse.daanse.mdx.model.record.select.CreateMemberBodyClauseR;
import org.eclipse.daanse.mdx.model.record.select.SelectDimensionPropertyListClauseR;
import org.eclipse.daanse.mdx.model.record.select.SelectQueryAxisClauseR;
import org.eclipse.daanse.mdx.model.record.select.SelectSlicerAxisClauseR;
import org.eclipse.daanse.mdx.model.api.select.CreateMemberBodyClause;
import org.eclipse.daanse.mdx.model.record.expression.FormulaExpressionR;
import org.eclipse.daanse.mdx.model.record.expression.NullLiteralR;
import org.eclipse.daanse.mdx.model.api.select.MemberPropertyDefinition;
import org.eclipse.daanse.mdx.model.api.expression.CompoundId;
import org.eclipse.daanse.mdx.model.record.ExplainStatementR;
import java.util.List;
import org.eclipse.daanse.mdx.model.record.select.AxisR;
import org.eclipse.daanse.mdx.model.api.expression.ObjectIdentifier;
import org.eclipse.daanse.mdx.model.api.DMVStatement;
import org.eclipse.daanse.mdx.model.api.select.Axis;
import org.eclipse.daanse.mdx.model.api.select.SelectSubcubeClauseStatement;
import org.eclipse.daanse.mdx.model.api.RefreshStatement;
import org.eclipse.daanse.mdx.model.api.select.SelectQueryAsteriskClause;
import org.eclipse.daanse.mdx.model.record.expression.NumericLiteralR;
import org.eclipse.daanse.mdx.model.record.expression.NameObjectIdentifierR;
import org.eclipse.daanse.mdx.model.record.select.MeasureBodyClauseR;
import org.eclipse.daanse.mdx.model.api.select.CreateSetBodyClause;
import org.eclipse.daanse.mdx.model.api.select.MeasureBodyClause;
import org.eclipse.daanse.mdx.model.record.expression.SymbolLiteralR;
import org.eclipse.daanse.mdx.model.api.expression.FormulaExpression;
import org.eclipse.daanse.mdx.model.record.RefreshStatementR;
import org.eclipse.daanse.mdx.model.api.ReturnItem;
import org.eclipse.daanse.mdx.model.record.select.SelectCellPropertyListClauseR;
import org.eclipse.daanse.mdx.model.record.select.SelectQueryAxesClauseR;
import org.eclipse.daanse.mdx.model.api.select.SelectDimensionPropertyListClause;
import org.eclipse.daanse.mdx.model.api.select.SelectQueryClause;
import org.eclipse.daanse.mdx.model.record.expression.CallExpressionR;
import org.eclipse.daanse.mdx.model.record.select.SelectQueryAsteriskClauseR;
import org.eclipse.daanse.mdx.model.api.SelectStatement;
import org.eclipse.daanse.mdx.model.record.SelectStatementR;
import java.util.Optional;
import org.eclipse.daanse.mdx.model.api.select.SelectCellPropertyListClause;
import org.eclipse.daanse.mdx.model.api.select.SelectSubcubeClauseName;
import org.eclipse.daanse.mdx.model.record.ReturnItemR;
import org.eclipse.daanse.mdx.model.api.DrillthroughStatement;
import org.eclipse.daanse.mdx.model.record.select.MemberPropertyDefinitionR;
import org.eclipse.daanse.mdx.model.record.select.SelectSubcubeClauseNameR;
import org.eclipse.daanse.mdx.model.api.expression.KeyObjectIdentifier;
import org.eclipse.daanse.mdx.model.api.select.SelectWithClause;
import org.eclipse.daanse.mdx.model.api.expression.Expression;
import org.eclipse.daanse.mdx.model.record.DMVStatementR;


public class MdxParser {
    static final int UNLIMITED = Integer.MAX_VALUE;
    // The last token successfully "consumed"
    Token lastConsumedToken;
    private TokenType nextTokenType;
    private Token currentLookaheadToken;
    private int remainingLookahead;
    private boolean hitFailure, passedPredicate;
    private String currentlyParsedProduction, currentLookaheadProduction;
    private int lookaheadRoutineNesting, passedPredicateThreshold = -1;
    EnumSet<TokenType> outerFollowSet;
    private boolean legacyGlitchyLookahead = false;
    private final Token DUMMY_START_TOKEN = new Token();
    private boolean cancelled;

    public void cancel() {
        cancelled = true;
    }

    public boolean isCancelled() {
        return cancelled;
    }

    /** Generated Lexer. */
    private MdxLexer token_source;

    public void setInputSource(String inputSource) {
        token_source.setInputSource(inputSource);
    }

    String getInputSource() {
        return token_source.getInputSource();
    }

    //=================================
    // Generated constructors
    //=================================
    public MdxParser(String inputSource, CharSequence content) {
        this(new MdxLexer(inputSource, content));
    }

    public MdxParser(CharSequence content) {
        this("input", content);
    }

    /**
    * @param inputSource just the name of the input source (typically the filename) that
    * will be used in error messages and so on.
    * @param path The location (typically the filename) from which to get the input to parse
    */
    public MdxParser(String inputSource, Path path) throws IOException {
        this(inputSource, TokenSource.stringFromBytes(Files.readAllBytes(path)));
    }

    public MdxParser(String inputSource, Path path, Charset charset) throws IOException {
        this(inputSource, TokenSource.stringFromBytes(Files.readAllBytes(path), charset));
    }

    /**
    * @param path The location (typically the filename) from which to get the input to parse
    */
    public MdxParser(Path path) throws IOException {
        this(path.toString(), path);
    }

    /** Constructor with user supplied Lexer. */
    public MdxParser(MdxLexer lexer) {
        token_source = lexer;
        lastConsumedToken = DUMMY_START_TOKEN;
        lastConsumedToken.setTokenSource(lexer);
    }

    /**
    * Set the starting line/column for location reporting.
    * By default, this is 1,1.
    */
    public void setStartingPos(int startingLine, int startingColumn) {
        token_source.setStartingPos(startingLine, startingColumn);
    }

    // If the next token is cached, it returns that
    // Otherwise, it goes to the token_source, i.e. the Lexer.
    final private Token nextToken(final Token tok) {
        Token result = token_source.getNextToken(tok);
        while (result.isUnparsed()) {
            result = token_source.getNextToken(result);
        }
        nextTokenType = null;
        return result;
    }

    /**
    * @return the next Token off the stream. This is the same as #getToken(1)
    */
    final public Token getNextToken() {
        return getToken(1);
    }

    /**
    * @param index how many tokens to look ahead
    * @return the specific regular (i.e. parsed) Token index ahead/behind in the stream.
    * If we are in a lookahead, it looks ahead from the currentLookaheadToken
    * Otherwise, it is the lastConsumedToken. If you pass in a negative
    * number it goes backward.
    */
    final public Token getToken(final int index) {
        Token t = currentLookaheadToken == null ? lastConsumedToken : currentLookaheadToken;
        for (int i = 0; i < index; i++) {
            t = nextToken(t);
        }
        for (int i = 0; i > index; i--) {
            t = t.getPrevious();
            if (t == null) break;
        }
        return t;
    }

    private final TokenType nextTokenType() {
        if (nextTokenType == null) {
            nextTokenType = nextToken(lastConsumedToken).getType();
        }
        return nextTokenType;
    }

    boolean activateTokenTypes(TokenType...types) {
        if (token_source.activeTokenTypes == null) return false;
        boolean result = false;
        for (TokenType tt : types) {
            result |= token_source.activeTokenTypes.add(tt);
        }
        if (result) {
            token_source.reset(getToken(0));
            nextTokenType = null;
        }
        return result;
    }

    boolean deactivateTokenTypes(TokenType...types) {
        boolean result = false;
        if (token_source.activeTokenTypes == null) {
            token_source.activeTokenTypes = EnumSet.allOf(TokenType.class);
        }
        for (TokenType tt : types) {
            result |= token_source.activeTokenTypes.remove(tt);
        }
        if (result) {
            token_source.reset(getToken(0));
            nextTokenType = null;
        }
        return result;
    }

    private static HashMap<TokenType[], EnumSet<TokenType>> enumSetCache = new HashMap<>();

    private static EnumSet<TokenType> tokenTypeSet(TokenType first, TokenType...rest) {
        TokenType[] key = new TokenType[1 + rest.length];
        key[0] = first;
        if (rest.length > 0) {
            System.arraycopy(rest, 0, key, 1, rest.length);
        }
        Arrays.sort(key);
        if (enumSetCache.containsKey(key)) {
            return enumSetCache.get(key);
        }
        EnumSet<TokenType> result = (rest.length == 0) ? EnumSet.of(first) : EnumSet.of(first, rest);
        enumSetCache.put(key, result);
        return result;
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:409:1
    final public
    // ----------------------------------------------------------------------------
    // MDX Statement
    //
    // <statement> ::= <selectStatement>
    //                   | <drillthroughStatement>
    //                   | <explainStatement>
    //
    // <selectStatement> ::= [WITH <formulaSpecification>]
    //                         SELECT [<SelectQueryAxisClause>
    //                                [, <SelectQueryAxisClause>...]]
    //                         FROM [<cubeSpecification>]
    //                         [WHERE <slicerSpecification>]
    //                         [<cellProps>]
    //
    // <drillthroughStatment> ::=
    //     DRILLTHROUGH
    //     [ MAXROWS <count> ]
    //     [ FIRSTROWSET <count> ]
    //     <selectStatement>
    //     [ RETURN <memberOrAttribute> [, <memberOrAttribute>...] ]
    //
    // <explainStatement> ::=
    //     EXPLAIN PLAN FOR ( <selectStatement> | <drillthroughStatement> )
    //
    MdxStatement parseMdxStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseMdxStatement";
        ASTparseMdxStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseMdxStatement();
            openNodeScope(thisProduction);
        }
        MdxStatement mdxStatement = null;
        ParseException parseException2 = null;
        int callStackSize3 = parsingStack.size();
        try {
            if (nextTokenType() == SELECT || nextTokenType == WITH) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:414:5
                pushOntoCallStack("parseMdxStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 414, 5);
                try {
                    mdxStatement = parseSelectStatement();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == DRILLTHROUGH) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:416:4
                pushOntoCallStack("parseMdxStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 416, 4);
                try {
                    mdxStatement = parseDrillthroughStatement();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == EXPLAIN) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:418:5
                pushOntoCallStack("parseMdxStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 418, 5);
                try {
                    mdxStatement = parseExplainStatement();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("parseMdxStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 414, 5);
                throw new ParseException(lastConsumedToken, first_set$Grammer_ccc$414$5, parsingStack);
            }
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:420:3
            consumeToken(EOF);
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:421:3
            return mdxStatement;
        } catch (ParseException e) {
            parseException2 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize3);
            if (thisProduction != null) {
                if (parseException2 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:427:1
    final public DrillthroughStatement parseDrillthroughStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseDrillthroughStatement";
        ASTparseDrillthroughStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseDrillthroughStatement();
            openNodeScope(thisProduction);
        }
        SelectStatement selectStatement = null;
        List<ReturnItem> returnItems = null;
        Optional<Integer> maxRows = Optional.ofNullable(null);
        Optional<Integer> firstRowSet = Optional.ofNullable(null);
        ParseException parseException43 = null;
        int callStackSize44 = parsingStack.size();
        try {
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:434:3
            consumeToken(DRILLTHROUGH);
            // Code for ZeroOrOne specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:435:3
            if (nextTokenType() == MAXROWS) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:436:5
                consumeToken(MAXROWS);
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:436:17
                consumeToken(UNSIGNED_INTEGER_LITERAL);
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:437:5
                maxRows = Optional.of(Integer.valueOf(getToken(0).getImage()));
            }
            // Code for ZeroOrOne specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:441:3
            if (nextTokenType() == FIRSTROWSET) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:442:5
                consumeToken(FIRSTROWSET);
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:442:21
                consumeToken(UNSIGNED_INTEGER_LITERAL);
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:443:5
                firstRowSet = Optional.of(Integer.valueOf(getToken(0).getImage()));
            }
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:447:3
            pushOntoCallStack("parseDrillthroughStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 447, 3);
            try {
                selectStatement = parseSelectStatement();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:448:3
            if (nextTokenType() == RETURN) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:449:5
                consumeToken(RETURN);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:449:16
                pushOntoCallStack("parseDrillthroughStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 449, 16);
                try {
                    returnItems = parseReturnItems();
                } finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:451:3
            return new DrillthroughStatementR(maxRows, firstRowSet, selectStatement, returnItems);
        } catch (ParseException e) {
            parseException43 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize44);
            if (thisProduction != null) {
                if (parseException43 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:456:1
    final public ExplainStatement parseExplainStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseExplainStatement";
        ASTparseExplainStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseExplainStatement();
            openNodeScope(thisProduction);
        }
        MdxStatement mdxStatement = null;
        ParseException parseException115 = null;
        int callStackSize116 = parsingStack.size();
        try {
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:460:3
            consumeToken(EXPLAIN);
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:460:15
            consumeToken(PLAN);
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:460:23
            consumeToken(FOR);
            if (nextTokenType() == SELECT || nextTokenType == WITH) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:462:5
                pushOntoCallStack("parseExplainStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 462, 5);
                try {
                    mdxStatement = parseSelectStatement();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == DRILLTHROUGH) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:464:5
                pushOntoCallStack("parseExplainStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 464, 5);
                try {
                    mdxStatement = parseDrillthroughStatement();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("parseExplainStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 462, 5);
                throw new ParseException(lastConsumedToken, first_set$Grammer_ccc$462$5, parsingStack);
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:466:3
            return new ExplainStatementR(mdxStatement);
        } catch (ParseException e) {
            parseException115 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize116);
            if (thisProduction != null) {
                if (parseException115 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:472:1
    final public List<ReturnItem> parseReturnItems() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseReturnItems";
        ASTparseReturnItems thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseReturnItems();
            openNodeScope(thisProduction);
        }
        List<ReturnItem> returnItems = new LinkedList<ReturnItem>();
        ReturnItem item;
        ParseException parseException156 = null;
        int callStackSize157 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:477:3
            pushOntoCallStack("parseReturnItems", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 477, 3);
            try {
                item = parseReturnItem();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:478:3
            returnItems.add(item);
            // Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:481:3
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:482:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:482:15
                pushOntoCallStack("parseReturnItems", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 482, 15);
                try {
                    item = parseReturnItem();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:483:5
                returnItems.add(item);
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:487:3
            return returnItems;
        } catch (ParseException e) {
            parseException156 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize157);
            if (thisProduction != null) {
                if (parseException156 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:493:1
    final public ReturnItem parseReturnItem() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseReturnItem";
        ASTparseReturnItem thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseReturnItem();
            openNodeScope(thisProduction);
        }
        CompoundId compoundId;
        ParseException parseException192 = null;
        int callStackSize193 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:497:3
            pushOntoCallStack("parseReturnItem", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 497, 3);
            try {
                compoundId = parseCompoundId();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:498:3
            return new ReturnItemR(compoundId);
        } catch (ParseException e) {
            parseException192 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize193);
            if (thisProduction != null) {
                if (parseException192 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:505:1
    final public
    //https://learn.microsoft.com/en-us/sql/mdx/mdx-data-definition-create-cell-calculation?view=sql-server-ver16
    CreateCellCalculationBodyClause parseCreateCellCalculationBodyClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseCreateCellCalculationBodyClause";
        ASTparseCreateCellCalculationBodyClause thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseCreateCellCalculationBodyClause();
            openNodeScope(thisProduction);
        }
        CreateCellCalculationBodyClause createCellCalculationBC = null;
        ParseException parseException204 = null;
        int callStackSize205 = parsingStack.size();
        try {
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:509:2
            consumeToken(NOT);
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:509:7
            consumeToken(NOT);
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:509:12
            consumeToken(NOT);
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:509:17
            consumeToken(NOT);
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:509:22
            consumeToken(NOT);
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:509:27
            consumeToken(NOT);
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:509:32
            consumeToken(NOT);
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:510:3
            return createCellCalculationBC;
        } catch (ParseException e) {
            parseException204 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize205);
            if (thisProduction != null) {
                if (parseException204 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:516:1
    final public
    // https://learn.microsoft.com/en-us/analysis-services/multidimensional-models/mdx/mdx-building-measures?view=asallproducts-allversions
    MeasureBodyClause parseMeasureBodyClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseMeasureBodyClause";
        ASTparseMeasureBodyClause thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseMeasureBodyClause();
            openNodeScope(thisProduction);
        }
        ParseException parseException240 = null;
        int callStackSize241 = parsingStack.size();
        try {
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:519:3
            consumeToken(NOT);
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:519:8
            consumeToken(NOT);
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:519:13
            consumeToken(NOT);
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:519:18
            consumeToken(NOT);
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:519:23
            consumeToken(NOT);
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:519:28
            consumeToken(NOT);
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:519:33
            consumeToken(NOT);
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:520:3
            return new MeasureBodyClauseR();
        } catch (ParseException e) {
            parseException240 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize241);
            if (thisProduction != null) {
                if (parseException240 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:527:1
    final public
    // https://docs.oracle.com/cd/E57185_01/ESBTR/mdx_grammar_rules.html
    SelectWithClause parseSelectWithClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectWithClause";
        ASTparseSelectWithClause thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseSelectWithClause();
            openNodeScope(thisProduction);
        }
        SelectWithClause selectWithClause = null;
        ParseException parseException276 = null;
        int callStackSize277 = parsingStack.size();
        try {
            if (nextTokenType() == CELL) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:531:5
                consumeToken(CELL);
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:531:12
                consumeToken(CALCULATION);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:531:26
                pushOntoCallStack("parseSelectWithClause", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 531, 26);
                try {
                    selectWithClause = parseCreateCellCalculationBodyClause();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == MEMBER || nextTokenType == CALCULATED) {
                // Code for ZeroOrOne specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:532:5
                if (nextTokenType() == CALCULATED) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:532:6
                    consumeToken(CALCULATED);
                }
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:532:21
                consumeToken(MEMBER);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:532:32
                pushOntoCallStack("parseSelectWithClause", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 532, 32);
                try {
                    selectWithClause = parseCreateMemberBodyClause();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == SET) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:533:5
                consumeToken(SET);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:533:13
                pushOntoCallStack("parseSelectWithClause", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 533, 13);
                try {
                    selectWithClause = parseCreateSetBodyClause();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == MEASURE) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:534:5
                consumeToken(MEASURE);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:534:15
                pushOntoCallStack("parseSelectWithClause", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 534, 15);
                try {
                    selectWithClause = parseMeasureBodyClause();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("parseSelectWithClause", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 531, 5);
                throw new ParseException(lastConsumedToken, first_set$Grammer_ccc$531$5, parsingStack);
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:536:3
            return selectWithClause;
        } catch (ParseException e) {
            parseException276 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize277);
            if (thisProduction != null) {
                if (parseException276 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:542:1
    final public
    //https://learn.microsoft.com/en-us/sql/mdx/mdx-data-manipulation-select?view=sql-server-ver16
    SelectStatement parseSelectStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectStatement";
        ASTparseSelectStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseSelectStatement();
            openNodeScope(thisProduction);
        }
        List<SelectWithClause> selectWithClauses = new LinkedList<SelectWithClause>();
        SelectQueryClause selectQueryClause = null;
        SelectSubcubeClause selectSubcubeClause = null;
        Optional<SelectSlicerAxisClause> selectSlicerAxisClause = Optional.empty();
        SelectCellPropertyListClause selectCellPropertyListClause = null;
        SelectWithClause selectWithClause = null;
        ParseException parseException353 = null;
        int callStackSize354 = parsingStack.size();
        try {
            // Code for ZeroOrOne specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:551:3
            if (nextTokenType() == WITH) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:552:5
                consumeToken(WITH);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:553:7
                pushOntoCallStack("parseSelectStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 553, 7);
                try {
                    selectWithClause = parseSelectWithClause();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:554:5
                selectWithClauses.add(selectWithClause);
                // Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:557:5
                while (true) {
                    if (!(first_set$Grammer_ccc$558$8.contains(nextTokenType()))) break;
                    // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:558:8
                    pushOntoCallStack("parseSelectStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 558, 8);
                    try {
                        selectWithClause = parseSelectWithClause();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:559:7
                    selectWithClauses.add(selectWithClause);
                }
            }
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:565:3
            consumeToken(SELECT);
            if (nextTokenType() == ASTERISK) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:567:5
                pushOntoCallStack("parseSelectStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 567, 5);
                try {
                    selectQueryClause = parseSelectQueryAsteriskClause();
                } finally {
                    popCallStack();
                }
            } else if (first_set$Grammer_ccc$569$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:569:5
                pushOntoCallStack("parseSelectStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 569, 5);
                try {
                    selectQueryClause = parseSelectQueryAxesClause();
                } finally {
                    popCallStack();
                }
            } else {
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:571:5
                selectQueryClause = new SelectQueryEmptyClauseR();
            }
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:575:3
            consumeToken(FROM);
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:575:12
            pushOntoCallStack("parseSelectStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 575, 12);
            try {
                selectSubcubeClause = parseSelectSubcubeClause();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:576:3
            if (nextTokenType() == WHERE) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:577:5
                pushOntoCallStack("parseSelectStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 577, 5);
                try {
                    selectSlicerAxisClause = parseSelectSlicerAxisClause();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:579:3
            if (nextTokenType() == CELL || nextTokenType == PROPERTIES) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:580:5
                pushOntoCallStack("parseSelectStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 580, 5);
                try {
                    selectCellPropertyListClause = parseSelectCellPropertyListClause();
                } finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:582:3
            return new SelectStatementR(selectWithClauses, selectQueryClause, selectSubcubeClause, selectSlicerAxisClause, Optional.ofNullable(selectCellPropertyListClause));
        } catch (ParseException e) {
            parseException353 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize354);
            if (thisProduction != null) {
                if (parseException353 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:588:1
    final public SelectSubcubeClause parseSelectSubcubeClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectSubcubeClause";
        ASTparseSelectSubcubeClause thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseSelectSubcubeClause();
            openNodeScope(thisProduction);
        }
        SelectSubcubeClause selectSubcubeClause = null;
        ParseException parseException462 = null;
        int callStackSize463 = parsingStack.size();
        try {
            if (first_set$Grammer_ccc$593$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:593:5
                pushOntoCallStack("parseSelectSubcubeClause", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 593, 5);
                try {
                    selectSubcubeClause = parseSelectSubcubeClauseName();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == LPAREN) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:595:5
                pushOntoCallStack("parseSelectSubcubeClause", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 595, 5);
                try {
                    selectSubcubeClause = parseSelectSubcubeClauseStatement();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("parseSelectSubcubeClause", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 593, 5);
                throw new ParseException(lastConsumedToken, first_set$Grammer_ccc$593$5$, parsingStack);
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:597:3
            return selectSubcubeClause;
        } catch (ParseException e) {
            parseException462 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize463);
            if (thisProduction != null) {
                if (parseException462 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:603:1
    final public SelectSubcubeClauseName parseSelectSubcubeClauseName() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectSubcubeClauseName";
        ASTparseSelectSubcubeClauseName thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseSelectSubcubeClauseName();
            openNodeScope(thisProduction);
        }
        NameObjectIdentifier nameObjectIdentifier;
        ParseException parseException491 = null;
        int callStackSize492 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:607:3
            pushOntoCallStack("parseSelectSubcubeClauseName", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 607, 3);
            try {
                nameObjectIdentifier = parseNameObjectIdentifier();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:608:3
            return new SelectSubcubeClauseNameR(nameObjectIdentifier);
        } catch (ParseException e) {
            parseException491 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize492);
            if (thisProduction != null) {
                if (parseException491 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:614:1
    final public SelectSubcubeClauseStatement parseSelectSubcubeClauseStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectSubcubeClauseStatement";
        ASTparseSelectSubcubeClauseStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseSelectSubcubeClauseStatement();
            openNodeScope(thisProduction);
        }
        SelectQueryClause selectQueryClause = null;
        SelectSubcubeClause selectSubcubeClause = null;
        Optional<SelectSlicerAxisClause> selectSlicerAxisClause = Optional.empty();
        ParseException parseException503 = null;
        int callStackSize504 = parsingStack.size();
        try {
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:621:5
            consumeToken(LPAREN);
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:621:16
            consumeToken(SELECT);
            // Code for ZeroOrOne specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:622:5
            // Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:623:7
            if (nextTokenType() == ASTERISK) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:623:7
                pushOntoCallStack("parseSelectSubcubeClauseStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 623, 7);
                try {
                    selectQueryClause = parseSelectQueryAsteriskClause();
                } finally {
                    popCallStack();
                }
            } else if (first_set$Grammer_ccc$625$7.contains(nextTokenType())) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:625:7
                pushOntoCallStack("parseSelectSubcubeClauseStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 625, 7);
                try {
                    selectQueryClause = parseSelectQueryAxesClause();
                } finally {
                    popCallStack();
                }
            } else {
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:626:7
                selectQueryClause = new SelectQueryEmptyClauseR();
            }
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:630:5
            consumeToken(FROM);
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:630:14
            pushOntoCallStack("parseSelectSubcubeClauseStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 630, 14);
            try {
                selectSubcubeClause = parseSelectSubcubeClause();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:631:5
            if (nextTokenType() == WHERE) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:632:7
                pushOntoCallStack("parseSelectSubcubeClauseStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 632, 7);
                try {
                    selectSlicerAxisClause = parseSelectSlicerAxisClause();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:634:5
            consumeToken(RPAREN);
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:636:3
            return new SelectSubcubeClauseStatementR(selectQueryClause, selectSubcubeClause, selectSlicerAxisClause);
        } catch (ParseException e) {
            parseException503 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize504);
            if (thisProduction != null) {
                if (parseException503 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:642:1
    final public SelectQueryAsteriskClause parseSelectQueryAsteriskClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectQueryAsteriskClause";
        ASTparseSelectQueryAsteriskClause thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseSelectQueryAsteriskClause();
            openNodeScope(thisProduction);
        }
        ParseException parseException580 = null;
        int callStackSize581 = parsingStack.size();
        try {
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:643:3
            consumeToken(ASTERISK);
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:644:3
            return new SelectQueryAsteriskClauseR();
        } catch (ParseException e) {
            parseException580 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize581);
            if (thisProduction != null) {
                if (parseException580 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:650:1
    final public SelectQueryAxesClause parseSelectQueryAxesClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectQueryAxesClause";
        ASTparseSelectQueryAxesClause thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseSelectQueryAxesClause();
            openNodeScope(thisProduction);
        }
        List<SelectQueryAxisClause> selectQueryAxisClauses = new LinkedList<SelectQueryAxisClause>();
        SelectQueryAxisClause selectQueryAxisClause;
        ParseException parseException592 = null;
        int callStackSize593 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:655:3
            pushOntoCallStack("parseSelectQueryAxesClause", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 655, 3);
            try {
                selectQueryAxisClause = parseSelectQueryAxisClause();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:656:3
            selectQueryAxisClauses.add(selectQueryAxisClause);
            // Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:659:3
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:660:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:660:15
                pushOntoCallStack("parseSelectQueryAxesClause", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 660, 15);
                try {
                    selectQueryAxisClause = parseSelectQueryAxisClause();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:661:5
                selectQueryAxisClauses.add(selectQueryAxisClause);
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:665:3
            return new SelectQueryAxesClauseR(selectQueryAxisClauses);
        } catch (ParseException e) {
            parseException592 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize593);
            if (thisProduction != null) {
                if (parseException592 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:671:1
    final public Optional<SelectSlicerAxisClause> parseSelectSlicerAxisClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectSlicerAxisClause";
        ASTparseSelectSlicerAxisClause thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseSelectSlicerAxisClause();
            openNodeScope(thisProduction);
        }
        Expression expression = null;
        ParseException parseException628 = null;
        int callStackSize629 = parsingStack.size();
        try {
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:675:3
            consumeToken(WHERE);
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:675:13
            pushOntoCallStack("parseSelectSlicerAxisClause", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 675, 13);
            try {
                expression = parseExpression();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:676:3
            if (expression == null) {
                return Optional.empty();
            }
            return Optional.of(new SelectSlicerAxisClauseR(expression));
        } catch (ParseException e) {
            parseException628 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize629);
            if (thisProduction != null) {
                if (parseException628 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:686:1
    final public SelectCellPropertyListClause parseSelectCellPropertyListClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectCellPropertyListClause";
        ASTparseSelectCellPropertyListClause thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseSelectCellPropertyListClause();
            openNodeScope(thisProduction);
        }
        List<String> cellProperties = new LinkedList<String>();
        String property = null;
        boolean cell = false;
        ParseException parseException644 = null;
        int callStackSize645 = parsingStack.size();
        try {
            // Code for ZeroOrOne specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:692:3
            if (nextTokenType() == CELL) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:692:4
                consumeToken(CELL);
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:693:6
                cell = true;
            }
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:697:4
            consumeToken(PROPERTIES);
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:697:19
            consumeToken(ID);
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:698:5
            cellProperties.add(getToken(0).getImage());
            // Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:701:3
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:702:5
                consumeToken(COMMA);
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:702:15
                consumeToken(ID);
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:703:5
                cellProperties.add(getToken(0).getImage());
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:707:3
            return new SelectCellPropertyListClauseR(cellProperties, cell);
        } catch (ParseException e) {
            parseException644 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize645);
            if (thisProduction != null) {
                if (parseException644 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:713:1
    final public
    // https://learn.microsoft.com/en-us/sql/mdx/mdx-data-definition-create-member?view=sql-server-ver16
    CreateMemberBodyClause parseCreateMemberBodyClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseCreateMemberBodyClause";
        ASTparseCreateMemberBodyClause thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseCreateMemberBodyClause();
            openNodeScope(thisProduction);
        }
        CompoundId compoundId = null;
        Expression expression = null;
        List<MemberPropertyDefinition> memberPropertyDefinitions = new LinkedList<MemberPropertyDefinition>();
        MemberPropertyDefinition memberPropertyDefinition = null;
        ParseException parseException700 = null;
        int callStackSize701 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:722:3
            pushOntoCallStack("parseCreateMemberBodyClause", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 722, 3);
            try {
                //  <CURRENTCUBE>
                //  |
                compoundId = parseCompoundId();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:722:32
            consumeToken(AS);
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:722:39
            pushOntoCallStack("parseCreateMemberBodyClause", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 722, 39);
            try {
                expression = parseExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:724:3
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:725:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:725:15
                pushOntoCallStack("parseCreateMemberBodyClause", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 725, 15);
                try {
                    memberPropertyDefinition = parseMemberPropertyDefinition();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:726:5
                memberPropertyDefinitions.add(memberPropertyDefinition);
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:731:3
            return new CreateMemberBodyClauseR(compoundId, expression, memberPropertyDefinitions);
        } catch (ParseException e) {
            parseException700 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize701);
            if (thisProduction != null) {
                if (parseException700 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:737:1
    final public MemberPropertyDefinition parseMemberPropertyDefinition() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseMemberPropertyDefinition";
        ASTparseMemberPropertyDefinition thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseMemberPropertyDefinition();
            openNodeScope(thisProduction);
        }
        ObjectIdentifier objectIdentifier;
        Expression expression;
        ParseException parseException740 = null;
        int callStackSize741 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:742:3
            pushOntoCallStack("parseMemberPropertyDefinition", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 742, 3);
            try {
                objectIdentifier = parseIdentifier();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:742:38
            consumeToken(EQ);
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:742:45
            pushOntoCallStack("parseMemberPropertyDefinition", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 742, 45);
            try {
                expression = parseExpression();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:743:3
            return new MemberPropertyDefinitionR(objectIdentifier, expression);
        } catch (ParseException e) {
            parseException740 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize741);
            if (thisProduction != null) {
                if (parseException740 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:749:1
    final public FormulaExpression parseFormulaExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseFormulaExpression";
        ASTparseFormulaExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseFormulaExpression();
            openNodeScope(thisProduction);
        }
        ParseException parseException760 = null;
        int callStackSize761 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:750:3
            pushOntoCallStack("parseFormulaExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 750, 3);
            try {
                parseIdentifier();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:750:19
            consumeToken(EQ);
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:750:26
            pushOntoCallStack("parseFormulaExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 750, 26);
            try {
                parseIdentifier();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:751:3
            return new FormulaExpressionR();
        } catch (ParseException e) {
            parseException760 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize761);
            if (thisProduction != null) {
                if (parseException760 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:757:1
    final public Expression parseExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseExpression";
        ASTparseExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseExpression();
            openNodeScope(thisProduction);
        }
        Expression expression;
        ObjectIdentifier objectIdentifier;
        ParseException parseException780 = null;
        int callStackSize781 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:762:3
            pushOntoCallStack("parseExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 762, 3);
            try {
                expression = parseUnaliasedExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:763:3
            while (true) {
                if (!(nextTokenType() == AS)) break;
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:764:5
                consumeToken(AS);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:764:12
                pushOntoCallStack("parseExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 764, 12);
                try {
                    objectIdentifier = parseIdentifier();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:765:5
                CompoundId compundId = new CompoundIdR(List.of(objectIdentifier));
                expression = new CallExpressionR("AS", CallExpression.Type.Term_Infix, List.of(expression, compundId));
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:773:3
            return expression;
        } catch (ParseException e) {
            parseException780 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize781);
            if (thisProduction != null) {
                if (parseException780 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:779:1
    final public Expression parseExpressionOrEmpty() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseExpressionOrEmpty";
        // Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:783:3
        ASTparseExpressionOrEmpty thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseExpressionOrEmpty();
            openNodeScope(thisProduction);
        }
        Expression expression;
        ParseException parseException812 = null;
        int callStackSize813 = parsingStack.size();
        try {
            if (first_set$Grammer_ccc$783$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:783:3
                pushOntoCallStack("parseExpressionOrEmpty", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 783, 3);
                try {
                    expression = parseExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:784:3
                return expression;
            } else {
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:788:3
                return new CallExpressionR("", CallExpression.Type.Empty, List.of());
            }
        } catch (ParseException e) {
            parseException812 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize813);
            if (thisProduction != null) {
                if (parseException812 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:797:1
    final public
    // Comma-separated list of expressions, some of which may be empty. Used
    // for functions.
    List<Expression> expOrEmptyList() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "expOrEmptyList";
        ASTexpOrEmptyList thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTexpOrEmptyList();
            openNodeScope(thisProduction);
        }
        Expression expression;
        List<Expression> list = new LinkedList<Expression>();
        ParseException parseException836 = null;
        int callStackSize837 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:802:3
            pushOntoCallStack("expOrEmptyList", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 802, 3);
            try {
                expression = parseExpressionOrEmpty();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:803:3
            list.add(expression);
            // Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:806:3
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:807:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:808:5
                pushOntoCallStack("expOrEmptyList", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 808, 5);
                try {
                    expression = parseExpressionOrEmpty();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:809:5
                list.add(expression);
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:813:3
            return list;
        } catch (ParseException e) {
            parseException836 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize837);
            if (thisProduction != null) {
                if (parseException836 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:820:1
    final public
    // List of expressions, none of which may be empty.
    List<Expression> expList() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "expList";
        ASTexpList thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTexpList();
            openNodeScope(thisProduction);
        }
        Expression expression;
        List<Expression> list = new LinkedList<Expression>();
        ParseException parseException872 = null;
        int callStackSize873 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:825:3
            pushOntoCallStack("expList", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 825, 3);
            try {
                expression = parseExpression();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:826:3
            list.add(expression);
            // Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:829:3
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:830:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:831:5
                pushOntoCallStack("expList", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 831, 5);
                try {
                    expression = parseExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:832:5
                list.add(expression);
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:836:3
            return list;
        } catch (ParseException e) {
            parseException872 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize873);
            if (thisProduction != null) {
                if (parseException872 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:842:1
    final public Expression parseExpressionEof() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseExpressionEof";
        ASTparseExpressionEof thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseExpressionEof();
            openNodeScope(thisProduction);
        }
        Expression expression;
        ParseException parseException908 = null;
        int callStackSize909 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:846:3
            pushOntoCallStack("parseExpressionEof", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 846, 3);
            try {
                expression = parseExpression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:846:32
            consumeToken(EOF);
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:847:3
            return expression;
        } catch (ParseException e) {
            parseException908 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize909);
            if (thisProduction != null) {
                if (parseException908 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:853:1
    final public ObjectIdentifier parseIdentifier() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseIdentifier";
        ASTparseIdentifier thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseIdentifier();
            openNodeScope(thisProduction);
        }
        ObjectIdentifier objectIdentifier;
        ParseException parseException924 = null;
        int callStackSize925 = parsingStack.size();
        try {
            if (first_set$Grammer_ccc$858$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:858:5
                pushOntoCallStack("parseIdentifier", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 858, 5);
                try {
                    objectIdentifier = parseNameObjectIdentifier();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == AMP_QUOTED_ID || nextTokenType == AMP_UNQUOTED_ID) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:860:5
                pushOntoCallStack("parseIdentifier", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 860, 5);
                try {
                    objectIdentifier = parseKeyIdentifier();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("parseIdentifier", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 858, 5);
                throw new ParseException(lastConsumedToken, first_set$Grammer_ccc$858$5$, parsingStack);
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:862:3
            return objectIdentifier;
        } catch (ParseException e) {
            parseException924 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize925);
            if (thisProduction != null) {
                if (parseException924 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    static private final EnumSet<TokenType> parseNameObjectIdentifier_FIRST_SET = tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID);

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:868:1
    final public NameObjectIdentifier parseNameObjectIdentifier() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseNameObjectIdentifier";
        // Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:872:3
        ASTparseNameObjectIdentifier thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseNameObjectIdentifier();
            openNodeScope(thisProduction);
        }
        String id;
        ParseException parseException953 = null;
        int callStackSize954 = parsingStack.size();
        try {
            if (nextTokenType() == DIMENSION || nextTokenType == PROPERTIES) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:872:3
                pushOntoCallStack("parseNameObjectIdentifier", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 872, 3);
                try {
                    id = parseKeyword();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:873:3
                // Keywords that are  not Reserved could be used
                return new NameObjectIdentifierR(id, ObjectIdentifier.Quoting.UNQUOTED);
            } else if (nextTokenType() == ID) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:877:3
                consumeToken(ID);
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:878:3
                return new NameObjectIdentifierR(getToken(0).getImage(), ObjectIdentifier.Quoting.UNQUOTED);
            } else if (nextTokenType() == ATSIGN) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:881:3
                consumeToken(ATSIGN);
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:881:14
                consumeToken(ID);
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:882:3
                return new NameObjectIdentifierR("@" + getToken(0).getImage(), ObjectIdentifier.Quoting.UNQUOTED);
            } else if (nextTokenType() == QUOTED_ID) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:885:3
                consumeToken(QUOTED_ID);
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:886:3
                return new NameObjectIdentifierR(MdxParserUtil.stripQuotes(getToken(0).getImage(), "[", "]", "]]"), ObjectIdentifier.Quoting.QUOTED);
            } else {
                pushOntoCallStack("parseNameObjectIdentifier", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 872, 3);
                throw new ParseException(lastConsumedToken, parseNameObjectIdentifier_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException953 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize954);
            if (thisProduction != null) {
                if (parseException953 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:895:1
    final public
    // for example '&foo&[1]&bar' in '[x].&foo&[1]&bar.[y]'
    KeyObjectIdentifier parseKeyIdentifier() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseKeyIdentifier";
        ASTparseKeyIdentifier thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseKeyIdentifier();
            openNodeScope(thisProduction);
        }
        List<NameObjectIdentifier> list = new ArrayList<NameObjectIdentifier>();
        NameObjectIdentifier key;
        ParseException parseException1009 = null;
        int callStackSize1010 = parsingStack.size();
        try {
            // Code for OneOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:900:3
            while (true) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:901:5
                pushOntoCallStack("parseKeyIdentifier", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 901, 5);
                try {
                    key = parseAmpId();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:902:5
                list.add(key);
                if (!(nextTokenType() == AMP_QUOTED_ID || nextTokenType == AMP_UNQUOTED_ID)) break;
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:906:3
            return new KeyObjectIdentifierR(list);
        } catch (ParseException e) {
            parseException1009 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1010);
            if (thisProduction != null) {
                if (parseException1009 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    static private final EnumSet<TokenType> parseAmpId_FIRST_SET = tokenTypeSet(AMP_QUOTED_ID, AMP_UNQUOTED_ID);

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:912:1
    final public NameObjectIdentifier parseAmpId() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseAmpId";
        // Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:913:3
        ASTparseAmpId thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseAmpId();
            openNodeScope(thisProduction);
        }
        ParseException parseException1033 = null;
        int callStackSize1034 = parsingStack.size();
        try {
            if (nextTokenType() == AMP_QUOTED_ID) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:913:3
                consumeToken(AMP_QUOTED_ID);
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:914:3
                return new NameObjectIdentifierR(MdxParserUtil.stripQuotes(getToken(0).getImage(), "&[", "]", "]]"), ObjectIdentifier.Quoting.QUOTED);
            } else if (nextTokenType() == AMP_UNQUOTED_ID) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:920:3
                consumeToken(AMP_UNQUOTED_ID);
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:921:3
                return new NameObjectIdentifierR(getToken(0).getImage().substring(1), ObjectIdentifier.Quoting.UNQUOTED);
            } else {
                pushOntoCallStack("parseAmpId", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 913, 3);
                throw new ParseException(lastConsumedToken, parseAmpId_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException1033 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1034);
            if (thisProduction != null) {
                if (parseException1033 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:930:1
    final public
    // a keyword that is not a RESERVED_WORD could be used as identifier
    String parseKeyword() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseKeyword";
        ASTparseKeyword thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseKeyword();
            openNodeScope(thisProduction);
        }
        ParseException parseException1061 = null;
        int callStackSize1062 = parsingStack.size();
        try {
            if (nextTokenType() == DIMENSION) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:932:5
                consumeToken(DIMENSION);
            } else if (nextTokenType() == PROPERTIES) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:933:5
                consumeToken(PROPERTIES);
            } else {
                pushOntoCallStack("parseKeyword", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 932, 5);
                throw new ParseException(lastConsumedToken, first_set$Grammer_ccc$932$5, parsingStack);
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:935:3
            return getToken(0).getImage();
        } catch (ParseException e) {
            parseException1061 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1062);
            if (thisProduction != null) {
                if (parseException1061 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:941:1
    final public CompoundId parseCompoundId() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseCompoundId";
        ASTparseCompoundId thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseCompoundId();
            openNodeScope(thisProduction);
        }
        CompoundId compoundId;
        List<ObjectIdentifier> list = new ArrayList<ObjectIdentifier>();
        ObjectIdentifier s;
        ParseException parseException1090 = null;
        int callStackSize1091 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:947:3
            pushOntoCallStack("parseCompoundId", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 947, 3);
            try {
                s = parseIdentifier();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:948:3
            list.add(s);
            // Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:951:3
            while (true) {
                if (!(scan$Grammer_ccc$952$5())) break;
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:953:5
                consumeToken(DOT);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:953:13
                pushOntoCallStack("parseCompoundId", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 953, 13);
                try {
                    s = parseIdentifier();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:954:5
                list.add(s);
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:958:3
            return new CompoundIdR(list);
        } catch (ParseException e) {
            parseException1090 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1091);
            if (thisProduction != null) {
                if (parseException1090 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:966:1
    final public
    // ----------------------------------------------------------------------------
    // Expressions
    Expression parseUnaliasedExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseUnaliasedExpression";
        ASTparseUnaliasedExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseUnaliasedExpression();
            openNodeScope(thisProduction);
        }
        Expression x, y;
        ParseException parseException1126 = null;
        int callStackSize1127 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:970:3
            pushOntoCallStack("parseUnaliasedExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 970, 3);
            try {
                x = parseTerm5();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:971:3
            while (true) {
                // Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:972:5
                if (nextTokenType() == OR) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:972:5
                    consumeToken(OR);
                    // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:972:12
                    pushOntoCallStack("parseUnaliasedExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 972, 12);
                    try {
                        y = parseTerm5();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:973:5
                    x = new CallExpressionR("OR", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (nextTokenType() == XOR) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:979:5
                    consumeToken(XOR);
                    // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:979:13
                    pushOntoCallStack("parseUnaliasedExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 979, 13);
                    try {
                        y = parseTerm5();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:980:5
                    x = new CallExpressionR("XOR", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (nextTokenType() == COLON) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:988:5
                    consumeToken(COLON);
                    // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:988:15
                    pushOntoCallStack("parseUnaliasedExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 988, 15);
                    try {
                        y = parseTerm5();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:989:5
                    x = new CallExpressionR(":", CallExpression.Type.Term_Infix, List.of(x, y));
                } else {
                    break;
                }
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:996:3
            return x;
        } catch (ParseException e) {
            parseException1126 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1127);
            if (thisProduction != null) {
                if (parseException1126 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1002:1
    final public Expression parseTerm5() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseTerm5";
        ASTparseTerm5 thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseTerm5();
            openNodeScope(thisProduction);
        }
        Expression x, y;
        ParseException parseException1194 = null;
        int callStackSize1195 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1006:3
            pushOntoCallStack("parseTerm5", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1006, 3);
            try {
                x = parseTerm4();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1007:3
            while (true) {
                if (!(nextTokenType() == AND)) break;
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1008:5
                consumeToken(AND);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1008:13
                pushOntoCallStack("parseTerm5", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1008, 13);
                try {
                    y = parseTerm4();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1009:5
                x = new CallExpressionR("AND", CallExpression.Type.Term_Infix, List.of(x, y));
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1016:3
            return x;
        } catch (ParseException e) {
            parseException1194 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1195);
            if (thisProduction != null) {
                if (parseException1194 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    static private final EnumSet<TokenType> parseTerm4_FIRST_SET = parseTerm4_FIRST_SET_init();

    static private EnumSet<TokenType> parseTerm4_FIRST_SET_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1022:1
    final public Expression parseTerm4() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseTerm4";
        // Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1026:3
        ASTparseTerm4 thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseTerm4();
            openNodeScope(thisProduction);
        }
        Expression x;
        ParseException parseException1226 = null;
        int callStackSize1227 = parsingStack.size();
        try {
            if (first_set$Grammer_ccc$1026$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1026:3
                pushOntoCallStack("parseTerm4", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1026, 3);
                try {
                    x = parseTerm3();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1027:3
                return x;
            } else if (nextTokenType() == NOT) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1030:3
                consumeToken(NOT);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1030:11
                pushOntoCallStack("parseTerm4", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1030, 11);
                try {
                    x = parseTerm4();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1031:3
                return new CallExpressionR("NOT", CallExpression.Type.Term_Prefix, List.of(x));
            } else {
                pushOntoCallStack("parseTerm4", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1026, 3);
                throw new ParseException(lastConsumedToken, parseTerm4_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException1226 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1227);
            if (thisProduction != null) {
                if (parseException1226 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1040:1
    final public Expression parseTerm3() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseTerm3";
        ASTparseTerm3 thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseTerm3();
            openNodeScope(thisProduction);
        }
        Expression x, y;
        Token op;
        ParseException parseException1258 = null;
        int callStackSize1259 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1045:3
            pushOntoCallStack("parseTerm3", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1045, 3);
            try {
                x = parseTerm2();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1046:3
            while (true) {
                // Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1048:5
                if (first_set$Grammer_ccc$1048$5.contains(nextTokenType())) {
                    if (nextTokenType() == EQ) {
                        // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1049:7
                        consumeToken(EQ);
                        // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1050:7
                        op = getToken(0);
                    } else if (nextTokenType() == NE) {
                        // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1053:7
                        consumeToken(NE);
                        // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1054:7
                        op = getToken(0);
                    } else if (nextTokenType() == LT) {
                        // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1057:7
                        consumeToken(LT);
                        // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1058:7
                        op = getToken(0);
                    } else if (nextTokenType() == GT) {
                        // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1061:7
                        consumeToken(GT);
                        // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1062:7
                        op = getToken(0);
                    } else if (nextTokenType() == LE) {
                        // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1065:7
                        consumeToken(LE);
                        // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1066:7
                        op = getToken(0);
                    } else if (nextTokenType() == GE) {
                        // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1069:7
                        consumeToken(GE);
                        // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1070:7
                        op = getToken(0);
                    } else {
                        pushOntoCallStack("parseTerm3", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1049, 7);
                        throw new ParseException(lastConsumedToken, first_set$Grammer_ccc$1049$7, parsingStack);
                    }
                    // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1074:5
                    pushOntoCallStack("parseTerm3", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1074, 5);
                    try {
                        y = parseTerm2();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1075:5
                    x = new CallExpressionR(op.getImage(), CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (scan$Grammer_ccc$1084$5()) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1085:5
                    consumeToken(IS);
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1085:12
                    consumeToken(NULL);
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1086:5
                    x = new CallExpressionR("IS NULL", CallExpression.Type.Term_Postfix, List.of(x));
                } else if (scan$Grammer_ccc$1094$5()) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1095:5
                    consumeToken(IS);
                    // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1095:12
                    pushOntoCallStack("parseTerm3", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1095, 12);
                    try {
                        y = parseTerm2();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1096:5
                    x = new CallExpressionR("IS", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (nextTokenType() == IS) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1102:5
                    consumeToken(IS);
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1102:12
                    consumeToken(EMPTY);
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1103:5
                    x = new CallExpressionR("IS EMPTY", CallExpression.Type.Term_Postfix, List.of(x));
                } else if (nextTokenType() == MATCHES) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1107:5
                    consumeToken(MATCHES);
                    // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1107:17
                    pushOntoCallStack("parseTerm3", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1107, 17);
                    try {
                        y = parseTerm2();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1108:5
                    x = new CallExpressionR("MATCHES", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (scan$Grammer_ccc$1114$5()) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1115:5
                    consumeToken(NOT);
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1115:13
                    consumeToken(MATCHES);
                    // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1115:25
                    pushOntoCallStack("parseTerm3", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1115, 25);
                    try {
                        y = parseTerm2();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1116:5
                    x = new CallExpressionR("NOT", CallExpression.Type.Term_Prefix, List.of(new CallExpressionR("MATCHES", CallExpression.Type.Term_Infix, List.of(x, y))));
                } else if (nextTokenType() == IN) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1127:5
                    consumeToken(IN);
                    // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1127:12
                    pushOntoCallStack("parseTerm3", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1127, 12);
                    try {
                        y = parseTerm2();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1128:5
                    x = new CallExpressionR("IN", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (nextTokenType() == NOT) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1134:5
                    consumeToken(NOT);
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1134:13
                    consumeToken(IN);
                    // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1134:20
                    pushOntoCallStack("parseTerm3", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1134, 20);
                    try {
                        y = parseTerm2();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1135:5
                    x = new CallExpressionR("NOT", CallExpression.Type.Term_Prefix, List.of(new CallExpressionR("IN", CallExpression.Type.Term_Infix, List.of(x, y))));
                } else {
                    break;
                }
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1147:3
            return x;
        } catch (ParseException e) {
            parseException1258 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1259);
            if (thisProduction != null) {
                if (parseException1258 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1153:1
    final public Expression parseTerm2() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseTerm2";
        ASTparseTerm2 thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseTerm2();
            openNodeScope(thisProduction);
        }
        Expression x, y;
        ParseException parseException1487 = null;
        int callStackSize1488 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1157:3
            pushOntoCallStack("parseTerm2", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1157, 3);
            try {
                x = parseTerm();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1158:3
            while (true) {
                // Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1159:5
                if (nextTokenType() == PLUS) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1159:5
                    consumeToken(PLUS);
                    // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1159:14
                    pushOntoCallStack("parseTerm2", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1159, 14);
                    try {
                        y = parseTerm();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1160:5
                    x = new CallExpressionR("+", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (nextTokenType() == MINUS) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1166:5
                    consumeToken(MINUS);
                    // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1166:15
                    pushOntoCallStack("parseTerm2", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1166, 15);
                    try {
                        y = parseTerm();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1167:5
                    x = new CallExpressionR("-", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (nextTokenType() == CONCAT) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1173:5
                    consumeToken(CONCAT);
                    // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1173:16
                    pushOntoCallStack("parseTerm2", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1173, 16);
                    try {
                        y = parseTerm();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1174:5
                    x = new CallExpressionR("||", CallExpression.Type.Term_Infix, List.of(x, y));
                } else {
                    break;
                }
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1181:3
            return x;
        } catch (ParseException e) {
            parseException1487 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1488);
            if (thisProduction != null) {
                if (parseException1487 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1187:1
    final public Expression parseTerm() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseTerm";
        ASTparseTerm thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseTerm();
            openNodeScope(thisProduction);
        }
        Expression x, y;
        ParseException parseException1555 = null;
        int callStackSize1556 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1191:3
            pushOntoCallStack("parseTerm", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1191, 3);
            try {
                x = parseFactor();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1192:3
            while (true) {
                // Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1193:5
                if (nextTokenType() == ASTERISK) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1193:5
                    consumeToken(ASTERISK);
                    // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1193:18
                    pushOntoCallStack("parseTerm", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1193, 18);
                    try {
                        y = parseFactor();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1194:5
                    x = new CallExpressionR("*", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (nextTokenType() == SOLIDUS) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1200:5
                    consumeToken(SOLIDUS);
                    // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1200:17
                    pushOntoCallStack("parseTerm", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1200, 17);
                    try {
                        y = parseFactor();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1201:5
                    x = new CallExpressionR("/", CallExpression.Type.Term_Infix, List.of(x, y));
                } else {
                    break;
                }
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1208:3
            return x;
        } catch (ParseException e) {
            parseException1555 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1556);
            if (thisProduction != null) {
                if (parseException1555 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    static private final EnumSet<TokenType> parseFactor_FIRST_SET = parseFactor_FIRST_SET_init();

    static private EnumSet<TokenType> parseFactor_FIRST_SET_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1214:1
    final public Expression parseFactor() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseFactor";
        // Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1218:3
        ASTparseFactor thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseFactor();
            openNodeScope(thisProduction);
        }
        Expression p;
        ParseException parseException1607 = null;
        int callStackSize1608 = parsingStack.size();
        try {
            if (first_set$Grammer_ccc$1218$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1218:3
                pushOntoCallStack("parseFactor", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1218, 3);
                try {
                    p = parsePrimary();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1219:3
                return p;
            } else if (nextTokenType() == PLUS) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1222:3
                consumeToken(PLUS);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1222:12
                pushOntoCallStack("parseFactor", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1222, 12);
                try {
                    p = parsePrimary();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1223:3
                return p;
            } else if (nextTokenType() == MINUS) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1226:3
                consumeToken(MINUS);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1226:13
                pushOntoCallStack("parseFactor", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1226, 13);
                try {
                    p = parsePrimary();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1227:3
                return new CallExpressionR("-", CallExpression.Type.Term_Prefix, List.of(p));
            } else if (nextTokenType() == EXISTING) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1233:3
                consumeToken(EXISTING);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1233:16
                pushOntoCallStack("parseFactor", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1233, 16);
                try {
                    p = parsePrimary();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1234:3
                return new CallExpressionR("Existing", CallExpression.Type.Term_Prefix, List.of(p));
            } else {
                pushOntoCallStack("parseFactor", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1218, 3);
                throw new ParseException(lastConsumedToken, parseFactor_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException1607 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1608);
            if (thisProduction != null) {
                if (parseException1607 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1243:1
    final public Expression parsePrimary() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parsePrimary";
        ASTparsePrimary thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparsePrimary();
            openNodeScope(thisProduction);
        }
        Expression expression;
        ParseException parseException1671 = null;
        int callStackSize1672 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1247:3
            pushOntoCallStack("parsePrimary", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1247, 3);
            try {
                expression = parseAtom();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1248:3
            while (true) {
                if (!(nextTokenType() == DOT)) break;
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1249:5
                consumeToken(DOT);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1249:13
                pushOntoCallStack("parsePrimary", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1249, 13);
                try {
                    expression = objectIdentifierOrFuncall(expression);
                } finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1251:3
            return expression;
        } catch (ParseException e) {
            parseException1671 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1672);
            if (thisProduction != null) {
                if (parseException1671 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1257:1
    final public Expression objectIdentifierOrFuncall(Expression left) {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "objectIdentifierOrFuncall";
        ASTobjectIdentifierOrFuncall thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTobjectIdentifierOrFuncall();
            openNodeScope(thisProduction);
        }
        ObjectIdentifier objectIdentifier;
        List<Expression> argList = null;
        ParseException parseException1699 = null;
        int callStackSize1700 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1262:3
            pushOntoCallStack("objectIdentifierOrFuncall", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1262, 3);
            try {
                objectIdentifier = parseIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1263:3
            if (nextTokenType() == LPAREN) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1264:5
                consumeToken(LPAREN);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1266:7
                pushOntoCallStack("objectIdentifierOrFuncall", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1266, 7);
                try {
                    argList = expOrEmptyList();
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1268:5
                consumeToken(RPAREN);
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1270:3
            return MdxParserUtil.createCall(left, objectIdentifier, argList);
        } catch (ParseException e) {
            parseException1699 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1700);
            if (thisProduction != null) {
                if (parseException1699 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    static private final EnumSet<TokenType> parseNumericLiteral_FIRST_SET = tokenTypeSet(UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL);

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1276:1
    final public NumericLiteral parseNumericLiteral() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseNumericLiteral";
        // Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1277:3
        ASTparseNumericLiteral thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseNumericLiteral();
            openNodeScope(thisProduction);
        }
        ParseException parseException1736 = null;
        int callStackSize1737 = parsingStack.size();
        try {
            if (nextTokenType() == DECIMAL_NUMERIC_LITERAL) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1277:3
                consumeToken(DECIMAL_NUMERIC_LITERAL);
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1278:3
                return new NumericLiteralR(new BigDecimal(getToken(0).getImage()));
            } else if (nextTokenType() == UNSIGNED_INTEGER_LITERAL) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1281:3
                consumeToken(UNSIGNED_INTEGER_LITERAL);
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1282:3
                return new NumericLiteralR(new BigDecimal(getToken(0).getImage()));
            } else if (nextTokenType() == APPROX_NUMERIC_LITERAL) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1285:3
                consumeToken(APPROX_NUMERIC_LITERAL);
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1286:3
                return new NumericLiteralR(new BigDecimal(getToken(0).getImage()));
            } else {
                pushOntoCallStack("parseNumericLiteral", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1277, 3);
                throw new ParseException(lastConsumedToken, parseNumericLiteral_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException1736 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1737);
            if (thisProduction != null) {
                if (parseException1736 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    static private final EnumSet<TokenType> parseAtom_FIRST_SET = parseAtom_FIRST_SET_init();

    static private EnumSet<TokenType> parseAtom_FIRST_SET_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NULL, PROPERTIES, LPAREN, LBRACE, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1292:1
    final public Expression parseAtom() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseAtom";
        // Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1298:3
        ASTparseAtom thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseAtom();
            openNodeScope(thisProduction);
        }
        Expression expression;
        NameObjectIdentifier nameObjectIdentifier;
        List<Expression> expressions;
        ParseException parseException1776 = null;
        int callStackSize1777 = parsingStack.size();
        try {
            if (nextTokenType() == SINGLE_QUOTED_STRING) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1298:3
                consumeToken(SINGLE_QUOTED_STRING);
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1299:3
                return new StringLiteralR(MdxParserUtil.stripQuotes(getToken(0).getImage(), "'", "'", "''"));
            } else if (nextTokenType() == DOUBLE_QUOTED_STRING) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1302:3
                consumeToken(DOUBLE_QUOTED_STRING);
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1303:3
                return new StringLiteralR(MdxParserUtil.stripQuotes(getToken(0).getImage(), '"' + "", '"' + "", '"' + "" + '"'));
            } else if (nextTokenType() == UNSIGNED_INTEGER_LITERAL || nextTokenType == APPROX_NUMERIC_LITERAL || nextTokenType == DECIMAL_NUMERIC_LITERAL) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1306:3
                pushOntoCallStack("parseAtom", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1306, 3);
                try {
                    expression = parseNumericLiteral();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1307:3
                return expression;
            } else if (nextTokenType() == NULL) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1310:3
                consumeToken(NULL);
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1311:3
                return NullLiteralR.SINGLETON;
            } else if (nextTokenType() == CAST) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1314:3
                consumeToken(CAST);
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1314:12
                consumeToken(LPAREN);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1314:23
                pushOntoCallStack("parseAtom", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1314, 23);
                try {
                    expression = parseUnaliasedExpression();
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1315:3
                consumeToken(AS);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1315:10
                pushOntoCallStack("parseAtom", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1315, 10);
                try {
                    nameObjectIdentifier = parseNameObjectIdentifier();
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1315:59
                consumeToken(RPAREN);
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1316:3
                return new CallExpressionR("CAST", CallExpression.Type.Cast, List.of(expression, new SymbolLiteralR(nameObjectIdentifier.name())));
            } else if (nextTokenType() == LPAREN) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1324:3
                consumeToken(LPAREN);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1324:14
                pushOntoCallStack("parseAtom", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1324, 14);
                try {
                    expressions = expList();
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1324:36
                consumeToken(RPAREN);
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1325:3
                // Whereas ([Sales],[Time]) and () are tuples, ([Sales]) and (5)
                // are just expressions.
                return new CallExpressionR("()", CallExpression.Type.Parentheses, expressions);
            } else if (nextTokenType() == LBRACE) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1333:3
                consumeToken(LBRACE);
                if (scan$Grammer_ccc$1335$5()) {
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1336:5
                    expressions = Collections.emptyList();
                } else if (first_set$Grammer_ccc$1340$5.contains(nextTokenType())) {
                    // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1340:5
                    pushOntoCallStack("parseAtom", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1340, 5);
                    try {
                        expressions = expList();
                    } finally {
                        popCallStack();
                    }
                } else {
                    pushOntoCallStack("parseAtom", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1335, 5);
                    throw new ParseException(lastConsumedToken, first_set$Grammer_ccc$1335$5, parsingStack);
                }
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1342:3
                consumeToken(RBRACE);
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1343:3
                return new CallExpressionR("{}", CallExpression.Type.Braces, expressions);
            } else if (nextTokenType() == CASE) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1347:3
                pushOntoCallStack("parseAtom", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1347, 3);
                try {
                    expression = parseCaseExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1348:3
                return expression;
            } else if (first_set$Grammer_ccc$1354$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1354:3
                pushOntoCallStack("parseAtom", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1354, 3);
                try {
                    // Function call "foo(a, b)" or "whiz!bang!foo(a, b)".
                    // Properties "x.PROP" and methods "exp.meth(a)" are in primary().
                    nameObjectIdentifier = parseNameObjectIdentifier();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1355:3
                while (true) {
                    if (!(nextTokenType() == BANG)) break;
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1356:5
                    consumeToken(BANG);
                    // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1356:14
                    pushOntoCallStack("parseAtom", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1356, 14);
                    try {
                        nameObjectIdentifier = parseNameObjectIdentifier();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1357:5
                    // We support the syntax for qualifying function names with package
                    // names separated by bang ('!'), e.g. 'whiz!bang!foo(a, b)'
                    // but currently we ignore the qualifiers. The previous example is
                    // equivalent to 'foo(a, b)'.
                }
                if (nextTokenType() == LPAREN) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1365:5
                    consumeToken(LPAREN);
                    if (scan$Grammer_ccc$1367$7()) {
                        // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1368:7
                        expressions = Collections.emptyList();
                    } else {
                        // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1372:7
                        pushOntoCallStack("parseAtom", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1372, 7);
                        try {
                            expressions = expOrEmptyList();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1374:5
                    consumeToken(RPAREN);
                } else {
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1376:16
                    expressions = null;
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1380:3
                return MdxParserUtil.createCall(null, nameObjectIdentifier, expressions);
            } else {
                pushOntoCallStack("parseAtom", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1298, 3);
                throw new ParseException(lastConsumedToken, parseAtom_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException1776 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1777);
            if (thisProduction != null) {
                if (parseException1776 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1386:1
    final public Expression parseCaseExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseCaseExpression";
        ASTparseCaseExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseCaseExpression();
            openNodeScope(thisProduction);
        }
        Expression expression, expression2;
        List<Expression> expressions = new ArrayList<Expression>();
        boolean match = false;
        ParseException parseException2007 = null;
        int callStackSize2008 = parsingStack.size();
        try {
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1392:3
            consumeToken(CASE);
            // Code for ZeroOrOne specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1393:3
            if (first_set$Grammer_ccc$1394$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1394:5
                pushOntoCallStack("parseCaseExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1394, 5);
                try {
                    expression = parseExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1395:5
                match = true;
                expressions.add(expression);
            }
            // Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1400:3
            while (true) {
                if (!(nextTokenType() == WHEN)) break;
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1401:5
                consumeToken(WHEN);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1401:14
                pushOntoCallStack("parseCaseExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1401, 14);
                try {
                    expression = parseExpression();
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1401:43
                consumeToken(THEN);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1401:52
                pushOntoCallStack("parseCaseExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1401, 52);
                try {
                    expression2 = parseExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1402:5
                expressions.add(expression);
                expressions.add(expression2);
            }
            // Code for ZeroOrOne specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1407:3
            if (nextTokenType() == ELSE) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1408:5
                consumeToken(ELSE);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1408:14
                pushOntoCallStack("parseCaseExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1408, 14);
                try {
                    expression = parseExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1409:5
                expressions.add(expression);
            }
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1413:3
            consumeToken(END);
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1414:3
            if (match) {
                return new CallExpressionR("_CaseMatch", CallExpression.Type.Term_Case, expressions);
            } else {
                return new CallExpressionR("_CaseTest", CallExpression.Type.Term_Case, expressions);
            }
        } catch (ParseException e) {
            parseException2007 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize2008);
            if (thisProduction != null) {
                if (parseException2007 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1430:1
    final public CreateSetBodyClause parseCreateSetBodyClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseCreateSetBodyClause";
        ASTparseCreateSetBodyClause thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseCreateSetBodyClause();
            openNodeScope(thisProduction);
        }
        CompoundId compoundId = null;
        Expression expression = null;
        //List<MemberPropertyDefinition> memberPropertyDefinitions = new LinkedList<MemberPropertyDefinition>();
        //MemberPropertyDefinition memberPropertyDefinition = null;
        ParseException parseException2087 = null;
        int callStackSize2088 = parsingStack.size();
        try {
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1438:3
            pushOntoCallStack("parseCreateSetBodyClause", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1438, 3);
            try {
                compoundId = parseCompoundId();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1438:32
            consumeToken(AS);
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1438:39
            pushOntoCallStack("parseCreateSetBodyClause", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1438, 39);
            try {
                expression = parseExpression();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1439:3
            return new CreateSetBodyClauseR(compoundId, expression);
        } catch (ParseException e) {
            parseException2087 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize2088);
            if (thisProduction != null) {
                if (parseException2087 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1445:1
    final public SelectDimensionPropertyListClause parseSelectDimensionPropertyListClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectDimensionPropertyListClause";
        ASTparseSelectDimensionPropertyListClause thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseSelectDimensionPropertyListClause();
            openNodeScope(thisProduction);
        }
        ParseException parseException2107 = null;
        int callStackSize2108 = parsingStack.size();
        try {
            // Code for ZeroOrOne specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1446:3
            if (nextTokenType() == DIMENSION) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1446:4
                consumeToken(DIMENSION);
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1447:3
            List<CompoundId> cellProperties = new LinkedList<CompoundId>();
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1450:3
            consumeToken(PROPERTIES);
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1451:3
            cellProperties.add(parseCompoundId());
            // Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1454:3
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1455:5
                consumeToken(COMMA);
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1456:5
                cellProperties.add(parseCompoundId());
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1460:3
            return new SelectDimensionPropertyListClauseR(cellProperties);
        } catch (ParseException e) {
            parseException2107 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize2108);
            if (thisProduction != null) {
                if (parseException2107 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1466:1
    final public RefreshStatement parseRefreshStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseRefreshStatement";
        ASTparseRefreshStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseRefreshStatement();
            openNodeScope(thisProduction);
        }
        NameObjectIdentifier cubeName;
        ParseException parseException2155 = null;
        int callStackSize2156 = parsingStack.size();
        try {
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1470:3
            consumeToken(REFRESH);
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1470:15
            consumeToken(CUBE);
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1470:25
            pushOntoCallStack("parseRefreshStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1470, 25);
            try {
                cubeName = parseNameObjectIdentifier();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1471:1
            return new RefreshStatementR(cubeName);
        } catch (ParseException e) {
            parseException2155 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize2156);
            if (thisProduction != null) {
                if (parseException2155 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1476:1
    final public DMVStatement parseDMVStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseDMVStatement";
        ASTparseDMVStatement thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseDMVStatement();
            openNodeScope(thisProduction);
        }
        CompoundId c;
        List<CompoundId> columns = new ArrayList<CompoundId>();
        NameObjectIdentifier tableId = null;
        Expression expression = null;
        ParseException parseException2175 = null;
        int callStackSize2176 = parsingStack.size();
        try {
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1483:3
            consumeToken(SELECT);
            // Code for ZeroOrOne specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1484:1
            if (first_set$Grammer_ccc$1485$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1485:5
                pushOntoCallStack("parseDMVStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1485, 5);
                try {
                    c = parseCompoundId();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1486:5
                columns.add(c);
                // Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1487:5
                while (true) {
                    if (!(nextTokenType() == COMMA)) break;
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1488:9
                    consumeToken(COMMA);
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1489:5
                    columns.add(parseCompoundId());
                }
            }
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1493:1
            consumeToken(FROM);
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1493:10
            consumeToken($SYSTEM);
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1493:21
            consumeToken(DOT);
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1493:29
            pushOntoCallStack("parseDMVStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1493, 29);
            try {
                tableId = parseNameObjectIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1494:1
            if (nextTokenType() == WHERE) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1495:11
                consumeToken(WHERE);
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1495:21
                pushOntoCallStack("parseDMVStatement", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1495, 21);
                try {
                    expression = parseExpression();
                } finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1497:1
            return new DMVStatementR(columns, tableId, expression);
        } catch (ParseException e) {
            parseException2175 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize2176);
            if (thisProduction != null) {
                if (parseException2175 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1503:1
    final public
    // <SelectQueryAxisClause> ::= [NON EMPTY] <set> [<dimProps>] ON <axis_name>
    SelectQueryAxisClause parseSelectQueryAxisClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectQueryAxisClause";
        ASTparseSelectQueryAxisClause thisProduction = null;
        if (buildTree) {
            thisProduction = new ASTparseSelectQueryAxisClause();
            openNodeScope(thisProduction);
        }
        boolean nonEmpty = false;
        SelectDimensionPropertyListClause selectDimensionPropertyListClause = null;
        Expression expression;
        int n;
        Axis axis;
        ParseException parseException2251 = null;
        int callStackSize2252 = parsingStack.size();
        try {
            // Code for ZeroOrOne specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1511:3
            if (nextTokenType() == NON) {
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1511:4
                consumeToken(NON);
                // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1511:12
                consumeToken(EMPTY);
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1512:3
                nonEmpty = true;
            }
            // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1516:3
            pushOntoCallStack("parseSelectQueryAxisClause", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1516, 3);
            try {
                expression = parseExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1517:3
            if (nextTokenType() == DIMENSION || nextTokenType == PROPERTIES) {
                // Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1518:5
                pushOntoCallStack("parseSelectQueryAxisClause", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1518, 5);
                try {
                    selectDimensionPropertyListClause = parseSelectDimensionPropertyListClause();
                } finally {
                    popCallStack();
                }
            }
            // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1520:3
            consumeToken(ON);
            if (nextTokenType() == AXIS || nextTokenType == UNSIGNED_INTEGER_LITERAL) {
                if (nextTokenType() == UNSIGNED_INTEGER_LITERAL) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1523:7
                    consumeToken(UNSIGNED_INTEGER_LITERAL);
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1524:7
                    n = Integer.valueOf(getToken(0).getImage()).intValue();
                } else if (nextTokenType() == AXIS) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1527:7
                    consumeToken(AXIS);
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1527:16
                    consumeToken(LPAREN);
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1527:27
                    consumeToken(UNSIGNED_INTEGER_LITERAL);
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1528:7
                    n = Integer.valueOf(getToken(0).getImage()).intValue();
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1531:7
                    consumeToken(RPAREN);
                } else {
                    pushOntoCallStack("parseSelectQueryAxisClause", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1523, 7);
                    throw new ParseException(lastConsumedToken, first_set$Grammer_ccc$1523$7, parsingStack);
                }
                // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1533:5
                if (n < 0) {
                    throw new IllegalArgumentException("Only axis numbers >= 0 allowed.");
                } else {
                    axis = AxisR.createUnnamed(n);
                }
            } else if (first_set$Grammer_ccc$1544$5.contains(nextTokenType())) {
                if (nextTokenType() == COLUMNS) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1545:7
                    consumeToken(COLUMNS);
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1546:7
                    axis = AxisR.COLUMNS_NAMED;
                } else if (nextTokenType() == ROWS) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1549:7
                    consumeToken(ROWS);
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1550:7
                    axis = AxisR.ROWS_NAMED;
                } else if (nextTokenType() == PAGES) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1553:7
                    consumeToken(PAGES);
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1554:7
                    axis = AxisR.PAGES_NAMED;
                } else if (nextTokenType() == SECTIONS) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1557:7
                    consumeToken(SECTIONS);
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1558:7
                    axis = AxisR.SECTIONS_NAMED;
                } else if (nextTokenType() == CHAPTERS) {
                    // Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1561:7
                    consumeToken(CHAPTERS);
                    // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1562:7
                    axis = AxisR.CHAPTERS_NAMED;
                } else {
                    pushOntoCallStack("parseSelectQueryAxisClause", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1545, 7);
                    throw new ParseException(lastConsumedToken, first_set$Grammer_ccc$1545$7, parsingStack);
                }
            } else {
                pushOntoCallStack("parseSelectQueryAxisClause", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1522, 5);
                throw new ParseException(lastConsumedToken, first_set$Grammer_ccc$1522$5, parsingStack);
            }
            // Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1567:3
            return new SelectQueryAxisClauseR(nonEmpty, expression, axis, selectDimensionPropertyListClause);
        } catch (ParseException e) {
            parseException2251 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize2252);
            if (thisProduction != null) {
                if (parseException2251 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    static private final EnumSet<TokenType> first_set$Grammer_ccc$414$5 = tokenTypeSet(DRILLTHROUGH, EXPLAIN, SELECT, WITH);
    static private final EnumSet<TokenType> first_set$Grammer_ccc$462$5 = tokenTypeSet(DRILLTHROUGH, SELECT, WITH);
    static private final EnumSet<TokenType> first_set$Grammer_ccc$531$5 = tokenTypeSet(CELL, MEMBER, MEASURE, SET, CALCULATED);
    static private final EnumSet<TokenType> first_set$Grammer_ccc$558$8 = tokenTypeSet(CELL, MEMBER, MEASURE, SET, CALCULATED);
    static private final EnumSet<TokenType> first_set$Grammer_ccc$569$5 = first_set$Grammer_ccc$569$5_init();

    static private EnumSet<TokenType> first_set$Grammer_ccc$569$5_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NON, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$Grammer_ccc$593$5$ = tokenTypeSet(DIMENSION, PROPERTIES, LPAREN, ATSIGN, ID, QUOTED_ID);
    static private final EnumSet<TokenType> first_set$Grammer_ccc$593$5 = tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID);
    static private final EnumSet<TokenType> first_set$Grammer_ccc$625$7 = first_set$Grammer_ccc$625$7_init();

    static private EnumSet<TokenType> first_set$Grammer_ccc$625$7_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NON, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$Grammer_ccc$783$3 = first_set$Grammer_ccc$783$3_init();

    static private EnumSet<TokenType> first_set$Grammer_ccc$783$3_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$Grammer_ccc$858$5$ = tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID, AMP_QUOTED_ID, AMP_UNQUOTED_ID);
    static private final EnumSet<TokenType> first_set$Grammer_ccc$858$5 = tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID);
    static private final EnumSet<TokenType> first_set$Grammer_ccc$932$5 = tokenTypeSet(DIMENSION, PROPERTIES);
    static private final EnumSet<TokenType> first_set$Grammer_ccc$1026$3 = first_set$Grammer_ccc$1026$3_init();

    static private EnumSet<TokenType> first_set$Grammer_ccc$1026$3_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$Grammer_ccc$1048$5 = tokenTypeSet(EQ, GE, GT, LE, LT, NE);
    static private final EnumSet<TokenType> first_set$Grammer_ccc$1049$7 = tokenTypeSet(EQ, GE, GT, LE, LT, NE);
    static private final EnumSet<TokenType> first_set$Grammer_ccc$1218$3 = first_set$Grammer_ccc$1218$3_init();

    static private EnumSet<TokenType> first_set$Grammer_ccc$1218$3_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NULL, PROPERTIES, LPAREN, LBRACE, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$Grammer_ccc$1335$5 = first_set$Grammer_ccc$1335$5_init();

    static private EnumSet<TokenType> first_set$Grammer_ccc$1335$5_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$Grammer_ccc$1340$5 = first_set$Grammer_ccc$1340$5_init();

    static private EnumSet<TokenType> first_set$Grammer_ccc$1340$5_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$Grammer_ccc$1354$3 = tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID);
    static private final EnumSet<TokenType> first_set$Grammer_ccc$1394$5 = first_set$Grammer_ccc$1394$5_init();

    static private EnumSet<TokenType> first_set$Grammer_ccc$1394$5_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$Grammer_ccc$1485$5 = tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID, AMP_QUOTED_ID, AMP_UNQUOTED_ID);
    static private final EnumSet<TokenType> first_set$Grammer_ccc$1522$5 = tokenTypeSet(AXIS, CHAPTERS, COLUMNS, PAGES, ROWS, SECTIONS, UNSIGNED_INTEGER_LITERAL);
    static private final EnumSet<TokenType> first_set$Grammer_ccc$1523$7 = tokenTypeSet(AXIS, UNSIGNED_INTEGER_LITERAL);
    static private final EnumSet<TokenType> first_set$Grammer_ccc$1544$5 = tokenTypeSet(CHAPTERS, COLUMNS, PAGES, ROWS, SECTIONS);
    static private final EnumSet<TokenType> first_set$Grammer_ccc$1545$7 = tokenTypeSet(CHAPTERS, COLUMNS, PAGES, ROWS, SECTIONS);

    private final boolean scanToken(TokenType expectedType, TokenType...additionalTypes) {
        Token peekedToken = nextToken(currentLookaheadToken);
        TokenType type = peekedToken.getType();
        if (type != expectedType) {
            boolean matched = false;
            for (TokenType tt : additionalTypes) {
                if (type == tt) {
                    matched = true;
                    break;
                }
            }
            if (!matched) return false;
        }
        --remainingLookahead;
        currentLookaheadToken = peekedToken;
        return true;
    }

    private final boolean scanToken(EnumSet<TokenType> types) {
        Token peekedToken = nextToken(currentLookaheadToken);
        TokenType type = peekedToken.getType();
        if (!types.contains(type)) return false;
        --remainingLookahead;
        currentLookaheadToken = peekedToken;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:764:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$764$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:764:5
            if (!scanToken(AS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:764:12
            // NonTerminal parseIdentifier at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:764:12
            pushOntoLookaheadStack("parseExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 764, 12);
            currentLookaheadProduction = "parseIdentifier";
            try {
                if (!check$parseIdentifier(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:765:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:783:3
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$783$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:783:3
            // NonTerminal parseExpression at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:783:3
            pushOntoLookaheadStack("parseExpressionOrEmpty", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 783, 3);
            currentLookaheadProduction = "parseExpression";
            try {
                if (!check$parseExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:784:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:788:3
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$788$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:788:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:807:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$807$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:807:5
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:808:5
            // NonTerminal parseExpressionOrEmpty at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:808:5
            pushOntoLookaheadStack("expOrEmptyList", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 808, 5);
            currentLookaheadProduction = "parseExpressionOrEmpty";
            try {
                if (!check$parseExpressionOrEmpty(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:809:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:830:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$830$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:830:5
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:831:5
            // NonTerminal parseExpression at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:831:5
            pushOntoLookaheadStack("expList", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 831, 5);
            currentLookaheadProduction = "parseExpression";
            try {
                if (!check$parseExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:832:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:858:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$858$5$(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:858:5
            // NonTerminal parseNameObjectIdentifier at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:858:5
            pushOntoLookaheadStack("parseIdentifier", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 858, 5);
            currentLookaheadProduction = "parseNameObjectIdentifier";
            try {
                if (!check$parseNameObjectIdentifier(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:860:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$860$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:860:5
            // NonTerminal parseKeyIdentifier at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:860:5
            pushOntoLookaheadStack("parseIdentifier", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 860, 5);
            currentLookaheadProduction = "parseKeyIdentifier";
            try {
                if (!check$parseKeyIdentifier(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:881:3
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$881$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:881:3
            if (!scanToken(ATSIGN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:881:14
            if (!scanToken(ID)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:882:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:972:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$972$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:972:5
            Token token2551 = currentLookaheadToken;
            int remainingLookahead2551 = remainingLookahead;
            boolean hitFailure2551 = hitFailure, passedPredicate2551 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Grammer_ccc$972$5$(false)) {
                    currentLookaheadToken = token2551;
                    remainingLookahead = remainingLookahead2551;
                    hitFailure = hitFailure2551;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Grammer_ccc$979$5(false)) {
                        currentLookaheadToken = token2551;
                        remainingLookahead = remainingLookahead2551;
                        hitFailure = hitFailure2551;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$Grammer_ccc$988$5(false)) {
                            currentLookaheadToken = token2551;
                            remainingLookahead = remainingLookahead2551;
                            hitFailure = hitFailure2551;
                            return false;
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate2551;
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:972:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$972$5$(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:972:5
            if (!scanToken(OR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:972:12
            // NonTerminal parseTerm5 at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:972:12
            pushOntoLookaheadStack("parseUnaliasedExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 972, 12);
            currentLookaheadProduction = "parseTerm5";
            try {
                if (!check$parseTerm5(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:973:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:979:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$979$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:979:5
            if (!scanToken(XOR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:979:13
            // NonTerminal parseTerm5 at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:979:13
            pushOntoLookaheadStack("parseUnaliasedExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 979, 13);
            currentLookaheadProduction = "parseTerm5";
            try {
                if (!check$parseTerm5(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:980:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:988:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$988$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:988:5
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:988:15
            // NonTerminal parseTerm5 at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:988:15
            pushOntoLookaheadStack("parseUnaliasedExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 988, 15);
            currentLookaheadProduction = "parseTerm5";
            try {
                if (!check$parseTerm5(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:989:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1008:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1008$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1008:5
            if (!scanToken(AND)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1008:13
            // NonTerminal parseTerm4 at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1008:13
            pushOntoLookaheadStack("parseTerm5", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1008, 13);
            currentLookaheadProduction = "parseTerm4";
            try {
                if (!check$parseTerm4(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1009:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1026:3
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1026$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1026:3
            // NonTerminal parseTerm3 at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1026:3
            pushOntoLookaheadStack("parseTerm4", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1026, 3);
            currentLookaheadProduction = "parseTerm3";
            try {
                if (!check$parseTerm3(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1027:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1030:3
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1030$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1030:3
            if (!scanToken(NOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1030:11
            // NonTerminal parseTerm4 at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1030:11
            pushOntoLookaheadStack("parseTerm4", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1030, 11);
            currentLookaheadProduction = "parseTerm4";
            try {
                if (!check$parseTerm4(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1031:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1048:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1048$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1048:5
            Token token2576 = currentLookaheadToken;
            int remainingLookahead2576 = remainingLookahead;
            boolean hitFailure2576 = hitFailure, passedPredicate2576 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Grammer_ccc$1048$5$(false)) {
                    currentLookaheadToken = token2576;
                    remainingLookahead = remainingLookahead2576;
                    hitFailure = hitFailure2576;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Grammer_ccc$1084$5(false)) {
                        currentLookaheadToken = token2576;
                        remainingLookahead = remainingLookahead2576;
                        hitFailure = hitFailure2576;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$Grammer_ccc$1094$5(false)) {
                            currentLookaheadToken = token2576;
                            remainingLookahead = remainingLookahead2576;
                            hitFailure = hitFailure2576;
                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                            passedPredicate = false;
                            if (!check$Grammer_ccc$1102$5(false)) {
                                currentLookaheadToken = token2576;
                                remainingLookahead = remainingLookahead2576;
                                hitFailure = hitFailure2576;
                                if (passedPredicate && !legacyGlitchyLookahead) return false;
                                passedPredicate = false;
                                if (!check$Grammer_ccc$1107$5(false)) {
                                    currentLookaheadToken = token2576;
                                    remainingLookahead = remainingLookahead2576;
                                    hitFailure = hitFailure2576;
                                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                                    passedPredicate = false;
                                    if (!check$Grammer_ccc$1114$5(false)) {
                                        currentLookaheadToken = token2576;
                                        remainingLookahead = remainingLookahead2576;
                                        hitFailure = hitFailure2576;
                                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                                        passedPredicate = false;
                                        if (!check$Grammer_ccc$1127$5(false)) {
                                            currentLookaheadToken = token2576;
                                            remainingLookahead = remainingLookahead2576;
                                            hitFailure = hitFailure2576;
                                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                                            passedPredicate = false;
                                            if (!check$Grammer_ccc$1134$5(false)) {
                                                currentLookaheadToken = token2576;
                                                remainingLookahead = remainingLookahead2576;
                                                hitFailure = hitFailure2576;
                                                return false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate2576;
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1048:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1048$5$(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1049:7
            if (!scanToken(first_set$Grammer_ccc$1049$7)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1074:5
            // NonTerminal parseTerm2 at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1074:5
            pushOntoLookaheadStack("parseTerm3", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1074, 5);
            currentLookaheadProduction = "parseTerm2";
            try {
                if (!check$parseTerm2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1075:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1084:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1084$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1085:5
            if (!scanToken(IS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1085:12
            if (!scanToken(NULL)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1086:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1094:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1094$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1095:5
            if (!scanToken(IS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1095:12
            // NonTerminal parseTerm2 at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1095:12
            pushOntoLookaheadStack("parseTerm3", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1095, 12);
            currentLookaheadProduction = "parseTerm2";
            try {
                if (!check$parseTerm2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1096:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1102:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1102$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1102:5
            if (!scanToken(IS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1102:12
            if (!scanToken(EMPTY)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1103:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1107:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1107$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1107:5
            if (!scanToken(MATCHES)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1107:17
            // NonTerminal parseTerm2 at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1107:17
            pushOntoLookaheadStack("parseTerm3", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1107, 17);
            currentLookaheadProduction = "parseTerm2";
            try {
                if (!check$parseTerm2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1108:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1114:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1114$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1115:5
            if (!scanToken(NOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1115:13
            if (!scanToken(MATCHES)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1115:25
            // NonTerminal parseTerm2 at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1115:25
            pushOntoLookaheadStack("parseTerm3", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1115, 25);
            currentLookaheadProduction = "parseTerm2";
            try {
                if (!check$parseTerm2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1116:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1127:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1127$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1127:5
            if (!scanToken(IN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1127:12
            // NonTerminal parseTerm2 at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1127:12
            pushOntoLookaheadStack("parseTerm3", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1127, 12);
            currentLookaheadProduction = "parseTerm2";
            try {
                if (!check$parseTerm2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1128:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1134:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1134$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1134:5
            if (!scanToken(NOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1134:13
            if (!scanToken(IN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1134:20
            // NonTerminal parseTerm2 at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1134:20
            pushOntoLookaheadStack("parseTerm3", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1134, 20);
            currentLookaheadProduction = "parseTerm2";
            try {
                if (!check$parseTerm2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1135:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1159:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1159$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1159:5
            Token token2613 = currentLookaheadToken;
            int remainingLookahead2613 = remainingLookahead;
            boolean hitFailure2613 = hitFailure, passedPredicate2613 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Grammer_ccc$1159$5$(false)) {
                    currentLookaheadToken = token2613;
                    remainingLookahead = remainingLookahead2613;
                    hitFailure = hitFailure2613;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Grammer_ccc$1166$5(false)) {
                        currentLookaheadToken = token2613;
                        remainingLookahead = remainingLookahead2613;
                        hitFailure = hitFailure2613;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$Grammer_ccc$1173$5(false)) {
                            currentLookaheadToken = token2613;
                            remainingLookahead = remainingLookahead2613;
                            hitFailure = hitFailure2613;
                            return false;
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate2613;
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1159:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1159$5$(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1159:5
            if (!scanToken(PLUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1159:14
            // NonTerminal parseTerm at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1159:14
            pushOntoLookaheadStack("parseTerm2", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1159, 14);
            currentLookaheadProduction = "parseTerm";
            try {
                if (!check$parseTerm(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1160:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1166:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1166$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1166:5
            if (!scanToken(MINUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1166:15
            // NonTerminal parseTerm at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1166:15
            pushOntoLookaheadStack("parseTerm2", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1166, 15);
            currentLookaheadProduction = "parseTerm";
            try {
                if (!check$parseTerm(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1167:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1173:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1173$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1173:5
            if (!scanToken(CONCAT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1173:16
            // NonTerminal parseTerm at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1173:16
            pushOntoLookaheadStack("parseTerm2", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1173, 16);
            currentLookaheadProduction = "parseTerm";
            try {
                if (!check$parseTerm(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1174:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1193:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1193$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1193:5
            Token token2627 = currentLookaheadToken;
            int remainingLookahead2627 = remainingLookahead;
            boolean hitFailure2627 = hitFailure, passedPredicate2627 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Grammer_ccc$1193$5$(false)) {
                    currentLookaheadToken = token2627;
                    remainingLookahead = remainingLookahead2627;
                    hitFailure = hitFailure2627;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Grammer_ccc$1200$5(false)) {
                        currentLookaheadToken = token2627;
                        remainingLookahead = remainingLookahead2627;
                        hitFailure = hitFailure2627;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2627;
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1193:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1193$5$(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1193:5
            if (!scanToken(ASTERISK)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1193:18
            // NonTerminal parseFactor at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1193:18
            pushOntoLookaheadStack("parseTerm", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1193, 18);
            currentLookaheadProduction = "parseFactor";
            try {
                if (!check$parseFactor(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1194:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1200:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1200$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1200:5
            if (!scanToken(SOLIDUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1200:17
            // NonTerminal parseFactor at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1200:17
            pushOntoLookaheadStack("parseTerm", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1200, 17);
            currentLookaheadProduction = "parseFactor";
            try {
                if (!check$parseFactor(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1201:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1218:3
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1218$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1218:3
            // NonTerminal parsePrimary at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1218:3
            pushOntoLookaheadStack("parseFactor", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1218, 3);
            currentLookaheadProduction = "parsePrimary";
            try {
                if (!check$parsePrimary(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1219:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1222:3
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1222$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1222:3
            if (!scanToken(PLUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1222:12
            // NonTerminal parsePrimary at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1222:12
            pushOntoLookaheadStack("parseFactor", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1222, 12);
            currentLookaheadProduction = "parsePrimary";
            try {
                if (!check$parsePrimary(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1223:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1226:3
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1226$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1226:3
            if (!scanToken(MINUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1226:13
            // NonTerminal parsePrimary at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1226:13
            pushOntoLookaheadStack("parseFactor", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1226, 13);
            currentLookaheadProduction = "parsePrimary";
            try {
                if (!check$parsePrimary(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1227:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1233:3
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1233$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1233:3
            if (!scanToken(EXISTING)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1233:16
            // NonTerminal parsePrimary at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1233:16
            pushOntoLookaheadStack("parseFactor", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1233, 16);
            currentLookaheadProduction = "parsePrimary";
            try {
                if (!check$parsePrimary(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1234:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1249:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1249$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1249:5
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1249:13
            // NonTerminal objectIdentifierOrFuncall at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1249:13
            pushOntoLookaheadStack("parsePrimary", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1249, 13);
            currentLookaheadProduction = "objectIdentifierOrFuncall";
            try {
                if (!check$objectIdentifierOrFuncall(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1264:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1264$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1264:5
            if (!scanToken(LPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1266:7
            // NonTerminal expOrEmptyList at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1266:7
            pushOntoLookaheadStack("objectIdentifierOrFuncall", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1266, 7);
            currentLookaheadProduction = "expOrEmptyList";
            try {
                if (!check$expOrEmptyList(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1268:5
            if (!scanToken(RPAREN)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1314:3
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1314$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1314:3
            if (!scanToken(CAST)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1314:12
            if (!scanToken(LPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1314:23
            // NonTerminal parseUnaliasedExpression at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1314:23
            pushOntoLookaheadStack("parseAtom", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1314, 23);
            currentLookaheadProduction = "parseUnaliasedExpression";
            try {
                if (!check$parseUnaliasedExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1315:3
            if (!scanToken(AS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1315:10
            // NonTerminal parseNameObjectIdentifier at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1315:10
            pushOntoLookaheadStack("parseAtom", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1315, 10);
            currentLookaheadProduction = "parseNameObjectIdentifier";
            try {
                if (!check$parseNameObjectIdentifier(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1315:59
            if (!scanToken(RPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1316:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1324:3
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1324$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1324:3
            if (!scanToken(LPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1324:14
            // NonTerminal expList at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1324:14
            pushOntoLookaheadStack("parseAtom", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1324, 14);
            currentLookaheadProduction = "expList";
            try {
                if (!check$expList(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1324:36
            if (!scanToken(RPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1325:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1333:3
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1333$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1333:3
            if (!scanToken(LBRACE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1335:5
            Token token2677 = currentLookaheadToken;
            int remainingLookahead2677 = remainingLookahead;
            boolean hitFailure2677 = hitFailure, passedPredicate2677 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Grammer_ccc$1335$5(false)) {
                    currentLookaheadToken = token2677;
                    remainingLookahead = remainingLookahead2677;
                    hitFailure = hitFailure2677;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Grammer_ccc$1340$5(false)) {
                        currentLookaheadToken = token2677;
                        remainingLookahead = remainingLookahead2677;
                        hitFailure = hitFailure2677;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2677;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1342:3
            if (!scanToken(RBRACE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1343:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1335:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1335$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Grammer_ccc$1335$10(true)) return false;
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1336:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1340:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1340$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1340:5
            // NonTerminal expList at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1340:5
            pushOntoLookaheadStack("parseAtom", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1340, 5);
            currentLookaheadProduction = "expList";
            try {
                if (!check$expList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1347:3
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1347$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1347:3
            // NonTerminal parseCaseExpression at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1347:3
            pushOntoLookaheadStack("parseAtom", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1347, 3);
            currentLookaheadProduction = "parseCaseExpression";
            try {
                if (!check$parseCaseExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1348:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1354:3
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1354$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1354:3
            // NonTerminal parseNameObjectIdentifier at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1354:3
            pushOntoLookaheadStack("parseAtom", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1354, 3);
            currentLookaheadProduction = "parseNameObjectIdentifier";
            try {
                if (!check$parseNameObjectIdentifier(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1355:3
            boolean passedPredicate2690 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token2691 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$Grammer_ccc$1356$5(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token2691;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2690;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1365:5
            Token token2694 = currentLookaheadToken;
            int remainingLookahead2694 = remainingLookahead;
            boolean hitFailure2694 = hitFailure, passedPredicate2694 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Grammer_ccc$1365$5(false)) {
                    currentLookaheadToken = token2694;
                    remainingLookahead = remainingLookahead2694;
                    hitFailure = hitFailure2694;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Grammer_ccc$1376$16(false)) {
                        currentLookaheadToken = token2694;
                        remainingLookahead = remainingLookahead2694;
                        hitFailure = hitFailure2694;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2694;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1380:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1356:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1356$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1356:5
            if (!scanToken(BANG)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1356:14
            // NonTerminal parseNameObjectIdentifier at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1356:14
            pushOntoLookaheadStack("parseAtom", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1356, 14);
            currentLookaheadProduction = "parseNameObjectIdentifier";
            try {
                if (!check$parseNameObjectIdentifier(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1357:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1365:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1365$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1365:5
            if (!scanToken(LPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1367:7
            Token token2704 = currentLookaheadToken;
            int remainingLookahead2704 = remainingLookahead;
            boolean hitFailure2704 = hitFailure, passedPredicate2704 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$Grammer_ccc$1367$7(false)) {
                    currentLookaheadToken = token2704;
                    remainingLookahead = remainingLookahead2704;
                    hitFailure = hitFailure2704;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Grammer_ccc$1372$7(false)) {
                        currentLookaheadToken = token2704;
                        remainingLookahead = remainingLookahead2704;
                        hitFailure = hitFailure2704;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2704;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1374:5
            if (!scanToken(RPAREN)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1367:7
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1367$7(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Grammer_ccc$1367$12(true)) return false;
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1368:7
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1372:7
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1372$7(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1372:7
            // NonTerminal expOrEmptyList at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1372:7
            pushOntoLookaheadStack("parseAtom", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1372, 7);
            currentLookaheadProduction = "expOrEmptyList";
            try {
                if (!check$expOrEmptyList(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1376:16
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1376$16(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1376:16
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1394:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1394$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1394:5
            // NonTerminal parseExpression at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1394:5
            pushOntoLookaheadStack("parseCaseExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1394, 5);
            currentLookaheadProduction = "parseExpression";
            try {
                if (!check$parseExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1395:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1401:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1401$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1401:5
            if (!scanToken(WHEN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1401:14
            // NonTerminal parseExpression at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1401:14
            pushOntoLookaheadStack("parseCaseExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1401, 14);
            currentLookaheadProduction = "parseExpression";
            try {
                if (!check$parseExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1401:43
            if (!scanToken(THEN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1401:52
            // NonTerminal parseExpression at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1401:52
            pushOntoLookaheadStack("parseCaseExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1401, 52);
            currentLookaheadProduction = "parseExpression";
            try {
                if (!check$parseExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1402:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1408:5
    // BuildScanRoutine macro
    private final boolean check$Grammer_ccc$1408$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1408:5
            if (!scanToken(ELSE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1408:14
            // NonTerminal parseExpression at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1408:14
            pushOntoLookaheadStack("parseCaseExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1408, 14);
            currentLookaheadProduction = "parseExpression";
            try {
                if (!check$parseExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1409:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // BuildPredicateRoutine: expansion at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:952:5
    private final boolean scan$Grammer_ccc$952$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Grammer_ccc$952$10(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1084:5
    private final boolean scan$Grammer_ccc$1084$5() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1085:5
            if (!scanToken(IS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1085:12
            if (!scanToken(NULL)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1086:5
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1094:5
    private final boolean scan$Grammer_ccc$1094$5() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1095:5
            if (!scanToken(IS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1095:12
            // NonTerminal parseTerm2 at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1095:12
            pushOntoLookaheadStack("parseTerm3", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1095, 12);
            currentLookaheadProduction = "parseTerm2";
            try {
                if (!check$parseTerm2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1096:5
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1114:5
    private final boolean scan$Grammer_ccc$1114$5() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1115:5
            if (!scanToken(NOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1115:13
            if (!scanToken(MATCHES)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1115:25
            // NonTerminal parseTerm2 at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1115:25
            pushOntoLookaheadStack("parseTerm3", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1115, 25);
            currentLookaheadProduction = "parseTerm2";
            try {
                if (!check$parseTerm2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1116:5
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1335:5
    private final boolean scan$Grammer_ccc$1335$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Grammer_ccc$1335$10(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1367:7
    private final boolean scan$Grammer_ccc$1367$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$Grammer_ccc$1367$12(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // lookahead routine for lookahead at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:952:5
    private final boolean check$Grammer_ccc$952$10(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(DOT)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1335:5
    private final boolean check$Grammer_ccc$1335$10(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1367:7
    private final boolean check$Grammer_ccc$1367$12(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RPAREN)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:762:3
        // NonTerminal parseUnaliasedExpression at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:762:3
        pushOntoLookaheadStack("parseExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 762, 3);
        currentLookaheadProduction = "parseUnaliasedExpression";
        try {
            if (!check$parseUnaliasedExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:763:3
        boolean passedPredicate2904 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2905 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Grammer_ccc$764$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2905;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2904;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:773:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseExpressionOrEmpty(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:783:3
        Token token2908 = currentLookaheadToken;
        int remainingLookahead2908 = remainingLookahead;
        boolean hitFailure2908 = hitFailure, passedPredicate2908 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Grammer_ccc$783$3(false)) {
                currentLookaheadToken = token2908;
                remainingLookahead = remainingLookahead2908;
                hitFailure = hitFailure2908;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Grammer_ccc$788$3(false)) {
                    currentLookaheadToken = token2908;
                    remainingLookahead = remainingLookahead2908;
                    hitFailure = hitFailure2908;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2908;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$expOrEmptyList(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:802:3
        // NonTerminal parseExpressionOrEmpty at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:802:3
        pushOntoLookaheadStack("expOrEmptyList", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 802, 3);
        currentLookaheadProduction = "parseExpressionOrEmpty";
        try {
            if (!check$parseExpressionOrEmpty(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:803:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:806:3
        boolean passedPredicate2913 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2914 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Grammer_ccc$807$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2914;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2913;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:813:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$expList(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:825:3
        // NonTerminal parseExpression at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:825:3
        pushOntoLookaheadStack("expList", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 825, 3);
        currentLookaheadProduction = "parseExpression";
        try {
            if (!check$parseExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:826:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:829:3
        boolean passedPredicate2920 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2921 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Grammer_ccc$830$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2921;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2920;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:836:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseIdentifier(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:858:5
        Token token2930 = currentLookaheadToken;
        int remainingLookahead2930 = remainingLookahead;
        boolean hitFailure2930 = hitFailure, passedPredicate2930 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Grammer_ccc$858$5$(false)) {
                currentLookaheadToken = token2930;
                remainingLookahead = remainingLookahead2930;
                hitFailure = hitFailure2930;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Grammer_ccc$860$5(false)) {
                    currentLookaheadToken = token2930;
                    remainingLookahead = remainingLookahead2930;
                    hitFailure = hitFailure2930;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2930;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:862:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseNameObjectIdentifier(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:872:3
        Token token2933 = currentLookaheadToken;
        int remainingLookahead2933 = remainingLookahead;
        boolean hitFailure2933 = hitFailure, passedPredicate2933 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(DIMENSION, PROPERTIES)) {
                currentLookaheadToken = token2933;
                remainingLookahead = remainingLookahead2933;
                hitFailure = hitFailure2933;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!scanToken(ID)) {
                    currentLookaheadToken = token2933;
                    remainingLookahead = remainingLookahead2933;
                    hitFailure = hitFailure2933;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Grammer_ccc$881$3(false)) {
                        currentLookaheadToken = token2933;
                        remainingLookahead = remainingLookahead2933;
                        hitFailure = hitFailure2933;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!scanToken(QUOTED_ID)) {
                            currentLookaheadToken = token2933;
                            remainingLookahead = remainingLookahead2933;
                            hitFailure = hitFailure2933;
                            return false;
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2933;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseKeyIdentifier(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for OneOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:900:3
        if (!scanToken(AMP_QUOTED_ID, AMP_UNQUOTED_ID)) return false;
        boolean passedPredicate2937 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2938 = currentLookaheadToken;
                passedPredicate = false;
                if (!scanToken(AMP_QUOTED_ID, AMP_UNQUOTED_ID)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2938;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2937;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:906:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseUnaliasedExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:970:3
        // NonTerminal parseTerm5 at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:970:3
        pushOntoLookaheadStack("parseUnaliasedExpression", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 970, 3);
        currentLookaheadProduction = "parseTerm5";
        try {
            if (!check$parseTerm5(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:971:3
        boolean passedPredicate2952 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2953 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Grammer_ccc$972$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2953;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2952;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:996:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseTerm5(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1006:3
        // NonTerminal parseTerm4 at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1006:3
        pushOntoLookaheadStack("parseTerm5", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1006, 3);
        currentLookaheadProduction = "parseTerm4";
        try {
            if (!check$parseTerm4(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1007:3
        boolean passedPredicate2958 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2959 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Grammer_ccc$1008$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2959;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2958;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1016:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseTerm4(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1026:3
        Token token2962 = currentLookaheadToken;
        int remainingLookahead2962 = remainingLookahead;
        boolean hitFailure2962 = hitFailure, passedPredicate2962 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Grammer_ccc$1026$3(false)) {
                currentLookaheadToken = token2962;
                remainingLookahead = remainingLookahead2962;
                hitFailure = hitFailure2962;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Grammer_ccc$1030$3(false)) {
                    currentLookaheadToken = token2962;
                    remainingLookahead = remainingLookahead2962;
                    hitFailure = hitFailure2962;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2962;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseTerm3(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1045:3
        // NonTerminal parseTerm2 at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1045:3
        pushOntoLookaheadStack("parseTerm3", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1045, 3);
        currentLookaheadProduction = "parseTerm2";
        try {
            if (!check$parseTerm2(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1046:3
        boolean passedPredicate2966 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2967 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Grammer_ccc$1048$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2967;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2966;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1147:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseTerm2(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1157:3
        // NonTerminal parseTerm at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1157:3
        pushOntoLookaheadStack("parseTerm2", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1157, 3);
        currentLookaheadProduction = "parseTerm";
        try {
            if (!check$parseTerm(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1158:3
        boolean passedPredicate2972 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2973 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Grammer_ccc$1159$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2973;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2972;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1181:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseTerm(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1191:3
        // NonTerminal parseFactor at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1191:3
        pushOntoLookaheadStack("parseTerm", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1191, 3);
        currentLookaheadProduction = "parseFactor";
        try {
            if (!check$parseFactor(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1192:3
        boolean passedPredicate2978 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2979 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Grammer_ccc$1193$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2979;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2978;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1208:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseFactor(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1218:3
        Token token2982 = currentLookaheadToken;
        int remainingLookahead2982 = remainingLookahead;
        boolean hitFailure2982 = hitFailure, passedPredicate2982 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$Grammer_ccc$1218$3(false)) {
                currentLookaheadToken = token2982;
                remainingLookahead = remainingLookahead2982;
                hitFailure = hitFailure2982;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$Grammer_ccc$1222$3(false)) {
                    currentLookaheadToken = token2982;
                    remainingLookahead = remainingLookahead2982;
                    hitFailure = hitFailure2982;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$Grammer_ccc$1226$3(false)) {
                        currentLookaheadToken = token2982;
                        remainingLookahead = remainingLookahead2982;
                        hitFailure = hitFailure2982;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$Grammer_ccc$1233$3(false)) {
                            currentLookaheadToken = token2982;
                            remainingLookahead = remainingLookahead2982;
                            hitFailure = hitFailure2982;
                            return false;
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2982;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parsePrimary(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1247:3
        // NonTerminal parseAtom at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1247:3
        pushOntoLookaheadStack("parsePrimary", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1247, 3);
        currentLookaheadProduction = "parseAtom";
        try {
            if (!check$parseAtom(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1248:3
        boolean passedPredicate2986 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2987 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Grammer_ccc$1249$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2987;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2986;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1251:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$objectIdentifierOrFuncall(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1262:3
        // NonTerminal parseIdentifier at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1262:3
        pushOntoLookaheadStack("objectIdentifierOrFuncall", "/home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc", 1262, 3);
        currentLookaheadProduction = "parseIdentifier";
        try {
            if (!check$parseIdentifier(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1263:3
        Token token2992 = currentLookaheadToken;
        boolean passedPredicate2992 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Grammer_ccc$1264$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token2992;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate2992;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1270:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseAtom(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1298:3
        Token token2996 = currentLookaheadToken;
        int remainingLookahead2996 = remainingLookahead;
        boolean hitFailure2996 = hitFailure, passedPredicate2996 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(SINGLE_QUOTED_STRING)) {
                currentLookaheadToken = token2996;
                remainingLookahead = remainingLookahead2996;
                hitFailure = hitFailure2996;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!scanToken(DOUBLE_QUOTED_STRING)) {
                    currentLookaheadToken = token2996;
                    remainingLookahead = remainingLookahead2996;
                    hitFailure = hitFailure2996;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!scanToken(UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL)) {
                        currentLookaheadToken = token2996;
                        remainingLookahead = remainingLookahead2996;
                        hitFailure = hitFailure2996;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!scanToken(NULL)) {
                            currentLookaheadToken = token2996;
                            remainingLookahead = remainingLookahead2996;
                            hitFailure = hitFailure2996;
                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                            passedPredicate = false;
                            if (!check$Grammer_ccc$1314$3(false)) {
                                currentLookaheadToken = token2996;
                                remainingLookahead = remainingLookahead2996;
                                hitFailure = hitFailure2996;
                                if (passedPredicate && !legacyGlitchyLookahead) return false;
                                passedPredicate = false;
                                if (!check$Grammer_ccc$1324$3(false)) {
                                    currentLookaheadToken = token2996;
                                    remainingLookahead = remainingLookahead2996;
                                    hitFailure = hitFailure2996;
                                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                                    passedPredicate = false;
                                    if (!check$Grammer_ccc$1333$3(false)) {
                                        currentLookaheadToken = token2996;
                                        remainingLookahead = remainingLookahead2996;
                                        hitFailure = hitFailure2996;
                                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                                        passedPredicate = false;
                                        if (!check$Grammer_ccc$1347$3(false)) {
                                            currentLookaheadToken = token2996;
                                            remainingLookahead = remainingLookahead2996;
                                            hitFailure = hitFailure2996;
                                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                                            passedPredicate = false;
                                            if (!check$Grammer_ccc$1354$3(false)) {
                                                currentLookaheadToken = token2996;
                                                remainingLookahead = remainingLookahead2996;
                                                hitFailure = hitFailure2996;
                                                return false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2996;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseCaseExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1392:3
        if (!scanToken(CASE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1393:3
        Token token3000 = currentLookaheadToken;
        boolean passedPredicate3000 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Grammer_ccc$1394$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token3000;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate3000;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1400:3
        boolean passedPredicate3002 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token3003 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$Grammer_ccc$1401$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token3003;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate3002;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1407:3
        Token token3005 = currentLookaheadToken;
        boolean passedPredicate3005 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$Grammer_ccc$1408$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token3005;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate3005;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for Terminal specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1413:3
        if (!scanToken(END)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at /home/oem/repod/deMondrian/mdx/parser.ccc/src/main/ccc/Grammer.ccc:1414:3
        return true;
    }

    private ArrayList<NonTerminalCall> parsingStack = new ArrayList<>();
    private ArrayList<NonTerminalCall> lookaheadStack = new ArrayList<>();

    private final void pushOntoCallStack(String methodName, String fileName, int line, int column) {
        parsingStack.add(new NonTerminalCall("MdxParser", token_source, fileName, methodName, line, column, null));
    }

    private final void popCallStack() {
        NonTerminalCall ntc = parsingStack.remove(parsingStack.size() - 1);
        this.currentlyParsedProduction = ntc.productionName;
    }

    private final void restoreCallStack(int prevSize) {
        while (parsingStack.size() > prevSize) {
            popCallStack();
        }
    }

    private final void pushOntoLookaheadStack(String methodName, String fileName, int line, int column) {
        lookaheadStack.add(new NonTerminalCall("MdxParser", token_source, fileName, methodName, line, column, null));
    }

    private final void popLookaheadStack() {
        NonTerminalCall ntc = lookaheadStack.remove(lookaheadStack.size() - 1);
        this.currentLookaheadProduction = ntc.productionName;
    }

    void dumpLookaheadStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it = lookaheadStack.listIterator(lookaheadStack.size());
        while (it.hasPrevious()) {
            it.previous().dump(ps);
        }
    }

    void dumpCallStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it = parsingStack.listIterator(parsingStack.size());
        while (it.hasPrevious()) {
            it.previous().dump(ps);
        }
    }

    void dumpLookaheadCallStack(PrintStream ps) {
        ps.println("Current Parser Production is: " + currentlyParsedProduction);
        ps.println("Current Lookahead Production is: " + currentLookaheadProduction);
        ps.println("---Lookahead Stack---");
        dumpLookaheadStack(ps);
        ps.println("---Call Stack---");
        dumpCallStack(ps);
    }

    public boolean isParserTolerant() {
        return false;
    }

    public void setParserTolerant(boolean tolerantParsing) {
        if (tolerantParsing) {
            throw new UnsupportedOperationException("This parser was not built with that feature!");
        }
    }

    private Token consumeToken(TokenType expectedType) {
        Token nextToken = nextToken(lastConsumedToken);
        if (nextToken.getType() != expectedType) {
            nextToken = handleUnexpectedTokenType(expectedType, nextToken);
        }
        this.lastConsumedToken = nextToken;
        this.nextTokenType = null;
        if (buildTree && tokensAreNodes) {
            pushNode(lastConsumedToken);
        }
        return lastConsumedToken;
    }

    private Token handleUnexpectedTokenType(TokenType expectedType, Token nextToken) {
        throw new ParseException(nextToken, EnumSet.of(expectedType), parsingStack);
    }

    private boolean buildTree = true;
    private boolean tokensAreNodes = true;
    private boolean unparsedTokensAreNodes = false;

    public boolean isTreeBuildingEnabled() {
        return buildTree;
    }

    public void setUnparsedTokensAreNodes(boolean unparsedTokensAreNodes) {
        this.unparsedTokensAreNodes = unparsedTokensAreNodes;
    }

    public void setTokensAreNodes(boolean tokensAreNodes) {
        this.tokensAreNodes = tokensAreNodes;
    }

    NodeScope currentNodeScope = new NodeScope();

    /**
    * @return the root node of the AST. It only makes sense to call
    * this after a successful parse.
    */
    public Node rootNode() {
        return currentNodeScope.rootNode();
    }

    /**
    * push a node onto the top of the node stack
    * @param n the node to push
    */
    public void pushNode(Node n) {
        currentNodeScope.add(n);
    }

    /**
    * @return the node on the top of the stack, and remove it from the
    * stack.
    */
    public Node popNode() {
        return currentNodeScope.pop();
    }

    /**
    * @return the node currently on the top of the tree-building stack.
    */
    public Node peekNode() {
        return currentNodeScope.peek();
    }

    /**
    * Puts the node on the top of the stack. However, unlike pushNode()
    * it replaces the node that is currently on the top of the stack.
    * This is effectively equivalent to popNode() followed by pushNode(n)
    * @param n the node to poke
    */
    public void pokeNode(Node n) {
        currentNodeScope.poke(n);
    }

    /**
    * @return the number of Nodes on the tree-building stack in the current node
    * scope.
    */
    public int nodeArity() {
        return currentNodeScope.size();
    }

    private void clearNodeScope() {
        currentNodeScope.clear();
    }

    private void openNodeScope(Node n) {
        new NodeScope();
        if (n != null) {
            Token next = nextToken(lastConsumedToken);
            n.setTokenSource(lastConsumedToken.getTokenSource());
            n.setBeginOffset(next.getBeginOffset());
            n.open();
        }
    }

    /* A definite node is constructed from a specified number of
    * children.  That number of nodes are popped from the stack and
    * made the children of the definite node.  Then the definite node
    * is pushed on to the stack.
    */
    private void closeNodeScope(Node n, int num) {
        n.setEndOffset(lastConsumedToken.getEndOffset());
        currentNodeScope.close();
        ArrayList<Node> nodes = new ArrayList<Node>();
        for (int i = 0; i < num; i++) {
            nodes.add(popNode());
        }
        Collections.reverse(nodes);
        for (Node child : nodes) {
            // FIXME deal with the UNPARSED_TOKENS_ARE_NODES case
            n.addChild(child);
        }
        n.close();
        pushNode(n);
    }

    /**
    * A conditional node is constructed if the condition is true.  All
    * the nodes that have been pushed since the node was opened are
    * made children of the conditional node, which is then pushed
    * on to the stack.  If the condition is false the node is not
    * constructed and they are left on the stack.
    */
    private void closeNodeScope(Node n, boolean condition) {
        if (n != null && condition) {
            n.setEndOffset(lastConsumedToken.getEndOffset());
            int a = nodeArity();
            currentNodeScope.close();
            ArrayList<Node> nodes = new ArrayList<Node>();
            while (a-- > 0) {
                nodes.add(popNode());
            }
            Collections.reverse(nodes);
            for (Node child : nodes) {
                if (unparsedTokensAreNodes && child instanceof Token) {
                    Token tok = (Token) child;
                    while (tok.previousCachedToken() != null && tok.previousCachedToken().isUnparsed()) {
                        tok = tok.previousCachedToken();
                    }
                    while (tok.isUnparsed()) {
                        n.addChild(tok);
                        tok = tok.nextCachedToken();
                    }
                }
                n.addChild(child);
            }
            n.close();
            pushNode(n);
        } else {
            currentNodeScope.close();
        }
    }

    public boolean getBuildTree() {
        return buildTree;
    }

    public void setBuildTree(boolean buildTree) {
        this.buildTree = buildTree;
    }


    @SuppressWarnings("serial")
    class NodeScope extends ArrayList<Node> {
        NodeScope parentScope;

        NodeScope() {
            this.parentScope = MdxParser.this.currentNodeScope;
            MdxParser.this.currentNodeScope = this;
        }

        boolean isRootScope() {
            return parentScope == null;
        }

        Node rootNode() {
            NodeScope ns = this;
            while (ns.parentScope != null) {
                ns = ns.parentScope;
            }
            return ns.isEmpty() ? null : ns.get(0);
        }

        Node peek() {
            if (isEmpty()) {
                return parentScope == null ? null : parentScope.peek();
            }
            return get(size() - 1);
        }

        Node pop() {
            return isEmpty() ? parentScope.pop() : remove(size() - 1);
        }

        void poke(Node n) {
            if (isEmpty()) {
                parentScope.poke(n);
            } else {
                set(size() - 1, n);
            }
        }

        void close() {
            parentScope.addAll(this);
            MdxParser.this.currentNodeScope = parentScope;
        }

        int nestingLevel() {
            int result = 0;
            NodeScope parent = this;
            while (parent.parentScope != null) {
                result++;
                parent = parent.parentScope;
            }
            return result;
        }

        public NodeScope clone() {
            NodeScope clone = (NodeScope) super.clone();
            if (parentScope != null) {
                clone.parentScope = parentScope.clone();
            }
            return clone;
        }

    }

}


