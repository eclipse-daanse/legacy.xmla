/* Generated by: CongoCC Parser Generator. MdxParser.java
*
* Copyright (c) 2023 Contributors to the Eclipse Foundation.
*
* This program and the accompanying materials are made
* available under the terms of the Eclipse Public License 2.0
* which is available at https://www.eclipse.org/legal/epl-2.0/
*
* SPDX-License-Identifier: EPL-2.0
*
* Contributors: see corresponding .ccc file
*/
package org.eclipse.daanse.mdx.parser.ccc;

import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.ListIterator;
import java.util.concurrent.CancellationException;
import org.eclipse.daanse.mdx.parser.ccc.MdxLexer.LexicalState;
import org.eclipse.daanse.mdx.parser.ccc.Token.TokenType;
import static org.eclipse.daanse.mdx.parser.ccc.Token.TokenType.*;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseMdxStatement;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseDrillthroughStatement;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseReturnItems;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseReturnItem;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseCreateCellCalculationBodyClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseMeasureBodyClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectWithClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectStatement;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectSubcubeClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectSubcubeClauseName;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectSubcubeClauseStatement;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectQueryAsteriskClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectQueryAxesClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectSlicerAxisClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectCellPropertyListClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseCreateMemberBodyClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseMemberPropertyDefinition;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseFormulaExpression;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseExpression;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTexpressionOrEmpty;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTexpOrEmptyList;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTexpList;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTexpressionEof;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseIdentifier;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseNameObjectIdentifier;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseKeyIdentifier;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseAmpId;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseKeyword;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseCompoundId;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseUnaliasedExpression;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTterm5;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTterm4;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTterm3;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTterm2;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTterm;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTfactor;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTprimary;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTobjectIdentifierOrFuncall;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseNumericLiteral;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTatom;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTcaseExpression;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseCreateSetBodyClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectDimensionPropertyListClause;
import org.eclipse.daanse.mdx.parser.ccc.tree.ASTparseSelectQueryAxisClause;
import org.eclipse.daanse.mdx.model.api.MdxStatement;
import org.eclipse.daanse.mdx.model.api.expression.CallExpression;
import org.eclipse.daanse.mdx.model.api.select.CreateMemberBodyClause;
import org.eclipse.daanse.mdx.model.record.expression.CallExpressionR;
import org.eclipse.daanse.mdx.model.record.expression.StringLiteralR;
import org.eclipse.daanse.mdx.model.api.expression.FormulaExpression;
import org.eclipse.daanse.mdx.model.api.ReturnItem;
import org.eclipse.daanse.mdx.model.record.expression.CompoundIdR;
import java.math.BigDecimal;
import java.util.LinkedList;
import org.eclipse.daanse.mdx.model.api.select.CreateCellCalculationBodyClause;
import org.eclipse.daanse.mdx.model.api.select.SelectSubcubeClauseName;
import org.eclipse.daanse.mdx.model.api.select.SelectSubcubeClauseStatement;
import org.eclipse.daanse.mdx.model.record.expression.NumericLiteralR;
import org.eclipse.daanse.mdx.model.record.select.CreateMemberBodyClauseR;
import org.eclipse.daanse.mdx.model.record.select.SelectQueryEmptyClauseR;
import org.eclipse.daanse.mdx.model.api.select.SelectQueryAxesClause;
import org.eclipse.daanse.mdx.model.api.DrillthroughStatement;
import org.eclipse.daanse.mdx.model.record.select.SelectCellPropertyListClauseR;
import org.eclipse.daanse.mdx.model.api.SelectStatement;
import org.eclipse.daanse.mdx.model.api.select.SelectSubcubeClause;
import org.eclipse.daanse.mdx.model.api.select.SelectQueryAxisClause;
import org.eclipse.daanse.mdx.model.record.expression.NullLiteralR;
import org.eclipse.daanse.mdx.model.record.select.SelectDimensionPropertyListClauseR;
import org.eclipse.daanse.mdx.model.record.select.SelectSubcubeClauseNameR;
import org.eclipse.daanse.mdx.model.record.select.SelectQueryAxisClauseR;
import org.eclipse.daanse.mdx.model.record.expression.NameObjectIdentifierR;
import org.eclipse.daanse.mdx.model.api.select.SelectWithClause;
import java.util.Optional;
import org.eclipse.daanse.mdx.model.record.SelectStatementR;
import org.eclipse.daanse.mdx.model.record.select.SelectQueryAsteriskClauseR;
import org.eclipse.daanse.mdx.model.api.select.MeasureBodyClause;
import org.eclipse.daanse.mdx.model.record.expression.FormulaExpressionR;
import org.eclipse.daanse.mdx.model.record.ReturnItemR;
import org.eclipse.daanse.mdx.model.record.expression.SymbolLiteralR;
import org.eclipse.daanse.mdx.model.api.select.SelectDimensionPropertyListClause;
import org.eclipse.daanse.mdx.model.record.expression.KeyObjectIdentifierR;
import org.eclipse.daanse.mdx.model.api.select.SelectQueryClause;
import org.eclipse.daanse.mdx.model.record.select.SelectSlicerAxisClauseR;
import org.eclipse.daanse.mdx.model.api.expression.KeyObjectIdentifier;
import org.eclipse.daanse.mdx.model.api.select.CreateSetBodyClause;
import org.eclipse.daanse.mdx.model.api.select.Axis;
import org.eclipse.daanse.mdx.model.api.select.SelectCellPropertyListClause;
import org.eclipse.daanse.mdx.model.record.select.MeasureBodyClauseR;
import org.eclipse.daanse.mdx.model.api.select.SelectSlicerAxisClause;
import org.eclipse.daanse.mdx.model.record.select.SelectQueryAxesClauseR;
import org.eclipse.daanse.mdx.model.api.expression.NumericLiteral;
import org.eclipse.daanse.mdx.model.api.select.MemberPropertyDefinition;
import org.eclipse.daanse.mdx.model.record.DrillthroughStatementR;
import org.eclipse.daanse.mdx.model.api.expression.CompoundId;
import org.eclipse.daanse.mdx.model.api.select.SelectQueryAsteriskClause;
import org.eclipse.daanse.mdx.model.record.select.SelectSubcubeClauseStatementR;
import java.util.List;
import org.eclipse.daanse.mdx.model.record.select.CreateSetBodyClauseR;
import org.eclipse.daanse.mdx.model.api.expression.ObjectIdentifier;
import org.eclipse.daanse.mdx.model.api.expression.NameObjectIdentifier;
import org.eclipse.daanse.mdx.model.record.select.MemberPropertyDefinitionR;
import org.eclipse.daanse.mdx.model.api.expression.Expression;
import org.eclipse.daanse.mdx.model.record.select.AxisR;


public class MdxParser {

    private static String stripQuotes(String s, String prefix, String suffix, String quoted) {
        assert s.startsWith(prefix) && s.endsWith(suffix);
        s = s.substring(prefix.length(), s.length() - suffix.length());
        s = s.replace(quoted, suffix);
        return s;
    }

    private Expression createCall(Expression left, ObjectIdentifier objectIdentifier, List<Expression> expressions) {
        final String name = objectIdentifier instanceof NameObjectIdentifier ? ((NameObjectIdentifier) objectIdentifier).name() : null;
        if (expressions != null) {
            if (left != null) {
                // Method syntax: "x.foo(arg1, arg2)" or "x.foo()"
                expressions.add(0, left);
                return new CallExpressionR(name, CallExpression.Type.Method, expressions);
            } else {
                // Function syntax: "foo(arg1, arg2)" or "foo()"
                return new CallExpressionR(name, CallExpression.Type.Function, expressions);
            }
        } else {
            // Member syntax: "foo.bar"
            // or property syntax: "foo.RESERVED_WORD"
            CallExpression.Type type;
            boolean call = false;
            switch(objectIdentifier.quoting()) {
                case UNQUOTED : 
                    type = CallExpression.Type.Property;
                    call = true;
                    //funTable.isProperty(name); TODO: all is call
                    break;
                case QUOTED : 
                    type = CallExpression.Type.PropertyQuoted;
                    break;
                default : 
                    type = CallExpression.Type.PropertyAmpersAndQuoted;
                    break;
            }
            if (left instanceof CompoundId && !call) {
                List<ObjectIdentifier> newObjectIdentifiers = new ArrayList<ObjectIdentifier>(((CompoundId) left).objectIdentifiers());
                newObjectIdentifiers.add(objectIdentifier);
                return new CompoundIdR(newObjectIdentifiers);
            } else if (left == null) {
                return new CompoundIdR(List.of(objectIdentifier));
            } else {
                return new CallExpressionR(name, type, List.of(left));
            }
        }
    }

    static final int UNLIMITED = Integer.MAX_VALUE;
    // The last token successfully "consumed"
    Token lastConsumedToken;
    private TokenType nextTokenType;
    private Token currentLookaheadToken;
    private int remainingLookahead;
    private boolean hitFailure, passedPredicate;
    private String currentlyParsedProduction, currentLookaheadProduction;
    private int lookaheadRoutineNesting, passedPredicateThreshold = -1;
    EnumSet<TokenType> outerFollowSet;
    private boolean legacyGlitchyLookahead = false;
    private final Token DUMMY_START_TOKEN = new Token();
    private boolean cancelled;

    public void cancel() {
        cancelled = true;
    }

    public boolean isCancelled() {
        return cancelled;
    }

    /** Generated Lexer. */
    public MdxLexer token_source;

    public void setInputSource(String inputSource) {
        token_source.setInputSource(inputSource);
    }

    String getInputSource() {
        return token_source.getInputSource();
    }

    //=================================
    // Generated constructors
    //=================================
    public MdxParser(String inputSource, CharSequence content) {
        this(new MdxLexer(inputSource, content));
    }

    public MdxParser(CharSequence content) {
        this("input", content);
    }

    /**
    * @param inputSource just the name of the input source (typically the filename) that
    * will be used in error messages and so on.
    * @param path The location (typically the filename) from which to get the input to parse
    */
    public MdxParser(String inputSource, Path path) throws IOException {
        this(inputSource, TokenSource.stringFromBytes(Files.readAllBytes(path)));
    }

    public MdxParser(String inputSource, Path path, Charset charset) throws IOException {
        this(inputSource, TokenSource.stringFromBytes(Files.readAllBytes(path), charset));
    }

    /**
    * @param path The location (typically the filename) from which to get the input to parse
    */
    public MdxParser(Path path) throws IOException {
        this(path.toString(), path);
    }

    /** Constructor with user supplied Lexer. */
    public MdxParser(MdxLexer lexer) {
        token_source = lexer;
        lastConsumedToken = DUMMY_START_TOKEN;
        lastConsumedToken.setTokenSource(lexer);
    }

    // If the next token is cached, it returns that
    // Otherwise, it goes to the token_source, i.e. the Lexer.
    final private Token nextToken(final Token tok) {
        Token result = token_source.getNextToken(tok);
        while (result.isUnparsed()) {
            result = token_source.getNextToken(result);
        }
        nextTokenType = null;
        return result;
    }

    /**
    * @return the next Token off the stream. This is the same as #getToken(1)
    */
    final public Token getNextToken() {
        return getToken(1);
    }

    /**
    * @param index how many tokens to look ahead
    * @return the specific regular (i.e. parsed) Token index ahead/behind in the stream.
    * If we are in a lookahead, it looks ahead from the currentLookaheadToken
    * Otherwise, it is the lastConsumedToken. If you pass in a negative
    * number it goes backward.
    */
    final public Token getToken(final int index) {
        Token t = currentLookaheadToken == null ? lastConsumedToken : currentLookaheadToken;
        for (int i = 0; i < index; i++) {
            t = nextToken(t);
        }
        for (int i = 0; i > index; i--) {
            t = t.getPrevious();
            if (t == null) break;
        }
        return t;
    }

    private final TokenType nextTokenType() {
        if (nextTokenType == null) {
            nextTokenType = nextToken(lastConsumedToken).getType();
        }
        return nextTokenType;
    }

    boolean activateTokenTypes(TokenType...types) {
        boolean result = false;
        for (TokenType tt : types) {
            result |= token_source.activeTokenTypes.add(tt);
        }
        if (result) {
            token_source.reset(getToken(0));
            nextTokenType = null;
        }
        return result;
    }

    boolean deactivateTokenTypes(TokenType...types) {
        boolean result = false;
        for (TokenType tt : types) {
            result |= token_source.activeTokenTypes.remove(tt);
        }
        if (result) {
            token_source.reset(getToken(0));
            nextTokenType = null;
        }
        return result;
    }

    private static HashMap<TokenType[], EnumSet<TokenType>> enumSetCache = new HashMap<>();

    private static EnumSet<TokenType> tokenTypeSet(TokenType first, TokenType...rest) {
        TokenType[] key = new TokenType[1 + rest.length];
        key[0] = first;
        if (rest.length > 0) {
            System.arraycopy(rest, 0, key, 1, rest.length);
        }
        Arrays.sort(key);
        if (enumSetCache.containsKey(key)) {
            return enumSetCache.get(key);
        }
        EnumSet<TokenType> result = (rest.length == 0) ? EnumSet.of(first) : EnumSet.of(first, rest);
        enumSetCache.put(key, result);
        return result;
    }

    // ccc/mdx.ccc:452:1
    final public
    // ----------------------------------------------------------------------------
    // MDX Statement
    //
    // <statement> ::= <selectStatement>
    //                   | <drillthroughStatement>
    //                   | <explainStatement>
    //
    // <selectStatement> ::= [WITH <formulaSpecification>]
    //                         SELECT [<SelectQueryAxisClause>
    //                                [, <SelectQueryAxisClause>...]]
    //                         FROM [<cubeSpecification>]
    //                         [WHERE <slicerSpecification>]
    //                         [<cellProps>]
    //
    // <drillthroughStatment> ::=
    //     DRILLTHROUGH
    //     [ MAXROWS <count> ]
    //     [ FIRSTROWSET <count> ]
    //     <selectStatement>
    //     [ RETURN <memberOrAttribute> [, <memberOrAttribute>...] ]
    //
    // <explainStatement> ::=
    //     EXPLAIN PLAN FOR ( <selectStatement> | <drillthroughStatement> )
    //
    MdxStatement parseMdxStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseMdxStatement";
        ASTparseMdxStatement parseMdxStatement1 = null;
        if (buildTree) {
            parseMdxStatement1 = new ASTparseMdxStatement();
            openNodeScope(parseMdxStatement1);
        }
        MdxStatement mdxStatement = null;
        ParseException parseException2 = null;
        int callStackSize3 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:456:3
            pushOntoCallStack("parseMdxStatement", "ccc/mdx.ccc", 456, 3);
            try {
                mdxStatement = parseSelectStatement();
            } finally {
                popCallStack();
            }
            // Code for EndOfFile specified at ccc/mdx.ccc:469:3
            consumeToken(EOF);
            // Code for CodeBlock specified at ccc/mdx.ccc:470:3
            return mdxStatement;
        } catch (ParseException e) {
            parseException2 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize3);
            if (parseMdxStatement1 != null) {
                if (parseException2 == null) {
                    closeNodeScope(parseMdxStatement1, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:476:1
    final public DrillthroughStatement parseDrillthroughStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseDrillthroughStatement";
        ASTparseDrillthroughStatement parseDrillthroughStatement2 = null;
        if (buildTree) {
            parseDrillthroughStatement2 = new ASTparseDrillthroughStatement();
            openNodeScope(parseDrillthroughStatement2);
        }
        SelectStatement selectStatement = null;
        List<ReturnItem> returnItems = null;
        ParseException parseException18 = null;
        int callStackSize19 = parsingStack.size();
        try {
            // Code for RegexpRef specified at ccc/mdx.ccc:481:3
            consumeToken(DRILLTHROUGH);
            // Code for ZeroOrOne specified at ccc/mdx.ccc:482:3
            if (nextTokenType() == MAXROWS) {
                // Code for RegexpRef specified at ccc/mdx.ccc:482:4
                consumeToken(MAXROWS);
                // Code for RegexpRef specified at ccc/mdx.ccc:482:16
                consumeToken(UNSIGNED_INTEGER_LITERAL);
            }
            // Code for ZeroOrOne specified at ccc/mdx.ccc:483:3
            if (nextTokenType() == FIRSTROWSET) {
                // Code for RegexpRef specified at ccc/mdx.ccc:483:4
                consumeToken(FIRSTROWSET);
                // Code for RegexpRef specified at ccc/mdx.ccc:483:20
                consumeToken(UNSIGNED_INTEGER_LITERAL);
            }
            // Code for NonTerminal specified at ccc/mdx.ccc:484:3
            pushOntoCallStack("parseDrillthroughStatement", "ccc/mdx.ccc", 484, 3);
            try {
                selectStatement = parseSelectStatement();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at ccc/mdx.ccc:485:3
            if (nextTokenType() == RETURN) {
                // Code for RegexpRef specified at ccc/mdx.ccc:486:5
                consumeToken(RETURN);
                // Code for NonTerminal specified at ccc/mdx.ccc:486:16
                pushOntoCallStack("parseDrillthroughStatement", "ccc/mdx.ccc", 486, 16);
                try {
                    returnItems = parseReturnItems();
                } finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:488:3
            return new DrillthroughStatementR();
        } catch (ParseException e) {
            parseException18 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize19);
            if (parseDrillthroughStatement2 != null) {
                if (parseException18 == null) {
                    closeNodeScope(parseDrillthroughStatement2, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:494:1
    final public List<ReturnItem> parseReturnItems() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseReturnItems";
        ASTparseReturnItems parseReturnItems3 = null;
        if (buildTree) {
            parseReturnItems3 = new ASTparseReturnItems();
            openNodeScope(parseReturnItems3);
        }
        List<ReturnItem> returnItems = new LinkedList<ReturnItem>();
        ReturnItem item;
        ParseException parseException82 = null;
        int callStackSize83 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:499:3
            pushOntoCallStack("parseReturnItems", "ccc/mdx.ccc", 499, 3);
            try {
                item = parseReturnItem();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:500:3
            returnItems.add(item);
            // Code for ZeroOrMore specified at ccc/mdx.ccc:503:3
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:504:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at ccc/mdx.ccc:504:15
                pushOntoCallStack("parseReturnItems", "ccc/mdx.ccc", 504, 15);
                try {
                    item = parseReturnItem();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:505:5
                returnItems.add(item);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:509:3
            return returnItems;
        } catch (ParseException e) {
            parseException82 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize83);
            if (parseReturnItems3 != null) {
                if (parseException82 == null) {
                    closeNodeScope(parseReturnItems3, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:515:1
    final public ReturnItem parseReturnItem() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseReturnItem";
        ASTparseReturnItem parseReturnItem4 = null;
        if (buildTree) {
            parseReturnItem4 = new ASTparseReturnItem();
            openNodeScope(parseReturnItem4);
        }
        CompoundId compoundId;
        ParseException parseException118 = null;
        int callStackSize119 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:519:3
            pushOntoCallStack("parseReturnItem", "ccc/mdx.ccc", 519, 3);
            try {
                compoundId = parseCompoundId();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:520:3
            return new ReturnItemR(compoundId);
        } catch (ParseException e) {
            parseException118 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize119);
            if (parseReturnItem4 != null) {
                if (parseException118 == null) {
                    closeNodeScope(parseReturnItem4, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:527:1
    final public
    //https://learn.microsoft.com/en-us/sql/mdx/mdx-data-definition-create-cell-calculation?view=sql-server-ver16
    CreateCellCalculationBodyClause parseCreateCellCalculationBodyClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseCreateCellCalculationBodyClause";
        ASTparseCreateCellCalculationBodyClause parseCreateCellCalculationBodyClause5 = null;
        if (buildTree) {
            parseCreateCellCalculationBodyClause5 = new ASTparseCreateCellCalculationBodyClause();
            openNodeScope(parseCreateCellCalculationBodyClause5);
        }
        CreateCellCalculationBodyClause createCellCalculationBC = null;
        ParseException parseException130 = null;
        int callStackSize131 = parsingStack.size();
        try {
            // Code for RegexpRef specified at ccc/mdx.ccc:531:2
            consumeToken(NOT);
            // Code for RegexpRef specified at ccc/mdx.ccc:531:7
            consumeToken(NOT);
            // Code for RegexpRef specified at ccc/mdx.ccc:531:12
            consumeToken(NOT);
            // Code for RegexpRef specified at ccc/mdx.ccc:531:17
            consumeToken(NOT);
            // Code for RegexpRef specified at ccc/mdx.ccc:531:22
            consumeToken(NOT);
            // Code for RegexpRef specified at ccc/mdx.ccc:531:27
            consumeToken(NOT);
            // Code for RegexpRef specified at ccc/mdx.ccc:531:32
            consumeToken(NOT);
            // Code for CodeBlock specified at ccc/mdx.ccc:532:3
            return createCellCalculationBC;
        } catch (ParseException e) {
            parseException130 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize131);
            if (parseCreateCellCalculationBodyClause5 != null) {
                if (parseException130 == null) {
                    closeNodeScope(parseCreateCellCalculationBodyClause5, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:538:1
    final public
    // https://learn.microsoft.com/en-us/analysis-services/multidimensional-models/mdx/mdx-building-measures?view=asallproducts-allversions
    MeasureBodyClause parseMeasureBodyClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseMeasureBodyClause";
        ASTparseMeasureBodyClause parseMeasureBodyClause6 = null;
        if (buildTree) {
            parseMeasureBodyClause6 = new ASTparseMeasureBodyClause();
            openNodeScope(parseMeasureBodyClause6);
        }
        ParseException parseException166 = null;
        int callStackSize167 = parsingStack.size();
        try {
            // Code for RegexpRef specified at ccc/mdx.ccc:541:3
            consumeToken(NOT);
            // Code for RegexpRef specified at ccc/mdx.ccc:541:8
            consumeToken(NOT);
            // Code for RegexpRef specified at ccc/mdx.ccc:541:13
            consumeToken(NOT);
            // Code for RegexpRef specified at ccc/mdx.ccc:541:18
            consumeToken(NOT);
            // Code for RegexpRef specified at ccc/mdx.ccc:541:23
            consumeToken(NOT);
            // Code for RegexpRef specified at ccc/mdx.ccc:541:28
            consumeToken(NOT);
            // Code for RegexpRef specified at ccc/mdx.ccc:541:33
            consumeToken(NOT);
            // Code for CodeBlock specified at ccc/mdx.ccc:542:3
            return new MeasureBodyClauseR();
        } catch (ParseException e) {
            parseException166 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize167);
            if (parseMeasureBodyClause6 != null) {
                if (parseException166 == null) {
                    closeNodeScope(parseMeasureBodyClause6, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:549:1
    final public
    // https://docs.oracle.com/cd/E57185_01/ESBTR/mdx_grammar_rules.html
    SelectWithClause parseSelectWithClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectWithClause";
        ASTparseSelectWithClause parseSelectWithClause7 = null;
        if (buildTree) {
            parseSelectWithClause7 = new ASTparseSelectWithClause();
            openNodeScope(parseSelectWithClause7);
        }
        SelectWithClause selectWithClause = null;
        ParseException parseException202 = null;
        int callStackSize203 = parsingStack.size();
        try {
            if (nextTokenType() == CELL) {
                // Code for RegexpRef specified at ccc/mdx.ccc:553:5
                consumeToken(CELL);
                // Code for RegexpRef specified at ccc/mdx.ccc:553:12
                consumeToken(CALCULATION);
                // Code for NonTerminal specified at ccc/mdx.ccc:553:26
                pushOntoCallStack("parseSelectWithClause", "ccc/mdx.ccc", 553, 26);
                try {
                    selectWithClause = parseCreateCellCalculationBodyClause();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == MEMBER || nextTokenType == CALCULATED) {
                // Code for ZeroOrOne specified at ccc/mdx.ccc:554:5
                if (nextTokenType() == CALCULATED) {
                    // Code for RegexpStringLiteral specified at ccc/mdx.ccc:554:6
                    consumeToken(CALCULATED);
                }
                // Code for RegexpRef specified at ccc/mdx.ccc:554:21
                consumeToken(MEMBER);
                // Code for NonTerminal specified at ccc/mdx.ccc:554:32
                pushOntoCallStack("parseSelectWithClause", "ccc/mdx.ccc", 554, 32);
                try {
                    selectWithClause = parseCreateMemberBodyClause();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == SET) {
                // Code for RegexpRef specified at ccc/mdx.ccc:555:5
                consumeToken(SET);
                // Code for NonTerminal specified at ccc/mdx.ccc:555:13
                pushOntoCallStack("parseSelectWithClause", "ccc/mdx.ccc", 555, 13);
                try {
                    selectWithClause = parseCreateSetBodyClause();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == MEASURE) {
                // Code for RegexpRef specified at ccc/mdx.ccc:556:5
                consumeToken(MEASURE);
                // Code for NonTerminal specified at ccc/mdx.ccc:556:15
                pushOntoCallStack("parseSelectWithClause", "ccc/mdx.ccc", 556, 15);
                try {
                    selectWithClause = parseMeasureBodyClause();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("parseSelectWithClause", "ccc/mdx.ccc", 553, 5);
                throw new ParseException(this, first_set$mdx_ccc$553$5, parsingStack);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:558:3
            return selectWithClause;
        } catch (ParseException e) {
            parseException202 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize203);
            if (parseSelectWithClause7 != null) {
                if (parseException202 == null) {
                    closeNodeScope(parseSelectWithClause7, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:564:1
    final public
    //https://learn.microsoft.com/en-us/sql/mdx/mdx-data-manipulation-select?view=sql-server-ver16
    SelectStatement parseSelectStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectStatement";
        ASTparseSelectStatement parseSelectStatement8 = null;
        if (buildTree) {
            parseSelectStatement8 = new ASTparseSelectStatement();
            openNodeScope(parseSelectStatement8);
        }
        List<SelectWithClause> selectWithClauses = new LinkedList<SelectWithClause>();
        SelectQueryClause selectQueryClause = null;
        SelectSubcubeClause selectSubcubeClause = null;
        Optional<SelectSlicerAxisClause> selectSlicerAxisClause = Optional.empty();
        SelectCellPropertyListClause selectCellPropertyListClause = null;
        SelectWithClause selectWithClause = null;
        ParseException parseException279 = null;
        int callStackSize280 = parsingStack.size();
        try {
            // Code for ZeroOrOne specified at ccc/mdx.ccc:573:3
            if (nextTokenType() == WITH) {
                // Code for RegexpRef specified at ccc/mdx.ccc:574:5
                consumeToken(WITH);
                // Code for NonTerminal specified at ccc/mdx.ccc:575:7
                pushOntoCallStack("parseSelectStatement", "ccc/mdx.ccc", 575, 7);
                try {
                    selectWithClause = parseSelectWithClause();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:576:5
                selectWithClauses.add(selectWithClause);
                // Code for ZeroOrMore specified at ccc/mdx.ccc:579:5
                while (true) {
                    if (!(first_set$mdx_ccc$580$8.contains(nextTokenType()))) break;
                    // Code for NonTerminal specified at ccc/mdx.ccc:580:8
                    pushOntoCallStack("parseSelectStatement", "ccc/mdx.ccc", 580, 8);
                    try {
                        selectWithClause = parseSelectWithClause();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:581:7
                    selectWithClauses.add(selectWithClause);
                }
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:587:3
            consumeToken(SELECT);
            if (nextTokenType() == ASTERISK) {
                // Code for NonTerminal specified at ccc/mdx.ccc:589:5
                pushOntoCallStack("parseSelectStatement", "ccc/mdx.ccc", 589, 5);
                try {
                    selectQueryClause = parseSelectQueryAsteriskClause();
                } finally {
                    popCallStack();
                }
            } else if (first_set$mdx_ccc$591$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at ccc/mdx.ccc:591:5
                pushOntoCallStack("parseSelectStatement", "ccc/mdx.ccc", 591, 5);
                try {
                    selectQueryClause = parseSelectQueryAxesClause();
                } finally {
                    popCallStack();
                }
            } else {
                // Code for CodeBlock specified at ccc/mdx.ccc:593:5
                selectQueryClause = new SelectQueryEmptyClauseR();
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:597:3
            consumeToken(FROM);
            // Code for NonTerminal specified at ccc/mdx.ccc:597:12
            pushOntoCallStack("parseSelectStatement", "ccc/mdx.ccc", 597, 12);
            try {
                selectSubcubeClause = parseSelectSubcubeClause();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at ccc/mdx.ccc:598:3
            if (nextTokenType() == WHERE) {
                // Code for NonTerminal specified at ccc/mdx.ccc:599:5
                pushOntoCallStack("parseSelectStatement", "ccc/mdx.ccc", 599, 5);
                try {
                    selectSlicerAxisClause = parseSelectSlicerAxisClause();
                } finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at ccc/mdx.ccc:601:3
            if (nextTokenType() == CELL || nextTokenType == PROPERTIES) {
                // Code for NonTerminal specified at ccc/mdx.ccc:602:5
                pushOntoCallStack("parseSelectStatement", "ccc/mdx.ccc", 602, 5);
                try {
                    selectCellPropertyListClause = parseSelectCellPropertyListClause();
                } finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:604:3
            return new SelectStatementR(selectWithClauses, selectQueryClause, selectSubcubeClause, selectSlicerAxisClause, Optional.ofNullable(selectCellPropertyListClause));
        } catch (ParseException e) {
            parseException279 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize280);
            if (parseSelectStatement8 != null) {
                if (parseException279 == null) {
                    closeNodeScope(parseSelectStatement8, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:610:1
    final public SelectSubcubeClause parseSelectSubcubeClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectSubcubeClause";
        ASTparseSelectSubcubeClause parseSelectSubcubeClause9 = null;
        if (buildTree) {
            parseSelectSubcubeClause9 = new ASTparseSelectSubcubeClause();
            openNodeScope(parseSelectSubcubeClause9);
        }
        SelectSubcubeClause selectSubcubeClause = null;
        ParseException parseException388 = null;
        int callStackSize389 = parsingStack.size();
        try {
            if (first_set$mdx_ccc$615$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at ccc/mdx.ccc:615:5
                pushOntoCallStack("parseSelectSubcubeClause", "ccc/mdx.ccc", 615, 5);
                try {
                    selectSubcubeClause = parseSelectSubcubeClauseName();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == LPAREN) {
                // Code for NonTerminal specified at ccc/mdx.ccc:617:5
                pushOntoCallStack("parseSelectSubcubeClause", "ccc/mdx.ccc", 617, 5);
                try {
                    selectSubcubeClause = parseSelectSubcubeClauseStatement();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("parseSelectSubcubeClause", "ccc/mdx.ccc", 615, 5);
                throw new ParseException(this, first_set$mdx_ccc$615$5$, parsingStack);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:619:3
            return selectSubcubeClause;
        } catch (ParseException e) {
            parseException388 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize389);
            if (parseSelectSubcubeClause9 != null) {
                if (parseException388 == null) {
                    closeNodeScope(parseSelectSubcubeClause9, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:625:1
    final public SelectSubcubeClauseName parseSelectSubcubeClauseName() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectSubcubeClauseName";
        ASTparseSelectSubcubeClauseName parseSelectSubcubeClauseName10 = null;
        if (buildTree) {
            parseSelectSubcubeClauseName10 = new ASTparseSelectSubcubeClauseName();
            openNodeScope(parseSelectSubcubeClauseName10);
        }
        NameObjectIdentifier nameObjectIdentifier;
        ParseException parseException417 = null;
        int callStackSize418 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:629:3
            pushOntoCallStack("parseSelectSubcubeClauseName", "ccc/mdx.ccc", 629, 3);
            try {
                nameObjectIdentifier = parseNameObjectIdentifier();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:630:3
            return new SelectSubcubeClauseNameR(nameObjectIdentifier);
        } catch (ParseException e) {
            parseException417 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize418);
            if (parseSelectSubcubeClauseName10 != null) {
                if (parseException417 == null) {
                    closeNodeScope(parseSelectSubcubeClauseName10, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:636:1
    final public SelectSubcubeClauseStatement parseSelectSubcubeClauseStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectSubcubeClauseStatement";
        ASTparseSelectSubcubeClauseStatement parseSelectSubcubeClauseStatement11 = null;
        if (buildTree) {
            parseSelectSubcubeClauseStatement11 = new ASTparseSelectSubcubeClauseStatement();
            openNodeScope(parseSelectSubcubeClauseStatement11);
        }
        SelectQueryClause selectQueryClause = null;
        SelectSubcubeClause selectSubcubeClause = null;
        Optional<SelectSlicerAxisClause> selectSlicerAxisClause = null;
        ParseException parseException429 = null;
        int callStackSize430 = parsingStack.size();
        try {
            // Code for RegexpRef specified at ccc/mdx.ccc:643:5
            consumeToken(LPAREN);
            // Code for RegexpRef specified at ccc/mdx.ccc:643:16
            consumeToken(SELECT);
            // Code for ZeroOrOne specified at ccc/mdx.ccc:644:5
            // Code for ExpansionChoice specified at ccc/mdx.ccc:645:7
            if (nextTokenType() == ASTERISK) {
                // Code for NonTerminal specified at ccc/mdx.ccc:645:7
                pushOntoCallStack("parseSelectSubcubeClauseStatement", "ccc/mdx.ccc", 645, 7);
                try {
                    selectQueryClause = parseSelectQueryAsteriskClause();
                } finally {
                    popCallStack();
                }
            } else if (first_set$mdx_ccc$647$7.contains(nextTokenType())) {
                // Code for NonTerminal specified at ccc/mdx.ccc:647:7
                pushOntoCallStack("parseSelectSubcubeClauseStatement", "ccc/mdx.ccc", 647, 7);
                try {
                    selectQueryClause = parseSelectQueryAxesClause();
                } finally {
                    popCallStack();
                }
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:649:5
            consumeToken(FROM);
            // Code for NonTerminal specified at ccc/mdx.ccc:649:14
            pushOntoCallStack("parseSelectSubcubeClauseStatement", "ccc/mdx.ccc", 649, 14);
            try {
                selectSubcubeClause = parseSelectSubcubeClause();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at ccc/mdx.ccc:650:5
            if (nextTokenType() == WHERE) {
                // Code for NonTerminal specified at ccc/mdx.ccc:651:7
                pushOntoCallStack("parseSelectSubcubeClauseStatement", "ccc/mdx.ccc", 651, 7);
                try {
                    selectSlicerAxisClause = parseSelectSlicerAxisClause();
                } finally {
                    popCallStack();
                }
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:653:5
            consumeToken(RPAREN);
            // Code for CodeBlock specified at ccc/mdx.ccc:655:3
            return new SelectSubcubeClauseStatementR(selectQueryClause, selectSubcubeClause, selectSlicerAxisClause);
        } catch (ParseException e) {
            parseException429 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize430);
            if (parseSelectSubcubeClauseStatement11 != null) {
                if (parseException429 == null) {
                    closeNodeScope(parseSelectSubcubeClauseStatement11, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:661:1
    final public SelectQueryAsteriskClause parseSelectQueryAsteriskClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectQueryAsteriskClause";
        ASTparseSelectQueryAsteriskClause parseSelectQueryAsteriskClause12 = null;
        if (buildTree) {
            parseSelectQueryAsteriskClause12 = new ASTparseSelectQueryAsteriskClause();
            openNodeScope(parseSelectQueryAsteriskClause12);
        }
        ParseException parseException498 = null;
        int callStackSize499 = parsingStack.size();
        try {
            // Code for RegexpRef specified at ccc/mdx.ccc:662:3
            consumeToken(ASTERISK);
            // Code for CodeBlock specified at ccc/mdx.ccc:663:3
            return new SelectQueryAsteriskClauseR();
        } catch (ParseException e) {
            parseException498 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize499);
            if (parseSelectQueryAsteriskClause12 != null) {
                if (parseException498 == null) {
                    closeNodeScope(parseSelectQueryAsteriskClause12, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:669:1
    final public SelectQueryAxesClause parseSelectQueryAxesClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectQueryAxesClause";
        ASTparseSelectQueryAxesClause parseSelectQueryAxesClause13 = null;
        if (buildTree) {
            parseSelectQueryAxesClause13 = new ASTparseSelectQueryAxesClause();
            openNodeScope(parseSelectQueryAxesClause13);
        }
        List<SelectQueryAxisClause> selectQueryAxisClauses = new LinkedList<SelectQueryAxisClause>();
        SelectQueryAxisClause selectQueryAxisClause;
        ParseException parseException510 = null;
        int callStackSize511 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:674:3
            pushOntoCallStack("parseSelectQueryAxesClause", "ccc/mdx.ccc", 674, 3);
            try {
                selectQueryAxisClause = parseSelectQueryAxisClause();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:675:3
            selectQueryAxisClauses.add(selectQueryAxisClause);
            // Code for ZeroOrMore specified at ccc/mdx.ccc:678:3
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:679:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at ccc/mdx.ccc:679:15
                pushOntoCallStack("parseSelectQueryAxesClause", "ccc/mdx.ccc", 679, 15);
                try {
                    selectQueryAxisClause = parseSelectQueryAxisClause();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:680:5
                selectQueryAxisClauses.add(selectQueryAxisClause);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:684:3
            return new SelectQueryAxesClauseR(selectQueryAxisClauses);
        } catch (ParseException e) {
            parseException510 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize511);
            if (parseSelectQueryAxesClause13 != null) {
                if (parseException510 == null) {
                    closeNodeScope(parseSelectQueryAxesClause13, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:690:1
    final public Optional<SelectSlicerAxisClause> parseSelectSlicerAxisClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectSlicerAxisClause";
        ASTparseSelectSlicerAxisClause parseSelectSlicerAxisClause14 = null;
        if (buildTree) {
            parseSelectSlicerAxisClause14 = new ASTparseSelectSlicerAxisClause();
            openNodeScope(parseSelectSlicerAxisClause14);
        }
        Expression expression = null;
        ParseException parseException546 = null;
        int callStackSize547 = parsingStack.size();
        try {
            // Code for RegexpRef specified at ccc/mdx.ccc:694:3
            consumeToken(WHERE);
            // Code for NonTerminal specified at ccc/mdx.ccc:694:13
            pushOntoCallStack("parseSelectSlicerAxisClause", "ccc/mdx.ccc", 694, 13);
            try {
                expression = parseExpression();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:695:3
            if (expression == null) {
                return Optional.empty();
            }
            return Optional.of(new SelectSlicerAxisClauseR(expression));
        } catch (ParseException e) {
            parseException546 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize547);
            if (parseSelectSlicerAxisClause14 != null) {
                if (parseException546 == null) {
                    closeNodeScope(parseSelectSlicerAxisClause14, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:705:1
    final public SelectCellPropertyListClause parseSelectCellPropertyListClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectCellPropertyListClause";
        ASTparseSelectCellPropertyListClause parseSelectCellPropertyListClause15 = null;
        if (buildTree) {
            parseSelectCellPropertyListClause15 = new ASTparseSelectCellPropertyListClause();
            openNodeScope(parseSelectCellPropertyListClause15);
        }
        List<String> cellProperties = new LinkedList<String>();
        String property = null;
        boolean cell = false;
        ParseException parseException562 = null;
        int callStackSize563 = parsingStack.size();
        try {
            // Code for ZeroOrOne specified at ccc/mdx.ccc:711:3
            if (nextTokenType() == CELL) {
                // Code for RegexpRef specified at ccc/mdx.ccc:711:4
                consumeToken(CELL);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:712:4
            cell = true;
            // Code for RegexpRef specified at ccc/mdx.ccc:715:4
            consumeToken(PROPERTIES);
            // Code for RegexpRef specified at ccc/mdx.ccc:715:19
            consumeToken(ID);
            // Code for CodeBlock specified at ccc/mdx.ccc:716:5
            cellProperties.add(getToken(0).getImage());
            // Code for ZeroOrMore specified at ccc/mdx.ccc:719:3
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:720:5
                consumeToken(COMMA);
                // Code for RegexpRef specified at ccc/mdx.ccc:720:15
                consumeToken(ID);
                // Code for CodeBlock specified at ccc/mdx.ccc:721:5
                cellProperties.add(getToken(0).getImage());
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:725:3
            return new SelectCellPropertyListClauseR(cellProperties, cell);
        } catch (ParseException e) {
            parseException562 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize563);
            if (parseSelectCellPropertyListClause15 != null) {
                if (parseException562 == null) {
                    closeNodeScope(parseSelectCellPropertyListClause15, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:731:1
    final public
    // https://learn.microsoft.com/en-us/sql/mdx/mdx-data-definition-create-member?view=sql-server-ver16
    CreateMemberBodyClause parseCreateMemberBodyClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseCreateMemberBodyClause";
        ASTparseCreateMemberBodyClause parseCreateMemberBodyClause16 = null;
        if (buildTree) {
            parseCreateMemberBodyClause16 = new ASTparseCreateMemberBodyClause();
            openNodeScope(parseCreateMemberBodyClause16);
        }
        CompoundId compoundId = null;
        Expression expression = null;
        List<MemberPropertyDefinition> memberPropertyDefinitions = new LinkedList<MemberPropertyDefinition>();
        MemberPropertyDefinition memberPropertyDefinition = null;
        ParseException parseException618 = null;
        int callStackSize619 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:740:3
            pushOntoCallStack("parseCreateMemberBodyClause", "ccc/mdx.ccc", 740, 3);
            try {
                //  <CURRENTCUBE>
                //  |
                compoundId = parseCompoundId();
            } finally {
                popCallStack();
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:740:32
            consumeToken(AS);
            // Code for NonTerminal specified at ccc/mdx.ccc:740:39
            pushOntoCallStack("parseCreateMemberBodyClause", "ccc/mdx.ccc", 740, 39);
            try {
                expression = parseExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at ccc/mdx.ccc:742:3
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:743:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at ccc/mdx.ccc:743:15
                pushOntoCallStack("parseCreateMemberBodyClause", "ccc/mdx.ccc", 743, 15);
                try {
                    memberPropertyDefinition = parseMemberPropertyDefinition();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:744:5
                memberPropertyDefinitions.add(memberPropertyDefinition);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:749:3
            return new CreateMemberBodyClauseR(compoundId, expression, memberPropertyDefinitions);
        } catch (ParseException e) {
            parseException618 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize619);
            if (parseCreateMemberBodyClause16 != null) {
                if (parseException618 == null) {
                    closeNodeScope(parseCreateMemberBodyClause16, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:755:1
    final public MemberPropertyDefinition parseMemberPropertyDefinition() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseMemberPropertyDefinition";
        ASTparseMemberPropertyDefinition parseMemberPropertyDefinition17 = null;
        if (buildTree) {
            parseMemberPropertyDefinition17 = new ASTparseMemberPropertyDefinition();
            openNodeScope(parseMemberPropertyDefinition17);
        }
        ParseException parseException658 = null;
        int callStackSize659 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:756:3
            pushOntoCallStack("parseMemberPropertyDefinition", "ccc/mdx.ccc", 756, 3);
            try {
                parseIdentifier();
            } finally {
                popCallStack();
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:756:19
            consumeToken(EQ);
            // Code for NonTerminal specified at ccc/mdx.ccc:756:26
            pushOntoCallStack("parseMemberPropertyDefinition", "ccc/mdx.ccc", 756, 26);
            try {
                parseExpression();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:757:3
            return new MemberPropertyDefinitionR();
        } catch (ParseException e) {
            parseException658 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize659);
            if (parseMemberPropertyDefinition17 != null) {
                if (parseException658 == null) {
                    closeNodeScope(parseMemberPropertyDefinition17, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:763:1
    final public FormulaExpression parseFormulaExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseFormulaExpression";
        ASTparseFormulaExpression parseFormulaExpression18 = null;
        if (buildTree) {
            parseFormulaExpression18 = new ASTparseFormulaExpression();
            openNodeScope(parseFormulaExpression18);
        }
        ParseException parseException678 = null;
        int callStackSize679 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:764:3
            pushOntoCallStack("parseFormulaExpression", "ccc/mdx.ccc", 764, 3);
            try {
                parseIdentifier();
            } finally {
                popCallStack();
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:764:19
            consumeToken(EQ);
            // Code for NonTerminal specified at ccc/mdx.ccc:764:26
            pushOntoCallStack("parseFormulaExpression", "ccc/mdx.ccc", 764, 26);
            try {
                parseIdentifier();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:765:3
            return new FormulaExpressionR();
        } catch (ParseException e) {
            parseException678 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize679);
            if (parseFormulaExpression18 != null) {
                if (parseException678 == null) {
                    closeNodeScope(parseFormulaExpression18, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:771:1
    final public Expression parseExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseExpression";
        ASTparseExpression parseExpression19 = null;
        if (buildTree) {
            parseExpression19 = new ASTparseExpression();
            openNodeScope(parseExpression19);
        }
        Expression expression;
        ObjectIdentifier objectIdentifier;
        ParseException parseException698 = null;
        int callStackSize699 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:776:3
            pushOntoCallStack("parseExpression", "ccc/mdx.ccc", 776, 3);
            try {
                expression = parseUnaliasedExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at ccc/mdx.ccc:777:3
            while (true) {
                if (!(nextTokenType() == AS)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:778:5
                consumeToken(AS);
                // Code for NonTerminal specified at ccc/mdx.ccc:778:12
                pushOntoCallStack("parseExpression", "ccc/mdx.ccc", 778, 12);
                try {
                    objectIdentifier = parseIdentifier();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:779:5
                CompoundId compundId = new CompoundIdR(List.of(objectIdentifier));
                expression = new CallExpressionR("AS", CallExpression.Type.Term_Infix, List.of(expression, compundId));
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:787:3
            return expression;
        } catch (ParseException e) {
            parseException698 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize699);
            if (parseExpression19 != null) {
                if (parseException698 == null) {
                    closeNodeScope(parseExpression19, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:793:1
    final public Expression expressionOrEmpty() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "expressionOrEmpty";
        // Code for ExpansionChoice specified at ccc/mdx.ccc:797:3
        ASTexpressionOrEmpty expressionOrEmpty20 = null;
        if (buildTree) {
            expressionOrEmpty20 = new ASTexpressionOrEmpty();
            openNodeScope(expressionOrEmpty20);
        }
        Expression expression;
        ParseException parseException730 = null;
        int callStackSize731 = parsingStack.size();
        try {
            if (first_set$mdx_ccc$797$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at ccc/mdx.ccc:797:3
                pushOntoCallStack("expressionOrEmpty", "ccc/mdx.ccc", 797, 3);
                try {
                    expression = parseExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:798:3
                return expression;
            } else {
                // Code for CodeBlock specified at ccc/mdx.ccc:802:3
                return new CallExpressionR("", CallExpression.Type.Empty, List.of());
            }
        } catch (ParseException e) {
            parseException730 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize731);
            if (expressionOrEmpty20 != null) {
                if (parseException730 == null) {
                    closeNodeScope(expressionOrEmpty20, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:811:1
    final public
    // Comma-separated list of expressions, some of which may be empty. Used
    // for functions.
    List<Expression> expOrEmptyList() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "expOrEmptyList";
        ASTexpOrEmptyList expOrEmptyList21 = null;
        if (buildTree) {
            expOrEmptyList21 = new ASTexpOrEmptyList();
            openNodeScope(expOrEmptyList21);
        }
        Expression expression;
        List<Expression> list = new LinkedList<Expression>();
        ParseException parseException754 = null;
        int callStackSize755 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:816:3
            pushOntoCallStack("expOrEmptyList", "ccc/mdx.ccc", 816, 3);
            try {
                expression = expressionOrEmpty();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:817:3
            list.add(expression);
            // Code for ZeroOrMore specified at ccc/mdx.ccc:820:3
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:821:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at ccc/mdx.ccc:822:5
                pushOntoCallStack("expOrEmptyList", "ccc/mdx.ccc", 822, 5);
                try {
                    expression = expressionOrEmpty();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:823:5
                list.add(expression);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:827:3
            return list;
        } catch (ParseException e) {
            parseException754 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize755);
            if (expOrEmptyList21 != null) {
                if (parseException754 == null) {
                    closeNodeScope(expOrEmptyList21, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:834:1
    final public
    // List of expressions, none of which may be empty.
    List<Expression> expList() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "expList";
        ASTexpList expList22 = null;
        if (buildTree) {
            expList22 = new ASTexpList();
            openNodeScope(expList22);
        }
        Expression expression;
        List<Expression> list = new LinkedList<Expression>();
        ParseException parseException790 = null;
        int callStackSize791 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:839:3
            pushOntoCallStack("expList", "ccc/mdx.ccc", 839, 3);
            try {
                expression = parseExpression();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:840:3
            list.add(expression);
            // Code for ZeroOrMore specified at ccc/mdx.ccc:843:3
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:844:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at ccc/mdx.ccc:845:5
                pushOntoCallStack("expList", "ccc/mdx.ccc", 845, 5);
                try {
                    expression = parseExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:846:5
                list.add(expression);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:850:3
            return list;
        } catch (ParseException e) {
            parseException790 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize791);
            if (expList22 != null) {
                if (parseException790 == null) {
                    closeNodeScope(expList22, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:856:1
    final public Expression expressionEof() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "expressionEof";
        ASTexpressionEof expressionEof23 = null;
        if (buildTree) {
            expressionEof23 = new ASTexpressionEof();
            openNodeScope(expressionEof23);
        }
        Expression expression;
        ParseException parseException826 = null;
        int callStackSize827 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:860:3
            pushOntoCallStack("expressionEof", "ccc/mdx.ccc", 860, 3);
            try {
                expression = parseExpression();
            } finally {
                popCallStack();
            }
            // Code for EndOfFile specified at ccc/mdx.ccc:860:32
            consumeToken(EOF);
            // Code for CodeBlock specified at ccc/mdx.ccc:861:3
            return expression;
        } catch (ParseException e) {
            parseException826 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize827);
            if (expressionEof23 != null) {
                if (parseException826 == null) {
                    closeNodeScope(expressionEof23, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:867:1
    final public ObjectIdentifier parseIdentifier() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseIdentifier";
        ASTparseIdentifier parseIdentifier24 = null;
        if (buildTree) {
            parseIdentifier24 = new ASTparseIdentifier();
            openNodeScope(parseIdentifier24);
        }
        ObjectIdentifier objectIdentifier;
        ParseException parseException842 = null;
        int callStackSize843 = parsingStack.size();
        try {
            if (first_set$mdx_ccc$872$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at ccc/mdx.ccc:872:5
                pushOntoCallStack("parseIdentifier", "ccc/mdx.ccc", 872, 5);
                try {
                    objectIdentifier = parseNameObjectIdentifier();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == AMP_QUOTED_ID || nextTokenType == AMP_UNQUOTED_ID) {
                // Code for NonTerminal specified at ccc/mdx.ccc:874:5
                pushOntoCallStack("parseIdentifier", "ccc/mdx.ccc", 874, 5);
                try {
                    objectIdentifier = parseKeyIdentifier();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("parseIdentifier", "ccc/mdx.ccc", 872, 5);
                throw new ParseException(this, first_set$mdx_ccc$872$5$, parsingStack);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:876:3
            return objectIdentifier;
        } catch (ParseException e) {
            parseException842 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize843);
            if (parseIdentifier24 != null) {
                if (parseException842 == null) {
                    closeNodeScope(parseIdentifier24, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    static private final EnumSet<TokenType> parseNameObjectIdentifier_FIRST_SET = tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID);

    // ccc/mdx.ccc:882:1
    final public NameObjectIdentifier parseNameObjectIdentifier() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseNameObjectIdentifier";
        // Code for ExpansionChoice specified at ccc/mdx.ccc:886:3
        ASTparseNameObjectIdentifier parseNameObjectIdentifier25 = null;
        if (buildTree) {
            parseNameObjectIdentifier25 = new ASTparseNameObjectIdentifier();
            openNodeScope(parseNameObjectIdentifier25);
        }
        String id;
        ParseException parseException871 = null;
        int callStackSize872 = parsingStack.size();
        try {
            if (nextTokenType() == DIMENSION || nextTokenType == PROPERTIES) {
                // Code for NonTerminal specified at ccc/mdx.ccc:886:3
                pushOntoCallStack("parseNameObjectIdentifier", "ccc/mdx.ccc", 886, 3);
                try {
                    id = parseKeyword();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:887:3
                // Keywords that are  not Reserved could be used
                return new NameObjectIdentifierR(id, ObjectIdentifier.Quoting.UNQUOTED);
            } else if (nextTokenType() == ID) {
                // Code for RegexpRef specified at ccc/mdx.ccc:891:3
                consumeToken(ID);
                // Code for CodeBlock specified at ccc/mdx.ccc:892:3
                return new NameObjectIdentifierR(getToken(0).getImage(), ObjectIdentifier.Quoting.UNQUOTED);
            } else if (nextTokenType() == ATSIGN) {
                // Code for RegexpRef specified at ccc/mdx.ccc:895:3
                consumeToken(ATSIGN);
                // Code for RegexpRef specified at ccc/mdx.ccc:895:14
                consumeToken(ID);
                // Code for CodeBlock specified at ccc/mdx.ccc:896:3
                return new NameObjectIdentifierR("@" + getToken(0).getImage(), ObjectIdentifier.Quoting.UNQUOTED);
            } else if (nextTokenType() == QUOTED_ID) {
                // Code for RegexpRef specified at ccc/mdx.ccc:899:3
                consumeToken(QUOTED_ID);
                // Code for CodeBlock specified at ccc/mdx.ccc:900:3
                return new NameObjectIdentifierR(stripQuotes(getToken(0).getImage(), "[", "]", "]]"), ObjectIdentifier.Quoting.QUOTED);
            } else {
                pushOntoCallStack("parseNameObjectIdentifier", "ccc/mdx.ccc", 886, 3);
                throw new ParseException(this, parseNameObjectIdentifier_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException871 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize872);
            if (parseNameObjectIdentifier25 != null) {
                if (parseException871 == null) {
                    closeNodeScope(parseNameObjectIdentifier25, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:909:1
    final public
    // for example '&foo&[1]&bar' in '[x].&foo&[1]&bar.[y]'
    KeyObjectIdentifier parseKeyIdentifier() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseKeyIdentifier";
        ASTparseKeyIdentifier parseKeyIdentifier26 = null;
        if (buildTree) {
            parseKeyIdentifier26 = new ASTparseKeyIdentifier();
            openNodeScope(parseKeyIdentifier26);
        }
        List<NameObjectIdentifier> list = new ArrayList<NameObjectIdentifier>();
        NameObjectIdentifier key;
        ParseException parseException927 = null;
        int callStackSize928 = parsingStack.size();
        try {
            // Code for OneOrMore specified at ccc/mdx.ccc:914:3
            while (true) {
                // Code for NonTerminal specified at ccc/mdx.ccc:915:5
                pushOntoCallStack("parseKeyIdentifier", "ccc/mdx.ccc", 915, 5);
                try {
                    key = parseAmpId();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:916:5
                list.add(key);
                if (!(nextTokenType() == AMP_QUOTED_ID || nextTokenType == AMP_UNQUOTED_ID)) break;
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:920:3
            return new KeyObjectIdentifierR(list);
        } catch (ParseException e) {
            parseException927 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize928);
            if (parseKeyIdentifier26 != null) {
                if (parseException927 == null) {
                    closeNodeScope(parseKeyIdentifier26, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    static private final EnumSet<TokenType> parseAmpId_FIRST_SET = tokenTypeSet(AMP_QUOTED_ID, AMP_UNQUOTED_ID);

    // ccc/mdx.ccc:926:1
    final public NameObjectIdentifier parseAmpId() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseAmpId";
        // Code for ExpansionChoice specified at ccc/mdx.ccc:927:3
        ASTparseAmpId parseAmpId27 = null;
        if (buildTree) {
            parseAmpId27 = new ASTparseAmpId();
            openNodeScope(parseAmpId27);
        }
        ParseException parseException951 = null;
        int callStackSize952 = parsingStack.size();
        try {
            if (nextTokenType() == AMP_QUOTED_ID) {
                // Code for RegexpRef specified at ccc/mdx.ccc:927:3
                consumeToken(AMP_QUOTED_ID);
                // Code for CodeBlock specified at ccc/mdx.ccc:928:3
                return new NameObjectIdentifierR(stripQuotes(getToken(0).getImage(), "&[", "]", "]]"), ObjectIdentifier.Quoting.QUOTED);
            } else if (nextTokenType() == AMP_UNQUOTED_ID) {
                // Code for RegexpRef specified at ccc/mdx.ccc:934:3
                consumeToken(AMP_UNQUOTED_ID);
                // Code for CodeBlock specified at ccc/mdx.ccc:935:3
                return new NameObjectIdentifierR(getToken(0).getImage().substring(1), ObjectIdentifier.Quoting.UNQUOTED);
            } else {
                pushOntoCallStack("parseAmpId", "ccc/mdx.ccc", 927, 3);
                throw new ParseException(this, parseAmpId_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException951 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize952);
            if (parseAmpId27 != null) {
                if (parseException951 == null) {
                    closeNodeScope(parseAmpId27, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:944:1
    final public
    // a keyword that is not a RESERVED_WORD could be used as identifier
    String parseKeyword() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseKeyword";
        ASTparseKeyword parseKeyword28 = null;
        if (buildTree) {
            parseKeyword28 = new ASTparseKeyword();
            openNodeScope(parseKeyword28);
        }
        ParseException parseException979 = null;
        int callStackSize980 = parsingStack.size();
        try {
            if (nextTokenType() == DIMENSION) {
                // Code for RegexpRef specified at ccc/mdx.ccc:946:5
                consumeToken(DIMENSION);
            } else if (nextTokenType() == PROPERTIES) {
                // Code for RegexpRef specified at ccc/mdx.ccc:947:5
                consumeToken(PROPERTIES);
            } else {
                pushOntoCallStack("parseKeyword", "ccc/mdx.ccc", 946, 5);
                throw new ParseException(this, first_set$mdx_ccc$946$5, parsingStack);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:949:3
            return getToken(0).getImage();
        } catch (ParseException e) {
            parseException979 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize980);
            if (parseKeyword28 != null) {
                if (parseException979 == null) {
                    closeNodeScope(parseKeyword28, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:955:1
    final public CompoundId parseCompoundId() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseCompoundId";
        ASTparseCompoundId parseCompoundId29 = null;
        if (buildTree) {
            parseCompoundId29 = new ASTparseCompoundId();
            openNodeScope(parseCompoundId29);
        }
        CompoundId compoundId;
        List<ObjectIdentifier> list = new ArrayList<ObjectIdentifier>();
        ObjectIdentifier s;
        ParseException parseException1008 = null;
        int callStackSize1009 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:961:3
            pushOntoCallStack("parseCompoundId", "ccc/mdx.ccc", 961, 3);
            try {
                s = parseIdentifier();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:962:3
            list.add(s);
            // Code for ZeroOrMore specified at ccc/mdx.ccc:965:3
            while (true) {
                if (!(scan$mdx_ccc$966$5())) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:967:5
                consumeToken(DOT);
                // Code for NonTerminal specified at ccc/mdx.ccc:967:13
                pushOntoCallStack("parseCompoundId", "ccc/mdx.ccc", 967, 13);
                try {
                    s = parseIdentifier();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:968:5
                list.add(s);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:972:3
            return new CompoundIdR(list);
        } catch (ParseException e) {
            parseException1008 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1009);
            if (parseCompoundId29 != null) {
                if (parseException1008 == null) {
                    closeNodeScope(parseCompoundId29, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:980:1
    final public
    // ----------------------------------------------------------------------------
    // Expressions
    Expression parseUnaliasedExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseUnaliasedExpression";
        ASTparseUnaliasedExpression parseUnaliasedExpression30 = null;
        if (buildTree) {
            parseUnaliasedExpression30 = new ASTparseUnaliasedExpression();
            openNodeScope(parseUnaliasedExpression30);
        }
        Expression x, y;
        ParseException parseException1044 = null;
        int callStackSize1045 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:984:3
            pushOntoCallStack("parseUnaliasedExpression", "ccc/mdx.ccc", 984, 3);
            try {
                x = term5();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at ccc/mdx.ccc:985:3
            while (true) {
                // Code for ExpansionChoice specified at ccc/mdx.ccc:986:5
                if (nextTokenType() == OR) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:986:5
                    consumeToken(OR);
                    // Code for NonTerminal specified at ccc/mdx.ccc:986:12
                    pushOntoCallStack("parseUnaliasedExpression", "ccc/mdx.ccc", 986, 12);
                    try {
                        y = term5();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:987:5
                    x = new CallExpressionR("OR", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (nextTokenType() == XOR) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:993:5
                    consumeToken(XOR);
                    // Code for NonTerminal specified at ccc/mdx.ccc:993:13
                    pushOntoCallStack("parseUnaliasedExpression", "ccc/mdx.ccc", 993, 13);
                    try {
                        y = term5();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:994:5
                    x = new CallExpressionR("XOR", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (nextTokenType() == COLON) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1002:5
                    consumeToken(COLON);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1002:15
                    pushOntoCallStack("parseUnaliasedExpression", "ccc/mdx.ccc", 1002, 15);
                    try {
                        y = term5();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1003:5
                    x = new CallExpressionR(":", CallExpression.Type.Term_Infix, List.of(x, y));
                } else {
                    break;
                }
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:1010:3
            return x;
        } catch (ParseException e) {
            parseException1044 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1045);
            if (parseUnaliasedExpression30 != null) {
                if (parseException1044 == null) {
                    closeNodeScope(parseUnaliasedExpression30, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:1016:1
    final public Expression term5() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "term5";
        ASTterm5 term531 = null;
        if (buildTree) {
            term531 = new ASTterm5();
            openNodeScope(term531);
        }
        Expression x, y;
        ParseException parseException1112 = null;
        int callStackSize1113 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:1020:3
            pushOntoCallStack("term5", "ccc/mdx.ccc", 1020, 3);
            try {
                x = term4();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at ccc/mdx.ccc:1021:3
            while (true) {
                if (!(nextTokenType() == AND)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:1022:5
                consumeToken(AND);
                // Code for NonTerminal specified at ccc/mdx.ccc:1022:13
                pushOntoCallStack("term5", "ccc/mdx.ccc", 1022, 13);
                try {
                    y = term4();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1023:5
                x = new CallExpressionR("AND", CallExpression.Type.Term_Infix, List.of(x, y));
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:1030:3
            return x;
        } catch (ParseException e) {
            parseException1112 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1113);
            if (term531 != null) {
                if (parseException1112 == null) {
                    closeNodeScope(term531, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    static private final EnumSet<TokenType> term4_FIRST_SET = term4_FIRST_SET_init();

    static private EnumSet<TokenType> term4_FIRST_SET_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    // ccc/mdx.ccc:1036:1
    final public Expression term4() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "term4";
        // Code for ExpansionChoice specified at ccc/mdx.ccc:1040:3
        ASTterm4 term432 = null;
        if (buildTree) {
            term432 = new ASTterm4();
            openNodeScope(term432);
        }
        Expression x;
        ParseException parseException1144 = null;
        int callStackSize1145 = parsingStack.size();
        try {
            if (first_set$mdx_ccc$1040$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at ccc/mdx.ccc:1040:3
                pushOntoCallStack("term4", "ccc/mdx.ccc", 1040, 3);
                try {
                    x = term3();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1041:3
                return x;
            } else if (nextTokenType() == NOT) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1044:3
                consumeToken(NOT);
                // Code for NonTerminal specified at ccc/mdx.ccc:1044:11
                pushOntoCallStack("term4", "ccc/mdx.ccc", 1044, 11);
                try {
                    x = term4();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1045:3
                return new CallExpressionR("NOT", CallExpression.Type.Term_Prefix, List.of(x));
            } else {
                pushOntoCallStack("term4", "ccc/mdx.ccc", 1040, 3);
                throw new ParseException(this, term4_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException1144 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1145);
            if (term432 != null) {
                if (parseException1144 == null) {
                    closeNodeScope(term432, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:1054:1
    final public Expression term3() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "term3";
        ASTterm3 term333 = null;
        if (buildTree) {
            term333 = new ASTterm3();
            openNodeScope(term333);
        }
        Expression x, y;
        Token op;
        ParseException parseException1176 = null;
        int callStackSize1177 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:1059:3
            pushOntoCallStack("term3", "ccc/mdx.ccc", 1059, 3);
            try {
                x = term2();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at ccc/mdx.ccc:1060:3
            while (true) {
                // Code for ExpansionChoice specified at ccc/mdx.ccc:1062:5
                if (first_set$mdx_ccc$1062$5.contains(nextTokenType())) {
                    if (nextTokenType() == EQ) {
                        // Code for RegexpRef specified at ccc/mdx.ccc:1063:7
                        consumeToken(EQ);
                        // Code for CodeBlock specified at ccc/mdx.ccc:1064:7
                        op = getToken(0);
                    } else if (nextTokenType() == NE) {
                        // Code for RegexpRef specified at ccc/mdx.ccc:1067:7
                        consumeToken(NE);
                        // Code for CodeBlock specified at ccc/mdx.ccc:1068:7
                        op = getToken(0);
                    } else if (nextTokenType() == LT) {
                        // Code for RegexpRef specified at ccc/mdx.ccc:1071:7
                        consumeToken(LT);
                        // Code for CodeBlock specified at ccc/mdx.ccc:1072:7
                        op = getToken(0);
                    } else if (nextTokenType() == GT) {
                        // Code for RegexpRef specified at ccc/mdx.ccc:1075:7
                        consumeToken(GT);
                        // Code for CodeBlock specified at ccc/mdx.ccc:1076:7
                        op = getToken(0);
                    } else if (nextTokenType() == LE) {
                        // Code for RegexpRef specified at ccc/mdx.ccc:1079:7
                        consumeToken(LE);
                        // Code for CodeBlock specified at ccc/mdx.ccc:1080:7
                        op = getToken(0);
                    } else if (nextTokenType() == GE) {
                        // Code for RegexpRef specified at ccc/mdx.ccc:1083:7
                        consumeToken(GE);
                        // Code for CodeBlock specified at ccc/mdx.ccc:1084:7
                        op = getToken(0);
                    } else {
                        pushOntoCallStack("term3", "ccc/mdx.ccc", 1063, 7);
                        throw new ParseException(this, first_set$mdx_ccc$1063$7, parsingStack);
                    }
                    // Code for NonTerminal specified at ccc/mdx.ccc:1088:5
                    pushOntoCallStack("term3", "ccc/mdx.ccc", 1088, 5);
                    try {
                        y = term2();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1089:5
                    x = new CallExpressionR(op.getImage(), CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (scan$mdx_ccc$1098$5()) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1099:5
                    consumeToken(IS);
                    // Code for RegexpRef specified at ccc/mdx.ccc:1099:12
                    consumeToken(NULL);
                    // Code for CodeBlock specified at ccc/mdx.ccc:1100:5
                    x = new CallExpressionR("IS NULL", CallExpression.Type.Term_Postfix, List.of(x));
                } else if (scan$mdx_ccc$1108$5()) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1109:5
                    consumeToken(IS);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1109:12
                    pushOntoCallStack("term3", "ccc/mdx.ccc", 1109, 12);
                    try {
                        y = term2();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1110:5
                    x = new CallExpressionR("IS", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (nextTokenType() == IS) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1116:5
                    consumeToken(IS);
                    // Code for RegexpRef specified at ccc/mdx.ccc:1116:12
                    consumeToken(EMPTY);
                    // Code for CodeBlock specified at ccc/mdx.ccc:1117:5
                    x = new CallExpressionR("IS EMPTY", CallExpression.Type.Term_Postfix, List.of(x));
                } else if (nextTokenType() == MATCHES) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1121:5
                    consumeToken(MATCHES);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1121:17
                    pushOntoCallStack("term3", "ccc/mdx.ccc", 1121, 17);
                    try {
                        y = term2();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1122:5
                    x = new CallExpressionR("MATCHES", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (scan$mdx_ccc$1128$5()) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1129:5
                    consumeToken(NOT);
                    // Code for RegexpRef specified at ccc/mdx.ccc:1129:13
                    consumeToken(MATCHES);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1129:25
                    pushOntoCallStack("term3", "ccc/mdx.ccc", 1129, 25);
                    try {
                        y = term2();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1130:5
                    x = new CallExpressionR("NOT", CallExpression.Type.Term_Prefix, List.of(new CallExpressionR("MATCHES", CallExpression.Type.Term_Infix, List.of(x, y))));
                } else if (nextTokenType() == IN) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1141:5
                    consumeToken(IN);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1141:12
                    pushOntoCallStack("term3", "ccc/mdx.ccc", 1141, 12);
                    try {
                        y = term2();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1142:5
                    x = new CallExpressionR("IN", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (nextTokenType() == NOT) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1148:5
                    consumeToken(NOT);
                    // Code for RegexpRef specified at ccc/mdx.ccc:1148:13
                    consumeToken(IN);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1148:20
                    pushOntoCallStack("term3", "ccc/mdx.ccc", 1148, 20);
                    try {
                        y = term2();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1149:5
                    x = new CallExpressionR("NOT", CallExpression.Type.Term_Prefix, List.of(new CallExpressionR("IN", CallExpression.Type.Term_Infix, List.of(x, y))));
                } else {
                    break;
                }
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:1161:3
            return x;
        } catch (ParseException e) {
            parseException1176 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1177);
            if (term333 != null) {
                if (parseException1176 == null) {
                    closeNodeScope(term333, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:1167:1
    final public Expression term2() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "term2";
        ASTterm2 term234 = null;
        if (buildTree) {
            term234 = new ASTterm2();
            openNodeScope(term234);
        }
        Expression x, y;
        ParseException parseException1405 = null;
        int callStackSize1406 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:1171:3
            pushOntoCallStack("term2", "ccc/mdx.ccc", 1171, 3);
            try {
                x = term();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at ccc/mdx.ccc:1172:3
            while (true) {
                // Code for ExpansionChoice specified at ccc/mdx.ccc:1173:5
                if (nextTokenType() == PLUS) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1173:5
                    consumeToken(PLUS);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1173:14
                    pushOntoCallStack("term2", "ccc/mdx.ccc", 1173, 14);
                    try {
                        y = term();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1174:5
                    x = new CallExpressionR("+", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (nextTokenType() == MINUS) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1180:5
                    consumeToken(MINUS);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1180:15
                    pushOntoCallStack("term2", "ccc/mdx.ccc", 1180, 15);
                    try {
                        y = term();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1181:5
                    x = new CallExpressionR("-", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (nextTokenType() == CONCAT) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1187:5
                    consumeToken(CONCAT);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1187:16
                    pushOntoCallStack("term2", "ccc/mdx.ccc", 1187, 16);
                    try {
                        y = term();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1188:5
                    x = new CallExpressionR("||", CallExpression.Type.Term_Infix, List.of(x, y));
                } else {
                    break;
                }
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:1195:3
            return x;
        } catch (ParseException e) {
            parseException1405 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1406);
            if (term234 != null) {
                if (parseException1405 == null) {
                    closeNodeScope(term234, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:1201:1
    final public Expression term() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "term";
        ASTterm term35 = null;
        if (buildTree) {
            term35 = new ASTterm();
            openNodeScope(term35);
        }
        Expression x, y;
        ParseException parseException1473 = null;
        int callStackSize1474 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:1205:3
            pushOntoCallStack("term", "ccc/mdx.ccc", 1205, 3);
            try {
                x = factor();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at ccc/mdx.ccc:1206:3
            while (true) {
                // Code for ExpansionChoice specified at ccc/mdx.ccc:1207:5
                if (nextTokenType() == ASTERISK) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1207:5
                    consumeToken(ASTERISK);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1207:18
                    pushOntoCallStack("term", "ccc/mdx.ccc", 1207, 18);
                    try {
                        y = factor();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1208:5
                    x = new CallExpressionR("*", CallExpression.Type.Term_Infix, List.of(x, y));
                } else if (nextTokenType() == SOLIDUS) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1214:5
                    consumeToken(SOLIDUS);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1214:17
                    pushOntoCallStack("term", "ccc/mdx.ccc", 1214, 17);
                    try {
                        y = factor();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1215:5
                    x = new CallExpressionR("/", CallExpression.Type.Term_Infix, List.of(x, y));
                } else {
                    break;
                }
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:1222:3
            return x;
        } catch (ParseException e) {
            parseException1473 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1474);
            if (term35 != null) {
                if (parseException1473 == null) {
                    closeNodeScope(term35, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    static private final EnumSet<TokenType> factor_FIRST_SET = factor_FIRST_SET_init();

    static private EnumSet<TokenType> factor_FIRST_SET_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    // ccc/mdx.ccc:1228:1
    final public Expression factor() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "factor";
        // Code for ExpansionChoice specified at ccc/mdx.ccc:1232:3
        ASTfactor factor36 = null;
        if (buildTree) {
            factor36 = new ASTfactor();
            openNodeScope(factor36);
        }
        Expression p;
        ParseException parseException1525 = null;
        int callStackSize1526 = parsingStack.size();
        try {
            if (first_set$mdx_ccc$1232$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at ccc/mdx.ccc:1232:3
                pushOntoCallStack("factor", "ccc/mdx.ccc", 1232, 3);
                try {
                    p = primary();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1233:3
                return p;
            } else if (nextTokenType() == PLUS) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1236:3
                consumeToken(PLUS);
                // Code for NonTerminal specified at ccc/mdx.ccc:1236:12
                pushOntoCallStack("factor", "ccc/mdx.ccc", 1236, 12);
                try {
                    p = primary();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1237:3
                return p;
            } else if (nextTokenType() == MINUS) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1240:3
                consumeToken(MINUS);
                // Code for NonTerminal specified at ccc/mdx.ccc:1240:13
                pushOntoCallStack("factor", "ccc/mdx.ccc", 1240, 13);
                try {
                    p = primary();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1241:3
                return new CallExpressionR("-", CallExpression.Type.Term_Prefix, List.of(p));
            } else if (nextTokenType() == EXISTING) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1247:3
                consumeToken(EXISTING);
                // Code for NonTerminal specified at ccc/mdx.ccc:1247:16
                pushOntoCallStack("factor", "ccc/mdx.ccc", 1247, 16);
                try {
                    p = primary();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1248:3
                return new CallExpressionR("Existing", CallExpression.Type.Term_Prefix, List.of(p));
            } else {
                pushOntoCallStack("factor", "ccc/mdx.ccc", 1232, 3);
                throw new ParseException(this, factor_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException1525 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1526);
            if (factor36 != null) {
                if (parseException1525 == null) {
                    closeNodeScope(factor36, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:1257:1
    final public Expression primary() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "primary";
        ASTprimary primary37 = null;
        if (buildTree) {
            primary37 = new ASTprimary();
            openNodeScope(primary37);
        }
        Expression expression;
        ParseException parseException1589 = null;
        int callStackSize1590 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:1261:3
            pushOntoCallStack("primary", "ccc/mdx.ccc", 1261, 3);
            try {
                expression = atom();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at ccc/mdx.ccc:1262:3
            while (true) {
                if (!(nextTokenType() == DOT)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:1263:5
                consumeToken(DOT);
                // Code for NonTerminal specified at ccc/mdx.ccc:1263:13
                pushOntoCallStack("primary", "ccc/mdx.ccc", 1263, 13);
                try {
                    expression = objectIdentifierOrFuncall(expression);
                } finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:1265:3
            return expression;
        } catch (ParseException e) {
            parseException1589 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1590);
            if (primary37 != null) {
                if (parseException1589 == null) {
                    closeNodeScope(primary37, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:1271:1
    final public Expression objectIdentifierOrFuncall(Expression left) {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "objectIdentifierOrFuncall";
        ASTobjectIdentifierOrFuncall objectIdentifierOrFuncall38 = null;
        if (buildTree) {
            objectIdentifierOrFuncall38 = new ASTobjectIdentifierOrFuncall();
            openNodeScope(objectIdentifierOrFuncall38);
        }
        ObjectIdentifier objectIdentifier;
        List<Expression> argList = null;
        ParseException parseException1617 = null;
        int callStackSize1618 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:1276:3
            pushOntoCallStack("objectIdentifierOrFuncall", "ccc/mdx.ccc", 1276, 3);
            try {
                objectIdentifier = parseIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at ccc/mdx.ccc:1277:3
            if (nextTokenType() == LPAREN) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1278:5
                consumeToken(LPAREN);
                if (scan$mdx_ccc$1280$7()) {
                    // Code for CodeBlock specified at ccc/mdx.ccc:1281:7
                    argList = Collections.emptyList();
                } else {
                    // Code for NonTerminal specified at ccc/mdx.ccc:1285:7
                    pushOntoCallStack("objectIdentifierOrFuncall", "ccc/mdx.ccc", 1285, 7);
                    try {
                        argList = expOrEmptyList();
                    } finally {
                        popCallStack();
                    }
                }
                // Code for RegexpRef specified at ccc/mdx.ccc:1287:5
                consumeToken(RPAREN);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:1289:3
            return createCall(left, objectIdentifier, argList);
        } catch (ParseException e) {
            parseException1617 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1618);
            if (objectIdentifierOrFuncall38 != null) {
                if (parseException1617 == null) {
                    closeNodeScope(objectIdentifierOrFuncall38, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    static private final EnumSet<TokenType> parseNumericLiteral_FIRST_SET = tokenTypeSet(UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL);

    // ccc/mdx.ccc:1295:1
    final public NumericLiteral parseNumericLiteral() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseNumericLiteral";
        // Code for ExpansionChoice specified at ccc/mdx.ccc:1296:3
        ASTparseNumericLiteral parseNumericLiteral39 = null;
        if (buildTree) {
            parseNumericLiteral39 = new ASTparseNumericLiteral();
            openNodeScope(parseNumericLiteral39);
        }
        ParseException parseException1666 = null;
        int callStackSize1667 = parsingStack.size();
        try {
            if (nextTokenType() == DECIMAL_NUMERIC_LITERAL) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1296:3
                consumeToken(DECIMAL_NUMERIC_LITERAL);
                // Code for CodeBlock specified at ccc/mdx.ccc:1297:3
                return new NumericLiteralR(new BigDecimal(getToken(0).getImage()));
            } else if (nextTokenType() == UNSIGNED_INTEGER_LITERAL) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1300:3
                consumeToken(UNSIGNED_INTEGER_LITERAL);
                // Code for CodeBlock specified at ccc/mdx.ccc:1301:3
                return new NumericLiteralR(new BigDecimal(getToken(0).getImage()));
            } else if (nextTokenType() == APPROX_NUMERIC_LITERAL) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1304:3
                consumeToken(APPROX_NUMERIC_LITERAL);
                // Code for CodeBlock specified at ccc/mdx.ccc:1305:3
                return new NumericLiteralR(new BigDecimal(getToken(0).getImage()));
            } else {
                pushOntoCallStack("parseNumericLiteral", "ccc/mdx.ccc", 1296, 3);
                throw new ParseException(this, parseNumericLiteral_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException1666 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1667);
            if (parseNumericLiteral39 != null) {
                if (parseException1666 == null) {
                    closeNodeScope(parseNumericLiteral39, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    static private final EnumSet<TokenType> atom_FIRST_SET = atom_FIRST_SET_init();

    static private EnumSet<TokenType> atom_FIRST_SET_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NULL, PROPERTIES, LPAREN, LBRACE, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    // ccc/mdx.ccc:1311:1
    final public Expression atom() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "atom";
        // Code for ExpansionChoice specified at ccc/mdx.ccc:1317:3
        ASTatom atom40 = null;
        if (buildTree) {
            atom40 = new ASTatom();
            openNodeScope(atom40);
        }
        Expression expression;
        NameObjectIdentifier nameObjectIdentifier;
        List<Expression> expressions;
        ParseException parseException1706 = null;
        int callStackSize1707 = parsingStack.size();
        try {
            if (nextTokenType() == SINGLE_QUOTED_STRING) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1317:3
                consumeToken(SINGLE_QUOTED_STRING);
                // Code for CodeBlock specified at ccc/mdx.ccc:1318:3
                return new StringLiteralR(stripQuotes(getToken(0).getImage(), "'", "'", "''"));
            } else if (nextTokenType() == DOUBLE_QUOTED_STRING) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1321:3
                consumeToken(DOUBLE_QUOTED_STRING);
                // Code for CodeBlock specified at ccc/mdx.ccc:1322:3
                return new StringLiteralR(stripQuotes(getToken(0).getImage(), '"' + "", '"' + "", '"' + "" + '"'));
            } else if (nextTokenType() == UNSIGNED_INTEGER_LITERAL || nextTokenType == APPROX_NUMERIC_LITERAL || nextTokenType == DECIMAL_NUMERIC_LITERAL) {
                // Code for NonTerminal specified at ccc/mdx.ccc:1325:3
                pushOntoCallStack("atom", "ccc/mdx.ccc", 1325, 3);
                try {
                    expression = parseNumericLiteral();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1326:3
                return expression;
            } else if (nextTokenType() == NULL) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1329:3
                consumeToken(NULL);
                // Code for CodeBlock specified at ccc/mdx.ccc:1330:3
                return NullLiteralR.SINGLETON;
            } else if (nextTokenType() == CAST) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1333:3
                consumeToken(CAST);
                // Code for RegexpRef specified at ccc/mdx.ccc:1333:12
                consumeToken(LPAREN);
                // Code for NonTerminal specified at ccc/mdx.ccc:1333:23
                pushOntoCallStack("atom", "ccc/mdx.ccc", 1333, 23);
                try {
                    expression = parseUnaliasedExpression();
                } finally {
                    popCallStack();
                }
                // Code for RegexpRef specified at ccc/mdx.ccc:1334:3
                consumeToken(AS);
                // Code for NonTerminal specified at ccc/mdx.ccc:1334:10
                pushOntoCallStack("atom", "ccc/mdx.ccc", 1334, 10);
                try {
                    nameObjectIdentifier = parseNameObjectIdentifier();
                } finally {
                    popCallStack();
                }
                // Code for RegexpRef specified at ccc/mdx.ccc:1334:59
                consumeToken(RPAREN);
                // Code for CodeBlock specified at ccc/mdx.ccc:1335:3
                return new CallExpressionR("CAST", CallExpression.Type.Cast, List.of(expression, new SymbolLiteralR(nameObjectIdentifier.name())));
            } else if (nextTokenType() == LPAREN) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1343:3
                consumeToken(LPAREN);
                // Code for NonTerminal specified at ccc/mdx.ccc:1343:14
                pushOntoCallStack("atom", "ccc/mdx.ccc", 1343, 14);
                try {
                    expressions = expList();
                } finally {
                    popCallStack();
                }
                // Code for RegexpRef specified at ccc/mdx.ccc:1343:36
                consumeToken(RPAREN);
                // Code for CodeBlock specified at ccc/mdx.ccc:1344:3
                // Whereas ([Sales],[Time]) and () are tuples, ([Sales]) and (5)
                // are just expressions.
                return new CallExpressionR("()", CallExpression.Type.Parentheses, expressions);
            } else if (nextTokenType() == LBRACE) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1352:3
                consumeToken(LBRACE);
                if (scan$mdx_ccc$1354$5()) {
                    // Code for CodeBlock specified at ccc/mdx.ccc:1355:5
                    expressions = Collections.emptyList();
                } else if (first_set$mdx_ccc$1359$5.contains(nextTokenType())) {
                    // Code for NonTerminal specified at ccc/mdx.ccc:1359:5
                    pushOntoCallStack("atom", "ccc/mdx.ccc", 1359, 5);
                    try {
                        expressions = expList();
                    } finally {
                        popCallStack();
                    }
                } else {
                    pushOntoCallStack("atom", "ccc/mdx.ccc", 1354, 5);
                    throw new ParseException(this, first_set$mdx_ccc$1354$5, parsingStack);
                }
                // Code for RegexpRef specified at ccc/mdx.ccc:1361:3
                consumeToken(RBRACE);
                // Code for CodeBlock specified at ccc/mdx.ccc:1362:3
                return new CallExpressionR("{}", CallExpression.Type.Braces, expressions);
            } else if (nextTokenType() == CASE) {
                // Code for NonTerminal specified at ccc/mdx.ccc:1366:3
                pushOntoCallStack("atom", "ccc/mdx.ccc", 1366, 3);
                try {
                    expression = caseExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1367:3
                return expression;
            } else if (first_set$mdx_ccc$1373$3.contains(nextTokenType())) {
                // Code for NonTerminal specified at ccc/mdx.ccc:1373:3
                pushOntoCallStack("atom", "ccc/mdx.ccc", 1373, 3);
                try {
                    // Function call "foo(a, b)" or "whiz!bang!foo(a, b)".
                    // Properties "x.PROP" and methods "exp.meth(a)" are in primary().
                    nameObjectIdentifier = parseNameObjectIdentifier();
                } finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at ccc/mdx.ccc:1374:3
                while (true) {
                    if (!(nextTokenType() == BANG)) break;
                    // Code for RegexpRef specified at ccc/mdx.ccc:1375:5
                    consumeToken(BANG);
                    // Code for NonTerminal specified at ccc/mdx.ccc:1375:14
                    pushOntoCallStack("atom", "ccc/mdx.ccc", 1375, 14);
                    try {
                        nameObjectIdentifier = parseNameObjectIdentifier();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at ccc/mdx.ccc:1376:5
                    // We support the syntax for qualifying function names with package
                    // names separated by bang ('!'), e.g. 'whiz!bang!foo(a, b)'
                    // but currently we ignore the qualifiers. The previous example is
                    // equivalent to 'foo(a, b)'.
                }
                if (nextTokenType() == LPAREN) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1384:5
                    consumeToken(LPAREN);
                    if (scan$mdx_ccc$1386$7()) {
                        // Code for CodeBlock specified at ccc/mdx.ccc:1387:7
                        expressions = Collections.emptyList();
                    } else {
                        // Code for NonTerminal specified at ccc/mdx.ccc:1391:7
                        pushOntoCallStack("atom", "ccc/mdx.ccc", 1391, 7);
                        try {
                            expressions = expOrEmptyList();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for RegexpRef specified at ccc/mdx.ccc:1393:5
                    consumeToken(RPAREN);
                } else {
                    // Code for CodeBlock specified at ccc/mdx.ccc:1395:16
                    expressions = null;
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1399:3
                return createCall(null, nameObjectIdentifier, expressions);
            } else {
                pushOntoCallStack("atom", "ccc/mdx.ccc", 1317, 3);
                throw new ParseException(this, atom_FIRST_SET, parsingStack);
            }
        } catch (ParseException e) {
            parseException1706 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1707);
            if (atom40 != null) {
                if (parseException1706 == null) {
                    closeNodeScope(atom40, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:1405:1
    final public Expression caseExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "caseExpression";
        ASTcaseExpression caseExpression41 = null;
        if (buildTree) {
            caseExpression41 = new ASTcaseExpression();
            openNodeScope(caseExpression41);
        }
        Expression expression, expression2;
        List<Expression> expressions = new ArrayList<Expression>();
        boolean match = false;
        ParseException parseException1937 = null;
        int callStackSize1938 = parsingStack.size();
        try {
            // Code for RegexpRef specified at ccc/mdx.ccc:1411:3
            consumeToken(CASE);
            // Code for ZeroOrOne specified at ccc/mdx.ccc:1412:3
            if (first_set$mdx_ccc$1413$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at ccc/mdx.ccc:1413:5
                pushOntoCallStack("caseExpression", "ccc/mdx.ccc", 1413, 5);
                try {
                    expression = parseExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1414:5
                match = true;
                expressions.add(expression);
            }
            // Code for ZeroOrMore specified at ccc/mdx.ccc:1419:3
            while (true) {
                if (!(nextTokenType() == WHEN)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:1420:5
                consumeToken(WHEN);
                // Code for NonTerminal specified at ccc/mdx.ccc:1420:14
                pushOntoCallStack("caseExpression", "ccc/mdx.ccc", 1420, 14);
                try {
                    expression = parseExpression();
                } finally {
                    popCallStack();
                }
                // Code for RegexpRef specified at ccc/mdx.ccc:1420:43
                consumeToken(THEN);
                // Code for NonTerminal specified at ccc/mdx.ccc:1420:52
                pushOntoCallStack("caseExpression", "ccc/mdx.ccc", 1420, 52);
                try {
                    expression2 = parseExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1421:5
                expressions.add(expression);
                expressions.add(expression2);
            }
            // Code for ZeroOrOne specified at ccc/mdx.ccc:1426:3
            if (nextTokenType() == ELSE) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1427:5
                consumeToken(ELSE);
                // Code for NonTerminal specified at ccc/mdx.ccc:1427:14
                pushOntoCallStack("caseExpression", "ccc/mdx.ccc", 1427, 14);
                try {
                    expression = parseExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1428:5
                expressions.add(expression);
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:1432:3
            consumeToken(END);
            // Code for CodeBlock specified at ccc/mdx.ccc:1433:3
            if (match) {
                return new CallExpressionR("_CaseMatch", CallExpression.Type.Term_Case, expressions);
            } else {
                return new CallExpressionR("_CaseTest", CallExpression.Type.Term_Case, expressions);
            }
        } catch (ParseException e) {
            parseException1937 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize1938);
            if (caseExpression41 != null) {
                if (parseException1937 == null) {
                    closeNodeScope(caseExpression41, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:1449:1
    final public CreateSetBodyClause parseCreateSetBodyClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseCreateSetBodyClause";
        ASTparseCreateSetBodyClause parseCreateSetBodyClause42 = null;
        if (buildTree) {
            parseCreateSetBodyClause42 = new ASTparseCreateSetBodyClause();
            openNodeScope(parseCreateSetBodyClause42);
        }
        CompoundId compoundId = null;
        Expression expression = null;
        //List<MemberPropertyDefinition> memberPropertyDefinitions = new LinkedList<MemberPropertyDefinition>();
        //MemberPropertyDefinition memberPropertyDefinition = null;
        ParseException parseException2017 = null;
        int callStackSize2018 = parsingStack.size();
        try {
            // Code for NonTerminal specified at ccc/mdx.ccc:1457:3
            pushOntoCallStack("parseCreateSetBodyClause", "ccc/mdx.ccc", 1457, 3);
            try {
                compoundId = parseCompoundId();
            } finally {
                popCallStack();
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:1457:32
            consumeToken(AS);
            // Code for NonTerminal specified at ccc/mdx.ccc:1457:39
            pushOntoCallStack("parseCreateSetBodyClause", "ccc/mdx.ccc", 1457, 39);
            try {
                expression = parseExpression();
            } finally {
                popCallStack();
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:1458:3
            return new CreateSetBodyClauseR(compoundId, expression);
        } catch (ParseException e) {
            parseException2017 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize2018);
            if (parseCreateSetBodyClause42 != null) {
                if (parseException2017 == null) {
                    closeNodeScope(parseCreateSetBodyClause42, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:1464:1
    final public SelectDimensionPropertyListClause parseSelectDimensionPropertyListClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectDimensionPropertyListClause";
        ASTparseSelectDimensionPropertyListClause parseSelectDimensionPropertyListClause43 = null;
        if (buildTree) {
            parseSelectDimensionPropertyListClause43 = new ASTparseSelectDimensionPropertyListClause();
            openNodeScope(parseSelectDimensionPropertyListClause43);
        }
        ParseException parseException2037 = null;
        int callStackSize2038 = parsingStack.size();
        try {
            // Code for ZeroOrOne specified at ccc/mdx.ccc:1465:3
            if (nextTokenType() == DIMENSION) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1465:4
                consumeToken(DIMENSION);
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:1465:20
            consumeToken(PROPERTIES);
            // Code for NonTerminal specified at ccc/mdx.ccc:1466:3
            pushOntoCallStack("parseSelectDimensionPropertyListClause", "ccc/mdx.ccc", 1466, 3);
            try {
                parseIdentifier();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at ccc/mdx.ccc:1467:3
            while (true) {
                if (!(nextTokenType() == COMMA)) break;
                // Code for RegexpRef specified at ccc/mdx.ccc:1468:5
                consumeToken(COMMA);
                // Code for NonTerminal specified at ccc/mdx.ccc:1468:15
                pushOntoCallStack("parseSelectDimensionPropertyListClause", "ccc/mdx.ccc", 1468, 15);
                try {
                    parseIdentifier();
                } finally {
                    popCallStack();
                }
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:1470:3
            return new SelectDimensionPropertyListClauseR();
        } catch (ParseException e) {
            parseException2037 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize2038);
            if (parseSelectDimensionPropertyListClause43 != null) {
                if (parseException2037 == null) {
                    closeNodeScope(parseSelectDimensionPropertyListClause43, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    // ccc/mdx.ccc:1477:1
    final public
    // <SelectQueryAxisClause> ::= [NON EMPTY] <set> [<dimProps>] ON <axis_name>
    SelectQueryAxisClause parseSelectQueryAxisClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction = currentlyParsedProduction;
        this.currentlyParsedProduction = "parseSelectQueryAxisClause";
        ASTparseSelectQueryAxisClause parseSelectQueryAxisClause44 = null;
        if (buildTree) {
            parseSelectQueryAxisClause44 = new ASTparseSelectQueryAxisClause();
            openNodeScope(parseSelectQueryAxisClause44);
        }
        boolean nonEmpty = false;
        SelectDimensionPropertyListClause selectDimensionPropertyListClause = null;
        Expression expression;
        int n;
        Axis axis;
        ParseException parseException2081 = null;
        int callStackSize2082 = parsingStack.size();
        try {
            // Code for ZeroOrOne specified at ccc/mdx.ccc:1485:3
            if (nextTokenType() == NON) {
                // Code for RegexpRef specified at ccc/mdx.ccc:1485:4
                consumeToken(NON);
                // Code for RegexpRef specified at ccc/mdx.ccc:1485:12
                consumeToken(EMPTY);
                // Code for CodeBlock specified at ccc/mdx.ccc:1486:3
                nonEmpty = true;
            }
            // Code for NonTerminal specified at ccc/mdx.ccc:1490:3
            pushOntoCallStack("parseSelectQueryAxisClause", "ccc/mdx.ccc", 1490, 3);
            try {
                expression = parseExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at ccc/mdx.ccc:1491:3
            if (nextTokenType() == DIMENSION || nextTokenType == PROPERTIES) {
                // Code for NonTerminal specified at ccc/mdx.ccc:1492:5
                pushOntoCallStack("parseSelectQueryAxisClause", "ccc/mdx.ccc", 1492, 5);
                try {
                    selectDimensionPropertyListClause = parseSelectDimensionPropertyListClause();
                } finally {
                    popCallStack();
                }
            }
            // Code for RegexpRef specified at ccc/mdx.ccc:1494:3
            consumeToken(ON);
            if (nextTokenType() == AXIS || nextTokenType == UNSIGNED_INTEGER_LITERAL) {
                if (nextTokenType() == UNSIGNED_INTEGER_LITERAL) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1497:7
                    consumeToken(UNSIGNED_INTEGER_LITERAL);
                    // Code for CodeBlock specified at ccc/mdx.ccc:1498:7
                    n = Integer.valueOf(getToken(0).getImage()).intValue();
                } else if (nextTokenType() == AXIS) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1501:7
                    consumeToken(AXIS);
                    // Code for RegexpRef specified at ccc/mdx.ccc:1501:16
                    consumeToken(LPAREN);
                    // Code for RegexpRef specified at ccc/mdx.ccc:1501:27
                    consumeToken(UNSIGNED_INTEGER_LITERAL);
                    // Code for CodeBlock specified at ccc/mdx.ccc:1502:7
                    n = Integer.valueOf(getToken(0).getImage()).intValue();
                    // Code for RegexpRef specified at ccc/mdx.ccc:1505:7
                    consumeToken(RPAREN);
                } else {
                    pushOntoCallStack("parseSelectQueryAxisClause", "ccc/mdx.ccc", 1497, 7);
                    throw new ParseException(this, first_set$mdx_ccc$1497$7, parsingStack);
                }
                // Code for CodeBlock specified at ccc/mdx.ccc:1507:5
                if (n < 0) {
                    throw new IllegalArgumentException("Only axis numbers >= 0 allowed.");
                } else {
                    axis = AxisR.createUnnamed(n);
                }
            } else if (first_set$mdx_ccc$1518$5.contains(nextTokenType())) {
                if (nextTokenType() == COLUMNS) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1519:7
                    consumeToken(COLUMNS);
                    // Code for CodeBlock specified at ccc/mdx.ccc:1520:7
                    axis = AxisR.COLUMNS_NAMED;
                } else if (nextTokenType() == ROWS) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1523:7
                    consumeToken(ROWS);
                    // Code for CodeBlock specified at ccc/mdx.ccc:1524:7
                    axis = AxisR.ROWS_NAMED;
                } else if (nextTokenType() == PAGES) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1527:7
                    consumeToken(PAGES);
                    // Code for CodeBlock specified at ccc/mdx.ccc:1528:7
                    axis = AxisR.PAGES_NAMED;
                } else if (nextTokenType() == SECTIONS) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1531:7
                    consumeToken(SECTIONS);
                    // Code for CodeBlock specified at ccc/mdx.ccc:1532:7
                    axis = AxisR.SECTIONS_NAMED;
                } else if (nextTokenType() == CHAPTERS) {
                    // Code for RegexpRef specified at ccc/mdx.ccc:1535:7
                    consumeToken(CHAPTERS);
                    // Code for CodeBlock specified at ccc/mdx.ccc:1536:7
                    axis = AxisR.CHAPTERS_NAMED;
                } else {
                    pushOntoCallStack("parseSelectQueryAxisClause", "ccc/mdx.ccc", 1519, 7);
                    throw new ParseException(this, first_set$mdx_ccc$1519$7, parsingStack);
                }
            } else {
                pushOntoCallStack("parseSelectQueryAxisClause", "ccc/mdx.ccc", 1496, 5);
                throw new ParseException(this, first_set$mdx_ccc$1496$5, parsingStack);
            }
            // Code for CodeBlock specified at ccc/mdx.ccc:1541:3
            return new SelectQueryAxisClauseR(nonEmpty, expression, axis, selectDimensionPropertyListClause);
        } catch (ParseException e) {
            parseException2081 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize2082);
            if (parseSelectQueryAxisClause44 != null) {
                if (parseException2081 == null) {
                    closeNodeScope(parseSelectQueryAxisClause44, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction = prevProduction;
        }
    }

    static private final EnumSet<TokenType> first_set$mdx_ccc$553$5 = tokenTypeSet(CELL, MEMBER, MEASURE, SET, CALCULATED);
    static private final EnumSet<TokenType> first_set$mdx_ccc$580$8 = tokenTypeSet(CELL, MEMBER, MEASURE, SET, CALCULATED);
    static private final EnumSet<TokenType> first_set$mdx_ccc$591$5 = first_set$mdx_ccc$591$5_init();

    static private EnumSet<TokenType> first_set$mdx_ccc$591$5_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NON, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_ccc$615$5$ = tokenTypeSet(DIMENSION, PROPERTIES, LPAREN, ATSIGN, ID, QUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_ccc$615$5 = tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_ccc$647$7 = first_set$mdx_ccc$647$7_init();

    static private EnumSet<TokenType> first_set$mdx_ccc$647$7_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NON, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_ccc$797$3 = first_set$mdx_ccc$797$3_init();

    static private EnumSet<TokenType> first_set$mdx_ccc$797$3_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_ccc$872$5$ = tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID, AMP_QUOTED_ID, AMP_UNQUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_ccc$872$5 = tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_ccc$946$5 = tokenTypeSet(DIMENSION, PROPERTIES);
    static private final EnumSet<TokenType> first_set$mdx_ccc$1040$3 = first_set$mdx_ccc$1040$3_init();

    static private EnumSet<TokenType> first_set$mdx_ccc$1040$3_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_ccc$1062$5 = tokenTypeSet(EQ, GE, GT, LE, LT, NE);
    static private final EnumSet<TokenType> first_set$mdx_ccc$1063$7 = tokenTypeSet(EQ, GE, GT, LE, LT, NE);
    static private final EnumSet<TokenType> first_set$mdx_ccc$1232$3 = first_set$mdx_ccc$1232$3_init();

    static private EnumSet<TokenType> first_set$mdx_ccc$1232$3_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NULL, PROPERTIES, LPAREN, LBRACE, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_ccc$1354$5 = first_set$mdx_ccc$1354$5_init();

    static private EnumSet<TokenType> first_set$mdx_ccc$1354$5_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, RBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_ccc$1359$5 = first_set$mdx_ccc$1359$5_init();

    static private EnumSet<TokenType> first_set$mdx_ccc$1359$5_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_ccc$1373$3 = tokenTypeSet(DIMENSION, PROPERTIES, ATSIGN, ID, QUOTED_ID);
    static private final EnumSet<TokenType> first_set$mdx_ccc$1413$5 = first_set$mdx_ccc$1413$5_init();

    static private EnumSet<TokenType> first_set$mdx_ccc$1413$5_init() {
        return tokenTypeSet(CASE, CAST, DIMENSION, NOT, NULL, PROPERTIES, EXISTING, LPAREN, LBRACE, MINUS, PLUS, ATSIGN, ID, QUOTED_ID, UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL, SINGLE_QUOTED_STRING, DOUBLE_QUOTED_STRING);
    }

    static private final EnumSet<TokenType> first_set$mdx_ccc$1496$5 = tokenTypeSet(AXIS, CHAPTERS, COLUMNS, PAGES, ROWS, SECTIONS, UNSIGNED_INTEGER_LITERAL);
    static private final EnumSet<TokenType> first_set$mdx_ccc$1497$7 = tokenTypeSet(AXIS, UNSIGNED_INTEGER_LITERAL);
    static private final EnumSet<TokenType> first_set$mdx_ccc$1518$5 = tokenTypeSet(CHAPTERS, COLUMNS, PAGES, ROWS, SECTIONS);
    static private final EnumSet<TokenType> first_set$mdx_ccc$1519$7 = tokenTypeSet(CHAPTERS, COLUMNS, PAGES, ROWS, SECTIONS);

    private final boolean scanToken(TokenType expectedType, TokenType...additionalTypes) {
        Token peekedToken = nextToken(currentLookaheadToken);
        TokenType type = peekedToken.getType();
        if (type != expectedType) {
            boolean matched = false;
            for (TokenType tt : additionalTypes) {
                if (type == tt) {
                    matched = true;
                    break;
                }
            }
            if (!matched) return false;
        }
        --remainingLookahead;
        currentLookaheadToken = peekedToken;
        return true;
    }

    private final boolean scanToken(EnumSet<TokenType> types) {
        Token peekedToken = nextToken(currentLookaheadToken);
        TokenType type = peekedToken.getType();
        if (!types.contains(type)) return false;
        --remainingLookahead;
        currentLookaheadToken = peekedToken;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:778:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$778$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:778:5
            if (!scanToken(AS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:778:12
            // NonTerminal parseIdentifier at ccc/mdx.ccc:778:12
            pushOntoLookaheadStack("parseExpression", "ccc/mdx.ccc", 778, 12);
            currentLookaheadProduction = "parseIdentifier";
            try {
                if (!check$parseIdentifier(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:779:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:797:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$797$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:797:3
            // NonTerminal parseExpression at ccc/mdx.ccc:797:3
            pushOntoLookaheadStack("expressionOrEmpty", "ccc/mdx.ccc", 797, 3);
            currentLookaheadProduction = "parseExpression";
            try {
                if (!check$parseExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:798:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:802:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$802$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:802:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:821:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$821$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:821:5
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:822:5
            // NonTerminal expressionOrEmpty at ccc/mdx.ccc:822:5
            pushOntoLookaheadStack("expOrEmptyList", "ccc/mdx.ccc", 822, 5);
            currentLookaheadProduction = "expressionOrEmpty";
            try {
                if (!check$expressionOrEmpty(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:823:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:844:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$844$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:844:5
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:845:5
            // NonTerminal parseExpression at ccc/mdx.ccc:845:5
            pushOntoLookaheadStack("expList", "ccc/mdx.ccc", 845, 5);
            currentLookaheadProduction = "parseExpression";
            try {
                if (!check$parseExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:846:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:872:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$872$5$(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:872:5
            // NonTerminal parseNameObjectIdentifier at ccc/mdx.ccc:872:5
            pushOntoLookaheadStack("parseIdentifier", "ccc/mdx.ccc", 872, 5);
            currentLookaheadProduction = "parseNameObjectIdentifier";
            try {
                if (!check$parseNameObjectIdentifier(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:874:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$874$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:874:5
            // NonTerminal parseKeyIdentifier at ccc/mdx.ccc:874:5
            pushOntoLookaheadStack("parseIdentifier", "ccc/mdx.ccc", 874, 5);
            currentLookaheadProduction = "parseKeyIdentifier";
            try {
                if (!check$parseKeyIdentifier(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:895:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$895$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:895:3
            if (!scanToken(ATSIGN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:895:14
            if (!scanToken(ID)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:896:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:986:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$986$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:986:5
            Token token2365 = currentLookaheadToken;
            int remainingLookahead2365 = remainingLookahead;
            boolean hitFailure2365 = hitFailure, passedPredicate2365 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$mdx_ccc$986$5$(false)) {
                    currentLookaheadToken = token2365;
                    remainingLookahead = remainingLookahead2365;
                    hitFailure = hitFailure2365;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$mdx_ccc$993$5(false)) {
                        currentLookaheadToken = token2365;
                        remainingLookahead = remainingLookahead2365;
                        hitFailure = hitFailure2365;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$mdx_ccc$1002$5(false)) {
                            currentLookaheadToken = token2365;
                            remainingLookahead = remainingLookahead2365;
                            hitFailure = hitFailure2365;
                            return false;
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate2365;
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:986:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$986$5$(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:986:5
            if (!scanToken(OR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:986:12
            // NonTerminal term5 at ccc/mdx.ccc:986:12
            pushOntoLookaheadStack("parseUnaliasedExpression", "ccc/mdx.ccc", 986, 12);
            currentLookaheadProduction = "term5";
            try {
                if (!check$term5(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:987:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:993:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$993$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:993:5
            if (!scanToken(XOR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:993:13
            // NonTerminal term5 at ccc/mdx.ccc:993:13
            pushOntoLookaheadStack("parseUnaliasedExpression", "ccc/mdx.ccc", 993, 13);
            currentLookaheadProduction = "term5";
            try {
                if (!check$term5(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:994:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1002:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1002$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1002:5
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1002:15
            // NonTerminal term5 at ccc/mdx.ccc:1002:15
            pushOntoLookaheadStack("parseUnaliasedExpression", "ccc/mdx.ccc", 1002, 15);
            currentLookaheadProduction = "term5";
            try {
                if (!check$term5(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1003:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1022:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1022$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1022:5
            if (!scanToken(AND)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1022:13
            // NonTerminal term4 at ccc/mdx.ccc:1022:13
            pushOntoLookaheadStack("term5", "ccc/mdx.ccc", 1022, 13);
            currentLookaheadProduction = "term4";
            try {
                if (!check$term4(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1023:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1040:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1040$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1040:3
            // NonTerminal term3 at ccc/mdx.ccc:1040:3
            pushOntoLookaheadStack("term4", "ccc/mdx.ccc", 1040, 3);
            currentLookaheadProduction = "term3";
            try {
                if (!check$term3(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1041:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1044:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1044$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1044:3
            if (!scanToken(NOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1044:11
            // NonTerminal term4 at ccc/mdx.ccc:1044:11
            pushOntoLookaheadStack("term4", "ccc/mdx.ccc", 1044, 11);
            currentLookaheadProduction = "term4";
            try {
                if (!check$term4(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1045:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1062:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1062$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:1062:5
            Token token2390 = currentLookaheadToken;
            int remainingLookahead2390 = remainingLookahead;
            boolean hitFailure2390 = hitFailure, passedPredicate2390 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$mdx_ccc$1062$5$(false)) {
                    currentLookaheadToken = token2390;
                    remainingLookahead = remainingLookahead2390;
                    hitFailure = hitFailure2390;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$mdx_ccc$1098$5(false)) {
                        currentLookaheadToken = token2390;
                        remainingLookahead = remainingLookahead2390;
                        hitFailure = hitFailure2390;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$mdx_ccc$1108$5(false)) {
                            currentLookaheadToken = token2390;
                            remainingLookahead = remainingLookahead2390;
                            hitFailure = hitFailure2390;
                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                            passedPredicate = false;
                            if (!check$mdx_ccc$1116$5(false)) {
                                currentLookaheadToken = token2390;
                                remainingLookahead = remainingLookahead2390;
                                hitFailure = hitFailure2390;
                                if (passedPredicate && !legacyGlitchyLookahead) return false;
                                passedPredicate = false;
                                if (!check$mdx_ccc$1121$5(false)) {
                                    currentLookaheadToken = token2390;
                                    remainingLookahead = remainingLookahead2390;
                                    hitFailure = hitFailure2390;
                                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                                    passedPredicate = false;
                                    if (!check$mdx_ccc$1128$5(false)) {
                                        currentLookaheadToken = token2390;
                                        remainingLookahead = remainingLookahead2390;
                                        hitFailure = hitFailure2390;
                                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                                        passedPredicate = false;
                                        if (!check$mdx_ccc$1141$5(false)) {
                                            currentLookaheadToken = token2390;
                                            remainingLookahead = remainingLookahead2390;
                                            hitFailure = hitFailure2390;
                                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                                            passedPredicate = false;
                                            if (!check$mdx_ccc$1148$5(false)) {
                                                currentLookaheadToken = token2390;
                                                remainingLookahead = remainingLookahead2390;
                                                hitFailure = hitFailure2390;
                                                return false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate2390;
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1062:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1062$5$(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:1063:7
            if (!scanToken(first_set$mdx_ccc$1063$7)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1088:5
            // NonTerminal term2 at ccc/mdx.ccc:1088:5
            pushOntoLookaheadStack("term3", "ccc/mdx.ccc", 1088, 5);
            currentLookaheadProduction = "term2";
            try {
                if (!check$term2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1089:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1098:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1098$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1099:5
            if (!scanToken(IS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1099:12
            if (!scanToken(NULL)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1100:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1108:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1108$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1109:5
            if (!scanToken(IS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1109:12
            // NonTerminal term2 at ccc/mdx.ccc:1109:12
            pushOntoLookaheadStack("term3", "ccc/mdx.ccc", 1109, 12);
            currentLookaheadProduction = "term2";
            try {
                if (!check$term2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1110:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1116:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1116$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1116:5
            if (!scanToken(IS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1116:12
            if (!scanToken(EMPTY)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1117:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1121:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1121$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1121:5
            if (!scanToken(MATCHES)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1121:17
            // NonTerminal term2 at ccc/mdx.ccc:1121:17
            pushOntoLookaheadStack("term3", "ccc/mdx.ccc", 1121, 17);
            currentLookaheadProduction = "term2";
            try {
                if (!check$term2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1122:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1128:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1128$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1129:5
            if (!scanToken(NOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1129:13
            if (!scanToken(MATCHES)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1129:25
            // NonTerminal term2 at ccc/mdx.ccc:1129:25
            pushOntoLookaheadStack("term3", "ccc/mdx.ccc", 1129, 25);
            currentLookaheadProduction = "term2";
            try {
                if (!check$term2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1130:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1141:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1141$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1141:5
            if (!scanToken(IN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1141:12
            // NonTerminal term2 at ccc/mdx.ccc:1141:12
            pushOntoLookaheadStack("term3", "ccc/mdx.ccc", 1141, 12);
            currentLookaheadProduction = "term2";
            try {
                if (!check$term2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1142:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1148:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1148$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1148:5
            if (!scanToken(NOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1148:13
            if (!scanToken(IN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1148:20
            // NonTerminal term2 at ccc/mdx.ccc:1148:20
            pushOntoLookaheadStack("term3", "ccc/mdx.ccc", 1148, 20);
            currentLookaheadProduction = "term2";
            try {
                if (!check$term2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1149:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1173:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1173$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:1173:5
            Token token2427 = currentLookaheadToken;
            int remainingLookahead2427 = remainingLookahead;
            boolean hitFailure2427 = hitFailure, passedPredicate2427 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$mdx_ccc$1173$5$(false)) {
                    currentLookaheadToken = token2427;
                    remainingLookahead = remainingLookahead2427;
                    hitFailure = hitFailure2427;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$mdx_ccc$1180$5(false)) {
                        currentLookaheadToken = token2427;
                        remainingLookahead = remainingLookahead2427;
                        hitFailure = hitFailure2427;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$mdx_ccc$1187$5(false)) {
                            currentLookaheadToken = token2427;
                            remainingLookahead = remainingLookahead2427;
                            hitFailure = hitFailure2427;
                            return false;
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate2427;
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1173:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1173$5$(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1173:5
            if (!scanToken(PLUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1173:14
            // NonTerminal term at ccc/mdx.ccc:1173:14
            pushOntoLookaheadStack("term2", "ccc/mdx.ccc", 1173, 14);
            currentLookaheadProduction = "term";
            try {
                if (!check$term(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1174:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1180:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1180$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1180:5
            if (!scanToken(MINUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1180:15
            // NonTerminal term at ccc/mdx.ccc:1180:15
            pushOntoLookaheadStack("term2", "ccc/mdx.ccc", 1180, 15);
            currentLookaheadProduction = "term";
            try {
                if (!check$term(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1181:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1187:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1187$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1187:5
            if (!scanToken(CONCAT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1187:16
            // NonTerminal term at ccc/mdx.ccc:1187:16
            pushOntoLookaheadStack("term2", "ccc/mdx.ccc", 1187, 16);
            currentLookaheadProduction = "term";
            try {
                if (!check$term(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1188:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1207:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1207$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:1207:5
            Token token2441 = currentLookaheadToken;
            int remainingLookahead2441 = remainingLookahead;
            boolean hitFailure2441 = hitFailure, passedPredicate2441 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$mdx_ccc$1207$5$(false)) {
                    currentLookaheadToken = token2441;
                    remainingLookahead = remainingLookahead2441;
                    hitFailure = hitFailure2441;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$mdx_ccc$1214$5(false)) {
                        currentLookaheadToken = token2441;
                        remainingLookahead = remainingLookahead2441;
                        hitFailure = hitFailure2441;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2441;
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1207:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1207$5$(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1207:5
            if (!scanToken(ASTERISK)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1207:18
            // NonTerminal factor at ccc/mdx.ccc:1207:18
            pushOntoLookaheadStack("term", "ccc/mdx.ccc", 1207, 18);
            currentLookaheadProduction = "factor";
            try {
                if (!check$factor(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1208:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1214:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1214$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1214:5
            if (!scanToken(SOLIDUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1214:17
            // NonTerminal factor at ccc/mdx.ccc:1214:17
            pushOntoLookaheadStack("term", "ccc/mdx.ccc", 1214, 17);
            currentLookaheadProduction = "factor";
            try {
                if (!check$factor(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1215:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1232:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1232$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1232:3
            // NonTerminal primary at ccc/mdx.ccc:1232:3
            pushOntoLookaheadStack("factor", "ccc/mdx.ccc", 1232, 3);
            currentLookaheadProduction = "primary";
            try {
                if (!check$primary(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1233:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1236:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1236$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1236:3
            if (!scanToken(PLUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1236:12
            // NonTerminal primary at ccc/mdx.ccc:1236:12
            pushOntoLookaheadStack("factor", "ccc/mdx.ccc", 1236, 12);
            currentLookaheadProduction = "primary";
            try {
                if (!check$primary(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1237:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1240:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1240$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1240:3
            if (!scanToken(MINUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1240:13
            // NonTerminal primary at ccc/mdx.ccc:1240:13
            pushOntoLookaheadStack("factor", "ccc/mdx.ccc", 1240, 13);
            currentLookaheadProduction = "primary";
            try {
                if (!check$primary(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1241:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1247:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1247$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1247:3
            if (!scanToken(EXISTING)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1247:16
            // NonTerminal primary at ccc/mdx.ccc:1247:16
            pushOntoLookaheadStack("factor", "ccc/mdx.ccc", 1247, 16);
            currentLookaheadProduction = "primary";
            try {
                if (!check$primary(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1248:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1263:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1263$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1263:5
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1263:13
            // NonTerminal objectIdentifierOrFuncall at ccc/mdx.ccc:1263:13
            pushOntoLookaheadStack("primary", "ccc/mdx.ccc", 1263, 13);
            currentLookaheadProduction = "objectIdentifierOrFuncall";
            try {
                if (!check$objectIdentifierOrFuncall(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1278:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1278$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1278:5
            if (!scanToken(LPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:1280:7
            Token token2472 = currentLookaheadToken;
            int remainingLookahead2472 = remainingLookahead;
            boolean hitFailure2472 = hitFailure, passedPredicate2472 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$mdx_ccc$1280$7(false)) {
                    currentLookaheadToken = token2472;
                    remainingLookahead = remainingLookahead2472;
                    hitFailure = hitFailure2472;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$mdx_ccc$1285$7(false)) {
                        currentLookaheadToken = token2472;
                        remainingLookahead = remainingLookahead2472;
                        hitFailure = hitFailure2472;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2472;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1287:5
            if (!scanToken(RPAREN)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1280:7
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1280$7(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$mdx_ccc$1280$12(true)) return false;
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1281:7
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1285:7
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1285$7(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1285:7
            // NonTerminal expOrEmptyList at ccc/mdx.ccc:1285:7
            pushOntoLookaheadStack("objectIdentifierOrFuncall", "ccc/mdx.ccc", 1285, 7);
            currentLookaheadProduction = "expOrEmptyList";
            try {
                if (!check$expOrEmptyList(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1333:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1333$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1333:3
            if (!scanToken(CAST)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1333:12
            if (!scanToken(LPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1333:23
            // NonTerminal parseUnaliasedExpression at ccc/mdx.ccc:1333:23
            pushOntoLookaheadStack("atom", "ccc/mdx.ccc", 1333, 23);
            currentLookaheadProduction = "parseUnaliasedExpression";
            try {
                if (!check$parseUnaliasedExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1334:3
            if (!scanToken(AS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1334:10
            // NonTerminal parseNameObjectIdentifier at ccc/mdx.ccc:1334:10
            pushOntoLookaheadStack("atom", "ccc/mdx.ccc", 1334, 10);
            currentLookaheadProduction = "parseNameObjectIdentifier";
            try {
                if (!check$parseNameObjectIdentifier(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1334:59
            if (!scanToken(RPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1335:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1343:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1343$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1343:3
            if (!scanToken(LPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1343:14
            // NonTerminal expList at ccc/mdx.ccc:1343:14
            pushOntoLookaheadStack("atom", "ccc/mdx.ccc", 1343, 14);
            currentLookaheadProduction = "expList";
            try {
                if (!check$expList(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1343:36
            if (!scanToken(RPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1344:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1352:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1352$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1352:3
            if (!scanToken(LBRACE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:1354:5
            Token token2495 = currentLookaheadToken;
            int remainingLookahead2495 = remainingLookahead;
            boolean hitFailure2495 = hitFailure, passedPredicate2495 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$mdx_ccc$1354$5(false)) {
                    currentLookaheadToken = token2495;
                    remainingLookahead = remainingLookahead2495;
                    hitFailure = hitFailure2495;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$mdx_ccc$1359$5(false)) {
                        currentLookaheadToken = token2495;
                        remainingLookahead = remainingLookahead2495;
                        hitFailure = hitFailure2495;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2495;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1361:3
            if (!scanToken(RBRACE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1362:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1354:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1354$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$mdx_ccc$1354$10(true)) return false;
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1355:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1359:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1359$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1359:5
            // NonTerminal expList at ccc/mdx.ccc:1359:5
            pushOntoLookaheadStack("atom", "ccc/mdx.ccc", 1359, 5);
            currentLookaheadProduction = "expList";
            try {
                if (!check$expList(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1366:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1366$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1366:3
            // NonTerminal caseExpression at ccc/mdx.ccc:1366:3
            pushOntoLookaheadStack("atom", "ccc/mdx.ccc", 1366, 3);
            currentLookaheadProduction = "caseExpression";
            try {
                if (!check$caseExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1367:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1373:3
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1373$3(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1373:3
            // NonTerminal parseNameObjectIdentifier at ccc/mdx.ccc:1373:3
            pushOntoLookaheadStack("atom", "ccc/mdx.ccc", 1373, 3);
            currentLookaheadProduction = "parseNameObjectIdentifier";
            try {
                if (!check$parseNameObjectIdentifier(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:1374:3
            boolean passedPredicate2508 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token2509 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$mdx_ccc$1375$5(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token2509;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2508;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:1384:5
            Token token2512 = currentLookaheadToken;
            int remainingLookahead2512 = remainingLookahead;
            boolean hitFailure2512 = hitFailure, passedPredicate2512 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$mdx_ccc$1384$5(false)) {
                    currentLookaheadToken = token2512;
                    remainingLookahead = remainingLookahead2512;
                    hitFailure = hitFailure2512;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$mdx_ccc$1395$16(false)) {
                        currentLookaheadToken = token2512;
                        remainingLookahead = remainingLookahead2512;
                        hitFailure = hitFailure2512;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2512;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1399:3
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1375:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1375$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1375:5
            if (!scanToken(BANG)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1375:14
            // NonTerminal parseNameObjectIdentifier at ccc/mdx.ccc:1375:14
            pushOntoLookaheadStack("atom", "ccc/mdx.ccc", 1375, 14);
            currentLookaheadProduction = "parseNameObjectIdentifier";
            try {
                if (!check$parseNameObjectIdentifier(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1376:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1384:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1384$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1384:5
            if (!scanToken(LPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:1386:7
            Token token2522 = currentLookaheadToken;
            int remainingLookahead2522 = remainingLookahead;
            boolean hitFailure2522 = hitFailure, passedPredicate2522 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$mdx_ccc$1386$7(false)) {
                    currentLookaheadToken = token2522;
                    remainingLookahead = remainingLookahead2522;
                    hitFailure = hitFailure2522;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$mdx_ccc$1391$7(false)) {
                        currentLookaheadToken = token2522;
                        remainingLookahead = remainingLookahead2522;
                        hitFailure = hitFailure2522;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate2522;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1393:5
            if (!scanToken(RPAREN)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1386:7
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1386$7(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$mdx_ccc$1386$12(true)) return false;
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1387:7
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1391:7
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1391$7(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1391:7
            // NonTerminal expOrEmptyList at ccc/mdx.ccc:1391:7
            pushOntoLookaheadStack("atom", "ccc/mdx.ccc", 1391, 7);
            currentLookaheadProduction = "expOrEmptyList";
            try {
                if (!check$expOrEmptyList(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1395:16
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1395$16(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1395:16
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1413:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1413$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1413:5
            // NonTerminal parseExpression at ccc/mdx.ccc:1413:5
            pushOntoLookaheadStack("caseExpression", "ccc/mdx.ccc", 1413, 5);
            currentLookaheadProduction = "parseExpression";
            try {
                if (!check$parseExpression(false)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1414:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1420:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1420$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1420:5
            if (!scanToken(WHEN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1420:14
            // NonTerminal parseExpression at ccc/mdx.ccc:1420:14
            pushOntoLookaheadStack("caseExpression", "ccc/mdx.ccc", 1420, 14);
            currentLookaheadProduction = "parseExpression";
            try {
                if (!check$parseExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1420:43
            if (!scanToken(THEN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1420:52
            // NonTerminal parseExpression at ccc/mdx.ccc:1420:52
            pushOntoLookaheadStack("caseExpression", "ccc/mdx.ccc", 1420, 52);
            currentLookaheadProduction = "parseExpression";
            try {
                if (!check$parseExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1421:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // ccc/mdx.ccc:1427:5
    // BuildScanRoutine macro
    private final boolean check$mdx_ccc$1427$5(boolean scanToEnd) {
        boolean $reachedScanCode$ = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$ = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1427:5
            if (!scanToken(ELSE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1427:14
            // NonTerminal parseExpression at ccc/mdx.ccc:1427:14
            pushOntoLookaheadStack("caseExpression", "ccc/mdx.ccc", 1427, 14);
            currentLookaheadProduction = "parseExpression";
            try {
                if (!check$parseExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1428:5
        } finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$ && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // BuildPredicateRoutine: expansion at ccc/mdx.ccc:966:5
    private final boolean scan$mdx_ccc$966$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$mdx_ccc$966$10(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at ccc/mdx.ccc:1098:5
    private final boolean scan$mdx_ccc$1098$5() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1099:5
            if (!scanToken(IS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1099:12
            if (!scanToken(NULL)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1100:5
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at ccc/mdx.ccc:1108:5
    private final boolean scan$mdx_ccc$1108$5() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1109:5
            if (!scanToken(IS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1109:12
            // NonTerminal term2 at ccc/mdx.ccc:1109:12
            pushOntoLookaheadStack("term3", "ccc/mdx.ccc", 1109, 12);
            currentLookaheadProduction = "term2";
            try {
                if (!check$term2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1110:5
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at ccc/mdx.ccc:1128:5
    private final boolean scan$mdx_ccc$1128$5() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1129:5
            if (!scanToken(NOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1129:13
            if (!scanToken(MATCHES)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1129:25
            // NonTerminal term2 at ccc/mdx.ccc:1129:25
            pushOntoLookaheadStack("term3", "ccc/mdx.ccc", 1129, 25);
            currentLookaheadProduction = "term2";
            try {
                if (!check$term2(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1130:5
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at ccc/mdx.ccc:1280:7
    private final boolean scan$mdx_ccc$1280$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$mdx_ccc$1280$12(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at ccc/mdx.ccc:1354:5
    private final boolean scan$mdx_ccc$1354$5() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$mdx_ccc$1354$10(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at ccc/mdx.ccc:1386:7
    private final boolean scan$mdx_ccc$1386$7() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$mdx_ccc$1386$12(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // lookahead routine for lookahead at:
    // ccc/mdx.ccc:966:5
    private final boolean check$mdx_ccc$966$10(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(DOT)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // ccc/mdx.ccc:1280:7
    private final boolean check$mdx_ccc$1280$12(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RPAREN)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // ccc/mdx.ccc:1354:5
    private final boolean check$mdx_ccc$1354$10(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RBRACE)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // ccc/mdx.ccc:1386:7
    private final boolean check$mdx_ccc$1386$12(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(RPAREN)) return false;
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:776:3
        // NonTerminal parseUnaliasedExpression at ccc/mdx.ccc:776:3
        pushOntoLookaheadStack("parseExpression", "ccc/mdx.ccc", 776, 3);
        currentLookaheadProduction = "parseUnaliasedExpression";
        try {
            if (!check$parseUnaliasedExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:777:3
        boolean passedPredicate2708 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2709 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$mdx_ccc$778$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2709;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2708;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:787:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$expressionOrEmpty(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:797:3
        Token token2712 = currentLookaheadToken;
        int remainingLookahead2712 = remainingLookahead;
        boolean hitFailure2712 = hitFailure, passedPredicate2712 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$mdx_ccc$797$3(false)) {
                currentLookaheadToken = token2712;
                remainingLookahead = remainingLookahead2712;
                hitFailure = hitFailure2712;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$mdx_ccc$802$3(false)) {
                    currentLookaheadToken = token2712;
                    remainingLookahead = remainingLookahead2712;
                    hitFailure = hitFailure2712;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2712;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$expOrEmptyList(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:816:3
        // NonTerminal expressionOrEmpty at ccc/mdx.ccc:816:3
        pushOntoLookaheadStack("expOrEmptyList", "ccc/mdx.ccc", 816, 3);
        currentLookaheadProduction = "expressionOrEmpty";
        try {
            if (!check$expressionOrEmpty(true)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:817:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:820:3
        boolean passedPredicate2717 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2718 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$mdx_ccc$821$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2718;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2717;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:827:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$expList(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:839:3
        // NonTerminal parseExpression at ccc/mdx.ccc:839:3
        pushOntoLookaheadStack("expList", "ccc/mdx.ccc", 839, 3);
        currentLookaheadProduction = "parseExpression";
        try {
            if (!check$parseExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:840:3
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:843:3
        boolean passedPredicate2724 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2725 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$mdx_ccc$844$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2725;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2724;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:850:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseIdentifier(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:872:5
        Token token2734 = currentLookaheadToken;
        int remainingLookahead2734 = remainingLookahead;
        boolean hitFailure2734 = hitFailure, passedPredicate2734 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$mdx_ccc$872$5$(false)) {
                currentLookaheadToken = token2734;
                remainingLookahead = remainingLookahead2734;
                hitFailure = hitFailure2734;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$mdx_ccc$874$5(false)) {
                    currentLookaheadToken = token2734;
                    remainingLookahead = remainingLookahead2734;
                    hitFailure = hitFailure2734;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2734;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:876:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseNameObjectIdentifier(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:886:3
        Token token2737 = currentLookaheadToken;
        int remainingLookahead2737 = remainingLookahead;
        boolean hitFailure2737 = hitFailure, passedPredicate2737 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(DIMENSION, PROPERTIES)) {
                currentLookaheadToken = token2737;
                remainingLookahead = remainingLookahead2737;
                hitFailure = hitFailure2737;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!scanToken(ID)) {
                    currentLookaheadToken = token2737;
                    remainingLookahead = remainingLookahead2737;
                    hitFailure = hitFailure2737;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$mdx_ccc$895$3(false)) {
                        currentLookaheadToken = token2737;
                        remainingLookahead = remainingLookahead2737;
                        hitFailure = hitFailure2737;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!scanToken(QUOTED_ID)) {
                            currentLookaheadToken = token2737;
                            remainingLookahead = remainingLookahead2737;
                            hitFailure = hitFailure2737;
                            return false;
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2737;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseKeyIdentifier(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for OneOrMore specified at ccc/mdx.ccc:914:3
        if (!scanToken(AMP_QUOTED_ID, AMP_UNQUOTED_ID)) return false;
        boolean passedPredicate2741 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2742 = currentLookaheadToken;
                passedPredicate = false;
                if (!scanToken(AMP_QUOTED_ID, AMP_UNQUOTED_ID)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2742;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2741;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:920:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$parseUnaliasedExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:984:3
        // NonTerminal term5 at ccc/mdx.ccc:984:3
        pushOntoLookaheadStack("parseUnaliasedExpression", "ccc/mdx.ccc", 984, 3);
        currentLookaheadProduction = "term5";
        try {
            if (!check$term5(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:985:3
        boolean passedPredicate2756 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2757 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$mdx_ccc$986$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2757;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2756;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1010:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$term5(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1020:3
        // NonTerminal term4 at ccc/mdx.ccc:1020:3
        pushOntoLookaheadStack("term5", "ccc/mdx.ccc", 1020, 3);
        currentLookaheadProduction = "term4";
        try {
            if (!check$term4(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:1021:3
        boolean passedPredicate2762 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2763 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$mdx_ccc$1022$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2763;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2762;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1030:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$term4(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:1040:3
        Token token2766 = currentLookaheadToken;
        int remainingLookahead2766 = remainingLookahead;
        boolean hitFailure2766 = hitFailure, passedPredicate2766 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$mdx_ccc$1040$3(false)) {
                currentLookaheadToken = token2766;
                remainingLookahead = remainingLookahead2766;
                hitFailure = hitFailure2766;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$mdx_ccc$1044$3(false)) {
                    currentLookaheadToken = token2766;
                    remainingLookahead = remainingLookahead2766;
                    hitFailure = hitFailure2766;
                    return false;
                }
            }
        } finally {
            passedPredicate = passedPredicate2766;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$term3(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1059:3
        // NonTerminal term2 at ccc/mdx.ccc:1059:3
        pushOntoLookaheadStack("term3", "ccc/mdx.ccc", 1059, 3);
        currentLookaheadProduction = "term2";
        try {
            if (!check$term2(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:1060:3
        boolean passedPredicate2770 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2771 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$mdx_ccc$1062$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2771;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2770;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1161:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$term2(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1171:3
        // NonTerminal term at ccc/mdx.ccc:1171:3
        pushOntoLookaheadStack("term2", "ccc/mdx.ccc", 1171, 3);
        currentLookaheadProduction = "term";
        try {
            if (!check$term(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:1172:3
        boolean passedPredicate2776 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2777 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$mdx_ccc$1173$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2777;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2776;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1195:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$term(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1205:3
        // NonTerminal factor at ccc/mdx.ccc:1205:3
        pushOntoLookaheadStack("term", "ccc/mdx.ccc", 1205, 3);
        currentLookaheadProduction = "factor";
        try {
            if (!check$factor(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:1206:3
        boolean passedPredicate2782 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2783 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$mdx_ccc$1207$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2783;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2782;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1222:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$factor(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:1232:3
        Token token2786 = currentLookaheadToken;
        int remainingLookahead2786 = remainingLookahead;
        boolean hitFailure2786 = hitFailure, passedPredicate2786 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$mdx_ccc$1232$3(false)) {
                currentLookaheadToken = token2786;
                remainingLookahead = remainingLookahead2786;
                hitFailure = hitFailure2786;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$mdx_ccc$1236$3(false)) {
                    currentLookaheadToken = token2786;
                    remainingLookahead = remainingLookahead2786;
                    hitFailure = hitFailure2786;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$mdx_ccc$1240$3(false)) {
                        currentLookaheadToken = token2786;
                        remainingLookahead = remainingLookahead2786;
                        hitFailure = hitFailure2786;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$mdx_ccc$1247$3(false)) {
                            currentLookaheadToken = token2786;
                            remainingLookahead = remainingLookahead2786;
                            hitFailure = hitFailure2786;
                            return false;
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2786;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$primary(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1261:3
        // NonTerminal atom at ccc/mdx.ccc:1261:3
        pushOntoLookaheadStack("primary", "ccc/mdx.ccc", 1261, 3);
        currentLookaheadProduction = "atom";
        try {
            if (!check$atom(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:1262:3
        boolean passedPredicate2790 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2791 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$mdx_ccc$1263$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2791;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2790;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1265:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$objectIdentifierOrFuncall(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at ccc/mdx.ccc:1276:3
        // NonTerminal parseIdentifier at ccc/mdx.ccc:1276:3
        pushOntoLookaheadStack("objectIdentifierOrFuncall", "ccc/mdx.ccc", 1276, 3);
        currentLookaheadProduction = "parseIdentifier";
        try {
            if (!check$parseIdentifier(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at ccc/mdx.ccc:1277:3
        Token token2796 = currentLookaheadToken;
        boolean passedPredicate2796 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$mdx_ccc$1278$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token2796;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate2796;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1289:3
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$atom(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at ccc/mdx.ccc:1317:3
        Token token2800 = currentLookaheadToken;
        int remainingLookahead2800 = remainingLookahead;
        boolean hitFailure2800 = hitFailure, passedPredicate2800 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(SINGLE_QUOTED_STRING)) {
                currentLookaheadToken = token2800;
                remainingLookahead = remainingLookahead2800;
                hitFailure = hitFailure2800;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!scanToken(DOUBLE_QUOTED_STRING)) {
                    currentLookaheadToken = token2800;
                    remainingLookahead = remainingLookahead2800;
                    hitFailure = hitFailure2800;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!scanToken(UNSIGNED_INTEGER_LITERAL, APPROX_NUMERIC_LITERAL, DECIMAL_NUMERIC_LITERAL)) {
                        currentLookaheadToken = token2800;
                        remainingLookahead = remainingLookahead2800;
                        hitFailure = hitFailure2800;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!scanToken(NULL)) {
                            currentLookaheadToken = token2800;
                            remainingLookahead = remainingLookahead2800;
                            hitFailure = hitFailure2800;
                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                            passedPredicate = false;
                            if (!check$mdx_ccc$1333$3(false)) {
                                currentLookaheadToken = token2800;
                                remainingLookahead = remainingLookahead2800;
                                hitFailure = hitFailure2800;
                                if (passedPredicate && !legacyGlitchyLookahead) return false;
                                passedPredicate = false;
                                if (!check$mdx_ccc$1343$3(false)) {
                                    currentLookaheadToken = token2800;
                                    remainingLookahead = remainingLookahead2800;
                                    hitFailure = hitFailure2800;
                                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                                    passedPredicate = false;
                                    if (!check$mdx_ccc$1352$3(false)) {
                                        currentLookaheadToken = token2800;
                                        remainingLookahead = remainingLookahead2800;
                                        hitFailure = hitFailure2800;
                                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                                        passedPredicate = false;
                                        if (!check$mdx_ccc$1366$3(false)) {
                                            currentLookaheadToken = token2800;
                                            remainingLookahead = remainingLookahead2800;
                                            hitFailure = hitFailure2800;
                                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                                            passedPredicate = false;
                                            if (!check$mdx_ccc$1373$3(false)) {
                                                currentLookaheadToken = token2800;
                                                remainingLookahead = remainingLookahead2800;
                                                hitFailure = hitFailure2800;
                                                return false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate2800;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$caseExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1411:3
        if (!scanToken(CASE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at ccc/mdx.ccc:1412:3
        Token token2804 = currentLookaheadToken;
        boolean passedPredicate2804 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$mdx_ccc$1413$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token2804;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate2804;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at ccc/mdx.ccc:1419:3
        boolean passedPredicate2806 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token2807 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$mdx_ccc$1420$5(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token2807;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate2806;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at ccc/mdx.ccc:1426:3
        Token token2809 = currentLookaheadToken;
        boolean passedPredicate2809 = passedPredicate;
        passedPredicate = false;
        try {
            if (!check$mdx_ccc$1427$5(false)) {
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                currentLookaheadToken = token2809;
                hitFailure = false;
            }
        } finally {
            passedPredicate = passedPredicate2809;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for RegexpRef specified at ccc/mdx.ccc:1432:3
        if (!scanToken(END)) return false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) {
            return true;
        }
        // Lookahead Code for CodeBlock specified at ccc/mdx.ccc:1433:3
        return true;
    }

    ArrayList<NonTerminalCall> parsingStack = new ArrayList<>();
    private ArrayList<NonTerminalCall> lookaheadStack = new ArrayList<>();

    private final void pushOntoCallStack(String methodName, String fileName, int line, int column) {
        parsingStack.add(new NonTerminalCall("MdxParser", token_source, fileName, methodName, line, column, null));
    }

    private final void popCallStack() {
        NonTerminalCall ntc = parsingStack.remove(parsingStack.size() - 1);
        this.currentlyParsedProduction = ntc.productionName;
    }

    private final void restoreCallStack(int prevSize) {
        while (parsingStack.size() > prevSize) {
            popCallStack();
        }
    }

    private final void pushOntoLookaheadStack(String methodName, String fileName, int line, int column) {
        lookaheadStack.add(new NonTerminalCall("MdxParser", token_source, fileName, methodName, line, column, null));
    }

    private final void popLookaheadStack() {
        NonTerminalCall ntc = lookaheadStack.remove(lookaheadStack.size() - 1);
        this.currentLookaheadProduction = ntc.productionName;
    }

    void dumpLookaheadStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it = lookaheadStack.listIterator(lookaheadStack.size());
        while (it.hasPrevious()) {
            it.previous().dump(ps);
        }
    }

    void dumpCallStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it = parsingStack.listIterator(parsingStack.size());
        while (it.hasPrevious()) {
            it.previous().dump(ps);
        }
    }

    void dumpLookaheadCallStack(PrintStream ps) {
        ps.println("Current Parser Production is: " + currentlyParsedProduction);
        ps.println("Current Lookahead Production is: " + currentLookaheadProduction);
        ps.println("---Lookahead Stack---");
        dumpLookaheadStack(ps);
        ps.println("---Call Stack---");
        dumpCallStack(ps);
    }

    public boolean isParserTolerant() {
        return false;
    }

    public void setParserTolerant(boolean tolerantParsing) {
        if (tolerantParsing) {
            throw new UnsupportedOperationException("This parser was not built with that feature!");
        }
    }

    private Token consumeToken(TokenType expectedType) {
        Token nextToken = nextToken(lastConsumedToken);
        if (nextToken.getType() != expectedType) {
            nextToken = handleUnexpectedTokenType(expectedType, nextToken);
        }
        this.lastConsumedToken = nextToken;
        this.nextTokenType = null;
        if (buildTree && tokensAreNodes) {
            pushNode(lastConsumedToken);
        }
        return lastConsumedToken;
    }

    private Token handleUnexpectedTokenType(TokenType expectedType, Token nextToken) {
        throw new ParseException(this, nextToken, EnumSet.of(expectedType), parsingStack);
    }


    private class ParseState {
        Token lastConsumed;
        ArrayList<NonTerminalCall> parsingStack;
        LexicalState lexicalState;
        NodeScope nodeScope;

        ParseState() {
            this.lastConsumed = MdxParser.this.lastConsumedToken;
            @SuppressWarnings("unchecked")
            ArrayList<NonTerminalCall> parsingStack = (ArrayList<NonTerminalCall>) MdxParser.this.parsingStack.clone();
            this.parsingStack = parsingStack;
            this.lexicalState = token_source.lexicalState;
            this.nodeScope = currentNodeScope.clone();
        }

    }

    private boolean buildTree = true;
    private boolean tokensAreNodes = true;
    private boolean unparsedTokensAreNodes = false;

    public boolean isTreeBuildingEnabled() {
        return buildTree;
    }

    public void setUnparsedTokensAreNodes(boolean unparsedTokensAreNodes) {
        this.unparsedTokensAreNodes = unparsedTokensAreNodes;
    }

    public void setTokensAreNodes(boolean tokensAreNodes) {
        this.tokensAreNodes = tokensAreNodes;
    }

    NodeScope currentNodeScope = new NodeScope();

    /**
    * @return the root node of the AST. It only makes sense to call
    * this after a successful parse.
    */
    public Node rootNode() {
        return currentNodeScope.rootNode();
    }

    /**
    * push a node onto the top of the node stack
    * @param n the node to push
    */
    public void pushNode(Node n) {
        currentNodeScope.add(n);
    }

    /**
    * @return the node on the top of the stack, and remove it from the
    * stack.
    */
    public Node popNode() {
        return currentNodeScope.pop();
    }

    /**
    * @return the node currently on the top of the tree-building stack.
    */
    public Node peekNode() {
        return currentNodeScope.peek();
    }

    /**
    * Puts the node on the top of the stack. However, unlike pushNode()
    * it replaces the node that is currently on the top of the stack.
    * This is effectively equivalent to popNode() followed by pushNode(n)
    * @param n the node to poke
    */
    public void pokeNode(Node n) {
        currentNodeScope.poke(n);
    }

    /**
    * @return the number of Nodes on the tree-building stack in the current node
    * scope.
    */
    public int nodeArity() {
        return currentNodeScope.size();
    }

    private void clearNodeScope() {
        currentNodeScope.clear();
    }

    private void openNodeScope(Node n) {
        new NodeScope();
        if (n != null) {
            Token next = nextToken(lastConsumedToken);
            n.setTokenSource(lastConsumedToken.getTokenSource());
            n.setBeginOffset(next.getBeginOffset());
            n.open();
        }
    }

    /* A definite node is constructed from a specified number of
    * children.  That number of nodes are popped from the stack and
    * made the children of the definite node.  Then the definite node
    * is pushed on to the stack.
    */
    private void closeNodeScope(Node n, int num) {
        n.setEndOffset(lastConsumedToken.getEndOffset());
        currentNodeScope.close();
        ArrayList<Node> nodes = new ArrayList<Node>();
        for (int i = 0; i < num; i++) {
            nodes.add(popNode());
        }
        Collections.reverse(nodes);
        for (Node child : nodes) {
            // FIXME deal with the UNPARSED_TOKENS_ARE_NODES case
            n.addChild(child);
        }
        n.close();
        pushNode(n);
    }

    /**
    * A conditional node is constructed if the condition is true.  All
    * the nodes that have been pushed since the node was opened are
    * made children of the conditional node, which is then pushed
    * on to the stack.  If the condition is false the node is not
    * constructed and they are left on the stack.
    */
    private void closeNodeScope(Node n, boolean condition) {
        if (n != null && condition) {
            n.setEndOffset(lastConsumedToken.getEndOffset());
            int a = nodeArity();
            currentNodeScope.close();
            ArrayList<Node> nodes = new ArrayList<Node>();
            while (a-- > 0) {
                nodes.add(popNode());
            }
            Collections.reverse(nodes);
            for (Node child : nodes) {
                if (unparsedTokensAreNodes && child instanceof Token) {
                    Token tok = (Token) child;
                    while (tok.previousCachedToken() != null && tok.previousCachedToken().isUnparsed()) {
                        tok = tok.previousCachedToken();
                    }
                    while (tok.isUnparsed()) {
                        n.addChild(tok);
                        tok = tok.nextCachedToken();
                    }
                }
                n.addChild(child);
            }
            n.close();
            pushNode(n);
        } else {
            currentNodeScope.close();
        }
    }

    public boolean getBuildTree() {
        return buildTree;
    }

    public void setBuildTree(boolean buildTree) {
        this.buildTree = buildTree;
    }


    @SuppressWarnings("serial")
    class NodeScope extends ArrayList<Node> {
        NodeScope parentScope;

        NodeScope() {
            this.parentScope = MdxParser.this.currentNodeScope;
            MdxParser.this.currentNodeScope = this;
        }

        boolean isRootScope() {
            return parentScope == null;
        }

        Node rootNode() {
            NodeScope ns = this;
            while (ns.parentScope != null) {
                ns = ns.parentScope;
            }
            return ns.isEmpty() ? null : ns.get(0);
        }

        Node peek() {
            if (isEmpty()) {
                return parentScope == null ? null : parentScope.peek();
            }
            return get(size() - 1);
        }

        Node pop() {
            return isEmpty() ? parentScope.pop() : remove(size() - 1);
        }

        void poke(Node n) {
            if (isEmpty()) {
                parentScope.poke(n);
            } else {
                set(size() - 1, n);
            }
        }

        void close() {
            parentScope.addAll(this);
            MdxParser.this.currentNodeScope = parentScope;
        }

        int nestingLevel() {
            int result = 0;
            NodeScope parent = this;
            while (parent.parentScope != null) {
                result++;
                parent = parent.parentScope;
            }
            return result;
        }

        public NodeScope clone() {
            NodeScope clone = (NodeScope) super.clone();
            if (parentScope != null) {
                clone.parentScope = parentScope.clone();
            }
            return clone;
        }

    }

}

