/*
// This software is subject to the terms of the Eclipse Public License v1.0
// Agreement, available at the following URL:
// http://www.eclipse.org/legal/epl-v10.html.
// You must accept the terms of that agreement to use this software.
//
// Copyright (C) 2010-2011 Pentaho
// Copyright (C) 2021 Sergei Semenkov
// All Rights Reserved.
*/
options {
    STATIC = false;
    IGNORE_CASE = true;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(MdxParserImpl)

package mondrian.parser;

import java.util.*;
import java.io.StringReader;
import java.math.BigDecimal;

import org.eclipse.daanse.olap.api.Command;
import org.eclipse.daanse.olap.api.NameSegment;
import org.eclipse.daanse.olap.api.Quoting;
import org.eclipse.daanse.olap.api.Segment;
import org.eclipse.daanse.olap.api.Statement;
import org.eclipse.daanse.olap.api.SubtotalVisibility;
import org.eclipse.daanse.olap.api.function.FunctionService;
import org.eclipse.daanse.olap.api.query.component.AxisOrdinal;
import org.eclipse.daanse.olap.api.query.component.CellProperty;
import org.eclipse.daanse.olap.api.query.component.Expression;
import org.eclipse.daanse.olap.api.query.component.Formula;
import org.eclipse.daanse.olap.api.query.component.Id;
import org.eclipse.daanse.olap.api.query.component.Literal;
import org.eclipse.daanse.olap.api.query.component.MemberProperty;
import org.eclipse.daanse.olap.api.query.component.Query;
import org.eclipse.daanse.olap.api.query.component.QueryAxis;
import org.eclipse.daanse.olap.api.query.component.QueryComponent;
import org.eclipse.daanse.olap.api.query.component.Subcube;
import org.eclipse.daanse.olap.api.query.component.UpdateClause;
import org.eclipse.daanse.olap.operation.api.AmpersandQuotedPropertyOperationAtom;
import org.eclipse.daanse.olap.operation.api.BracesOperationAtom;
import org.eclipse.daanse.olap.operation.api.CaseOperationAtom;
import org.eclipse.daanse.olap.operation.api.CastOperationAtom;
import org.eclipse.daanse.olap.operation.api.EmptyOperationAtom;
import org.eclipse.daanse.olap.operation.api.FunctionOperationAtom;
import org.eclipse.daanse.olap.operation.api.InfixOperationAtom;
import org.eclipse.daanse.olap.operation.api.MethodOperationAtom;
import org.eclipse.daanse.olap.operation.api.OperationAtom;
import org.eclipse.daanse.olap.operation.api.ParenthesesOperationAtom;
import org.eclipse.daanse.olap.operation.api.PlainPropertyOperationAtom;
import org.eclipse.daanse.olap.operation.api.PostfixOperationAtom;
import org.eclipse.daanse.olap.operation.api.PrefixOperationAtom;
import org.eclipse.daanse.olap.operation.api.QuotedPropertyOperationAtom;

import mondrian.mdx.UnresolvedFunCallImpl;
import mondrian.olap.CellPropertyImpl;
import mondrian.olap.FormulaImpl;
import mondrian.olap.IdImpl;
import mondrian.olap.MemberPropertyImpl;
import mondrian.olap.MondrianException;
import mondrian.olap.NullLiteralImpl;
import mondrian.olap.NumericLiteralImpl;
import mondrian.olap.QueryAxisImpl;
import mondrian.olap.StringLiteralImpl;
import mondrian.olap.SubcubeImpl;
import mondrian.olap.SymbolLiteralImpl;
import mondrian.olap.UpdateImpl;

/**
 * MDX parser, generated from MdxParser.jj.
 *
 * <p>The public wrapper for this parser is {@link JavaccParserValidatorImpl}.
 *
 * @author jhyde
 * @since Dec 14, 2010
 */
@SuppressWarnings({
    "ConstantIfStatement",
    "UnnecessarySemicolon",
    "UnnecessaryLabelOnBreakStatement",
    "RedundantIfStatement"
})
public class MdxParserImpl
{
    private MdxParserValidator.QueryComponentFactory factory;
    private Statement statement;
    private FunctionServiceble funTable;
    private boolean strictValidation;

    public MdxParserImpl(
        MdxParserValidator.QueryComponentFactory factory,
        Statement statement,
        String queryString,
        boolean debug,
        FunctionService funTable,
        boolean strictValidation)
    {
        this(new StringReader(term(queryString)));
        this.factory = factory;
        this.statement = statement;
        this.funTable = funTable;
        this.strictValidation = strictValidation;
    }

    private static String term(String s) {
        return s.endsWith("\n") ? s : (s + "\n");
    }

    public void setTabSize(int tabSize) {
        jj_input_stream.setTabSize(tabSize);
    }

    Expression recursivelyParseExp(String s) throws ParseException {
        MdxParserImpl parser =
            new MdxParserImpl(
                factory,
                statement,
                s,
                false,
                funTable,
                strictValidation);
        return parser.expression();
    }

    static Id[] toIdArray(List<Id> idList) {
        if (idList == null || idList.size() == 0) {
            return EmptyIdArray;
        } else {
            return idList.toArray(new Id[idList.size()]);
        }
    }

    static Expression[] toExpArray(List<Expression> expList) {
        if (expList == null || expList.size() == 0) {
            return EmptyExpArray;
        } else {
            return expList.toArray(new Expression[expList.size()]);
        }
    }

    static Formula[] toFormulaArray(List<Formula> formulaList) {
        if (formulaList == null || formulaList.size() == 0) {
            return EmptyFormulaArray;
        } else {
            return formulaList.toArray(new Formula[formulaList.size()]);
        }
    }

    static MemberProperty[] toMemberPropertyArray(List<MemberProperty> mpList) {
        if (mpList == null || mpList.size() == 0) {
            return EmptyMemberPropertyArray;
        } else {
            return mpList.toArray(new MemberProperty[mpList.size()]);
        }
    }

    static CellProperty[] toQueryComponentArray(List<QueryComponent> qpList) {
        if (qpList == null || qpList.size() == 0) {
            return EmptyQueryComponentArray;
        } else {
            return qpList.toArray(new CellProperty[qpList.size()]);
        }
    }

    static QueryAxis[] toQueryAxisArray(List<QueryAxis> qpList) {
        if (qpList == null || qpList.size() == 0) {
            return EmptyQueryAxisArray;
        } else {
            return qpList.toArray(new QueryAxis[qpList.size()]);
        }
    }

    private static final MemberProperty[] EmptyMemberPropertyArray =
        new MemberProperty[0];
    private static final Expression[] EmptyExpArray = new Expression[0];
    private static final Formula[] EmptyFormulaArray = new Formula[0];
    private static final Id[] EmptyIdArray = new Id[0];
    private static final CellProperty[] EmptyQueryComponentArray = new CellProperty[0];
    private static final QueryAxis[] EmptyQueryAxisArray = new QueryAxis[0];

    private static final String DQ = '"' + "";
    private static final String DQDQ = DQ + DQ;

    private static String stripQuotes(
        String s, String prefix, String suffix, String quoted)
    {
        assert s.startsWith(prefix) && s.endsWith(suffix);
        s = s.substring(prefix.length(), s.length() - suffix.length());
        s = s.replace(quoted, suffix);
        return s;
    }

    private Expression createCall(
        Expression left,
        Segment segment,
        List<Expression> argList)
    {
        final String name = segment instanceof NameSegment
            ? ((NameSegment) segment).getName()
            : null;
        if (argList != null) {
            if (left != null) {
                // Method syntax: "x.foo(arg1, arg2)" or "x.foo()"
                argList.add(0, left);
                return  new UnresolvedFunCallImpl(
                    new MethodOperationAtom(name), toExpArray(argList));
            } else {
                // Function syntax: "foo(arg1, arg2)" or "foo()"
                return  new UnresolvedFunCallImpl(
                    new FunctionOperationAtom(name), toExpArray(argList));
            }
        } else {
            // Member syntax: "foo.bar"
            // or property syntax: "foo.RESERVED_WORD"
            OperationAtom operationAtom;
            boolean call = false;
            switch (segment.getQuoting()) {
            case UNQUOTED:
            	call = funTable.isProperty(name);
            	operationAtom = new PlainPropertyOperationAtom(name);
                break;
            case QUOTED:
            	operationAtom = new QuotedPropertyOperationAtom(name);
                break;
            default:
            	operationAtom = new AmpersandQuotedPropertyOperationAtom(name);
                break;
            }
            if (left instanceof IdImpl && !call) {
                return ((IdImpl) left).append(segment);
            } else if (left == null) {
                return  new IdImpl(segment);
            } else {
                return  new UnresolvedFunCallImpl(operationAtom, new Expression[] {left});
            }
        }
    }
}

PARSER_END(MdxParserImpl)

// ----------------------------------------------------------------------------

// Keywords and reserved words.
TOKEN :
{
    <AND: "AND">
    | <AS: "AS">
    | <AXIS: "AXIS">
    | <BEGIN: "BEGIN">
    | <BY: "BY">
    | <CASE: "CASE">
    | <CAST: "CAST">
    | <CELL: "CELL">
    | <CHAPTERS: "CHAPTERS">
    | <CREATE: "CREATE">
    | <COLUMNS: "COLUMNS">
    | <COMMIT: "COMMIT">
    | <CUBE: "CUBE">
    | <DIMENSION: "DIMENSION">
    | <DRILLTHROUGH: "DRILLTHROUGH">
    | <ELSE: "ELSE">
    | <EMPTY: "EMPTY">
    | <END: "END">
    | <EXPLAIN: "EXPLAIN">
    | <FIRSTROWSET: "FIRSTROWSET">
    | <FOR: "FOR">
    | <FROM: "FROM">
    | <IN: "IN">
    | <IS: "IS">
    | <MATCHES: "MATCHES">
    | <MAXROWS: "MAXROWS">
    | <MEMBER: "MEMBER">
    | <NON: "NON">
    | <NOT: "NOT">
    | <NULL: "NULL">
    | <ON: "ON">
    | <OR: "OR">
    | <PAGES: "PAGES">
    | <PLAN: "PLAN">
    | <PROPERTIES: "PROPERTIES">
    | <REFRESH: "REFRESH">
    | <RETURN: "RETURN">
    | <ROLLBACK: "ROLLBACK">
    | <ROWS: "ROWS">
    | <SECTIONS: "SECTIONS">
    | <SELECT: "SELECT">
    | <SESSION: "SESSION">
    | <SET: "SET">
    | <THEN: "THEN">
    | <TRAN: "TRAN">
    | <TRANSACTION: "TRANSACTION">
    | <UPDATE: "UPDATE">
    | <USE_EQUAL_ALLOCATION: "USE_EQUAL_ALLOCATION">
    | <USE_EQUAL_INCREMENT: "USE_EQUAL_INCREMENT">
    | <USE_WEIGHTED_ALLOCATION: "USE_WEIGHTED_ALLOCATION">
    | <USE_WEIGHTED_INCREMENT: "USE_WEIGHTED_INCREMENT">
    | <WHEN: "WHEN">
    | <WHERE: "WHERE">
    | <XOR: "XOR">
    | <WITH: "WITH">
    | <EXISTING: "EXISTING">
    | <$SYSTEM: "$SYSTEM">
}

// White space

SKIP :
{
    " "
    | "\t"
    | "\n"
    | "\r"
    | "\f"
}

// Comments

MORE :
{
    <"/**" ~["/"]> : IN_FORMAL_COMMENT
}

MORE :
{
    "//" : IN_SINGLE_LINE_COMMENT
    |
    "--" : IN_SINGLE_LINE_COMMENT
    |
    "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
    <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
    <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
    <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
    < ~[] >
}

// Operators and other symbols
TOKEN :
{
    < ASTERISK: "*" >
    | < BANG: "!" >
    | < COLON : ":" >
    | < COMMA : "," >
    | < CONCAT : "||" >
    | < DOT : "." >
    | < EQ : "=" >
    | < GE : ">=" >
    | < GT : ">" >
    | < LBRACE : "{" >
    | < LE : "<=" >
    | < LPAREN : "(" >
    | < LT : "<" >
    | < MINUS : "-" >
    | < NE : "<>" >
    | < PLUS : "+" >
    | < RBRACE : "}" >
    | < RPAREN : ")" >
    | < SOLIDUS : "/" >
    | < ATSIGN : "@" >
}

// Literals
TOKEN :
{
    < UNSIGNED_INTEGER_LITERAL: (["0"-"9"])+ >
    |
    < APPROX_NUMERIC_LITERAL:
    (<UNSIGNED_INTEGER_LITERAL> | <DECIMAL_NUMERIC_LITERAL>) <EXPONENT> >
    |
    < DECIMAL_NUMERIC_LITERAL:
    (["0"-"9"])+(".")?(["0"-"9"])*
    | "."(["0"-"9"])+
    >
    |
    < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
    |
    < SINGLE_QUOTED_STRING: "'" ( (~["'"]) | ("''"))* "'" >
    |
    < DOUBLE_QUOTED_STRING: "\"" ( (~["\""]) | ("\"\""))* "\"" >
    |
    < #WHITESPACE:
    [ " ","\t","\n","\r","\f" ]
    >
}

// Identifiers
TOKEN :
{
    < ID: <LETTER> (<LETTER> | <DIGIT>)* >
    |
    < QUOTED_ID:
    "["
    (   (~["]","\n","\r"])
        | ("]]")
        )*
    "]"
    >
    |
    < AMP_QUOTED_ID: "&" <QUOTED_ID> >
    |
    < AMP_UNQUOTED_ID: "&" ["a"-"z","A"-"Z"] (<LETTER> | <DIGIT>)* >
    |
    < #LETTER:
    [
        "\u0024",
        "\u0041"-"\u005a",
        "\u005f",
        "\u0061"-"\u007a",
        "\u00c0"-"\u00d6",
        "\u00d8"-"\u00f6",
        "\u00f8"-"\u00ff",
        "\u0100"-"\u1fff",
        "\u3040"-"\u318f",
        "\u3300"-"\u337f",
        "\u3400"-"\u3d2d",
        "\u4e00"-"\u9fff",
        "\uf900"-"\ufaff"
    ]
    >
    |
    < #DIGIT:
    [
        "\u0030"-"\u0039",
        "\u0660"-"\u0669",
        "\u06f0"-"\u06f9",
        "\u0966"-"\u096f",
        "\u09e6"-"\u09ef",
        "\u0a66"-"\u0a6f",
        "\u0ae6"-"\u0aef",
        "\u0b66"-"\u0b6f",
        "\u0be7"-"\u0bef",
        "\u0c66"-"\u0c6f",
        "\u0ce6"-"\u0cef",
        "\u0d66"-"\u0d6f",
        "\u0e50"-"\u0e59",
        "\u0ed0"-"\u0ed9",
        "\u1040"-"\u1049"
    ]
    >
}

// ----------------------------------------------------------------------------
// Entry points

QueryComponent statementEof() :
{
    QueryComponent qp;
}
{
    qp = statement() <EOF> {
        return qp;
    }
}

Expression expressionEof() :
{
    Expression e;
}
{
    e = expression() <EOF> {
        return e;
    }
}


// ----------------------------------------------------------------------------
// Elements
//
//
// <identifier> ::= <regularIdentifier> | <delimitedIdentifier>

Segment identifier() :
{
    Segment segment;
}
{
    (
        segment = nameSegment()
    |
        segment = keyIdentifier()
    )
    {
        return segment;
    }
}

NameSegment nameSegment() :
{
    String id;
}
{
    id = keyword() {
        // Allow a non-reserved keyword to be converted back into an identifier
        // if it is not in a context where it is meaningful.
        return new IdImpl.NameSegmentImpl(id, Quoting.UNQUOTED);
    }
|   <ID> {
        return new IdImpl.NameSegmentImpl(token.image, Quoting.UNQUOTED);
    }
|   <ATSIGN><ID> {
        return new IdImpl.NameSegmentImpl("@" + token.image, Quoting.UNQUOTED);
    }
|   <QUOTED_ID> {
        return new IdImpl.NameSegmentImpl(
            stripQuotes(token.image, "[", "]", "]]"),
            Quoting.QUOTED);
    }
}

// for example '&foo&[1]&bar' in '[x].&foo&[1]&bar.[y]'
IdImpl.KeySegment keyIdentifier() :
{
    List<NameSegment> list = new ArrayList<NameSegment>();
    NameSegment key;
}
{
    (
        key = ampId() {
            list.add(key);
        }
    )+
    {
        return new IdImpl.KeySegment(list);
    }
}

NameSegment ampId() :
{
}
{
    <AMP_QUOTED_ID> {
        return new IdImpl.NameSegmentImpl(
            stripQuotes(token.image, "&[", "]", "]]"),
            Quoting.QUOTED);
    }
|
    <AMP_UNQUOTED_ID> {
        return new IdImpl.NameSegmentImpl(
            token.image.substring(1),
            Quoting.UNQUOTED);
    }
}

// a keyword (unlike a reserved word) can be converted back into an
// identifier in some contexts
String keyword() :
{
}
{
    <DIMENSION> {
        return "Dimension";
    }
|   <PROPERTIES> {
        return "Properties";
    }
}

IdImpl compoundId() :
{
    Segment i;
    List<Segment> list = new ArrayList<Segment>();
}
{
    i = identifier() {
        list.add(i);
    }
    (
        LOOKAHEAD(<DOT>)
        <DOT> i = identifier() {
            list.add(i);
        }
    )*
    {
        return  new IdImpl(list);
    }
}

// ----------------------------------------------------------------------------
// Expressions
Expression unaliasedExpression() :
{
    Expression x, y;
}
{
    x = term5()
    (
        <OR> y = term5() {
            x =  new UnresolvedFunCallImpl(new InfixOperationAtom("OR"), new Expression[] {x, y});
        }
    |   <XOR> y = term5() {
            x =  new UnresolvedFunCallImpl(new InfixOperationAtom("XOR"), new Expression[] {x, y});
        }
    |
        // range 'm1 : m2' yields set of members
        <COLON> y = term5() {
            x =  new UnresolvedFunCallImpl(new InfixOperationAtom(":"), new Expression[] {x, y});
        }
    )*
    {
        return x;
    }
}

Expression term5() :
{
    Expression x, y;
}
{
    x = term4()
    (
        <AND> y = term4() {
            x =  new UnresolvedFunCallImpl(new InfixOperationAtom("AND"), new Expression[] {x, y});
        }
    )*
    {
        return x;
    }
}

Expression term4() :
{
    Expression x;
}
{
    x = term3() {
        return x;
    }
|   <NOT> x = term4() {
        return  new UnresolvedFunCallImpl(new PrefixOperationAtom("NOT"), new Expression[] {x});
    }
}

Expression term3() :
{
    Expression x, y;
    Token op;
}
{
    x = term2()
    (
        // e.g. "1 < 5"
        (
            <EQ> { op = token; }
        |   <NE>  { op = token; }
        |   <LT>  { op = token; }
        |   <GT>  { op = token; }
        |   <LE>  { op = token; }
        |   <GE>  { op = token; }
        )
        y = term2() {
            x =  new UnresolvedFunCallImpl(new InfixOperationAtom(op.image), new Expression[] {x, y});
        }
    |
        // We expect a shift-reduce conflict here, because NULL is a literal and
        // so is a valid argument to the IS operator. We want to shift.
        LOOKAHEAD(2)
        <IS> <NULL> {
            x =  new UnresolvedFunCallImpl(new PostfixOperationAtom("IS NULL"), new Expression[] {x});
        }
    |
        // e.g. "x IS y"; but "x IS NULL" is handled elsewhere
        LOOKAHEAD(2)
        <IS> y = term2() {
            x =  new UnresolvedFunCallImpl(new InfixOperationAtom("IS"), new Expression[] {x, y});
        }
    |   <IS> <EMPTY> {
            x =  new UnresolvedFunCallImpl(new PostfixOperationAtom("IS EMPTY"), new Expression[] {x});
        }
    |   <MATCHES> y = term2() {
            x =  new UnresolvedFunCallImpl(new InfixOperationAtom("MATCHES"), new Expression[] {x, y});
        }
    |   LOOKAHEAD(2)
        <NOT> <MATCHES> y = term2() {
            x =  new UnresolvedFunCallImpl(
                new PrefixOperationAtom("NOT"), new Expression[] {
                     new UnresolvedFunCallImpl(new InfixOperationAtom("MATCHES"), new Expression[] {x, y})});
        }
    |   <IN> y = term2() {
            x =  new UnresolvedFunCallImpl(new InfixOperationAtom("IN"), new Expression[] {x, y});
        }
    |   <NOT> <IN> y = term2() {
            x =  new UnresolvedFunCallImpl(
                new PrefixOperationAtom("NOT"), new Expression[] {
                     new UnresolvedFunCallImpl(
                        new InfixOperationAtom("IN"), new Expression[] {x, y})});
        }
    )*
    {
        return x;
    }
}

Expression term2() :
{
    Expression x, y;
}
{
    x = term()
    (
        <PLUS> y = term() {
            x =  new UnresolvedFunCallImpl(new InfixOperationAtom("+"), new Expression[] {x, y});
        }
    |   <MINUS> y = term() {
            x =  new UnresolvedFunCallImpl(new InfixOperationAtom("-"), new Expression[] {x, y});
        }
    |   <CONCAT> y = term() {
            x =  new UnresolvedFunCallImpl(new InfixOperationAtom("||"), new Expression[] {x, y});
        }
    )*
    {
        return x;
    }
}

Expression term() :
{
    Expression x, y;
}
{
    x = factor()
    (
        <ASTERISK> y = factor() {
            x =  new UnresolvedFunCallImpl(new InfixOperationAtom("*"), new Expression[] {x, y});
        }
    |   <SOLIDUS> y = factor() {
            x =  new UnresolvedFunCallImpl(new InfixOperationAtom("/"), new Expression[] {x, y});
        }
    )*
    {
        return x;
    }
}

Expression factor() :
{
    Expression p;
}
{
    p = primary() {
        return p;
    }
|   <PLUS> p = primary() {
        return p;
    }
|   <MINUS> p = primary() {
        return  new UnresolvedFunCallImpl(new PrefixOperationAtom("-"), new Expression[] {p});
    }
|   <EXISTING> p = primary() {
        return  new UnresolvedFunCallImpl(new PrefixOperationAtom("Existing"), new Expression[] {p});
    }
}

Expression primary() :
{
    Expression e;
}
{
    e = atom()
    (
        <DOT> e = segmentOrFuncall(e)
    )*
    {
        return e;
    }
}

Expression segmentOrFuncall(Expression left) :
{
    Segment segment;
    List<Expression> argList = null;
}
{
    segment = identifier()
    (
        <LPAREN>
        (
            LOOKAHEAD(<RPAREN>) {
                argList = Collections.emptyList();
            }
        |
            argList = expOrEmptyList()
        )
        <RPAREN>
    )?
    {
        return createCall(left, segment, argList);
    }
}

NumericLiteralImpl numericLiteral() :
{
}
{
    <DECIMAL_NUMERIC_LITERAL> {
        return NumericLiteralImpl.create(new BigDecimal(token.image));
    }
|   <UNSIGNED_INTEGER_LITERAL> {
        return NumericLiteralImpl.create(new BigDecimal(token.image));
    }
|   <APPROX_NUMERIC_LITERAL> {
        return NumericLiteralImpl.create(new BigDecimal(token.image));
    }
}

Expression atom() :
{
    Expression e;
    NameSegment segment;
    List<Expression> lis;
}
{
    <SINGLE_QUOTED_STRING> {
        return StringLiteralImpl.create(stripQuotes(token.image, "'", "'", "''"));
    }
|   <DOUBLE_QUOTED_STRING> {
        return StringLiteralImpl.create(stripQuotes(token.image, DQ, DQ, DQDQ));
    }
|   e = numericLiteral() {
        return e;
    }
|   <NULL> {
        return NullLiteralImpl.nullValue;
    }
|   <CAST> <LPAREN> e = unaliasedExpression()
    <AS> segment = nameSegment() <RPAREN>
    {
        return  new UnresolvedFunCallImpl(
            new CastOperationAtom(), new Expression[] {
                e,
                SymbolLiteralImpl.create(segment.getName())});
    }
|   <LPAREN> lis = expList() <RPAREN> {
        // Whereas ([Sales],[Time]) and () are tuples, ([Sales]) and (5)
        // are just expressions.
        return  new UnresolvedFunCallImpl(new ParenthesesOperationAtom(), toExpArray(lis));
    }
|
    // set built from sets/tuples
    <LBRACE>
    (
        LOOKAHEAD(<RBRACE>) {
            lis = Collections.emptyList();
        }
    |
        lis = expList()
    )
    <RBRACE> {
        return  new UnresolvedFunCallImpl(
           new BracesOperationAtom(), toExpArray(lis));
    }
|   e = caseExpression() {
        return e;
    }
|
    // Function call "foo(a, b)" or "whiz!bang!foo(a, b)".
    // Properties "x.PROP" and methods "exp.meth(a)" are in primary().
    segment = nameSegment()
    (
        <BANG> segment = nameSegment() {
            // We support the syntax for qualifying function names with package
            // names separated by bang ('!'), e.g. 'whiz!bang!foo(a, b)'
            // but currently we ignore the qualifiers. The previous example is
            // equivalent to 'foo(a, b)'.
        }
    )*
    (
        <LPAREN>
        (
            LOOKAHEAD(<RPAREN>) {
                lis = Collections.emptyList();
            }
        |
            lis = expOrEmptyList()
        )
        <RPAREN>
    |
        /* empty */ { lis = null; }
    )
    {
        return createCall(null, segment, lis);
    }
}

Expression caseExpression() :
{
    Expression e, e2;
    List<Expression> list = new ArrayList<Expression>();
    boolean match = false;
}
{
    <CASE>
    (
        e = expression() {
            match = true;
            list.add(e);
        }
    )?
    (
        <WHEN> e = expression() <THEN> e2 = expression() {
            list.add(e);
            list.add(e2);
        }
    )*
    (
        <ELSE> e = expression() {
            list.add(e);
        }
    )?
    <END>
    {
        if (match) {
            return  new UnresolvedFunCallImpl(
                new CaseOperationAtom("_CaseMatch"), toExpArray(list));
        } else {
            return  new UnresolvedFunCallImpl(
                new CaseOperationAtom("_CaseTest"), toExpArray(list));
        }
    }
}


// ----------------------------------------------------------------------------
// Member Value Expression
Expression expression() :
{
    Expression e;
    Segment i;
}
{
    e = unaliasedExpression()
    (
        <AS> i = identifier() {
            IdImpl id =  new IdImpl(i);
            e =  new UnresolvedFunCallImpl(new InfixOperationAtom("AS"), new Expression[] {e, id});
        }
    )*
    {
        return e;
    }
}

Expression expressionOrEmpty() :
{
    Expression e;
}
{
    e = expression() {
        return e;
    }
|   /* empty */ {
        return  new UnresolvedFunCallImpl(new EmptyOperationAtom(), new Expression[] {});
    }
}

// Comma-separated list of expressions, some of which may be empty. Used
// for functions.
List<Expression> expOrEmptyList() :
{
    Expression e;
    List<Expression> list = new LinkedList<Expression>();
}
{
    e = expressionOrEmpty() {
        list.add(e);
    }
    (
        <COMMA>
        e = expressionOrEmpty() {
            list.add(e);
        }
    )*
    {
        return list;
    }
}

// List of expressions, none of which may be empty.
List<Expression> expList() :
{
    Expression e;
    List<Expression> list = new LinkedList<Expression>();
}
{
    e = expression() {
        list.add(e);
    }
    (
        <COMMA>
        e = expression() {
            list.add(e);
        }
    )*
    {
        return list;
    }
}


// ----------------------------------------------------------------------------
// MDX Statement
//
// <statement> ::= <selectStatement>
//                   | <drillthroughStatement>
//                   | <explainStatement>
//
// <selectStatement> ::= [WITH <formulaSpecification>]
//                         SELECT [<axisSpecification>
//                                [, <axisSpecification>...]]
//                         FROM [<cubeSpecification>]
//                         [WHERE <slicerSpecification>]
//                         [<cellProps>]
//
// <drillthroughStatment> ::=
//     DRILLTHROUGH
//     [ MAXROWS <count> ]
//     [ FIRSTROWSET <count> ]
//     <selectStatement>
//     [ RETURN <memberOrAttribute> [, <memberOrAttribute>...] ]
//
// <explainStatement> ::=
//     EXPLAIN PLAN FOR ( <selectStatement> | <drillthroughStatement> )
//
QueryComponent statement() :
{
    QueryComponent qp;
}
{
    (
        LOOKAHEAD(dmvSelectStatement())
        //TODO: look ahead for <$SYSTEM>
        qp = dmvSelectStatement()
    |
        qp = selectStatement()
    |
        qp = createFormula()
    |
        qp = drillthroughStatement()
    |
        qp = explainStatement()
    |
        qp = refreshStatement()
    |
        qp = updateStatement()
    |
        qp = transactionCommandStatement()
    )
    {
        return qp;
    }
}

QueryComponent selectOrDrillthroughStatement() :
{
    QueryComponent qp;
}
{
    qp = selectStatement() {
        return qp;
    }
|   qp = drillthroughStatement() {
        return qp;
    }
}

QueryComponent dmvSelectStatement() :
{
    NameSegment tableId;
    Id c;
    List<Id> columns = new ArrayList<Id>();
    Expression w = null;
}
{
    <SELECT>
    (
        c = compoundId() { columns.add(c); }
        (
            <COMMA>
            c = compoundId() { columns.add(c); }
        )*

    )?
    <FROM> <$SYSTEM><DOT>tableId = nameSegment()
    (
        <WHERE> w = expression()
    )?
    {
        String tableName = tableId.getName();
        List<String> returnList = new ArrayList<String>();
        for(Id id: columns) {
            returnList.add(((NameSegment) id.getElement(0)).getName());
        }
        return factory.makeDmvQuery(tableName, returnList, w);
    }
}

Query selectStatement() :
{
     Formula e;
     List<Formula> f = new ArrayList<Formula>();
     Expression w = null;
     QueryAxis i;
     List<QueryAxis> a = new ArrayList<QueryAxis>();
     Subcube subcube;
     Id c, p;
     List<QueryComponent> cellPropList = new ArrayList<QueryComponent>();
}
{
    (
        <WITH>
        (
            e = memberSpecification() {
               f.add(e);
            }
        |
            e = setSpecification() {
               f.add(e);
            }
        )+
    )?
    <SELECT>
    (
        i = axisSpecification() {
            a.add(i);
        }
        (
            <COMMA>
            i = axisSpecification() {
                a.add(i);
            }
        )*
    )?
    <FROM> subcube = selectSubcubeClause()
    (
        <WHERE> w = expression()
    )?
    (
        (<CELL>)?
        <PROPERTIES>
        p = compoundId() {
            cellPropList.add(new CellPropertyImpl(p.getSegments()));
        }
        (
            <COMMA>
            p = compoundId() {
                cellPropList.add(new CellPropertyImpl(p.getSegments()));
            }
        )*
    )?
    {
        // We want 'Sales', not '[Sales]', and can't handle 'Schema.Sales'
        // yet.
        String cubeName = subcube.getCubeName();
        return factory.makeQuery(
            statement,
            toFormulaArray(f),
            toQueryAxisArray(a),
            subcube,
            w,
            toQueryComponentArray(cellPropList),
            strictValidation);
    }
}

Subcube selectSubcubeClause() :
{
     Id c = null;
     QueryAxis i;
     List<QueryAxis> a = new ArrayList<QueryAxis>();
     Subcube subcube = null;
     Expression w = null;
}
{
    (
        c = compoundId()
        |
        <LPAREN> <SELECT>
        (
            (
                i = axisSpecification() {
                    a.add(i);
                }
                (
                    <COMMA>
                    i = axisSpecification() {
                        a.add(i);
                    }
                )*
            )
            |
            (
                <ASTERISK>
            )?
        )
        <FROM> subcube = selectSubcubeClause()
        (
            <WHERE> w = expression()
        )?
        <RPAREN>
    )
    {
        String cubeName = null;
        if(c != null) {
            cubeName = ((NameSegment) c.getElement(0)).getName();
        }
        final QueryAxis slicerAxis =
            w == null
                ? null
                : new QueryAxisImpl(
                    false, w, AxisOrdinal.StandardAxisOrdinal.SLICER,
                    SubtotalVisibility.Undefined, new Id[0]);
        return new SubcubeImpl(
            cubeName,
            subcube,
            toQueryAxisArray(a),
            slicerAxis);
    }
}

QueryComponent createFormula() :
{
    boolean isMember = true;
    NameSegment cubeId;
    Id m;
    Expression e;
    List<MemberProperty> l = new ArrayList<MemberProperty>();
    MemberProperty mp;
}
{
    <CREATE> <SESSION>
    (
        <MEMBER>
        |
        <SET> { isMember = false; }
    )
    cubeId = nameSegment()<DOT>
    m = compoundId() <AS> e = formulaExpression()
    (
        <COMMA>
        mp = memberPropertyDefinition() {
            l.add(mp);
        }
    )*
    {
        String cubeName = cubeId.getName();
        Formula formula;
        if(isMember) {
            formula = new FormulaImpl(m, e, toMemberPropertyArray(l));
        }
        else {
            formula = new FormulaImpl(m, e);
        }
        return factory.makeCalculatedFormula(cubeName, formula);
    }
}

QueryComponent refreshStatement() :
{
     Id c;
}
{
    <REFRESH> <CUBE>  c = compoundId()
    {
        String cubeName = ((NameSegment) c.getElement(0)).getName();
        return factory.makeRefresh(cubeName);
    }
}

QueryComponent updateStatement() :
{
    Id c;
    UpdateClause uc;
    List<UpdateClause> list = new ArrayList<UpdateClause>();
}
{
    <UPDATE> (<CUBE>)?  c = compoundId()
    <SET>
    uc = updateClause() {
        list.add(uc);
    }
    (
        <COMMA>
        uc = updateClause() {
            list.add(uc);
        }
    )*
    {
        String cubeName = ((NameSegment) c.getElement(0)).getName();
        return factory.makeUpdate(cubeName, list);
    }
}

UpdateClause updateClause() :
{
    Expression t, v, w = null;
    UpdateImpl.Allocation a = UpdateImpl.Allocation.NO_ALLOCATION;
}
{

    t = primary()
    <EQ>
    v = unaliasedExpression()
    (
        <USE_EQUAL_ALLOCATION>
        { a = UpdateImpl.Allocation.USE_EQUAL_ALLOCATION; }
        |
        <USE_EQUAL_INCREMENT>
        { a = UpdateImpl.Allocation.USE_EQUAL_INCREMENT; }
        |
        <USE_WEIGHTED_ALLOCATION>
        { a = UpdateImpl.Allocation.USE_WEIGHTED_ALLOCATION; }
        (<BY> w = unaliasedExpression())?
        |
        <USE_WEIGHTED_INCREMENT>
        { a = UpdateImpl.Allocation.USE_WEIGHTED_INCREMENT; }
        (<BY> w = unaliasedExpression())?
    )?
    {
        return new UpdateImpl.UpdateClauseImpl(t, v, a, w);
    }
}

QueryComponent transactionCommandStatement() :
{
     Command c;
}
{
    (
        <BEGIN>  { c = Command.BEGIN; }
        |
        <COMMIT>  { c = Command.COMMIT; }
        |
        <ROLLBACK>  { c = Command.ROLLBACK; }
    )
    (<TRANSACTION> | <TRAN>)
    {
        return factory.makeTransactionCommand(c);
    }
}

//
// <memberSpecification> ::= MEMBER <member_name> AS <valueExpression>
//                                 [, <solveOrderSpecification>]
//                                 [, <memberPropertyDefinition>...]
Formula memberSpecification() :
{
    Id m;
    Expression e;
    List<MemberProperty> l = new ArrayList<MemberProperty>();
    MemberProperty mp;
}
{
    <MEMBER> m = compoundId() <AS> e = formulaExpression()
    (
        <COMMA>
        mp = memberPropertyDefinition() {
            l.add(mp);
        }
    )*
    {
        return new FormulaImpl(m, e, toMemberPropertyArray(l));
    }
}

Expression formulaExpression() :
{
    Expression e;
}
{
    LOOKAHEAD(<SINGLE_QUOTED_STRING>)
    <SINGLE_QUOTED_STRING> {
        // Support archaic syntax "WITH MEMBER m AS ' <expr> ' ...";
        // "WITH MEMBER m AS <expr>" is now preferred.
        return recursivelyParseExp(stripQuotes(token.image, "'", "'", "''"));
    }
|
    e = unaliasedExpression() {
        return e;
    }
}

MemberProperty memberPropertyDefinition() :
{
    NameSegment id;
    Expression e;
}
{
    id = nameSegment() <EQ> e = expression() {
        return new MemberPropertyImpl(id.getName(), e);
    }
}

Formula setSpecification() :
{
    Id n;
    Expression e;
}
{
    <SET> n = compoundId() <AS> e = formulaExpression() {
        return new FormulaImpl(n, e);
    }
}

// <axisSpecification> ::= [NON EMPTY] <set> [<dimProps>] ON <axis_name>
QueryAxis axisSpecification() :
{
    boolean nonEmpty = false;
    Expression e;
    List<Id> dp = new ArrayList<Id>();
    AxisOrdinal axis;
    Literal n;
    Id p;
}
{
    (
        <NON> <EMPTY> {
            nonEmpty = true;
        }
    )?
    e = expression()
    (
        (<DIMENSION>)?
        <PROPERTIES>
        p = compoundId() {
            dp.add(p);
        }
        (
            <COMMA>
            p = compoundId() {
                dp.add(p);
            }
        )*
    )?
    <ON>
    (
        <COLUMNS> {
            axis = AxisOrdinal.StandardAxisOrdinal.COLUMNS;
        }
    |   <ROWS> {
            axis= AxisOrdinal.StandardAxisOrdinal.ROWS;
        }
    |   <PAGES> {
            axis = AxisOrdinal.StandardAxisOrdinal.PAGES;
        }
    |   <SECTIONS> {
            axis = AxisOrdinal.StandardAxisOrdinal.SECTIONS;
        }
    |   <CHAPTERS> {
            axis = AxisOrdinal.StandardAxisOrdinal.CHAPTERS;
        }
    |
        (
            n = numericLiteral()
        |
            <AXIS> <LPAREN> n = numericLiteral() <RPAREN>
        )
        {
            // AxisOrdinal values go from -2 to 4 for standard axis, but higher
            // ordinals are allowed. The negative values represent special
            // cases, so are ignored.
            Number number = (Number) n.getValue();
            if (number.doubleValue() < 0
                || number.doubleValue() != number.intValue())
            {
                String invalidAxis =
                "Invalid axis specification. The axis number must be a non-negative integer, but it was {0,number}.";
                throw new MondrianException(java.text.MessageFormat.format(invalidAxis,
                    number.doubleValue()));
            }

            axis = AxisOrdinal.StandardAxisOrdinal.forLogicalOrdinal(
                number.intValue());
        }
    )
    {
        return new QueryAxisImpl(
            nonEmpty, e, axis,
            SubtotalVisibility.Undefined,
            toIdArray(dp));
    }
}

QueryComponent drillthroughStatement() :
{
    int m = 0, f = 0;
    List<Expression> rl = null;
    Query s;
}
{
    <DRILLTHROUGH>
    (
        <MAXROWS> <UNSIGNED_INTEGER_LITERAL> {
            m = Integer.valueOf(token.image);
        }
    )?
    (
        <FIRSTROWSET> <UNSIGNED_INTEGER_LITERAL> {
            f = Integer.valueOf(token.image);
        }
    )?
    s = selectStatement()
    (
        <RETURN> rl = returnItemList()
    )?
    {
        return factory.makeDrillThrough(s, m, f, rl);
    }
}

List<Expression> returnItemList() :
{
    List<Expression> list = new ArrayList<Expression>();
    IdImpl i;
}
{
    i = returnItem() {
        list.add(i);
    }
    (
        <COMMA>
        i = returnItem() {
            list.add(i);
        }
    )*
    {
        return list;
    }
}

IdImpl returnItem() :
{
    IdImpl i;
}
{
    // TODO: allow NAME(id) etc.
    i = compoundId() {
        return i;
    }
}

QueryComponent explainStatement() :
{
    QueryComponent qp;
}
{
    <EXPLAIN> <PLAN> <FOR>
    (
        qp = selectStatement()
    |
        qp = drillthroughStatement()
    )
    {
        return factory.makeExplain(qp);
    }
}

// End MdxParser.jj
