/*
 * Copyright (c) 2022 Contributors to the Eclipse Foundation.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *   SmartCity Jena - initial
 *   Stefan Bischof (bipolis.org) - initial
 */
package mondrian.rolap;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.eclipse.daanse.db.dialect.api.Dialect;
import org.eclipse.daanse.olap.api.access.RollupPolicy;
import org.eclipse.daanse.rolap.mapping.api.model.AccessRoleMapping;
import org.eclipse.daanse.rolap.mapping.api.model.CalculatedMemberMapping;
import org.eclipse.daanse.rolap.mapping.api.model.CatalogMapping;
import org.eclipse.daanse.rolap.mapping.api.model.CubeMapping;
import org.eclipse.daanse.rolap.mapping.api.model.DimensionConnectorMapping;
import org.eclipse.daanse.rolap.mapping.api.model.HierarchyMapping;
import org.eclipse.daanse.rolap.mapping.api.model.MeasureGroupMapping;
import org.eclipse.daanse.rolap.mapping.api.model.MeasureMapping;
import org.eclipse.daanse.rolap.mapping.api.model.PhysicalCubeMapping;
import org.eclipse.daanse.rolap.mapping.api.model.SchemaMapping;
import org.eclipse.daanse.rolap.mapping.api.model.StandardDimensionMapping;
import org.eclipse.daanse.rolap.mapping.api.model.enums.AccessCube;
import org.eclipse.daanse.rolap.mapping.api.model.enums.AccessDimension;
import org.eclipse.daanse.rolap.mapping.api.model.enums.AccessHierarchy;
import org.eclipse.daanse.rolap.mapping.api.model.enums.AccessMember;
import org.eclipse.daanse.rolap.mapping.api.model.enums.AccessSchema;
import org.eclipse.daanse.rolap.mapping.api.model.enums.DataType;
import org.eclipse.daanse.rolap.mapping.api.model.enums.HideMemberIfType;
import org.eclipse.daanse.rolap.mapping.api.model.enums.LevelType;
import org.eclipse.daanse.rolap.mapping.api.model.enums.MeasureAggregatorType;
import org.eclipse.daanse.rolap.mapping.api.model.enums.RollupPolicyType;
import org.eclipse.daanse.rolap.mapping.instance.complex.foodmart.FoodmartMappingSupplier;
import org.eclipse.daanse.rolap.mapping.modifier.pojo.PojoMappingModifier;
import org.eclipse.daanse.rolap.mapping.pojo.AccessCubeGrantMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.AccessDimensionGrantMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.AccessHierarchyGrantMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.AccessMemberGrantMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.AccessRoleMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.AccessSchemaGrantMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.AggregationColumnNameMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.AggregationExcludeMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.AggregationForeignKeyMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.AggregationLevelMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.AggregationMeasureMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.AggregationNameMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.AnnotationMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.CalculatedMemberMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.CalculatedMemberPropertyMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.CellFormatterMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.CubeConnectorMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.CubeMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.DimensionConnectorMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.DimensionMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.HierarchyMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.InlineTableColumnDefinitionMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.InlineTableQueryMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.InlineTableRowCellMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.InlineTableRowMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.JoinQueryMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.JoinedQueryElementMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.LevelMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.MeasureGroupMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.MeasureMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.MemberFormatterMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.MemberPropertyFormatterMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.MemberPropertyMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.ParentChildLinkMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.PhysicalCubeMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.SQLExpressionMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.SQLMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.SchemaMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.SqlSelectQueryMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.StandardDimensionMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.TableQueryMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.TimeDimensionMappingImpl;
import org.eclipse.daanse.rolap.mapping.pojo.VirtualCubeMappingImpl;

import mondrian.test.UdfTest;

public class SchemaModifiers {

    /*
            + "<Role name=\"No_WA_State\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\"partial\">\n"
                + "        <MemberGrant member=\"[Customers].[USA].[WA]\" access=\"none\"/>\n"
                + "        <MemberGrant member=\"[Customers].[USA].[OR]\" access=\"all\"/>\n"
                + "        <MemberGrant member=\"[Customers].[USA].[CA]\" access=\"all\"/>\n"
                + "        <MemberGrant member=\"[Customers].[Canada]\" access=\"all\"/>\n"
                + "        <MemberGrant member=\"[Customers].[Mexico]\" access=\"all\"/>\n"
                + "      </HierarchyGrant>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>\n";
    */
    public static class RoleRestrictionWorksWaRoleDef extends PojoMappingModifier {

        public RoleRestrictionWorksWaRoleDef(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(AccessRoleMappingImpl.builder()
                .withName("No_WA_State")
                .withAccessSchemaGrants(List.of(
                		AccessSchemaGrantMappingImpl.builder()
                        .withAccess(AccessSchema.NONE)
                        .withCubeGrant(List.of(
                        	AccessCubeGrantMappingImpl.builder()
                                .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                .withAccess(AccessCube.ALL)
                                .withHierarchyGrants(List.of(
                                	AccessHierarchyGrantMappingImpl.builder()
                                        .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.customersHierarchy))
                                        .withAccess(AccessHierarchy.CUSTOM)
                                        .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                        .withMemberGrants(List.of(
                                        	AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Customers].[USA].[WA]")
                                                .withAccess(AccessMember.NONE)
                                                .build(),
                                            AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Customers].[USA].[OR]")
                                                .withAccess(AccessMember.ALL)
                                                .build(),
                                            AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Customers].[USA].[CA]")
                                                .withAccess(AccessMember.ALL)
                                                .build(),
                                            AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Customers].[Canada]")
                                                .withAccess(AccessMember.ALL)
                                                .build(),
                                            AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Customers].[Mexico]")
                                                .withAccess(AccessMember.ALL)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .build());
            return result;

        }
    }

    /*
            + "<Role name=\"Only_DF_State\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\"partial\">\n"
                + "        <MemberGrant member=\"[Customers].[USA].[WA]\" access=\"all\"/>\n"
                + "        <MemberGrant member=\"[Customers].[USA].[OR]\" access=\"all\"/>\n"
                + "        <MemberGrant member=\"[Customers].[USA].[CA]\" access=\"all\"/>\n"
                + "        <MemberGrant member=\"[Customers].[Canada]\" access=\"all\"/>\n"
                + "        <MemberGrant member=\"[Customers].[Mexico].[DF]\" access=\"all\"/>\n"
                + "      </HierarchyGrant>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>\n";
    */
    public static class RoleRestrictionWorksDfRoleDef extends PojoMappingModifier {

        public RoleRestrictionWorksDfRoleDef(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(AccessRoleMappingImpl.builder()
                .withName("Only_DF_State")
                .withAccessSchemaGrants(List.of(
                		AccessSchemaGrantMappingImpl.builder()
                        .withAccess(AccessSchema.NONE)
                        .withCubeGrant(List.of(
                        	AccessCubeGrantMappingImpl.builder()
                                .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                .withAccess(AccessCube.ALL)
                                .withHierarchyGrants(List.of(
                                	AccessHierarchyGrantMappingImpl.builder()
                                        .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.customersHierarchy))
                                        .withAccess(AccessHierarchy.CUSTOM)
                                        .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                        .withMemberGrants(List.of(
                                        	AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Customers].[USA].[WA]")
                                                .withAccess(AccessMember.ALL)
                                                .build(),
                                            AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Customers].[USA].[OR]")
                                                .withAccess(AccessMember.ALL)
                                                .build(),
                                            AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Customers].[USA].[CA]")
                                                .withAccess(AccessMember.ALL)
                                                .build(),
                                            AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Customers].[Canada]")
                                                .withAccess(AccessMember.ALL)
                                                .build(),
                                            AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Customers].[Mexico].[DF]")
                                                .withAccess(AccessMember.ALL)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .build());
            return result;

        }
    }

    public static class CustomCountMeasureCubeName extends PojoMappingModifier {

        public CustomCountMeasureCubeName(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<CubeMapping> cubes(List<? extends CubeMapping> cubes) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.cubes(cubes));
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("StoreWithCountM")
                .withQuery(TableQueryMappingImpl.builder().withName("store").build())
                .withDimensionConnectors(List.of(
                	DimensionConnectorMappingImpl.builder()
                        .withVisible(true)
                        .withOverrideDimensionName("Store Type")
                        .withDimension(
                        	StandardDimensionMappingImpl.builder()
                        		.withName("Store Type")
                        		.withHierarchies(List.of(
                        			HierarchyMappingImpl.builder()
                        				.withVisible(true)
                        				.withHasAll(true)
                        				.withLevels(List.of(
                        					LevelMappingImpl.builder()
                        						.withName("Store Type")
                        						.withVisible(true)
                        						.withColumn("store_type")
                        						.withType(DataType.STRING)
                        						.withUniqueMembers(true)
                        						.withLevelType(LevelType.REGULAR)
                        						.withHideMemberIfType(HideMemberIfType.NEVER)
                        						.build()
                        					))
                        					.build()
                        		))
                        		.build()
                        	)
                        	.build(),
                     DimensionConnectorMappingImpl.builder()
                     	.withOverrideDimensionName("Store")
                     	.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_STORE_WITH_QUERY_STORE))
                        .withVisible(true)
                        .build(),
                     DimensionConnectorMappingImpl.builder()
                        .withVisible(true)
                        .withOverrideDimensionName("Has coffee bar")
                        .withDimension(
                        	StandardDimensionMappingImpl.builder()
                        		.withName("Has coffee bar")
                        		.withHierarchies(List.of(
                        			HierarchyMappingImpl.builder()
                        				.withVisible(true)
                        				.withHasAll(true)
                        				.withLevels(List.of(
                        					LevelMappingImpl.builder()
                        						.withName("Has coffee bar")
                        						.withVisible(true)
                        						.withColumn("coffee_bar")
                        						.withType(DataType.BOOLEAN)
                        						.withUniqueMembers(true)
                        						.withLevelType(LevelType.REGULAR)
                        						.withHideMemberIfType(HideMemberIfType.NEVER)
                        						.build()
                        					))
                        			.build()
                        		))
                        		.build()
                        )
                        .build()
                ))
                .withMeasureGroups(List.of(
                	MeasureGroupMappingImpl.builder()
                		.withMeasures(List.of(
                			MeasureMappingImpl.builder()
                				.withName("Store Sqft")
                				.withColumn("store_sqft")
                				.withFormatString("#,###")
                				.withAggregatorType(MeasureAggregatorType.SUM)
                				.build(),
                			MeasureMappingImpl.builder()
                				.withName("Grocery Sqft")
                				.withColumn("grocery_sqft")
                				.withFormatString("#,###")
                				.withAggregatorType(MeasureAggregatorType.SUM)
                				.build(),
                			MeasureMappingImpl.builder()
                				.withName("CountM")
                				.withColumn("store_id")
                				.withFormatString("Standard")
                				.withAggregatorType(MeasureAggregatorType.COUNT)
                				.withVisible(true)
                				.build()
                		))
                		.build()
                ))
                .build());
            return result;

        }
    }

    public static class SharedDimensionTestModifier extends PojoMappingModifier {
        /*
        "<Cube name=\"Employee Store Analysis A\">\n"
        + "  <Table name=\"inventory_fact_1997\" alias=\"inventory\" />\n"
        + "  <DimensionUsage name=\"Employee\" source=\"Employee\" foreignKey=\"product_id\" />\n"
        + "  <DimensionUsage name=\"Store Type\" source=\"Store Type\" foreignKey=\"warehouse_id\" />\n"
        + "  <Measure name=\"Employee Store Sales\" aggregator=\"sum\" formatString=\"$#,##0\" column=\"warehouse_sales\" />\n"
        + "  <Measure name=\"Employee Store Cost\" aggregator=\"sum\" formatString=\"$#,##0\" column=\"warehouse_cost\" />\n"
        + "</Cube>";


        "<Cube name=\"Employee Store Analysis B\">\n"
        + "  <Table name=\"inventory_fact_1997\" alias=\"inventory\" />\n"
        + "  <DimensionUsage name=\"Employee\" source=\"Employee\" foreignKey=\"time_id\" />\n"
        + "  <DimensionUsage name=\"Store Type\" source=\"Store Type\" foreignKey=\"store_id\" />\n"
        + "  <Measure name=\"Employee Store Sales\" aggregator=\"sum\" formatString=\"$#,##0\" column=\"warehouse_sales\" />\n"
        + "  <Measure name=\"Employee Store Cost\" aggregator=\"sum\" formatString=\"$#,##0\" column=\"warehouse_cost\" />\n"
        + "</Cube>";

        "<VirtualCube name=\"Employee Store Analysis\">\n"
        + "  <VirtualCubeDimension name=\"Employee\"/>\n"
        + "  <VirtualCubeDimension name=\"Store Type\"/>\n"
        + "  <VirtualCubeMeasure cubeName=\"Employee Store Analysis A\" name=\"[Measures].[Employee Store Sales]\"/>\n"
        + "  <VirtualCubeMeasure cubeName=\"Employee Store Analysis B\" name=\"[Measures].[Employee Store Cost]\"/>\n"
        + "</VirtualCube>";

        "<Dimension name=\"Employee\">\n"
        + "  <Hierarchy hasAll=\"true\" primaryKey=\"employee_id\" primaryKeyTable=\"employee\">\n"
        + "    <Join leftKey=\"supervisor_id\" rightKey=\"employee_id\">\n"
        + "      <Table name=\"employee\" alias=\"employee\" />\n"
        + "      <Table name=\"employee\" alias=\"employee_manager\" />\n"
        + "    </Join>\n"
        + "    <Level name=\"Role\" table=\"employee_manager\" column=\"management_role\" uniqueMembers=\"true\"/>\n"
        + "    <Level name=\"Title\" table=\"employee_manager\" column=\"position_title\" uniqueMembers=\"false\"/>\n"
        + "  </Hierarchy>\n"
        + "</Dimension>";

        */

    	private static final StandardDimensionMappingImpl d = StandardDimensionMappingImpl.builder()
        .withName("Employee")
        .withHierarchies(List.of(
            HierarchyMappingImpl.builder()
                .withHasAll(true)
                .withPrimaryKey("employee_id")
                .withPrimaryKeyTable("employee")
                .withQuery(JoinQueryMappingImpl.builder()
                		.withLeft(JoinedQueryElementMappingImpl.builder()
                				.withKey("supervisor_id")
                				.withQuery(TableQueryMappingImpl.builder().withName("employee").withAlias("employee").build())
                				.build())
                		.withRight(JoinedQueryElementMappingImpl.builder()
                				.withKey("employee_id")
                				.withQuery(TableQueryMappingImpl.builder().withName("employee").withAlias("employee_manager").build())
                				.build())
                		.build())
                .withLevels(List.of(
                    LevelMappingImpl.builder()
                        .withName("Role")
                        .withTable("employee_manager").withColumn("management_role").withUniqueMembers(true)
                        .build(),
                        LevelMappingImpl.builder()
                        .withName("Title")
                        .withTable("employee_manager").withColumn("position_title").withUniqueMembers(false)
                        .build()
                ))
                .build()
        ))
        .build();

        public SharedDimensionTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CubeMapping> schemaCubes(SchemaMapping schema) {
        	MeasureMappingImpl measureEmployeeStoreSalesA = null;
        	MeasureMappingImpl measureEmployeeStoreCostA = null;
        	MeasureMappingImpl measureEmployeeStoreSalesB = null;
        	MeasureMappingImpl measureEmployeeStoreCostB = null;

            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.schemaCubes(schema));
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("Employee Store Analysis A")
                .withQuery(TableQueryMappingImpl.builder().withName("inventory_fact_1997").withAlias("inventory").build())
                .withDimensionConnectors(List.of(
                    DimensionConnectorMappingImpl.builder()
                    	.withOverrideDimensionName("Employee")
                    	.withDimension(d)
                        .withForeignKey("product_id")
                        .build(),
                    DimensionConnectorMappingImpl.builder()
                        .withOverrideDimensionName("Store Type")
                        .withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_STORE_TYPE_WITH_QUERY_STORE))
                        .withForeignKey("warehouse_id")
                        .build()
                ))
                .withMeasureGroups(List.of(MeasureGroupMappingImpl.builder()
                		.withMeasures(List.of(
                			measureEmployeeStoreSalesA = MeasureMappingImpl.builder()
                                .withName("Employee Store Sales")
                                .withAggregatorType(MeasureAggregatorType.SUM)
                                .withFormatString("$#,##0")
                                .withColumn("warehouse_sales")
                                .build(),
                            measureEmployeeStoreCostA = MeasureMappingImpl.builder()
                                .withName("Employee Store Cost")
                                .withAggregatorType(MeasureAggregatorType.SUM)
                                .withFormatString("$#,##0")
                                .withColumn("warehouse_cost")
                                .build()
                        )).build()))
                .build());
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("Employee Store Analysis B")
                .withQuery(TableQueryMappingImpl.builder().withName("inventory_fact_1997").withAlias("inventory").build())
                .withDimensionConnectors(List.of(
                    DimensionConnectorMappingImpl.builder()
                        .withOverrideDimensionName("Employee")
                        .withDimension(d)
                        .withForeignKey("time_id")
                        .build(),
                    DimensionConnectorMappingImpl.builder()
                        .withOverrideDimensionName("Store Type")
                        .withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_STORE_TYPE_WITH_QUERY_STORE))
                        .withForeignKey("store_id")
                        .build()
                ))
                .withMeasureGroups(List.of(MeasureGroupMappingImpl.builder()
                		.withMeasures(List.of(
                			measureEmployeeStoreSalesB = MeasureMappingImpl.builder()
                                .withName("Employee Store Sales")
                                .withAggregatorType(MeasureAggregatorType.SUM)
                                .withFormatString("$#,##0")
                                .withColumn("warehouse_sales")
                                .build(),
                            measureEmployeeStoreCostB = MeasureMappingImpl.builder()
                                .withName("Employee Store Cost")
                                .withAggregatorType(MeasureAggregatorType.SUM)
                                .withFormatString("$#,##0")
                                .withColumn("warehouse_cost")
                                .build()
                        )).build()))
                .build());

            result.add(VirtualCubeMappingImpl.builder()
                    .withName("Employee Store Analysis")
                    .withDimensionConnectors(List.of(
                        DimensionConnectorMappingImpl.builder()
                            .withOverrideDimensionName("Employee")
                            .withDimension(d)
                            .withPhysicalCube(null)
                            .build(),
                        DimensionConnectorMappingImpl.builder()
                            .withOverrideDimensionName("Store Type")
                            .withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_STORE_TYPE_WITH_QUERY_STORE))
                            .withPhysicalCube(null)
                            .build()
                    ))
                    .withReferencedMeasures(List.of(
                    			measureEmployeeStoreSalesA,
                    			measureEmployeeStoreCostB
                    ))
                    .build());

            return result;

        }
    }

    public static class SharedDimensionTestModifier1 extends PojoMappingModifier {

        /*
                "<Cube name=\"Alternate Sales\">\n"
        + "  <Table name=\"sales_fact_1997\"/>\n"
        + "  <DimensionUsage name=\"Store Type\" source=\"Store Type\" foreignKey=\"store_id\" />\n"
        + "  <DimensionUsage name=\"Store\" source=\"Store\" foreignKey=\"store_id\"/>\n"
        + "  <DimensionUsage name=\"Buyer\" source=\"Store\" visible=\"true\" foreignKey=\"product_id\" highCardinality=\"false\"/>\n"
        + "  <DimensionUsage name=\"BuyerTwo\" source=\"Store\" visible=\"true\" foreignKey=\"product_id\" highCardinality=\"false\"/>\n"
        + "  <DimensionUsage name=\"Store Size in SQFT\" source=\"Store Size in SQFT\"\n"
        + "      foreignKey=\"store_id\"/>\n"
        + "  <DimensionUsage name=\"Store Type\" source=\"Store Type\" foreignKey=\"store_id\"/>\n"
        + "  <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
        + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\" formatString=\"Standard\"/>\n"
        + "</Cube>";

         */
        public SharedDimensionTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CubeMapping> schemaCubes(SchemaMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.schemaCubes(schema));
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("Alternate Sales")
                .withQuery(TableQueryMappingImpl.builder().withName("sales_fact_1997").build())
                .withDimensionConnectors(List.of(
                	DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Store Type")
                		.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_STORE_TYPE_WITH_QUERY_STORE))
                        .withForeignKey("store_id")
                        .build(),
                    DimensionConnectorMappingImpl.builder()
                        .withOverrideDimensionName("Store")
                        .withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_STORE_WITH_QUERY_STORE))
                        .withForeignKey("store_id")
                        .build(),
                    DimensionConnectorMappingImpl.builder()
                        .withOverrideDimensionName("Buyer")
                        .withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_STORE_WITH_QUERY_STORE))
                        .withVisible(true)
                        .withForeignKey("product_id")
                        .build(),
                    DimensionConnectorMappingImpl.builder()
                        .withOverrideDimensionName("BuyerTwo")
                        .withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_STORE_WITH_QUERY_STORE))
                        .withVisible(true)
                        .withForeignKey("product_id")
                        .build(),
                    DimensionConnectorMappingImpl.builder()
                        .withOverrideDimensionName("Store Size in SQFT")
                        .withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_STORE_SIZE_IN_SQFT))
                        .withForeignKey("store_id")
                        .build(),
                    DimensionConnectorMappingImpl.builder()
                        .withOverrideDimensionName("Store Type")
                        .withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_STORE_TYPE_WITH_QUERY_STORE))
                        .withForeignKey("store_id")
                        .build(),
                    DimensionConnectorMappingImpl.builder()
                        .withOverrideDimensionName("Time")
                        .withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_TIME))
                        .withForeignKey("time_id")
                        .build()

                ))
                .withMeasureGroups(List.of(
                	MeasureGroupMappingImpl.builder()
                	.withMeasures(List.of(
                        MeasureMappingImpl.builder()
                            .withName("Unit Sales")
                            .withColumn("unit_sales")
                            .withAggregatorType(MeasureAggregatorType.SUM)
                            .withFormatString("Standard")
                            .build()

                	))
                	.build()
                ))
                .build());
            return result;

        }

    }

    public static class AggregationOnDistinctCountMeasuresTestModifier extends PojoMappingModifier {

        public AggregationOnDistinctCountMeasuresTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CubeMapping> schemaCubes(SchemaMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.schemaCubes(schema));
            result.add(VirtualCubeMappingImpl.builder()
                    .withName("Warehouse and Sales2")
                    .withDefaultMeasure((MeasureMappingImpl) look(FoodmartMappingSupplier.MEASURE_STORE_SALES))
                    .withDimensionConnectors(List.of(
                    	DimensionConnectorMappingImpl.builder()
                    		.withPhysicalCube((PhysicalCubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                    		.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_GENDER))
                    		.withOverrideDimensionName("Gender")
                    		.build(),
                       	DimensionConnectorMappingImpl.builder()
                    		.withPhysicalCube((PhysicalCubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                    		.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_STORE_WITH_QUERY_STORE))
                    		.withOverrideDimensionName("Store")
                    		.build(),
                        DimensionConnectorMappingImpl.builder()
                        		.withPhysicalCube((PhysicalCubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                        		.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_PRODUCT))
                        		.withOverrideDimensionName("Product")
                        		.build(),
                        DimensionConnectorMappingImpl.builder()
                        		.withPhysicalCube((PhysicalCubeMappingImpl) look(FoodmartMappingSupplier.CUBE_WAREHOUSE))
                        		.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_WAREHOUSE))
                        		.withOverrideDimensionName("Warehouse")
                        		.build()
                    ))
                    .withReferencedMeasures(List.of(
                    	look(FoodmartMappingSupplier.MEASURE_STORE_SALES),
                    	look(FoodmartMappingSupplier.MEASURE_CUSTOMER_COUNT)
                    ))
            	.build());
            return result;
        }

    }

    //storeDimensionLevelDependent,
    //cubeA,
    public static class SelectNotInGroupByTestModifier1 extends PojoMappingModifier {

    	private static final StandardDimensionMappingImpl customStoreDimension = StandardDimensionMappingImpl.builder()
        .withName("CustomStore")
        .withHierarchies(List.of(
            HierarchyMappingImpl.builder()
                .withHasAll(true)
                .withPrimaryKey("store_id")
                .withQuery(TableQueryMappingImpl.builder().withName("store").build())
                .withLevels(List.of(
                    LevelMappingImpl.builder()
                        .withName("Store Country")
                        .withColumn("store_country")
                        .withUniqueMembers(true)
                        .build(),
                    LevelMappingImpl.builder()
                        .withName("Store City")
                        .withColumn("store_city")
                        .withUniqueMembers(false)
                        .withMemberProperties(List.of(
                            MemberPropertyMappingImpl.builder()
                                .withName("Store State")
                                .withColumn("store_state")
                                .withDependsOnLevelValue(true)
                                .build()
                        ))
                        .build(),
                    LevelMappingImpl.builder()
                        .withName("Store Name")
                        .withColumn("store_name")
                        .withUniqueMembers(true)
                        .build()
                ))
                .build()))
        .build();


        public SelectNotInGroupByTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CubeMapping> schemaCubes(SchemaMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.schemaCubes(schema));
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("CustomSales")
                .withQuery(TableQueryMappingImpl.builder().withName("sales_fact_1997").build())
                .withDimensionConnectors(List.of(
                	DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("CustomStore")
                        .withDimension(customStoreDimension)
                        .withForeignKey("store_id")
                        .build()
                ))
                .withMeasureGroups(List.of(
                	MeasureGroupMappingImpl.builder()
                	.withMeasures(List.of(
                    MeasureMappingImpl.builder()
                        .withName("Custom Store Sales")
                        .withColumn("store_sales")
                        .withAggregatorType(MeasureAggregatorType.SUM)
                        .withFormatString("#,###.00")
                        .build(),
                    MeasureMappingImpl.builder()
                        .withName("Custom Store Cost")
                        .withColumn("store_cost")
                        .withAggregatorType(MeasureAggregatorType.SUM)
                        .build(),
                    MeasureMappingImpl.builder()
                        .withName("Sales Count")
                        .withColumn("product_id")
                        .withAggregatorType(MeasureAggregatorType.COUNT)
                        .build()
                ))
                	.build()
                ))
                .build());
            return result;
        }

    }



    //storeDimensionLevelIndependent,
    //cubeA,
    /*
             "<Dimension name=\"CustomStore\">\n"
        + "  <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n"
        + "    <Table name=\"store\"/>\n"
        + "    <Level name=\"Store Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
        + "    <Level name=\"Store City\" column=\"store_city\" uniqueMembers=\"false\">\n"
        + "      <Property name=\"Store State\" column=\"store_state\"/>\n"
        + "    </Level>\n"
        + "    <Level name=\"Store Name\" column=\"store_name\" uniqueMembers=\"true\"/>\n"
        + "  </Hierarchy>\n"
        + "</Dimension>";

     */
    /*
               "<Cube name=\"CustomSales\">\n"
        + "  <Table name=\"sales_fact_1997\"/>\n"
        + "  <DimensionUsage name=\"CustomStore\" source=\"CustomStore\" foreignKey=\"store_id\"/>\n"
        + "  <Measure name=\"Custom Store Sales\" column=\"store_sales\" aggregator=\"sum\" formatString=\"#,###.00\"/>\n"
        + "  <Measure name=\"Custom Store Cost\" column=\"store_cost\" aggregator=\"sum\"/>\n"
        + "  <Measure name=\"Sales Count\" column=\"product_id\" aggregator=\"count\"/>\n"
        + "</Cube>";

     */

    public static class SelectNotInGroupByTestModifier2 extends PojoMappingModifier {

    	private static final StandardDimensionMappingImpl customStoreDimension = StandardDimensionMappingImpl.builder()
    	        .withName("CustomStore")
    	        .withHierarchies(List.of(
    	            HierarchyMappingImpl.builder()
    	                .withHasAll(true)
    	                .withPrimaryKey("store_id")
    	                .withQuery(TableQueryMappingImpl.builder().withName("store").build())
    	                .withLevels(List.of(
    	                    LevelMappingImpl.builder()
    	                        .withName("Store Country")
    	                        .withColumn("store_country")
    	                        .withUniqueMembers(true)
    	                        .build(),
    	                    LevelMappingImpl.builder()
    	                        .withName("Store City")
    	                        .withColumn("store_city")
    	                        .withUniqueMembers(false)
    	                        .withMemberProperties(List.of(
    	                            MemberPropertyMappingImpl.builder()
    	                                .withName("Store State")
    	                                .withColumn("store_state")
    	                                .build()
    	                        ))
    	                        .build(),
    	                    LevelMappingImpl.builder()
    	                        .withName("Store Name")
    	                        .withColumn("store_name")
    	                        .withUniqueMembers(true)
    	                        .build()
    	                ))
    	                .build()))
    	        .build();

        public SelectNotInGroupByTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CubeMapping> schemaCubes(SchemaMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.schemaCubes(schema));
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("CustomSales")
                .withQuery(TableQueryMappingImpl.builder().withName("sales_fact_1997").build())
                .withDimensionConnectors(List.of(
                	DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("CustomStore")
                		.withDimension(customStoreDimension)
                        .withForeignKey("store_id")
                        .build()
                ))
                .withMeasureGroups(List.of(
                	MeasureGroupMappingImpl.builder()
                	.withMeasures(List.of(
                        MeasureMappingImpl.builder()
                            .withName("Custom Store Sales")
                            .withColumn("store_sales")
                            .withAggregatorType(MeasureAggregatorType.SUM)
                            .withFormatString("#,###.00")
                            .build(),
                        MeasureMappingImpl.builder()
                            .withName("Custom Store Cost")
                            .withColumn("store_cost")
                            .withAggregatorType(MeasureAggregatorType.SUM)
                            .build(),
                        MeasureMappingImpl.builder()
                            .withName("Sales Count")
                            .withColumn("product_id")
                            .withAggregatorType(MeasureAggregatorType.COUNT)
                            .build()
                	))
                	.build()
                ))
                .build());
            return result;
        }
    }

    //storeDimensionUniqueLevelDependentProp,
    //cubeA
    public static class SelectNotInGroupByTestModifier3 extends PojoMappingModifier {

    	private static final StandardDimensionMappingImpl customStoreDimension = StandardDimensionMappingImpl.builder()
    	        .withName("CustomStore")
    	        .withHierarchies(List.of(
    	            HierarchyMappingImpl.builder()
    	                .withHasAll(true)
    	                .withPrimaryKey("store_id")
    	                .withUniqueKeyLevelName("Store Name")
    	                .withQuery(TableQueryMappingImpl.builder().withName("store").build())
    	                .withLevels(List.of(
    	                    LevelMappingImpl.builder()
    	                        .withName("Store Country")
    	                        .withColumn("store_country")
    	                        .withUniqueMembers(true)
    	                        .build(),
    	                    LevelMappingImpl.builder()
    	                        .withName("Store City")
    	                        .withColumn("store_city")
    	                        .withUniqueMembers(false)
    	                        .withMemberProperties(List.of(
    	                            MemberPropertyMappingImpl.builder()
    	                                .withName("Store State")
    	                                .withColumn("store_state")
    	                                .withDependsOnLevelValue(true)
    	                                .build()
    	                        ))
    	                        .build(),
    	                    LevelMappingImpl.builder()
    	                        .withName("Store Name")
    	                        .withColumn("store_name")
    	                        .withUniqueMembers(true)
    	                        .build()
    	                ))
    	                .build()))
    	        .build();


        public SelectNotInGroupByTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CubeMapping> schemaCubes(SchemaMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.schemaCubes(schema));
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("CustomSales")
                .withQuery(TableQueryMappingImpl.builder().withName("sales_fact_1997").build())
                .withDimensionConnectors(List.of(
                	DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("CustomStore")
                		.withDimension(customStoreDimension)
                        .withForeignKey("store_id")
                        .build()
                ))
                .withMeasureGroups(List.of(
                	MeasureGroupMappingImpl.builder()
                	.withMeasures(List.of(
                        MeasureMappingImpl.builder()
                            .withName("Custom Store Sales")
                            .withColumn("store_sales")
                            .withAggregatorType(MeasureAggregatorType.SUM)
                            .withFormatString("#,###.00")
                            .build(),
                        MeasureMappingImpl.builder()
                            .withName("Custom Store Cost")
                            .withColumn("store_cost")
                            .withAggregatorType(MeasureAggregatorType.SUM)
                            .build(),
                        MeasureMappingImpl.builder()
                            .withName("Sales Count")
                            .withColumn("product_id")
                            .withAggregatorType(MeasureAggregatorType.COUNT)
                            .build()
                	))
                	.build()
                ))
                .build());
            return result;
        }

    }

    //storeDimensionUniqueLevelIndependentProp,
    //cubeA
    public static class SelectNotInGroupByTestModifier4 extends PojoMappingModifier {

    	private static final StandardDimensionMappingImpl customStoreDimension = StandardDimensionMappingImpl.builder()
    	        .withName("CustomStore")
    	        .withHierarchies(List.of(
    	            HierarchyMappingImpl.builder()
    	                .withHasAll(true)
    	                .withPrimaryKey("store_id")
    	                .withUniqueKeyLevelName("Store Name")
    	                .withQuery(TableQueryMappingImpl.builder().withName("store").build())
    	                .withLevels(List.of(
    	                    LevelMappingImpl.builder()
    	                        .withName("Store Country")
    	                        .withColumn("store_country")
    	                        .withUniqueMembers(true)
    	                        .build(),
    	                    LevelMappingImpl.builder()
    	                        .withName("Store City")
    	                        .withColumn("store_city")
    	                        .withUniqueMembers(false)
    	                        .withMemberProperties(List.of(
    	                            MemberPropertyMappingImpl.builder()
    	                                .withName("Store State")
    	                                .withColumn("store_state")
    	                                .withDependsOnLevelValue(false)
    	                                .build()
    	                        ))
    	                        .build(),
    	                    LevelMappingImpl.builder()
    	                        .withName("Store Name")
    	                        .withColumn("store_name")
    	                        .withUniqueMembers(true)
    	                        .build()
    	                ))
    	                .build()))
    	        .build();

        public SelectNotInGroupByTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }


        protected List<? extends CubeMapping> schemaCubes(SchemaMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.schemaCubes(schema));
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("CustomSales")
                .withQuery(TableQueryMappingImpl.builder().withName("sales_fact_1997").build())
                .withDimensionConnectors(List.of(
                	DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("CustomStore")
                		.withDimension(customStoreDimension)
                        .withForeignKey("store_id")
                        .build()
                ))
                .withMeasureGroups(List.of(
                	MeasureGroupMappingImpl.builder()
                	.withMeasures(List.of(
                        MeasureMappingImpl.builder()
                            .withName("Custom Store Sales")
                            .withColumn("store_sales")
                            .withAggregatorType(MeasureAggregatorType.SUM)
                            .withFormatString("#,###.00")
                            .build(),
                        MeasureMappingImpl.builder()
                            .withName("Custom Store Cost")
                            .withColumn("store_cost")
                            .withAggregatorType(MeasureAggregatorType.SUM)
                            .build(),
                        MeasureMappingImpl.builder()
                            .withName("Sales Count")
                            .withColumn("product_id")
                            .withAggregatorType(MeasureAggregatorType.COUNT)
                            .build()
                	))
                	.build()
                ))
                .build());
            return result;
        }
    }


    public static class IgnoreUnrelatedDimensionsTestModifier extends PojoMappingModifier {

        public IgnoreUnrelatedDimensionsTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        /*
 			"<VirtualCube name=\"Warehouse and Sales2\" defaultMeasure=\"Store Sales\">\n"
            + "  <CubeUsages>"
            + "   <CubeUsage cubeName=\"Sales\" ignoreUnrelatedDimensions=\"true\"/>\n"
            + "   <CubeUsage cubeName=\"Warehouse\" ignoreUnrelatedDimensions=\"true\"/>\n"
            + "  </CubeUsages>"
            + "  <VirtualCubeDimension cubeName=\"Sales\" name=\"Customers\"/>\n"
            + "  <VirtualCubeDimension cubeName=\"Sales\" name=\"Education Level\"/>\n"
            + "  <VirtualCubeDimension cubeName=\"Sales\" name=\"Gender\"/>\n"
            + "  <VirtualCubeDimension cubeName=\"Sales\" name=\"Marital Status\"/>\n"
            + "  <VirtualCubeDimension name=\"Product\"/>\n"
            + "  <VirtualCubeDimension cubeName=\"Sales\" name=\"Promotion Media\"/>\n"
            + "  <VirtualCubeDimension cubeName=\"Sales\" name=\"Promotions\"/>\n"
            + "  <VirtualCubeDimension name=\"Store\"/>\n"
            + "  <VirtualCubeDimension name=\"Time\"/>\n"
            + "  <VirtualCubeDimension cubeName=\"Sales\" name=\"Yearly Income\"/>\n"
            + "  <VirtualCubeDimension cubeName=\"Warehouse\" name=\"Warehouse\"/>\n"
            + "  <VirtualCubeMeasure cubeName=\"Sales\" name=\"[Measures].[Sales Count]\"/>\n"
            + "  <VirtualCubeMeasure cubeName=\"Sales\" name=\"[Measures].[Store Cost]\"/>\n"
            + "  <VirtualCubeMeasure cubeName=\"Sales\" name=\"[Measures].[Store Sales]\"/>\n"
            + "  <VirtualCubeMeasure cubeName=\"Sales\" name=\"[Measures].[Unit Sales]\"/>\n"
            + "  <VirtualCubeMeasure cubeName=\"Sales\" name=\"[Measures].[Profit]\"/>\n"
            + "  <VirtualCubeMeasure cubeName=\"Sales\" name=\"[Measures].[Profit Growth]\"/>\n"
            + "  <VirtualCubeMeasure cubeName=\"Warehouse\" name=\"[Measures].[Store Invoice]\"/>\n"
            + "  <VirtualCubeMeasure cubeName=\"Warehouse\" name=\"[Measures].[Supply Time]\"/>\n"
            + "  <VirtualCubeMeasure cubeName=\"Warehouse\" name=\"[Measures].[Units Ordered]\"/>\n"
            + "  <VirtualCubeMeasure cubeName=\"Warehouse\" name=\"[Measures].[Units Shipped]\"/>\n"
            + "  <VirtualCubeMeasure cubeName=\"Warehouse\" name=\"[Measures].[Warehouse Cost]\"/>\n"
            + "  <VirtualCubeMeasure cubeName=\"Warehouse\" name=\"[Measures].[Warehouse Profit]\"/>\n"
            + "  <VirtualCubeMeasure cubeName=\"Warehouse\" name=\"[Measures].[Warehouse Sales]\"/>\n"
            + "  <VirtualCubeMeasure cubeName=\"Warehouse\" name=\"[Measures].[Average Warehouse Sale]\"/>\n"
            + "  <CalculatedMember name=\"Profit Per Unit Shipped\" dimension=\"Measures\">\n"
            + "    <Formula>[Measures].[Profit] / [Measures].[Units Shipped]</Formula>\n"
            + "  </CalculatedMember>\n"
            + "</VirtualCube>",
         */

        protected List<? extends CubeMapping> schemaCubes(SchemaMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.add(VirtualCubeMappingImpl.builder()
                    .withName("Warehouse and Sales2")
                    .withDefaultMeasure((MeasureMappingImpl) look(FoodmartMappingSupplier.MEASURE_STORE_SALES))
                    .withCubeUsages(List.of(
                    	CubeConnectorMappingImpl.builder()
                    	.withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                    	.withIgnoreUnrelatedDimensions(true)
                    	.build(),
                    CubeConnectorMappingImpl.builder()
                    	.withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_WAREHOUSE))
                    	.withIgnoreUnrelatedDimensions(true)
                    	.build()
                    ))
                    .withDimensionConnectors(List.of(
                    	DimensionConnectorMappingImpl.builder()
                    	.withPhysicalCube((PhysicalCubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                    	.withOverrideDimensionName("Customers")
                    	.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_CUSTOMERS))
                    	.build(),
                    	DimensionConnectorMappingImpl.builder()
                    	.withPhysicalCube((PhysicalCubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                    	.withOverrideDimensionName("Education Level")
                    	.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_EDUCATION_LEVEL))
                    	.build(),
                    	DimensionConnectorMappingImpl.builder()
                    	.withPhysicalCube((PhysicalCubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                    	.withOverrideDimensionName("Gender")
                    	.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_GENDER))
                    	.build(),
                    	DimensionConnectorMappingImpl.builder()
                    	.withPhysicalCube((PhysicalCubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                    	.withOverrideDimensionName("Marital Status")
                    	.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_MARITAL_STATUS))
                    	.build(),
                    	DimensionConnectorMappingImpl.builder()
                    	.withPhysicalCube((PhysicalCubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                    	.withOverrideDimensionName("Product")
                    	.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_PRODUCT))
                    	.build(),
                    	DimensionConnectorMappingImpl.builder()
                    	.withPhysicalCube((PhysicalCubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                    	.withOverrideDimensionName("Promotion Media")
                    	.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_PROMOTION_MEDIA))
                    	.build(),
                    	DimensionConnectorMappingImpl.builder()
                    	.withPhysicalCube((PhysicalCubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                    	.withOverrideDimensionName("Promotions")
                    	.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_PROMOTIONS))
                    	.build(),
                    	DimensionConnectorMappingImpl.builder()
                    	.withPhysicalCube((PhysicalCubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                    	.withOverrideDimensionName("Store")
                    	.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_STORE_WITH_QUERY_STORE))
                    	.build(),
                    	DimensionConnectorMappingImpl.builder()
                    	.withPhysicalCube((PhysicalCubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                    	.withOverrideDimensionName("Time")
                    	.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_TIME))
                    	.build(),
                    	DimensionConnectorMappingImpl.builder()
                    	.withPhysicalCube((PhysicalCubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                    	.withOverrideDimensionName("Yearly Income")
                    	.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_YEARLY_INCOME))
                    	.build(),
                    	DimensionConnectorMappingImpl.builder()
                    	.withPhysicalCube((PhysicalCubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                    	.withOverrideDimensionName("Warehouse")
                    	.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_WAREHOUSE))
                    	.build()
                    ))
                    .withReferencedCalculatedMembers(List.of(
                    		look(FoodmartMappingSupplier.CALCULATED_MEMBER_PROFIT),
                    		look(FoodmartMappingSupplier.CALCULATED_MEMBER_PROFIT_GROWTH),
                    		look(FoodmartMappingSupplier.CALCULATED_MEMBER_AVERAGE_WAREHOUSE_SALE)
                    ))
                    .withReferencedMeasures(List.of(
                    		look(FoodmartMappingSupplier.MEASURE_SALES_COUNT),
                    		look(FoodmartMappingSupplier.MEASURE_STORE_COST),
                    		look(FoodmartMappingSupplier.MEASURE_STORE_SALES),
                    		look(FoodmartMappingSupplier.MEASURE_UNIT_SALES),
                    		look(FoodmartMappingSupplier.MEASURE_UNIT_SALES),
                    		look(FoodmartMappingSupplier.MEASURE_STORE_INVOICE),
                    		look(FoodmartMappingSupplier.MEASURE_SUPPLY_TIME),
                    		look(FoodmartMappingSupplier.MEASURE_UNITS_ORDERED),
                    		look(FoodmartMappingSupplier.MEASURE_UNITS_SHIPPED),
                    		look(FoodmartMappingSupplier.MEASURE_WAREHOUSE_COST),
                    		look(FoodmartMappingSupplier.MEASURE_WAREHOUSE_PROFIT),
                    		look(FoodmartMappingSupplier.MEASURE_WAREHOUSE_SALES)
                    ))
                    .withCalculatedMembers(List.of(
                        CalculatedMemberMappingImpl.builder()
                            .withName("Profit Per Unit Shipped")
                            //.dimension("Measures")
                            .withFormula("[Measures].[Profit] / [Measures].[Units Shipped]")
                            .build()
                    ))
                    .build());

            result.addAll(super.schemaCubes(schema));
            return result;
        }
    }

    //cubeSales3
    public static class IgnoreUnrelatedDimensionsTestModifier1 extends PojoMappingModifier {

        public IgnoreUnrelatedDimensionsTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

            /*
            "<Cube name=\"Sales 3\">\n"
                + "   <Table name=\"sales_fact_1997\"/>\n"
                + "   <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
                + "   <Dimension name=\"Education Level\" foreignKey=\"customer_id\">\n"
                + "    <Hierarchy hasAll=\"true\" primaryKey=\"customer_id\">\n"
                + "      <Table name=\"customer\"/>\n"
                + "      <Level name=\"Education Level\" column=\"education\" uniqueMembers=\"true\"/>\n"
                + "    </Hierarchy>\n"
                + "  </Dimension>\n"
                + "   <DimensionUsage name=\"Product\" source=\"Product\" foreignKey=\"product_id\"/>\n"
                + "   <Dimension name=\"Gender\" foreignKey=\"customer_id\">\n"
                + "     <Hierarchy hasAll=\"true\" defaultMember=\"[Gender].[F]\" "
                + "allMemberName=\"All Gender\" primaryKey=\"customer_id\">\n"
                + "       <Table name=\"customer\"/>\n"
                + "       <Level name=\"Gender\" column=\"gender\" uniqueMembers=\"true\"/>\n"
                + "     </Hierarchy>\n"
                + "   </Dimension>\n"
                + "   <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"    formatString=\"Standard\">\n"
                + "     <CalculatedMemberProperty name=\"MEMBER_ORDINAL\" value=\"2\"/>\n"
                + "   </Measure>\n"
                + "</Cube>";
            */


        protected List<? extends CubeMapping> schemaCubes(SchemaMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.schemaCubes(schema));
            PhysicalCubeMappingImpl cubeSales3;
            StandardDimensionMappingImpl dGender;
            StandardDimensionMappingImpl dEducationLevel;
            MeasureMappingImpl mUnitSales;

            result.add(cubeSales3 = PhysicalCubeMappingImpl.builder()
                .withName("Sales 3")
                .withQuery(TableQueryMappingImpl.builder().withName("sales_fact_1997").build())
                .withDimensionConnectors(List.of(
                	DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Time")
                		.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_TIME))
                        .withForeignKey("time_id")
                        .build(),
                    DimensionConnectorMappingImpl.builder()
                    	.withOverrideDimensionName("Education Level")
                    	.withForeignKey("customer_id")
                    	.withDimension(
                    			dEducationLevel = StandardDimensionMappingImpl.builder()
                                .withName("Education Level")
                                .withHierarchies(List.of(
                                    HierarchyMappingImpl.builder()
                                        .withHasAll(true)
                                        .withPrimaryKey("customer_id")
                                        .withQuery(TableQueryMappingImpl.builder().withName("customer").build())
                                        .withLevels(List.of(
                                            LevelMappingImpl.builder()
                                                .withName("Education Level")
                                                .withColumn("education")
                                                .withUniqueMembers(true)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                    	)
                    	.build(),
                    DimensionConnectorMappingImpl.builder()
                        .withOverrideDimensionName("Product")
                        .withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_PRODUCT))
                        .withForeignKey("product_id")
                        .build(),
                    DimensionConnectorMappingImpl.builder()
                        .withOverrideDimensionName("Gender")
                        .withForeignKey("customer_id")
                        .withDimension(
                        		dGender = StandardDimensionMappingImpl.builder()
                        		.withName("Gender")
                        		.withHierarchies(List.of(
                        			HierarchyMappingImpl.builder()
                        				.withHasAll(true)
                        				.withDefaultMember("[Gender].[F]")
                        				.withAllMemberName("All Gender")
                        				.withPrimaryKey("customer_id")
                        				.withQuery(TableQueryMappingImpl.builder().withName("customer").build())
                        				.withLevels(List.of(
                        					LevelMappingImpl.builder()
                        						.withName("Gender")
                        						.withColumn("gender")
                        						.withUniqueMembers(true)
                        						.build()
                        				))
                        				.build()
                        		))
                        		.build()
                        ).build()
                ))
                .withMeasureGroups(List.of(
                	MeasureGroupMappingImpl.builder()
                	.withMeasures(List.of(
                		mUnitSales = MeasureMappingImpl.builder()
                            .withName("Unit Sales")
                            .withColumn("unit_sales")
                            .withAggregatorType(MeasureAggregatorType.SUM)
                            .withFormatString("Standard")
                            .withCalculatedMemberProperty(List.of(
                                CalculatedMemberPropertyMappingImpl.builder()
                                    .withName("MEMBER_ORDINAL")
                                    .withValue("2")
                                    .build()
                            ))
                            .build()
                	))
                	.build()
                ))
                .build());

            result.add(VirtualCubeMappingImpl.builder()
                    .withName("Warehouse and Sales 3")
                    .withDefaultMeasure((MeasureMappingImpl) look(FoodmartMappingSupplier.MEASURE_STORE_INVOICE))
                    .withCubeUsages(List.of(
                    	CubeConnectorMappingImpl.builder()
                    		.withCube(cubeSales3)
                            .withIgnoreUnrelatedDimensions(false)
                            .build(),
                        CubeConnectorMappingImpl.builder()
                            .withCube(FoodmartMappingSupplier.CUBE_WAREHOUSE)
                            .withIgnoreUnrelatedDimensions(true)
                            .build()
                    ))
                    .withDimensionConnectors(List.of(
                    	DimensionConnectorMappingImpl.builder()
                    	.withPhysicalCube(cubeSales3)
                    	.withOverrideDimensionName("Gender")
                    	.withDimension(dGender)
                    	.build(),
                    	DimensionConnectorMappingImpl.builder()
                    	.withPhysicalCube(cubeSales3)
                    	.withOverrideDimensionName("Education Level")
                    	.withDimension(dEducationLevel)
                    	.build(),
                    	DimensionConnectorMappingImpl.builder()
                    	.withPhysicalCube(cubeSales3)
                    	.withOverrideDimensionName("Product")
                    	.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_PRODUCT))
                    	.build(),
                    	DimensionConnectorMappingImpl.builder()
                    	.withPhysicalCube(cubeSales3)
                    	.withOverrideDimensionName("Time")
                    	.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_TIME))
                    	.build(),
                    	DimensionConnectorMappingImpl.builder()
                    	.withPhysicalCube(FoodmartMappingSupplier.CUBE_WAREHOUSE)
                    	.withOverrideDimensionName("Warehouse")
                    	.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_WAREHOUSE))
                    	.build()
                    ))
                    .withReferencedMeasures(List.of(
                    	mUnitSales,
                    	look(FoodmartMappingSupplier.MEASURE_STORE_INVOICE),
                    	look(FoodmartMappingSupplier.MEASURE_WAREHOUSE_SALES)
                    ))
                    .build());
            return result;

        }
    }

    public static class ParentChildHierarchyTestModifier1 extends PojoMappingModifier {

        public ParentChildHierarchyTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }
        /*
            "  <Dimension name=\"EmployeesClosure\" foreignKey=\"employee_id\">\n"
            + "      <Hierarchy hasAll=\"true\" allMemberName=\"All Employees\"\n"
            + "          primaryKey=\"employee_id\" primaryKeyTable=\"employee_closure\">\n"
            + "        <Join leftKey=\"supervisor_id\" rightKey=\"employee_id\">\n"
            + "          <Table name=\"employee_closure\"/>\n"
            + "          <Table name=\"employee\" alias=\"employee2\" />\n"
            + "        </Join>\n"
            + "        <Level name=\"Closure\"  type=\"Numeric\" uniqueMembers=\"false\"\n"
            + "            table=\"employee_closure\" column=\"supervisor_id\"/>\n"
            + "        <Level name=\"Employee\" type=\"Numeric\" uniqueMembers=\"true\"\n"
            + "            table=\"employee_closure\" column=\"employee_id\"/>\n"
            + "      </Hierarchy>\n"
            + "  </Dimension>"));
         */

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("HR".equals(cube.getName())) {
                LevelMappingImpl level1 = LevelMappingImpl
                    .builder()
                    .withName("Closure")
                    .withType(DataType.NUMERIC)
                    .withUniqueMembers(false)
                    .withTable("employee_closure")
                    .withColumn("supervisor_id")
                    .build();
                LevelMappingImpl level2 = LevelMappingImpl
                    .builder()
                    .withName("Employee")
                    .withType(DataType.NUMERIC)
                    .withUniqueMembers(true)
                    .withTable("employee_closure")
                    .withColumn("employee_id")
                    .build();
                HierarchyMappingImpl hierarchy = HierarchyMappingImpl
                    .builder()
                    .withHasAll(true)
                    .withAllMemberName("All Employees")
                    .withPrimaryKey("employee_id")
                    .withPrimaryKeyTable("employee_closure")
                    .withQuery(JoinQueryMappingImpl.builder()
                    		.withLeft(JoinedQueryElementMappingImpl.builder().withKey("supervisor_id")
                    				.withQuery(TableQueryMappingImpl.builder().withName("employee_closure").build())
                    				.build())
                    		.withRight(JoinedQueryElementMappingImpl.builder().withKey("employee_id")
                    				.withQuery(TableQueryMappingImpl.builder().withName("employee").withAlias("employee2").build())
                    				.build())
                    		.build())
                    .withLevels(List.of(level1, level2))
                    .build();

                DimensionConnectorMappingImpl dimension = DimensionConnectorMappingImpl
                    .builder()
                    .withOverrideDimensionName("EmployeesClosure")
                    .withForeignKey("employee_id")
                    .withDimension(StandardDimensionMappingImpl.builder()
                    		.withName("EmployeesClosure")
                    		.withHierarchies(List.of(hierarchy))
                    		.build())
                    .build();
                result.add(dimension);
            }
            return result;
        }
    }

    public static class ParentChildHierarchyTestModifier2 extends PojoMappingModifier {

        public ParentChildHierarchyTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }
        /*
            "<Dimension name=\"EmployeeSnowFlake\" foreignKey=\"employee_id\">"
            + "<Hierarchy hasAll=\"true\" allMemberName=\"All Employees\""
            + "    primaryKey=\"employee_id\" primaryKeyTable=\"employee\">"
            + "  <Join leftKey=\"store_id\""
            + "    rightAlias=\"store\" rightKey=\"store_id\">"
            + "    <Table name=\"employee\"/>"
            + "    <Table name=\"store\"/>"
            + "  </Join>"
            + "  <Level name=\"Employee Stores\" table=\"store\""
            + "      column=\"store_id\" uniqueMembers=\"true\"/>"
            + "  <Level name=\"Employee Id\" type=\"Numeric\" table=\"employee\" uniqueMembers=\"true\""
            + "      column=\"employee_id\" parentColumn=\"supervisor_id\""
            + "      nameColumn=\"full_name\" nullParentValue=\"0\">"
            + "    <Closure parentColumn=\"supervisor_id\" childColumn=\"employee_id\">"
            + "      <Table name=\"employee_closure\"/>"
            + "    </Closure>"
            + "    <Property name=\"Marital Status\" column=\"marital_status\"/>"
            + "    <Property name=\"Position Title\" column=\"position_title\"/>"
            + "    <Property name=\"Gender\" column=\"gender\"/>"
            + "    <Property name=\"Salary\" column=\"salary\"/>"
            + "    <Property name=\"Education Level\" column=\"education_level\"/>"
            + "    <Property name=\"Management Role\" column=\"management_role\"/>"
            + "  </Level>"
            + "</Hierarchy>"
            + "</Dimension>"));
         */

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("HR".equals(cube.getName())) {
                LevelMappingImpl level1 = LevelMappingImpl
                    .builder()
                    .withName("Employee Stores")
                    .withTable("store")
                    .withColumn("store_id")
                    .withUniqueMembers(true)
                    .build();

                LevelMappingImpl level2 = LevelMappingImpl
                    .builder()
                    .withName("Employee Id")
                    .withType(DataType.NUMERIC)
                    .withTable("employee")
                    .withUniqueMembers(true)
                    .withColumn("employee_id")
                    .withParentColumn("supervisor_id")
                    .withNameColumn("full_name")
                    .withNullParentValue("0")
                    .withParentChildLink(
                    	ParentChildLinkMappingImpl.builder()
                    		.withParentColumn("supervisor_id")
                    		.withChildColumn("employee_id")
                    		.withTable(TableQueryMappingImpl.builder().withName("employee_closure").build())
                    		.build()
                    )
                    .withMemberProperties(List.of(
                            MemberPropertyMappingImpl.builder()
                                .withName("Marital Status")
                                .withColumn("marital_status")
                                .build(),
                            MemberPropertyMappingImpl.builder()
                                .withName("Position Title")
                                .withColumn("position_title")
                                .build(),
                            MemberPropertyMappingImpl.builder()
                                .withName("Gender")
                                .withColumn("gender")
                                .build(),
                            MemberPropertyMappingImpl.builder()
                                .withName("Salary")
                                .withColumn("salary")
                                .build(),
                            MemberPropertyMappingImpl.builder()
                                .withName("Education Level")
                                .withColumn("education_level")
                                .build(),
                            MemberPropertyMappingImpl.builder()
                                .withName("Management Role")
                                .withColumn("management_role")
                                .build()
                        ))
                        .build();
                HierarchyMappingImpl hierarchy = HierarchyMappingImpl
                    .builder()
                    .withHasAll(true)
                    .withAllMemberName("All Employees")
                    .withPrimaryKey("employee_id")
                    .withPrimaryKeyTable("employee")
                    .withQuery(JoinQueryMappingImpl.builder()
                    		.withLeft(JoinedQueryElementMappingImpl.builder().withKey("store_id")
                    				.withQuery(TableQueryMappingImpl.builder().withName("employee").build())
                    				.build())
                    		.withRight(JoinedQueryElementMappingImpl.builder().withAlias("store").withKey("store_id")
                    				.withQuery(TableQueryMappingImpl.builder().withName("store").build())
                    				.build())
                    		.build())
                    .withLevels(List.of(level1, level2))
                    .build();

                DimensionConnectorMappingImpl dimension = DimensionConnectorMappingImpl
                    .builder()
                    .withOverrideDimensionName("EmployeeSnowFlake")
                    .withForeignKey("employee_id")
                    .withDimension(StandardDimensionMappingImpl.builder()
                    		.withName("EmployeeSnowFlake")
                    		.withHierarchies(List.of(hierarchy))
                    		.build())
                    .build();
                result.add(dimension);
            }
            return result;
        }
    }

    public static class ParentChildHierarchyTestModifier3 extends PojoMappingModifier {


    	private static final StandardDimensionMappingImpl sharedEmployeeDimension = StandardDimensionMappingImpl.builder()
    	        .withName("SharedEmployee")
    	        .withHierarchies(List.of(
    	            HierarchyMappingImpl.builder()
    	                .withHasAll(true)
    	                .withPrimaryKey("employee_id")
    	                .withPrimaryKeyTable("employee")
    	                .withQuery((JoinQueryMappingImpl.builder()
                        		.withLeft(JoinedQueryElementMappingImpl.builder().withKey("store_id")
                        				.withQuery(TableQueryMappingImpl.builder().withName("employee").build())
                        				.build())
                        		.withRight(JoinedQueryElementMappingImpl.builder().withAlias("store").withKey("store_id")
                        				.withQuery(TableQueryMappingImpl.builder().withName("store").build())
                        				.build())
                        		.build())
    	                )
    	                .withLevels(List.of(
                            LevelMappingImpl.builder()
                                .withName("Employee Id")
                                .withType(DataType.NUMERIC)
                                .withTable("employee")
                                .withUniqueMembers(true)
                                .withColumn("employee_id")
                                .withParentColumn("supervisor_id")
                                .withNameColumn("full_name")
                                .withNullParentValue("0")
                                .withParentChildLink(ParentChildLinkMappingImpl.builder()
                                        .withParentColumn("supervisor_id")
                                        .withChildColumn("employee_id")
                                        .withTable(TableQueryMappingImpl.builder().withName("employee_closure").build())
                                		.build())
                                .withMemberProperties(List.of(
                                    MemberPropertyMappingImpl.builder()
                                        .withName("Marital Status")
                                        .withColumn("marital_status")
                                        .build(),
                                    MemberPropertyMappingImpl.builder()
                                        .withName("Position Title")
                                        .withColumn("position_title")
                                        .build(),
                                    MemberPropertyMappingImpl.builder()
                                        .withName("Gender")
                                        .withColumn("gender")
                                        .build(),
                                    MemberPropertyMappingImpl.builder()
                                        .withName("Salary")
                                        .withColumn("salary")
                                        .build(),
                                    MemberPropertyMappingImpl.builder()
                                        .withName("Education Level")
                                        .withColumn("education_level")
                                        .build(),
                                    MemberPropertyMappingImpl.builder()
                                        .withName("Management Role")
                                        .withColumn("management_role")
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
    	            ))
    	        .build();

        public ParentChildHierarchyTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        /*
              "<Cube name=\"EmployeeSharedClosureCube\">\n"
            + "  <Table name=\"salary\" alias=\"salary_closure\" />\n"
            + "  <DimensionUsage name=\"SharedEmployee\" source=\"SharedEmployee\" foreignKey=\"employee_id\" />\n"
            + "  <Dimension name=\"Department\" foreignKey=\"department_id\">"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"department_id\">"
            + "      <Table name=\"department\"/>"
            + "        <Level name=\"Department Description\" uniqueMembers=\"true\""
            + "          column=\"department_id\"/>"
            + "    </Hierarchy>"
            + "  </Dimension>"
            + "  <DimensionUsage name=\"Store Type\" source=\"Store Type\" foreignKey=\"warehouse_id\" />\n"
            + "  <Measure name=\"Org Salary\" column=\"salary_paid\" aggregator=\"sum\""
            + "      formatString=\"Currency\"/>"
            + "   <Measure name=\"Count\" column=\"employee_id\" aggregator=\"count\""
            + "    formatString=\"#,#\"/>"
            + "</Cube>";
         */

        @Override
        protected List<? extends CubeMapping> schemaCubes(SchemaMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.schemaCubes(schema));
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("EmployeeSharedClosureCube")
                .withQuery(TableQueryMappingImpl.builder().withName("salary").withAlias("salary_closure").build())
                .withDimensionConnectors(List.of(
                	DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("SharedEmployee")
                		.withDimension(sharedEmployeeDimension)
                        .withForeignKey("employee_id")
                        .build(),
                    DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Department")
                        .withForeignKey("department_id")
                        .withDimension(
                        	StandardDimensionMappingImpl.builder()
                        		.withName("Department")
                        		.withHierarchies(List.of(
                        			HierarchyMappingImpl.builder()
                        				.withHasAll(true)
                        				.withPrimaryKey("department_id")
                        				.withQuery(TableQueryMappingImpl.builder().withName("department").build())
                        				.withLevels(List.of(
                        					LevelMappingImpl.builder()
                        						.withName("Department Description")
                        						.withColumn("department_id")
                        						.withUniqueMembers(true)
                        						.build()
                        				))
                        				.build()
                        		))
                        		.build()
                        	)
                        .build(),
                    DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Store Type")
                		.withDimension(FoodmartMappingSupplier.DIMENSION_STORE_TYPE_WITH_QUERY_STORE)
                        .withForeignKey("warehouse_id")
                        .build()
                ))
                .withMeasureGroups(List.of(MeasureGroupMappingImpl.builder()
                		.withMeasures(List.of(
                            MeasureMappingImpl.builder()
                                .withName("Org Salary")
                                .withColumn("salary_paid")
                                .withAggregatorType(MeasureAggregatorType.SUM)
                                .withFormatString("Currency")
                                .build(),
                            MeasureMappingImpl.builder()
                                .withName("Count")
                                .withColumn("employee_id")
                                .withAggregatorType(MeasureAggregatorType.COUNT)
                                .withFormatString("#,#")
                                .build()
                		))
                		.build()))
                .build()
            );
            return result;

        }

        /*
              "<Dimension name=\"SharedEmployee\">"
            + "<Hierarchy hasAll=\"true\""
            + "    primaryKey=\"employee_id\" primaryKeyTable=\"employee\">"
            + "  <Join leftKey=\"store_id\""
            + "    rightAlias=\"store\" rightKey=\"store_id\">"
            + "    <Table name=\"employee\"/>"
            + "    <Table name=\"store\"/>"
            + "  </Join>"
            + "  <Level name=\"Employee Id\" type=\"Numeric\" table=\"employee\" uniqueMembers=\"true\""
            + "      column=\"employee_id\" parentColumn=\"supervisor_id\""
            + "      nameColumn=\"full_name\" nullParentValue=\"0\">"
            + "    <Closure parentColumn=\"supervisor_id\" childColumn=\"employee_id\">"
            + "      <Table name=\"employee_closure\"/>"
            + "    </Closure>"
            + "    <Property name=\"Marital Status\" column=\"marital_status\"/>"
            + "    <Property name=\"Position Title\" column=\"position_title\"/>"
            + "    <Property name=\"Gender\" column=\"gender\"/>"
            + "    <Property name=\"Salary\" column=\"salary\"/>"
            + "    <Property name=\"Education Level\" column=\"education_level\"/>"
            + "    <Property name=\"Management Role\" column=\"management_role\"/>"
            + "  </Level>"
            + "</Hierarchy>"
            + "</Dimension>";
         */
    }

    public static class ParentChildHierarchyTestModifier4 extends PojoMappingModifier {

        public ParentChildHierarchyTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }
        /*
            "<Dimension name=\"EmployeesNonClosure\" foreignKey=\"employee_id\">"
            + "<Hierarchy hasAll=\"true\" allMemberName=\"All Employees\""
            + "    primaryKey=\"employee_id\">"
            + "  <Table name=\"employee\"/>"
            + "  <Level name=\"Employee Id\" type=\"Numeric\" uniqueMembers=\"true\""
            + "      column=\"employee_id\" parentColumn=\"supervisor_id\""
            + "      nameColumn=\"full_name\" nullParentValue=\"0\">"
            + "    <Property name=\"Marital Status\" column=\"marital_status\"/>"
            + "    <Property name=\"Position Title\" column=\"position_title\"/>"
            + "    <Property name=\"Gender\" column=\"gender\"/>"
            + "    <Property name=\"Salary\" column=\"salary\"/>"
            + "    <Property name=\"Education Level\" column=\"education_level\"/>"
            + "    <Property name=\"Management Role\" column=\"management_role\"/>"
            + "  </Level>"
            + "</Hierarchy>"
            + "</Dimension>",
         */

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("HR".equals(cube.getName())) {
                LevelMappingImpl level = LevelMappingImpl
                    .builder()
                    .withName("Employee Id")
                    .withType(DataType.NUMERIC)
                    .withUniqueMembers(true)
                    .withColumn("employee_id")
                    .withParentColumn("supervisor_id")
                    .withNameColumn("full_name")
                    .withNullParentValue("0")
                    .withParentChildLink(ParentChildLinkMappingImpl.builder()
                        .withParentColumn("supervisor_id")
                        .withChildColumn("employee_id")
                        .withTable(TableQueryMappingImpl.builder().withName("employee_closure").build())
                        .build())
                    .withMemberProperties(List.of(
                        MemberPropertyMappingImpl.builder()
                            .withName("Marital Status")
                            .withColumn("marital_status")
                            .build(),
                        MemberPropertyMappingImpl.builder()
                            .withName("Position Title")
                            .withColumn("position_title")
                            .build(),
                        MemberPropertyMappingImpl.builder()
                            .withName("Gender")
                            .withColumn("gender")
                            .build(),
                        MemberPropertyMappingImpl.builder()
                            .withName("Salary")
                            .withColumn("salary")
                            .build(),
                        MemberPropertyMappingImpl.builder()
                            .withName("Education Level")
                            .withColumn("education_level")
                            .build(),
                        MemberPropertyMappingImpl.builder()
                            .withName("Management Role")
                            .withColumn("management_role")
                            .build()
                    ))
                    .build();

                HierarchyMappingImpl hierarchy = HierarchyMappingImpl
                    .builder()
                    .withHasAll(true)
                    .withAllMemberName("All Employees")
                    .withPrimaryKey("employee_id")
                    .withQuery(TableQueryMappingImpl.builder().withName("employee").build())
                    .withLevels(List.of(level))
                    .build();

                DimensionConnectorMappingImpl dimension = DimensionConnectorMappingImpl
                    .builder()
                    .withOverrideDimensionName("EmployeesNonClosure")
                    .withForeignKey("employee_id")
                    .withDimension(StandardDimensionMappingImpl.builder()
                    	.withName("EmployeesNonClosure")
                    	.withHierarchies(List.of(hierarchy))
                    	.build())
                    .build();
                result.add(dimension);
            }
            return result;
        }
    }

    public static class ParentChildHierarchyTestModifier5 extends PojoMappingModifier {

        public ParentChildHierarchyTestModifier5(CatalogMapping catalog) {
            super(catalog);
        }
        /*
                "<Dimension name=\"EmployeesNoClosure\" foreignKey=\"employee_id\">\n"
                + "<Hierarchy hasAll=\"true\" allMemberName=\"All Employees\" primaryKey=\"employee_id\">\n"
                + "<Table name=\"employee\"/>\n"
                + "<Level name=\"Employee Id\" uniqueMembers=\"true\" type=\"Numeric\" column=\"employee_id\" nameColumn=\"full_name\" parentColumn=\"supervisor_id\" nullParentValue=\"0\">\n"
                + "<Property name=\"Marital Status\" column=\"marital_status\"/>\n"
                + "<Property name=\"Position Title\" column=\"position_title\"/>\n"
                + "<Property name=\"Gender\" column=\"gender\"/>\n"
                + "<Property name=\"Salary\" column=\"salary\"/>\n"
                + "<Property name=\"Education Level\" column=\"education_level\"/>\n"
                + "<Property name=\"Management Role\" column=\"management_role\"/>\n"
                + "</Level>\n"
                + "</Hierarchy>\n"
                + "</Dimension>\n"));
         */

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("HR".equals(cube.getName())) {
                LevelMappingImpl level = LevelMappingImpl
                    .builder()
                    .withName("Employee Id")
                    .withType(DataType.NUMERIC)
                    .withUniqueMembers(true)
                    .withColumn("employee_id")
                    .withParentColumn("supervisor_id")
                    .withNameColumn("full_name")
                    .withNullParentValue("0")
                    .withMemberProperties(List.of(
                        MemberPropertyMappingImpl.builder()
                            .withName("Marital Status")
                            .withColumn("marital_status")
                            .build(),
                        MemberPropertyMappingImpl.builder()
                            .withName("Position Title")
                            .withColumn("position_title")
                            .build(),
                        MemberPropertyMappingImpl.builder()
                            .withName("Gender")
                            .withColumn("gender")
                            .build(),
                        MemberPropertyMappingImpl.builder()
                            .withName("Salary")
                            .withColumn("salary")
                            .build(),
                        MemberPropertyMappingImpl.builder()
                            .withName("Education Level")
                            .withColumn("education_level")
                            .build(),
                        MemberPropertyMappingImpl.builder()
                            .withName("Management Role")
                            .withColumn("management_role")
                            .build()
                    ))
                    .build();

                HierarchyMappingImpl hierarchy = HierarchyMappingImpl
                    .builder()
                    .withHasAll(true)
                    .withAllMemberName("All Employees")
                    .withPrimaryKey("employee_id")
                    .withQuery(TableQueryMappingImpl.builder().withName("employee").build())
                    .withLevels(List.of(level))
                    .build();

                DimensionConnectorMappingImpl dimension = DimensionConnectorMappingImpl
                    .builder()
                    .withOverrideDimensionName("EmployeesNoClosure")
                    .withForeignKey("employee_id")
                    .withDimension(StandardDimensionMappingImpl.builder()
                    	.withName("EmployeesNoClosure")
                    	.withHierarchies(List.of(hierarchy))
                    	.build())
                    .build();
                result.add(dimension);
            }
            return result;
        }
    }

    public static class ParentChildHierarchyTestModifier6 extends PojoMappingModifier {

        public ParentChildHierarchyTestModifier6(CatalogMapping catalog) {
            super(catalog);
        }

        /*
            "<Cube name='HR-fewer-dims'>\n"
            + "    <Table name='salary'/>\n"
            + "    <Dimension name='Department' foreignKey='department_id'>\n"
            + "        <Hierarchy hasAll='true' primaryKey='department_id'>\n"
            + "            <Table name='department'/>\n"
            + "            <Level name='Department Description' uniqueMembers='true' column='department_id'/>\n"
            + "        </Hierarchy>\n"
            + "    </Dimension>\n"
            + "    <Dimension name='Employees' foreignKey='employee_id'>\n"
            + "        <Hierarchy hasAll='true' allMemberName='All Employees' primaryKey='employee_id'>\n"
            + "            <Table name='employee'/>\n"
            + "            <Level name='Employee Id' type='Numeric' uniqueMembers='true' column='employee_id' parentColumn='supervisor_id' nameColumn='full_name' nullParentValue='0'>\n"
            + "                <Property name='Marital Status' column='marital_status'/>\n"
            + "                <Property name='Position Title' column='position_title'/>\n"
            + "                <Property name='Gender' column='gender'/>\n"
            + "                <Property name='Salary' column='salary'/>\n"
            + "                <Property name='Education Level' column='education_level'/>\n"
            + "                <Property name='Management Role' column='management_role'/>\n"
            + "            </Level>\n"
            + "        </Hierarchy>\n"
            + "    </Dimension>\n"
            + "    <Measure name='Org Salary' column='salary_paid' aggregator='sum' formatString='Currency' />\n"
            + "    <Measure name='Count' column='employee_id' aggregator='count' formatString='#,#'/>\n"
            + "</Cube>",
         */

        @Override
        protected List<? extends CubeMapping> schemaCubes(SchemaMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.schemaCubes(schema));
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("HR-fewer-dims")
                .withQuery(TableQueryMappingImpl.builder().withName("salary").build())
                .withDimensionConnectors(List.of(
                	DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Department")
                		.withForeignKey("department_id")
                		.withDimension(StandardDimensionMappingImpl.builder()
                			.withName("Department")
                			.withHierarchies(List.of(
                				HierarchyMappingImpl.builder()
                					.withHasAll(true)
                					.withPrimaryKey("department_id")
                					.withQuery(TableQueryMappingImpl.builder().withName("department").build())
                					.withLevels(List.of(
                						LevelMappingImpl.builder()
                                        	.withName("Department Description")
                                        	.withColumn("department_id")
                                        	.withUniqueMembers(true)
                                        	.build()
                						))
                					.build()
                			))
                			.build()
                		)
                        .build(),
                    DimensionConnectorMappingImpl.builder()
                    	.withOverrideDimensionName("Employees")
                    	.withForeignKey("employee_id")
                    	.withDimension(StandardDimensionMappingImpl.builder()
                    		.withName("Employees")
                    		.withHierarchies(List.of(
                    			HierarchyMappingImpl.builder()
                                	.withHasAll(true)
                                	.withAllMemberName("All Employees")
                                	.withPrimaryKey("employee_id")
                                	.withQuery(TableQueryMappingImpl.builder().withName("employee").build())
                                	.withLevels(List.of(
                                		LevelMappingImpl.builder()
                                        	.withName("Employee Id")
                                        	.withType(DataType.NUMERIC)
                                        	.withUniqueMembers(true)
                                        	.withColumn("employee_id")
                                        	.withParentColumn("supervisor_id")
                                        	.withNameColumn("full_name")
                                        	.withNullParentValue("0")
                                        	.withMemberProperties(List.of(
                                        		MemberPropertyMappingImpl.builder()
                                                .withName("Marital Status").withColumn("marital_status").build(),
                                                MemberPropertyMappingImpl.builder()
                                                .withName("Position Title").withColumn("position_title").build(),
                                                MemberPropertyMappingImpl.builder()
                                                .withName("Gender").withColumn("gender").build(),
                                                MemberPropertyMappingImpl.builder()
                                                .withName("Salary").withColumn("salary").build(),
                                                MemberPropertyMappingImpl.builder()
                                                .withName("Education Level").withColumn("education_level").build(),
                                                MemberPropertyMappingImpl.builder()
                                                .withName("Management Role").withColumn("management_role").build()
                                        ))
                                        .build()
                                ))
                                .build()
                            ))
                    		.build()
                    	)
                        .build()
                ))
                .withMeasureGroups(List.of(
                	MeasureGroupMappingImpl.builder()
                	.withMeasures(List.of(
                        MeasureMappingImpl.builder()
                            .withName("Org Salary")
                            .withColumn("salary_paid")
                            .withAggregatorType(MeasureAggregatorType.SUM)
                            .withFormatString("Currency")
                            .build(),
                        MeasureMappingImpl.builder()
                            .withName("Count")
                            .withColumn("employee_id")
                            .withAggregatorType(MeasureAggregatorType.COUNT)
                            .withFormatString("#,#")
                            .build()
                	))
                	.build()
                ))
                .build()
            );
            return result;
        }
    }

    public static class ParentChildHierarchyTestModifier7 extends PojoMappingModifier {

        public ParentChildHierarchyTestModifier7(CatalogMapping catalog) {
            super(catalog);
        }

        /*
            "<Cube name=\"HR-ordered\">\n"
            + "  <Table name=\"salary\"/>\n"
            + "  <Dimension name=\"Employees\" foreignKey=\"employee_id\">\n"
            + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Employees\"\n"
            + "        primaryKey=\"employee_id\">\n"
            + "      <Table name=\"employee\"/>\n"
            + "      <Level name=\"Employee Id\" type=\"Numeric\" uniqueMembers=\"true\"\n"
            + "          column=\"employee_id\" parentColumn=\"supervisor_id\"\n"
            + "          nameColumn=\"full_name\" nullParentValue=\"0\""
            // Original "HR" cube has no ordinalColumn.
            + "          ordinalColumn=\"last_name\" >\n"
            + "        <Closure parentColumn=\"supervisor_id\" childColumn=\"employee_id\">\n"
            + "          <Table name=\"employee_closure\"/>\n"
            + "        </Closure>\n"
            + "        <Property name=\"First Name\" column=\"first_name\"/>\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "\n"
            + "  <Measure name=\"Org Salary\" column=\"salary_paid\" aggregator=\"sum\"\n"
            + "      formatString=\"Currency\"/>\n"
            + "  <Measure name=\"Count\" column=\"employee_id\" aggregator=\"count\"\n"
            + "      formatString=\"#,#\"/>\n"
            + "</Cube>",
         */

        @Override
        protected List<? extends CubeMapping> schemaCubes(SchemaMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.schemaCubes(schema));
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("HR-ordered")
                .withQuery(TableQueryMappingImpl.builder().withName("salary").build())
                .withDimensionConnectors(List.of(
                	DimensionConnectorMappingImpl.builder()
                	    .withOverrideDimensionName("Employees")
                        .withForeignKey("employee_id")
                        .withDimension(StandardDimensionMappingImpl.builder()
                        	.withHierarchies(List.of(
                        			HierarchyMappingImpl.builder()
                        				.withHasAll(true)
                        				.withAllMemberName("All Employees")
                        				.withPrimaryKey("employee_id")
                        				.withQuery(TableQueryMappingImpl.builder().withName("employee").build())
                        				.withLevels(List.of(
                        					LevelMappingImpl.builder()
                        						.withName("Employee Id")
                        						.withType(DataType.NUMERIC)
                        						.withUniqueMembers(true)
                        						.withColumn("employee_id")
                        						.withParentColumn("supervisor_id")
                        						.withNameColumn("full_name")
                        						.withNullParentValue("0")
                        						.withOrdinalColumn("last_name")
                        						.withParentChildLink(ParentChildLinkMappingImpl.builder()
                        								.withParentColumn("supervisor_id")
                        								.withChildColumn("employee_id")
                        								.withTable(TableQueryMappingImpl.builder().withName("employee_closure").build())
                        								.build())
                        						.withMemberProperties(List.of(
                        								MemberPropertyMappingImpl.builder()
                        								.withName("First Name")
                        								.withColumn("first_name")
                        								.build()
                        						))
                        						.build()
                        					))
                                .build()
                        ))
                        .build()
                ).build()))
                .withMeasureGroups(List.of(MeasureGroupMappingImpl.builder()
                		.withMeasures(List.of(
                            MeasureMappingImpl.builder()
                                .withName("Org Salary")
                                .withColumn("salary_paid")
                                .withAggregatorType(MeasureAggregatorType.SUM)
                                .withFormatString("Currency")
                                .build(),
                            MeasureMappingImpl.builder()
                                .withName("Count")
                                .withColumn("employee_id")
                                .withAggregatorType(MeasureAggregatorType.COUNT)
                                .withFormatString("#,#")
                                .build()
                		))
                		.build()))
                .build()
            );
            return result;
        }
    }

    public static class ParentChildHierarchyTestModifier8 extends PojoMappingModifier {

        public ParentChildHierarchyTestModifier8(CatalogMapping catalog) {
            super(catalog);
        }
        /*
            "<Cube name=\"CustomSales\">"
            + "   <Table name=\"sales_fact_1997\"/>"
            + "   <DimensionUsage name=\"Employees\" source=\"Employees\" foreignKey=\"time_id\"/>"
            + "   <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"/>"
            + "</Cube>"
            + "<Cube name=\"CustomHR\">"
            + "   <Table name=\"salary\"/>"
            + "   <DimensionUsage name=\"Employees\" source=\"Employees\" foreignKey=\"employee_id\"/>"
            + "   <Measure name=\"Org Salary\" column=\"salary_paid\" aggregator=\"sum\"/>"
            + "</Cube>"
         */

        private static final StandardDimensionMappingImpl d = StandardDimensionMappingImpl.builder()
        .withName("Employees")
        .withHierarchies(List.of(
            HierarchyMappingImpl.builder()
                .withHasAll(true)
                .withAllMemberName("All Employees")
                .withPrimaryKey("employee_id")
                .withPrimaryKeyTable("employee")
                .withQuery(TableQueryMappingImpl.builder().withName("employee").build())
                .withLevels(List.of(
                    LevelMappingImpl.builder()
                        .withName("Employee Name")
                        .withType(DataType.NUMERIC)
                        .withUniqueMembers(true)
                        .withColumn("employee_id")
                        .withParentColumn("supervisor_id")
                        .withNameColumn("full_name")
                        .withNullParentValue("0")
                        .withParentChildLink(ParentChildLinkMappingImpl.builder()
                            .withParentColumn("supervisor_id")
                            .withChildColumn("employee_id")
                            .withTable(TableQueryMappingImpl.builder().withName("employee_closure").build())
                            .build())
                        .build()
                ))
                .build()
        )).build();

        @Override
        protected List<? extends CubeMapping> schemaCubes(SchemaMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            MeasureMappingImpl mStoreSales;
            MeasureMappingImpl mOrgSalary;
            result.addAll(super.schemaCubes(schema));
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("CustomSales")
                .withQuery(TableQueryMappingImpl.builder().withName("sales_fact_1997").build())
                .withDimensionConnectors(List.of(DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Employees")
                        .withForeignKey("time_id")
                		.withDimension(d)
                		.build()))
                .withMeasureGroups(List.of(
                	MeasureGroupMappingImpl.builder().withMeasures(List.of(
                            MeasureMappingImpl.builder()
                            .withName("Store Sales")
                            .withColumn("store_sales")
                            .withAggregatorType(MeasureAggregatorType.SUM)
                            .build()
                    ))
                	.build()
                ))
                .build()
            );
            result.add(PhysicalCubeMappingImpl.builder()
                    .withName("CustomSales")
                    .withQuery(TableQueryMappingImpl.builder().withName("sales_fact_1997").build())
                    .withDimensionConnectors(List.of(DimensionConnectorMappingImpl.builder()
                        	.withOverrideDimensionName("Employees")
                        	.withDimension(d)
                            .withForeignKey("time_id")
                            .build()
                    ))
                    .withMeasureGroups(List.of(
                    		MeasureGroupMappingImpl.builder().withMeasures(List.of(
                    			mStoreSales = MeasureMappingImpl.builder()
                                    .withName("Store Sales")
                                    .withColumn("store_sales")
                                    .withAggregatorType(MeasureAggregatorType.SUM)
                                    .build()
                            ))
                        	.build()
                    ))
                    .build()
            );

            result.add(PhysicalCubeMappingImpl.builder()
                .withName("CustomHR")
                .withQuery(TableQueryMappingImpl.builder().withName("salary").build())
                .withDimensionConnectors(List.of(DimensionConnectorMappingImpl.builder()
                    	.withOverrideDimensionName("Employees")
                    	.withDimension(d)
                        .withForeignKey("employee_id")
                        .build()
                ))
                .withMeasureGroups(List.of(
                		MeasureGroupMappingImpl.builder().withMeasures(List.of(
                			mOrgSalary = MeasureMappingImpl.builder()
                                .withName("Org Salary")
                                .withColumn("salary_paid")
                                .withAggregatorType(MeasureAggregatorType.SUM)
                                .build()
                        ))
                    	.build()
                ))
                .build()
            );

            result.add(
            	VirtualCubeMappingImpl.builder()
            	    .withName("CustomSalesAndHR")
            	    .withDimensionConnectors(List.of(
            	    	DimensionConnectorMappingImpl.builder()
            	    	.withOverrideDimensionName("Employees")
            	    	.withDimension(d)
            	    	.build()
            	    ))
            	    .withReferencedMeasures((List<? extends MeasureMapping>) List.of(
            	    	mStoreSales,
            	    	mOrgSalary
            	    ))
            	    .withCalculatedMembers(List.of(CalculatedMemberMappingImpl.builder()
            	    		.withName("HR Cost per Sale")
            	    		.withFormula("[Measures].[Store Sales] / [Measures].[Org Salary]")
            	    		.build()))
            		.build());


            return result;
        }

        /*
            "<Dimension name=\"Employees\" >"
            + "   <Hierarchy hasAll=\"true\" allMemberName=\"All Employees\""
            + "      primaryKey=\"employee_id\" primaryKeyTable=\"employee\">"
            + "      <Table name=\"employee\"/>"
            + "      <Level name=\"Employee Name\" type=\"Numeric\" uniqueMembers=\"true\""
            + "         column=\"employee_id\" parentColumn=\"supervisor_id\""
            + "         nameColumn=\"full_name\" nullParentValue=\"0\">"
            + "         <Closure parentColumn=\"supervisor_id\" childColumn=\"employee_id\">"
            + "            <Table name=\"employee_closure\"/>"
            + "         </Closure>"
            + "      </Level>"
            + "   </Hierarchy>"
            + "</Dimension>",
         */

        /*
            + "<VirtualCube name=\"CustomSalesAndHR\" >"
            + "<VirtualCubeDimension name=\"Employees\"/>"
            + "<VirtualCubeMeasure cubeName=\"CustomSales\" name=\"[Measures].[Store Sales]\"/>"
            + "<VirtualCubeMeasure cubeName=\"CustomHR\" name=\"[Measures].[Org Salary]\"/>"
            + "<CalculatedMember name=\"HR Cost per Sale\" dimension=\"Measures\">"
            + "<Formula>[Measures].[Store Sales] / [Measures].[Org Salary]</Formula>"
            + "</CalculatedMember>"
            + "</VirtualCube>",
         */

    }

    public static class ParentChildHierarchyTestModifier9 extends PojoMappingModifier {

        public ParentChildHierarchyTestModifier9(CatalogMapping catalog) {
            super(catalog);
        }

        /*
                "<Cube name=\"HR4C\">\n"
                        + "  <Table name=\"salary\"/>\n"
                        + "  <Dimension name=\"Employees\" foreignKey=\"employee_id\">\n"
                        + "    <Hierarchy hasAll=\"true\" allMemberName=\"All\"\n"
                        + "        primaryKey=\"employee_id\">\n"
                        + "      <Table name=\"employee\"/>\n"
                        + "      <Level name=\"Employee Id\" type=\"Numeric\" uniqueMembers=\"true\"\n"
                        + "          column=\"employee_id\" parentColumn=\"supervisor_id\"\n"
                        + "          nameColumn=\"full_name\" nullParentValue=\"0\">\n";

                "        <Closure parentColumn=\"supervisor_id\" childColumn=\"employee_id\">\n"
                        + "          <Table name=\"employee_closure\"/>\n"
                        + "        </Closure>\n";

                "      </Level>\n"
                        + "    </Hierarchy>\n"
                        + "  </Dimension>\n"
                        + "\n"
                        + "  <Measure name=\"Count\" column=\"employee_id\" aggregator=\"count\" />\n"
                        + "</Cube>\n";
         */

        @Override
        protected List<? extends CubeMapping> schemaCubes(SchemaMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.schemaCubes(schema));
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("HR4C")
                .withQuery(TableQueryMappingImpl.builder().withName("salary").build())
                .withDimensionConnectors(List.of(
                		DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Employees")
                        .withForeignKey("employee_id")
                        .withDimension(
                        	StandardDimensionMappingImpl.builder()
                        		.withName("Employees")
                        		.withHierarchies(List.of(
                        				HierarchyMappingImpl.builder()
                        				.withHasAll(true)
                        				.withAllMemberName("All")
                        				.withPrimaryKey("employee_id")
                        				.withQuery(TableQueryMappingImpl.builder().withName("employee").build())
                        				.withLevels(List.of(
                        					LevelMappingImpl.builder()
                        					.withName("Employee Id")
                        					.withType(DataType.NUMERIC)
                        					.withUniqueMembers(true)
                        					.withColumn("employee_id")
                        					.withParentColumn("supervisor_id")
                        					.withNameColumn("full_name")
                        					.withNullParentValue("0")
                        					.withParentChildLink(ParentChildLinkMappingImpl.builder()
                        						.withParentColumn("supervisor_id")
                        						.withChildColumn("employee_id")
                        						.withTable(TableQueryMappingImpl.builder().withName("employee_closure").build())
                        						.build())
                        					.build()
                        				))
                                .build()))
                        	.build()
                        )
                        .build()
                ))
                .withMeasureGroups(List.of(
                	MeasureGroupMappingImpl.builder()
                	.withMeasures(List.of(
                        MeasureMappingImpl.builder()
                            .withName("Count")
                            .withColumn("employee_id")
                            .withAggregatorType(MeasureAggregatorType.COUNT)
                            .build()
                	))
                	.build()
                ))
                .build()
            );

            return result;
        }
    }

    public static class ParentChildHierarchyTestModifier10 extends PojoMappingModifier {

        public ParentChildHierarchyTestModifier10(CatalogMapping catalog) {
            super(catalog);
        }

        /*
                "<Cube name=\"HR4C\">\n"
                        + "  <Table name=\"salary\"/>\n"
                        + "  <Dimension name=\"Employees\" foreignKey=\"employee_id\">\n"
                        + "    <Hierarchy hasAll=\"true\" allMemberName=\"All\"\n"
                        + "        primaryKey=\"employee_id\">\n"
                        + "      <Table name=\"employee\"/>\n"
                        + "      <Level name=\"Employee Id\" type=\"Numeric\" uniqueMembers=\"true\"\n"
                        + "          column=\"employee_id\" parentColumn=\"supervisor_id\"\n"
                        + "          nameColumn=\"full_name\" nullParentValue=\"0\">\n";


                "      </Level>\n"
                        + "    </Hierarchy>\n"
                        + "  </Dimension>\n"
                        + "\n"
                        + "  <Measure name=\"Count\" column=\"employee_id\" aggregator=\"count\" />\n"
                        + "</Cube>\n";
         */

        @Override
        protected List<? extends CubeMapping> schemaCubes(SchemaMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.schemaCubes(schema));
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("HR4C")
                .withQuery(TableQueryMappingImpl.builder().withName("salary").build())
                .withDimensionConnectors(List.of(
                	DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Employees")
                        .withForeignKey("employee_id")
                        .withDimension(
                            	StandardDimensionMappingImpl.builder()
                            		.withName("Employees")
                            		.withHierarchies(List.of(
                            			HierarchyMappingImpl.builder()
                            			.withHasAll(true)
                            			.withAllMemberName("All")
                            			.withPrimaryKey("employee_id")
                            			.withQuery(TableQueryMappingImpl.builder().withName("employee").build())
                            			.withLevels(List.of(
                            				LevelMappingImpl.builder()
                            				.withName("Employee Id")
                            				.withType(DataType.NUMERIC)
                            				.withUniqueMembers(true)
                            				.withColumn("employee_id")
                            				.withParentColumn("supervisor_id")
                            				.withNameColumn("full_name")
                            				.withNullParentValue("0")
                            				.build()
                            			))
                            			.build()
                            		))
                            		.build())
                        .build()
                ))
                .withMeasureGroups(List.of(
                	MeasureGroupMappingImpl.builder()
                	.withMeasures(List.of(
                		MeasureMappingImpl.builder()
                            .withName("Count")
                            .withColumn("employee_id")
                            .withAggregatorType(MeasureAggregatorType.COUNT)
                            .build()
                	))
                	.build()
                ))
                .build()
            );

            return result;
        }
    }

    public static class ParentChildHierarchyTestModifier11 extends PojoMappingModifier {

        public ParentChildHierarchyTestModifier11(CatalogMapping catalog) {
            super(catalog);
        }

        /*
                    "<Schema name='FoodMart'>\n"
            + "  <Dimension type='StandardDimension' highCardinality='false' name='Employee'>\n"
            + "    <Hierarchy name='Employee' hasAll='false' primaryKey='store_id' primaryKeyTable='bri_store_employee'>\n"
            + "      <Join leftKey='employee_id' rightKey='employee_id'>\n"
            + "        <InlineTable alias='bri_store_employee'>\n"
            + "          <ColumnDefs>\n"
            + "            <ColumnDef name='store_id' type='Integer'/>\n"
            + "            <ColumnDef name='employee_id' type='Integer'/>\n"
            + "          </ColumnDefs>\n"
            + "          <Rows>\n"
            + "            <Row>\n"
            + "              <Value column='store_id'>2</Value>\n"
            + "              <Value column='employee_id'>o</Value>\n"
            + "            </Row>\n"
            + "            <Row>\n"
            + "              <Value column='store_id'>2</Value>\n"
            + "              <Value column='employee_id'>1</Value>\n"
            + "            </Row>\n"
            + "            <Row>\n"
            + "              <Value column='store_id'>2</Value>\n"
            + "              <Value column='employee_id'>2</Value>\n"
            + "            </Row>\n"
            + "            <Row>\n"
            + "              <Value column='store_id'>2</Value>\n"
            + "              <Value column='employee_id'>22</Value>\n"
            + "            </Row>\n"
            + "            <Row>\n"
            + "              <Value column='store_id'>2</Value>\n"
            + "              <Value column='employee_id'>22</Value>\n"
            + "            </Row>\n"
            + "            <Row>\n"
            + "              <Value column='store_id'>2</Value>\n"
            + "              <Value column='employee_id'>32</Value>\n"
            + "            </Row>\n"
            + "            <Row>\n"
            + "              <Value column='store_id'>2</Value>\n"
            + "              <Value column='employee_id'>484</Value>\n"
            + "            </Row>\n"
            + "          </Rows>\n"
            + "        </InlineTable>\n"
            + "        <Table name='employee' alias='employee'/>\n"
            + "      </Join>\n"
            + "      <Level name='Employee' table='employee' column='employee_id' nameColumn='full_name' parentColumn='supervisor_id' nullParentValue='0' type='Integer' uniqueMembers='true' levelType='Regular' hideMemberIf='Never'>\n"
            + "        <Closure parentColumn='supervisor_id' childColumn='employee_id'>\n"
            + "          <Table name='employee_closure'/>\n"
            + "        </Closure>\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Cube name='Sales_Bug_441' cache='true' enabled='true'>\n"
            + "    <Table name='sales_fact_1997'/>\n"
            + "    <DimensionUsage source='Employee' name='Employee' foreignKey='store_id' highCardinality='false'/>\n"
            + "    <Measure name='Store Sales' column='store_sales' datatype='Numeric' formatString='#,###.00' aggregator='sum' visible='true'/>\n"
            + "  </Cube>\n"
            + "</Schema>");

         */

        protected List<SchemaMapping> catalogSchemas(CatalogMapping catalog2) {
            InlineTableQueryMappingImpl it = InlineTableQueryMappingImpl.builder()
            		.withAlias("bri_store_employee")
            		.withColumnDefinitions(List.of(
            			InlineTableColumnDefinitionMappingImpl.builder()
                            .withName("store_id")
                            .withType(DataType.INTEGER)
                            .build(),
                        InlineTableColumnDefinitionMappingImpl.builder()
                            .withName("employee_id")
                            .withType(DataType.INTEGER)
                            .build()
                    ))
            		.withRows(List.of(
            			InlineTableRowMappingImpl.builder()
            				.withCells(List.of(
                                InlineTableRowCellMappingImpl.builder().withColumnName("store_id").withValue("2").build(),
                                InlineTableRowCellMappingImpl.builder().withColumnName("employee_id").withValue("o").build()
                            ))
                            .build(),
                        InlineTableRowMappingImpl.builder()
                            .withCells(List.of(
                            	InlineTableRowCellMappingImpl.builder().withColumnName("store_id").withValue("2").build(),
                                InlineTableRowCellMappingImpl.builder().withColumnName("employee_id").withValue("1").build()
                            ))
                            .build(),
                        InlineTableRowMappingImpl.builder()
                            .withCells(List.of(
                                InlineTableRowCellMappingImpl.builder().withColumnName("store_id").withValue("2").build(),
                                InlineTableRowCellMappingImpl.builder().withColumnName("employee_id").withValue("2").build()
                            ))
                            .build(),
                        InlineTableRowMappingImpl.builder()
                            .withCells(List.of(
                                InlineTableRowCellMappingImpl.builder().withColumnName("store_id").withValue("2").build(),
                                InlineTableRowCellMappingImpl.builder().withColumnName("employee_id").withValue("22").build()
                            ))
                            .build(),
                        InlineTableRowMappingImpl.builder()
                            .withCells(List.of(
                                InlineTableRowCellMappingImpl.builder().withColumnName("store_id").withValue("2").build(),
                                InlineTableRowCellMappingImpl.builder().withColumnName("employee_id").withValue("22").build()
                            ))
                            .build(),
                        InlineTableRowMappingImpl.builder()
                            .withCells(List.of(
                                InlineTableRowCellMappingImpl.builder().withColumnName("store_id").withValue("2").build(),
                                InlineTableRowCellMappingImpl.builder().withColumnName("employee_id").withValue("32").build()
                            ))
                            .build(),
                        InlineTableRowMappingImpl.builder()
                            .withCells(List.of(
                                InlineTableRowCellMappingImpl.builder().withColumnName("store_id").withValue("2").build(),
                                InlineTableRowCellMappingImpl.builder().withColumnName("employee_id").withValue("484").build()
                            ))
                            .build()

                    ))
                    .build();

                TableQueryMappingImpl t = TableQueryMappingImpl.builder().withName("employee").withAlias("employee").build();

                StandardDimensionMappingImpl employeeDimension = StandardDimensionMappingImpl.builder()
                .withName("Employee")
                .withHierarchies(List.of(
                    HierarchyMappingImpl.builder()
                        .withName("Employee")
                        .withHasAll(false)
                        .withPrimaryKey("store_id")
                        .withPrimaryKeyTable("bri_store_employee")
                        .withQuery(
                            JoinQueryMappingImpl.builder()
                            	.withLeft(
                            		JoinedQueryElementMappingImpl.builder().withKey("employee_id").withQuery(it).build()
                            	)
                            	.withRight(
                            		JoinedQueryElementMappingImpl.builder().withKey("employee_id").withQuery(t).build()
                            	)
                            	.build()
                        )
                        .withLevels(List.of(
                            LevelMappingImpl.builder()
                                .withName("Employee")
                                .withTable("employee")
                                .withColumn("employee_id")
                                .withNameColumn("full_name")
                                .withParentColumn("supervisor_id")
                                .withNullParentValue("nullParentValue")
                                .withType(DataType.INTEGER)
                                .withUniqueMembers(true)
                                .withLevelType(LevelType.REGULAR)
                                .withHideMemberIfType(HideMemberIfType.NEVER)
                                .withParentChildLink(ParentChildLinkMappingImpl.builder()
                                    .withParentColumn("supervisor_id")
                                    .withChildColumn("employee_id")
                                    .withTable(TableQueryMappingImpl.builder().withName("employee_closure").build())
                                    .build())
                                .build()
                        ))
                        .build()
                ))
                .build();


                return List.of(SchemaMappingImpl.builder()
                    .withName("FoodMart")
                    .withCubes(List.of(
                        PhysicalCubeMappingImpl.builder()
                            .withName("Sales_Bug_441")
                            .withCache(true)
                            .withEnabled(true)
                            .withQuery(TableQueryMappingImpl.builder().withName("sales_fact_1997").build())
                            .withDimensionConnectors(List.of(
                            	DimensionConnectorMappingImpl.builder()
                            	  .withOverrideDimensionName("Employee")
                            	  .withForeignKey("store_id")
                            	  .withDimension(employeeDimension)
                            	  .build()
                            ))
                            .withMeasureGroups(List.of(MeasureGroupMappingImpl.builder()
                            		.withMeasures(List.of(
                                        MeasureMappingImpl.builder()
                                            .withName("Store Sales")
                                            .withColumn("store_sales")
                                            .withDatatype(DataType.NUMERIC)
                                            .withFormatString("#,###.00")
                                            .withAggregatorType(MeasureAggregatorType.SUM)
                                            .withVisible(true)
                                            .build()
                            		))
                            		.build()))
                            .build()
                    ))
                    .build());
        }
    }

    public static class ValidMeasureFunDefTestModifier extends PojoMappingModifier {

    	private static final MeasureMappingImpl m = MeasureMappingImpl.builder()
    	        .withName("Unit Sales")
    	        .withColumn("unit_sales")
    	        .withAggregatorType(MeasureAggregatorType.SUM)
    	        .withFormatString("Standard")
    	        .build();

    	private static final StandardDimensionMappingImpl productDimension = StandardDimensionMappingImpl.builder()
    			.withName("Store")
    			.withHierarchies(List.of(
    				HierarchyMappingImpl.builder()
    					.withHasAll(true)
    					.withPrimaryKey("product_id")
    					.withPrimaryKeyTable("product")
    					.withQuery(JoinQueryMappingImpl.builder()
    							.withLeft(JoinedQueryElementMappingImpl.builder()
                            			.withKey("product_class_id")
                            			.withQuery(TableQueryMappingImpl.builder().withName("product").build())
                            			.build())
    							.withRight(JoinedQueryElementMappingImpl.builder()
                            			.withKey("product_class_id")
                            			.withQuery(TableQueryMappingImpl.builder().withName("product_class").build())
                            			.build())
    							.build())
    					.withLevels(List.of(
    						LevelMappingImpl.builder()
    							.withName("Product Name").withTable("product").withColumn("product_name").withUniqueMembers(true)
    							.build()

    					))
    					.build(),
        			HierarchyMappingImpl.builder()
        				.withName("BrandOnly")
        				.withHasAll(true)
    					.withPrimaryKey("product_id")
    					.withPrimaryKeyTable("product")
    					.withQuery(JoinQueryMappingImpl.builder()
    							.withLeft(JoinedQueryElementMappingImpl.builder()
                            			.withKey("product_class_id")
                            			.withQuery(TableQueryMappingImpl.builder().withName("product").build())
                            			.build())
    							.withRight(JoinedQueryElementMappingImpl.builder()
                            			.withKey("product_class_id")
                            			.withQuery(TableQueryMappingImpl.builder().withName("product_class").build())
                            			.build())
    							.build())
    					.withLevels(List.of(
    						LevelMappingImpl.builder()
    							.withName("Product Name").withTable("product").withColumn("brand_name").withUniqueMembers(false)
    							.build()

    					))
    					.build()
    			)).build();

        public ValidMeasureFunDefTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<SchemaMapping> catalogSchemas(CatalogMapping catalog2) {
        	PhysicalCubeMappingImpl cubeSales;
        	PhysicalCubeMappingImpl cubeSales1;
        	MeasureMappingImpl mUnitSales1;
            return List.of(SchemaMappingImpl.builder()
            		.withName("FoodMart")
            		.withCubes(List.of(
            			cubeSales = PhysicalCubeMappingImpl.builder()
                        	.withName("Sales")
                        	.withDefaultMeasure(m)
                        	.withQuery(TableQueryMappingImpl.builder().withName("sales_fact_1997").build())
                        	.withDimensionConnectors(List.of(DimensionConnectorMappingImpl.builder()
                        			.withOverrideDimensionName("Product")
                        			.withForeignKey("product_id")
                        			.withDimension(productDimension)
                        			.build()))
                        	.build(),
                        cubeSales1 = PhysicalCubeMappingImpl.builder()
                            .withName("Sales 1")
                            .withCache(true)
                            .withEnabled(true)
                            .withQuery(TableQueryMappingImpl.builder().withName("sales_fact_1997").build())
                            .withMeasureGroups(List.of(
                            	MeasureGroupMappingImpl.builder()
                            	.withMeasures(List.of(
                            			mUnitSales1 = MeasureMappingImpl.builder()
                                        .withName("Unit Sales1")
                                        .withColumn("unit_sales")
                                        .withAggregatorType(MeasureAggregatorType.SUM)
                                        .withFormatString("Standard")
                                    	.build()
                            	))
                            	.build()
                            ))
                            .build(),
                        VirtualCubeMappingImpl.builder()
                            .withEnabled(true)
                            .withName("Virtual Cube")
                            .withDimensionConnectors(List.of(
                            	DimensionConnectorMappingImpl.builder()
                            	.withOverrideDimensionName("Product")
                            	.withPhysicalCube(cubeSales)
                            	.withDimension(productDimension)
                            	.build()
                            ))
                            .withReferencedMeasures(List.of(
                            	mUnitSales1
                            ))
                            .build()
            		))
            		.build());
        }

        /*
    "<?xml version=\"1.0\"?>\n"
    + "<Schema name=\"FoodMart\">\n"
    + "  <Dimension name=\"Product\">\n"
    + "    <Hierarchy hasAll=\"true\" primaryKey=\"product_id\" primaryKeyTable=\"product\">\n"
    + "      <Join leftKey=\"product_class_id\" rightKey=\"product_class_id\">\n"
    + "        <Table name=\"product\"/>\n"
    + "        <Table name=\"product_class\"/>\n"
    + "      </Join>\n"
    + "      <Level name=\"Product Name\" table=\"product\" column=\"product_name\" uniqueMembers=\"true\"/>\n"
    + "    </Hierarchy>\t\n"
    + "\t<Hierarchy name=\"BrandOnly\" hasAll=\"true\" primaryKey=\"product_id\" primaryKeyTable=\"product\">\n"
    + "      <Join leftKey=\"product_class_id\" rightKey=\"product_class_id\">\n"
    + "        <Table name=\"product\"/>\n"
    + "        <Table name=\"product_class\"/>\n"
    + "      </Join>\n"
    + "      <Level name=\"Product\" table=\"product\" column=\"brand_name\" uniqueMembers=\"false\"/>\n"
    + "    </Hierarchy>\n"
    + "  </Dimension>\n"
    + "  <Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">\n"
    + "    <Table name=\"sales_fact_1997\"/>\n"
    + "    <DimensionUsage name=\"Product\" source=\"Product\" foreignKey=\"product_id\"/>\n"
    + "  </Cube>\n"
    + "  <Cube name=\"Sales 1\" cache=\"true\" enabled=\"true\">\n"
    + "    <Table name=\"sales_fact_1997\"/>\n"
    + "\t<Measure name=\"Unit Sales1\" column=\"unit_sales\" aggregator=\"sum\"\n"
    + "      formatString=\"Standard\"/>\n" + "  </Cube>  \n"
    + " \n"
    + "  <VirtualCube enabled=\"true\" name=\"Virtual Cube\">\n"
    + "\t<VirtualCubeDimension cubeName=\"Sales\" highCardinality=\"false\" name=\"Product\">\n"
    + "    </VirtualCubeDimension>\n"
    + "    <VirtualCubeMeasure cubeName=\"Sales 1\" name=\"[Measures].[Unit Sales1]\" visible=\"true\">\n"
    + "    </VirtualCubeMeasure>\n"
    + "  </VirtualCube>\n" + "</Schema>";
         */
    }

    public static class FunctionTestModifier extends PojoMappingModifier {

        /*
         "<CalculatedMember "
        + "name='H1 1997' "
        + "formula='Aggregate([Time].[1997].[Q1]:[Time].[1997].[Q2])' "
        + "dimension='Time' />" ));
         */
        public FunctionTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(CalculatedMemberMappingImpl.builder()
                    .withName("H1 1997")
                    .withFormula("Aggregate([Time].[1997].[Q1]:[Time].[1997].[Q2])")
                    .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.HIERARCHY_TIME1))
                    //.withDimension(FoodmartMappingSupplier.DIMENSION_TIME) //dimension absent in new model
                    .build());
            }
            return result;
        }
    }

    public static class FunctionTestModifier2 extends PojoMappingModifier {

        /*
      "<CalculatedMember "
        + "name='H1 1997' "
        + "formula='Aggregate([Time].[1997].[Q1]:[Time].[1997].[Q2])' "
        + "dimension='Time' />"
        + "<CalculatedMember "
        + "name='Partial' "
        + "formula='Aggregate([Education Level].[Partial College]:[Education Level].[Partial High School])' "
        + "dimension='Education Level' />"));
         */
        public FunctionTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(CalculatedMemberMappingImpl.builder()
                    .withName("H1 1997")
                    .withFormula("Aggregate([Time].[1997].[Q1]:[Time].[1997].[Q2])")
                    .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.HIERARCHY_TIME1))
                    //.withDimension(FoodmartMappingSupplier.DIMENSION_TIME) //dimension absent in new model
                    .build());
                result.add(CalculatedMemberMappingImpl.builder()
                        .withName("Partial")
                        .withFormula("Aggregate([Education Level].[Partial College]:[Education Level].[Partial High School])")
                        .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.HIERARCHY_EDUCATION_LEVEL))
                        //.withDimension(FoodmartMappingSupplier.DIMENSION_TIME) //dimension absent in new model
                        .build());
            }
            return result;
        }
    }

    public static class FunctionTestModifier3 extends PojoMappingModifier {

        /*
      "<Cube name=\"Sales_Hierarchize\">\n"
        + "  <Table name=\"sales_fact_1997\"/>\n"
        + "  <Dimension name=\"Time_Alphabetical\" type=\"TimeDimension\" foreignKey=\"time_id\">\n"
        + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n"
        + "      <Table name=\"time_by_day\"/>\n"
        + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
        + "          levelType=\"TimeYears\"/>\n"
        + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
        + "          levelType=\"TimeQuarters\"/>\n"
        + "      <Level name=\"Month\" column=\"month_of_year\" uniqueMembers=\"false\" type=\"Numeric\"\n"
        + "          ordinalColumn=\"the_month\"\n"
        + "          levelType=\"TimeMonths\"/>\n"
        + "    </Hierarchy>\n"
        + "  </Dimension>\n"
        + "\n"
        + "  <Dimension name=\"Month_Alphabetical\" type=\"TimeDimension\" foreignKey=\"time_id\">\n"
        + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n"
        + "      <Table name=\"time_by_day\"/>\n"
        + "      <Level name=\"Month\" column=\"month_of_year\" uniqueMembers=\"false\" type=\"Numeric\"\n"
        + "          ordinalColumn=\"the_month\"\n"
        + "          levelType=\"TimeMonths\"/>\n"
        + "    </Hierarchy>\n"
        + "  </Dimension>\n"
        + "\n"
        + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
        + "      formatString=\"Standard\"/>\n"
        + "</Cube>"
         */
        public FunctionTestModifier3(CatalogMapping catalogMapping) {
            super(catalogMapping);
        }

        protected List<? extends CubeMapping> schemaCubes(SchemaMapping schemaMappingOriginal) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.schemaCubes(schemaMappingOriginal));
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("Sales_Hierarchize")
                .withQuery(TableQueryMappingImpl.builder().withName("sales_fact_1997").build())
                .withDimensionConnectors(List.of(
                	DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Time_Alphabetical")
                		.withForeignKey("time_id")
                		.withDimension(TimeDimensionMappingImpl.builder()
                				.withName("Time_Alphabetical")
                				.withHierarchies(List.of(
                						HierarchyMappingImpl.builder()
                							.withHasAll(false)
                							.withPrimaryKey("time_id")
                							.withQuery(TableQueryMappingImpl.builder().withName("time_by_day").build())
                							.withLevels(List.of(
                								LevelMappingImpl.builder()
                									.withName("Year")
                									.withColumn("the_year")
                									.withType(DataType.NUMERIC)
                									.withUniqueMembers(true)
                									.withLevelType(LevelType.TIME_YEARS)
                									.build(),
                								LevelMappingImpl.builder()
                									.withName("Quarter")
                									.withColumn("quarter")
                									.withUniqueMembers(false)
                									.withLevelType(LevelType.TIME_QUARTERS)
                									.build(),
                								LevelMappingImpl.builder()
                									.withName("Month")
                									.withColumn("month_of_year")
                									.withUniqueMembers(false)
                									.withType(DataType.NUMERIC)
                									.withOrdinalColumn("the_month")
                									.withLevelType(LevelType.TIME_MONTHS)
                									.build()
                								))
                								.build()
                				)).build()
                		)
                        .build(),
                    DimensionConnectorMappingImpl.builder()
                    	.withOverrideDimensionName("Month_Alphabetical")
                        .withForeignKey("time_id")
                        .withDimension(TimeDimensionMappingImpl.builder()
                        		.withName("Month_Alphabetical")
                        		.withHierarchies(List.of(
                        			HierarchyMappingImpl.builder()
                        				.withHasAll(false)
                        				.withPrimaryKey("time_id")
                        				.withQuery(TableQueryMappingImpl.builder().withName("time_by_day").build())
                        				.withLevels(List.of(
                        					LevelMappingImpl.builder()
                        						.withName("Month")
                        						.withColumn("month_of_year")
                        						.withUniqueMembers(false)
                        						.withType(DataType.NUMERIC)
                        						.withOrdinalColumn("the_month")
                        						.withLevelType(LevelType.TIME_MONTHS)
                        						.build()
                        				))
                                .		build()
                        			))
                        			.build()
                        )
                        .build()

                ))
                .withMeasureGroups(List.of(
                		MeasureGroupMappingImpl.builder()
                		.withMeasures(List.of(
                             MeasureMappingImpl.builder()
                                .withName("Unit Sales")
                                .withColumn("unit_sales")
                                .withAggregatorType(MeasureAggregatorType.SUM)
                                .withFormatString("Standard")
                                .build()
                		))
                		.build()
                ))
                .build());


            return result;

        }

    }

    public static class FilterTestModifier extends PojoMappingModifier {

        /*
        "<Dimension name='Store Type'>\n"
          + "    <Hierarchy name='Store Types Hierarchy' allMemberName='All Store Types Member Name' hasAll='true'>\n"
          + "      <Level name='Store Type' column='store_type' uniqueMembers='true'/>\n"
          + "    </Hierarchy>\n"
          + "  </Dimension>\n"
          + "  <Dimension name='Store'>\n"
          + "    <Hierarchy hasAll='true' primaryKey='store_id'>\n"
          + "      <Table name='store'/>\n"
          + "      <Level name='Store Country' column='store_country' uniqueMembers='true'/>\n"
          + "      <Level name='Store State' column='store_state' uniqueMembers='true'/>\n"
          + "      <Level name='Store City' column='store_city' uniqueMembers='false'/>\n"
          + "      <Level name='Store Name' column='store_id' type='Numeric' nameColumn='store_name' "
          + "uniqueMembers='false'/>\n"
          + "    </Hierarchy>\n"
          + "  </Dimension>\n" ));
         */
        public FilterTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Store".equals(cube.getName())) {
                Optional<DimensionConnectorMapping> o = result.stream().filter(d -> d.getOverrideDimensionName().equals("Store")).findFirst();
                int i = 0;
                if (o.isPresent()) {
                    i = result.indexOf(o.get());
                }
                result.add(i, DimensionConnectorMappingImpl.builder()
                	.withOverrideDimensionName("Store")
                	.withDimension(StandardDimensionMappingImpl.builder()
                		.withName("Store")
                		.withHierarchies(List.of(
                			HierarchyMappingImpl.builder()
                            .withHasAll(true)
                            .withPrimaryKey("store_id")
                            .withQuery(TableQueryMappingImpl.builder().withName("store").build())
                            .withLevels(List.of(
                                LevelMappingImpl.builder()
                                    .withName("Store Country")
                                    .withColumn("store_country")
                                    .withUniqueMembers(true)
                                    .build(),
                                LevelMappingImpl.builder()
                                    .withName("Store State")
                                    .withColumn("store_state")
                                    .withUniqueMembers(true)
                                    .build(),
                                LevelMappingImpl.builder()
                                    .withName("Store City")
                                    .withColumn("store_city")
                                    .withUniqueMembers(false)
                                    .build(),
                                LevelMappingImpl.builder()
                                    .withName("Store Name")
                                    .withColumn("store_id")
                                    .withType(DataType.NUMERIC)
                                    .withNameColumn("store_name")
                                    .withUniqueMembers(false)
                                    .build()

                             ))
                            .build()
                		))
                		.build())
                	.build());
                o = result.stream().filter(d -> d.getOverrideDimensionName().equals("Store Type")).findFirst();
                i = 0;
                if (o.isPresent()) {
                    i = result.indexOf(o.get());
                }
                result.add(DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Store Type")
                		.withDimension(StandardDimensionMappingImpl.builder()
                				.withName("Store Type")
                				.withHierarchies(List.of(
                						HierarchyMappingImpl.builder()
                							.withName("Store Types Hierarchy")
                							.withAllMemberName("All Store Types Member Name")
                							.withHasAll(true)
                							.withLevels(List.of(
                								LevelMappingImpl.builder()
                									.withName("Store Type")
                									.withColumn("store_type")
                									.withUniqueMembers(true)
                									.build()
                                             ))
                                             .build()
                                )).build()
                		)
                        .build());
            }
            return result;
        }

    }

    public static class MemberCacheControlTestModifier extends PojoMappingModifier {

        /*
            "  <Dimension name=\"Retail\" foreignKey=\"store_id\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "      <Table name=\"store\"/>\n"
            + "      <Level name=\"State\" column=\"store_state\" uniqueMembers=\"true\">\n"
            + "        <Property name=\"Country\" column=\"store_country\"/>\n"
            + "      </Level>\n"
            + "      <Level name=\"City\" column=\"store_city\" uniqueMembers=\"true\">\n"
            + "        <Property name=\"Population\" column=\"store_postal_code\"/>\n"
            + "      </Level>\n"
            + "      <Level name=\"Name\" column=\"store_name\" uniqueMembers=\"true\">\n"
            + "        <Property name=\"Store Type\" column=\"store_type\"/>\n"
            + "        <Property name=\"Store Manager\" column=\"store_manager\"/>\n"
            + "        <Property name=\"Store Sqft\" column=\"store_sqft\" type=\"Numeric\"/>\n"
            + "        <Property name=\"Has coffee bar\" column=\"coffee_bar\" type=\"Boolean\"/>\n"
            + "        <Property name=\"Street address\" column=\"store_street_address\" type=\"String\"/>\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "   </Dimension>"));
         */
        public MemberCacheControlTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(DimensionConnectorMappingImpl.builder()
                	.withForeignKey("store_id")
                	.withOverrideDimensionName("Retail")
                	.withDimension(StandardDimensionMappingImpl.builder()
                		.withName("Retail")
                		.withHierarchies(List.of(
                			HierarchyMappingImpl.builder()
                            .withHasAll(true)
                            .withPrimaryKey("store_id")
                            .withQuery(TableQueryMappingImpl.builder().withName("store").build())
                            .withLevels(List.of(
                                LevelMappingImpl.builder()
                                    .withName("State")
                                    .withColumn("store_state")
                                    .withUniqueMembers(true)
                                    .withMemberProperties(List.of(
                                    	MemberPropertyMappingImpl.builder()
                                            .withName("Country")
                                            .withColumn("store_country")
                                            .build()
                                    ))
                                    .build(),
                               LevelMappingImpl.builder()
                                    .withName("City")
                                    .withColumn("store_city")
                                    .withUniqueMembers(true)
                                    .withMemberProperties(List.of(
                                        MemberPropertyMappingImpl.builder()
                                            .withName("Population")
                                            .withColumn("store_postal_code")
                                            .build()
                                    ))
                                    .build(),
                                LevelMappingImpl.builder()
                                    .withName("Name")
                                    .withColumn("store_name")
                                    .withUniqueMembers(true)
                                    .withMemberProperties(List.of(
                                        MemberPropertyMappingImpl.builder()
                                            .withName("Store Type")
                                            .withColumn("store_type")
                                            .build(),
                                        MemberPropertyMappingImpl.builder()
                                            .withName("Store Manager")
                                            .withColumn("store_manager")
                                            .build(),
                                        MemberPropertyMappingImpl.builder()
                                            .withName("Store Sqft")
                                            .withColumn("store_sqft")
                                            .withDataType(DataType.NUMERIC)
                                            .build(),
                                        MemberPropertyMappingImpl.builder()
                                            .withName("Has coffee bar")
                                            .withColumn("coffee_bar")
                                            .withDataType(DataType.BOOLEAN)
                                            .build(),
                                        MemberPropertyMappingImpl.builder()
                                            .withName("Street address")
                                            .withColumn("store_street_address")
                                            .withDataType(DataType.STRING)
                                            .build()
                                    ))
                                    .build()
                            ))
                            .build()
                    ))
                    .build()).build());
            }
            return result;
        }
    }

    public static class NonEmptyTestModifier extends PojoMappingModifier {

        /*
      "<Dimension name=\"Product Ragged\" foreignKey=\"product_id\">\n"
        + "  <Hierarchy hasAll=\"false\" primaryKey=\"product_id\">\n"
        + "    <Table name=\"product\"/>\n"
        + "    <Level name=\"Brand Name\" table=\"product\" column=\"brand_name\" uniqueMembers=\"false\"/>\n"
        + "    <Level name=\"Product Name\" table=\"product\" column=\"product_name\" uniqueMembers=\"true\"\n"
        + "        hideMemberIf=\"IfBlankName\""
        + "        />\n"
        + "  </Hierarchy>\n"
        + "</Dimension>" ) );
         */
        public NonEmptyTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(DimensionConnectorMappingImpl.builder()
                	.withForeignKey("product_id")
                	.withOverrideDimensionName("Product Ragged")
                	.withDimension(StandardDimensionMappingImpl.builder()
                			.withName("Product Ragged")
                			.withHierarchies(List.of(
                				HierarchyMappingImpl.builder()
                					.withHasAll(false)
                					.withPrimaryKey("product_id")
                					.withQuery(TableQueryMappingImpl.builder().withName("product").build())
                					.withLevels(List.of(
                							LevelMappingImpl.builder()
                							.withName("Brand Name")
                							.withTable("product")
                							.withColumn("brand_name")
                							.withUniqueMembers(false)
                							.build(),
                							LevelMappingImpl.builder()
                							.withName("Product Name")
                							.withTable("product")
                							.withColumn("product_name")
                							.withUniqueMembers(true)
                							.withHideMemberIfType(HideMemberIfType.IF_BLANK_NAME)
                							.build()
                					))
                					.build()
                			))
                			.build())
                	.build());
            }
            return result;
        }
    }

    public static class NonEmptyTestModifier2 extends PojoMappingModifier {

        private final HideMemberIfType hideMemberIf;

        /*
                      "<Dimension name=\"Product Ragged\" foreignKey=\"product_id\">\n"
                + "  <Hierarchy hasAll=\"true\" primaryKey=\"product_id\">\n"
                + "    <Table name=\"product\"/>\n"
                + "    <Level name=\"Brand Name\" table=\"product\" column=\"brand_name\" uniqueMembers=\"false\"/>\n"
                + "    <Level name=\"Product Name\" table=\"product\" column=\"product_name\" uniqueMembers=\"true\"\n"
                + "        hideMemberIf=\"IfBlankName\""
                + "        />\n"
                + "  </Hierarchy>\n"
                + "</Dimension>" ) );

                 */
        public NonEmptyTestModifier2(CatalogMapping catalog, HideMemberIfType hideMemberIf) {
            super(catalog);
            this.hideMemberIf = hideMemberIf;
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Product Ragged")
                        .withForeignKey("product_id")
                        .withDimension(
                        		StandardDimensionMappingImpl.builder()
                        		.withName("Product Ragged")
                        		.withHierarchies(List.of(
                        				HierarchyMappingImpl.builder()
                        				.withHasAll(true)
                        				.withPrimaryKey("product_id")
                        				.withQuery(TableQueryMappingImpl.builder().withName("product").build())
                        				.withLevels(List.of(
                        						LevelMappingImpl.builder()
                        							.withName("Brand Name")
                        							.withTable("product")
                        							.withColumn("brand_name")
                        							.withUniqueMembers(false)
                        							.build(),
                        						LevelMappingImpl.builder()
                        							.withName("Product Name")
                        							.withTable("product")
                        							.withColumn("product_name")
                        							.withUniqueMembers(true)
                        							.withHideMemberIfType(hideMemberIf)
                        							.build()
                        				))
                                        .build()
                                ))
                                .build())
                        .build());


            }
            return result;
        }
    }

    public static class NonEmptyTestModifier3 extends PojoMappingModifier {

        /*
      "<Dimension name=\"Product Ragged\" foreignKey=\"product_id\">\n"
        + "  <Hierarchy hasAll=\"true\" primaryKey=\"product_id\">\n"
        + "    <Table name=\"product\"/>\n"
        + "    <Level name=\"Brand Name\" table=\"product\" column=\"brand_name\" uniqueMembers=\"false\""
        + "        hideMemberIf=\"IfBlankName\""
        + "        />\n"
        + "    <Level name=\"Product Name\" table=\"product\" column=\"product_name\"\n uniqueMembers=\"true\"/>\n"
        + "  </Hierarchy>\n"
        + "</Dimension>" ) );
         */
        public NonEmptyTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(DimensionConnectorMappingImpl.builder()
                	.withOverrideDimensionName("Product Ragged")
                	.withForeignKey("product_id")
                	.withDimension(
                		StandardDimensionMappingImpl.builder()
                			.withName("Product Ragged")
                			.withHierarchies(List.of(
                			   HierarchyMappingImpl.builder()
                            	.withHasAll(true)
                            	.withPrimaryKey("product_id")
                            	.withQuery(TableQueryMappingImpl.builder().withName("product").build())
                            	.withLevels(List.of(
                            			LevelMappingImpl.builder()
                            				.withName("Brand Name")
                            				.withTable("product")
                            				.withColumn("brand_name")
                            				.withUniqueMembers(false)
                            				.withHideMemberIfType(HideMemberIfType.IF_BLANK_NAME)
                            				.build(),
                            			LevelMappingImpl.builder()
                            				.withName("Product Name")
                            				.withTable("product")
                            				.withColumn("product_name")
                            				.withUniqueMembers(true)
                            				.build()

                            	))
                            	.build()
                			 )).build())
                    .build());
            }
            return result;
        }
    }

    public static class NonEmptyTestModifier4 extends PojoMappingModifier {

        /*
      "  <Dimension name=\"Time\" type=\"TimeDimension\" foreignKey=\"time_id\">\n"
        + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\" defaultMember=\"[Time].[1997].[Q1].[1]\" >\n"
        + "      <Table name=\"time_by_day\"/>\n"
        + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
        + "          levelType=\"TimeYears\"/>\n"
        + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
        + "          levelType=\"TimeQuarters\"/>\n"
        + "      <Level name=\"Month\" column=\"month_of_year\" uniqueMembers=\"false\" type=\"Numeric\"\n"
        + "          levelType=\"TimeMonths\"/>\n"
        + "    </Hierarchy>\n"
        + "  </Dimension>" ));
         */
        public NonEmptyTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(DimensionConnectorMappingImpl.builder()
                	.withOverrideDimensionName("Time")
                	.withForeignKey("time_id_id")
                	.withDimension(
                		TimeDimensionMappingImpl.builder()
                			.withName("Time")
                			.withHierarchies(List.of(
                			   HierarchyMappingImpl.builder()
                            	.withHasAll(false)
                            	.withPrimaryKey("time_id")
                            	.withDefaultMember("[Time].[1997].[Q1].[1]")
                            	.withQuery(TableQueryMappingImpl.builder().withName("time_by_day").build())
                            	.withLevels(List.of(
                            			LevelMappingImpl.builder()
                                            .withName("Year")
                                            .withColumn("the_year")
                                            .withType(DataType.NUMERIC)
                                            .withUniqueMembers(true)
                                            .withLevelType(LevelType.TIME_YEARS)
                                            .build(),
                                        LevelMappingImpl.builder()
                                            .withName("Quarter")
                                            .withColumn("quarter")
                                            .withUniqueMembers(true)
                                            .withLevelType(LevelType.TIME_QUARTERS)
                                            .build(),
                                        LevelMappingImpl.builder()
                                            .withName("Month")
                                            .withColumn("month_of_year")
                                            .withUniqueMembers(false)
                                            .withType(DataType.NUMERIC)
                                            .withLevelType(LevelType.TIME_MONTHS)
                                            .build()
                            	))
                            	.build()
                			 )).build())
                    .build());
            }
            return result;
        }

    }
    public static class NonEmptyTestModifier5 extends PojoMappingModifier {

        /*
      "  <Dimension name=\"Store2\"  foreignKey=\"store_id\" >\n"
        + "    <Hierarchy hasAll=\"false\" primaryKey=\"store_id\"  defaultMember='[Store2].[USA].[OR]'>\n"
        + "      <Table name=\"store\"/>\n"
        + "      <Level name=\"Store Country\" column=\"store_country\"  uniqueMembers=\"true\"\n"
        + "          />\n"
        + "      <Level name=\"Store State\" column=\"store_state\" uniqueMembers=\"true\"\n"
        + "         />\n"
        + "      <Level name=\"Store City\" column=\"store_city\" uniqueMembers=\"false\" />\n"
        + "    </Hierarchy>\n"
        + "  </Dimension>" ));
         */
        public NonEmptyTestModifier5(CatalogMapping catalog) {
            super(catalog);
        }


        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(DimensionConnectorMappingImpl.builder()
                	.withOverrideDimensionName("Store2")
                	.withForeignKey("store_id")
                	.withDimension(
                		StandardDimensionMappingImpl.builder()
                			.withName("Store2")
                			.withHierarchies(List.of(
                			   HierarchyMappingImpl.builder()
                            	.withHasAll(false)
                            	.withPrimaryKey("store_id")
                            	.withDefaultMember("[Store2].[USA].[OR]")
                            	.withQuery(TableQueryMappingImpl.builder().withName("store").build())
                            	.withLevels(List.of(
                                        LevelMappingImpl.builder()
                                            .withName("Store Country")
                                            .withColumn("store_country")
                                            .withUniqueMembers(true)
                                            .build(),
                                        LevelMappingImpl.builder()
                                            .withName("Store State")
                                            .withColumn("store_state")
                                            .withUniqueMembers(true)
                                            .build(),
                                        LevelMappingImpl.builder()
                                            .withName("Store City")
                                            .withColumn("store_city")
                                            .withUniqueMembers(false)
                                            .build()
                            	))
                            	.build()
                			 )).build())
                    .build());
            }
            return result;
        }
    }

    public static class NonEmptyTestModifier6 extends PojoMappingModifier {

        /*
              "<?xml version=\"1.0\"?>\n"
        + "<Schema name=\"custom\">\n"
        + "  <Dimension name=\"Store\">\n"
        + "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n"
        + "      <Table name=\"store\"/>\n"
        + "      <Level name=\"Store Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
        + "      <Level name=\"Store State\" column=\"store_state\" uniqueMembers=\"true\"/>\n"
        + "      <Level name=\"Store City\" column=\"store_city\" uniqueMembers=\"false\"/>\n"
        + "      <Level name=\"Store Name\" column=\"store_name\" uniqueMembers=\"true\">\n"
        + "      </Level>\n"
        + "    </Hierarchy>\n"
        + "  </Dimension>\n"
        + "  <Dimension name=\"Time\" type=\"TimeDimension\">\n"
        + "    <Hierarchy hasAll=\"true\" primaryKey=\"time_id\">\n"
        + "      <Table name=\"time_by_day\"/>\n"
        + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
        + "          levelType=\"TimeYears\"/>\n"
        + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
        + "          levelType=\"TimeQuarters\"/>\n"
        + "      <Level name=\"Month\" column=\"month_of_year\" uniqueMembers=\"false\" type=\"Numeric\"\n"
        + "          levelType=\"TimeMonths\"/>\n"
        + "    </Hierarchy>\n"
        + "  </Dimension>\n"
        + "  <Cube name=\"Sales1\" defaultMeasure=\"Unit Sales\">\n"
        + "    <Table name=\"sales_fact_1997\">\n"
        + "        <AggExclude name=\"agg_c_special_sales_fact_1997\" />"
        + "    </Table>\n"
        + "    <DimensionUsage name=\"Store\" source=\"Store\" foreignKey=\"store_id\"/>\n"
        + "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
        + "    <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
        + "      formatString=\"Standard\"/>\n"
        + "    <Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\"\n"
        + "      formatString=\"#,###.00\"/>\n"
        + "    <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
        + "      formatString=\"#,###.00\"/>\n"
        + "  </Cube>\n"
        + "<Role name=\"Role1\">\n"
        + "  <SchemaGrant access=\"none\">\n"
        + "    <CubeGrant cube=\"Sales1\" access=\"all\">\n"
        + "      <HierarchyGrant hierarchy=\"[Time]\" access=\"custom\" rollupPolicy=\"partial\">\n"
        + "        <MemberGrant member=\"[Time].[Year].[1997]\" access=\"all\"/>\n"
        + "      </HierarchyGrant>\n"
        + "    </CubeGrant>\n"
        + "  </SchemaGrant>\n"
        + "</Role> \n"
        + "</Schema>\n";
         */

    	private static final StandardDimensionMappingImpl storeDimension = StandardDimensionMappingImpl.builder()
    			.withName("Store")
    			.withHierarchies(List.of(
    				HierarchyMappingImpl.builder()
    					.withHasAll(true)
    					.withPrimaryKey("store_id")
    					.withQuery(TableQueryMappingImpl.builder().withName("store").build())
    					.withLevels(List.of(
    						LevelMappingImpl.builder()
    							.withName("Store Country").withColumn("store_country").withUniqueMembers(true)
    							.build(),
    						LevelMappingImpl.builder()
    							.withName("Store State").withColumn("store_state").withUniqueMembers(true)
    							.build(),
    						LevelMappingImpl.builder()
    							.withName("Store City").withColumn("store_city").withUniqueMembers(false)
    							.build(),
    						LevelMappingImpl.builder()
    							.withName("Store Name").withColumn("store_name").withUniqueMembers(true)
    							.build()

    					))
                .build()
    			)).build();

    	private static final HierarchyMappingImpl timeHierarchy = HierarchyMappingImpl.builder()
		.withHasAll(true)
		.withPrimaryKey("time_id")
		.withQuery(TableQueryMappingImpl.builder().withName("time_by_day").build())
		.withLevels(List.of(
			LevelMappingImpl.builder()
				.withName("Year").withColumn("the_year").withType(DataType.NUMERIC).withUniqueMembers(true).withLevelType(LevelType.TIME_YEARS)
				.build(),
			LevelMappingImpl.builder()
				.withName("Quarter").withColumn("quarter").withUniqueMembers(false).withLevelType(LevelType.TIME_QUARTERS)
				.build(),
			LevelMappingImpl.builder()
				.withName("Month").withColumn("month_of_year").withUniqueMembers(false).withType(DataType.NUMERIC).withLevelType(LevelType.TIME_MONTHS)
				.build()
		))
		.build();

    	private static final TimeDimensionMappingImpl timeDimension = TimeDimensionMappingImpl.builder()
    			.withName("Time")
    			.withHierarchies(List.of(timeHierarchy)).build();

    	private static final MeasureMappingImpl m = MeasureMappingImpl.builder()
    	        .withName("Unit Sales")
    	        .withColumn("unit_sales")
    	        .withAggregatorType(MeasureAggregatorType.SUM)
    	        .withFormatString("Standard")
    	        .build();

    	private static final PhysicalCubeMappingImpl sales1Cube = PhysicalCubeMappingImpl.builder()
        .withName("Sales1")
        .withDefaultMeasure(m)
        .withQuery(TableQueryMappingImpl.builder().withName("sales_fact_1997")
        		.withAggregationExcludes(List.of(
        				AggregationExcludeMappingImpl.builder().withName("agg_c_special_sales_fact_1997").build()
        		))
        		.build()
        )
        .withDimensionConnectors(List.of(
        	DimensionConnectorMappingImpl.builder()
        		.withOverrideDimensionName("Store")
        		.withDimension(storeDimension)
                .withForeignKey("store_id")
                .build(),
            DimensionConnectorMappingImpl.builder()
                .withOverrideDimensionName("Time")
                .withDimension(timeDimension)
                .withForeignKey("time_id")
                .build()
        ))
        .withMeasureGroups(List.of(
        		MeasureGroupMappingImpl.builder()
        		.withMeasures(List.of(
        			m,
        			MeasureMappingImpl.builder()
        				.withName("Store Cost")
        				.withColumn("store_cost")
        				.withAggregatorType(MeasureAggregatorType.SUM)
        				.withFormatString("#,###.00")
        				.build(),
        			MeasureMappingImpl.builder()
        				.withName("Store Sales")
        				.withColumn("store_sales")
        				.withAggregatorType(MeasureAggregatorType.SUM)
        				.withFormatString("#,###.00")
        				.build()
        		))
        		.build()
        	))
        .build();

        public NonEmptyTestModifier6(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<SchemaMapping> catalogSchemas(CatalogMapping catalog2) {
            return List.of(SchemaMappingImpl.builder()
            		.withName("custom")
                    .withCubes(List.of(sales1Cube))
                    	.withAccessRoles(List.of(
                    		AccessRoleMappingImpl.builder()
                                .withName("Role1")
                                .withAccessSchemaGrants(List.of(
                                    AccessSchemaGrantMappingImpl.builder()
                                        .withAccess(AccessSchema.NONE)
                                        .withCubeGrant(List.of(
                                        	AccessCubeGrantMappingImpl.builder()
                                                .withCube(sales1Cube)
                                                .withAccess(AccessCube.ALL)
                                                .withHierarchyGrants(List.of(
                                                	AccessHierarchyGrantMappingImpl.builder()
                                                        .withHierarchy(timeHierarchy)
                                                        .withAccess(AccessHierarchy.CUSTOM)
                                                        .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                                        .withMemberGrants(List.of(
                                                        	AccessMemberGrantMappingImpl.builder()
                                                                .withMember("[Time].[Year].[1997]")
                                                                .withAccess(AccessMember.ALL)
                                                                .build()
                                                        ))
                                                        .build()
                                                ))
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
            		.build());
        }
    }

    public static class NonEmptyTestModifier7 extends PojoMappingModifier {

        /*
        "<Schema name=\"FoodMart\">"
          + "  <Dimension name=\"Store\">"
          + "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">"
          + "      <Table name=\"store\" />"
          + "      <Level name=\"Store Country\" column=\"store_country\" uniqueMembers=\"true\" />"
          + "      <Level name=\"Store State\" column=\"store_state\" uniqueMembers=\"true\" />"
          + "    </Hierarchy>"
          + "  </Dimension>"
          + "  <Dimension name=\"Time\" type=\"TimeDimension\">\n"
          + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n"
          + "      <Table name=\"time_by_day\"/>\n"
          + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
          + "          levelType=\"TimeYears\"/>\n"
          + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
          + "          levelType=\"TimeQuarters\"/>\n"
          + "    </Hierarchy>\n"
          + "    </Dimension>"
          + "  <Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">"
          + "    <Table name=\"sales_fact_1997\" />"
          + "    <DimensionUsage name=\"Store\" source=\"Store\" foreignKey=\"store_id\" />"
          + "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\" />"
          + "    <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\" formatString=\"Standard\" />"
          + "    <CalculatedMember name=\"dummyMeasure\" dimension=\"Measures\">"
          + "      <Formula>[Measures].[Unit Sales]</Formula>"
          + "    </CalculatedMember>"
          + "    <CalculatedMember name=\"dummyMeasure2\" dimension=\"Measures\">"
          + "      <Formula>[Measures].[dummyMeasure]</Formula>"
          + "    </CalculatedMember>"
          + "  </Cube>"
          + "  <VirtualCube defaultMeasure=\"dummyMeasure\" name=\"virtual\">"
          + "    <VirtualCubeDimension name=\"Store\" />"
          + "    <VirtualCubeDimension name=\"Time\" />"
          + "    <VirtualCubeMeasure name=\"[Measures].[dummyMeasure2]\" cubeName=\"Sales\" />"
          + "  </VirtualCube>"
          + "</Schema>" );
         */

    	private static final StandardDimensionMappingImpl storeDimension = StandardDimensionMappingImpl.builder()
    			.withName("Store")
    			.withHierarchies(List.of(
    				HierarchyMappingImpl.builder()
    					.withHasAll(true)
    					.withPrimaryKey("store_id")
    					.withQuery(TableQueryMappingImpl.builder().withName("store").build())
    					.withLevels(List.of(
    						LevelMappingImpl.builder()
    							.withName("Store Country").withColumn("store_country").withUniqueMembers(true)
    							.build(),
    						LevelMappingImpl.builder()
    							.withName("Store State").withColumn("store_state").withUniqueMembers(true)
    							.build()
    					))
                .build()
    			)).build();

    	private static final HierarchyMappingImpl timeHierarchy = HierarchyMappingImpl.builder()
		.withHasAll(true)
		.withPrimaryKey("time_id")
		.withQuery(TableQueryMappingImpl.builder().withName("time_by_day").build())
		.withLevels(List.of(
			LevelMappingImpl.builder()
				.withName("Year").withColumn("the_year").withType(DataType.NUMERIC).withUniqueMembers(true).withLevelType(LevelType.TIME_YEARS)
				.build(),
			LevelMappingImpl.builder()
				.withName("Quarter").withColumn("quarter").withUniqueMembers(false).withLevelType(LevelType.TIME_QUARTERS)
				.build()
		))
		.build();

    	private static final TimeDimensionMappingImpl timeDimension = TimeDimensionMappingImpl.builder()
    			.withName("Time")
    			.withHierarchies(List.of(timeHierarchy)).build();

    	private static final MeasureMappingImpl m = MeasureMappingImpl.builder()
    	        .withName("Unit Sales")
    	        .withColumn("unit_sales")
    	        .withAggregatorType(MeasureAggregatorType.SUM)
    	        .withFormatString("Standard")
    	        .build();


        public NonEmptyTestModifier7(CatalogMapping catalog) {
            super(catalog);
        }


        protected List<SchemaMapping> catalogSchemas(CatalogMapping catalog2) {
        	CalculatedMemberMappingImpl cmDummyMeasure;
        	DimensionConnectorMappingImpl dStore;
        	DimensionConnectorMappingImpl dTime;
        	CalculatedMemberMappingImpl dummyMeasure2Cm;
        	PhysicalCubeMappingImpl salesCube;
            return List.of(SchemaMappingImpl.builder()
            		.withName("FoodMart")
                    .withCubes(List.of(
                    	salesCube = PhysicalCubeMappingImpl.builder()
                            .withName("Sales")
                            .withDefaultMeasure(m)
                            .withQuery(TableQueryMappingImpl.builder().withName("sales_fact_1997").build())
                            .withDimensionConnectors(List.of(
                            	dStore = DimensionConnectorMappingImpl.builder()
                            		.withOverrideDimensionName("Store")
                            		.withDimension(storeDimension)
                                    .withForeignKey("store_id")
                                    .build(),
                                dTime = DimensionConnectorMappingImpl.builder()
                                	.withOverrideDimensionName("Time")
                                	.withDimension(timeDimension)
                                	.withForeignKey("time_id")
                                    .build()
                            ))
                            .withMeasureGroups(List.of(
                            		MeasureGroupMappingImpl.builder()
                            		.withMeasures(List.of(
                                        MeasureMappingImpl.builder()
                                            .withName("Unit Sales")
                                            .withColumn("unit_sales")
                                            .withAggregatorType(MeasureAggregatorType.SUM)
                                            .withFormatString("Standard")
                                            .build()
                            		))
                            		.build()
                            		))
                            .withCalculatedMembers(List.of(
                            	cmDummyMeasure = CalculatedMemberMappingImpl.builder()
                                    .withName("dummyMeasure")
                                    //.dimension("Measures")
                                    .withFormula("[Measures].[Unit Sales]")
                                    .build(),
                                dummyMeasure2Cm = CalculatedMemberMappingImpl.builder()
                                    .withName("dummyMeasure2")
                                    //.dimension("Measures")
                                    .withFormula("[Measures].[dummyMeasure]")
                                    .build()
                            ))
                            .build(),
                        VirtualCubeMappingImpl.builder()
                        .withDefaultMeasure(cmDummyMeasure)
                        .withName("virtual")
                        .withDimensionConnectors(List.of(
                        	DimensionConnectorMappingImpl.builder()
                        		.withOverrideDimensionName("Store")
                        		.withDimension(storeDimension)
                        		.build(),
                        	DimensionConnectorMappingImpl.builder()
                        		.withOverrideDimensionName("Time")
                        		.withDimension(timeDimension)
                        		.build()

                        ))
                        .withReferencedCalculatedMembers(List.of(
                        	dummyMeasure2Cm
                        ))
                        .build()
                    ))
            		.build());
        }

    }

    public static class BasicQueryTestModifier1 extends PojoMappingModifier {

        /*
            "<Dimension name=\"Gender2\" foreignKey=\"customer_id\">\n"
                + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Gender\" primaryKey=\"customer_id\">\n"
                + "    <View alias=\"gender2\">\n" + "      <SQL dialect=\"generic\">\n"
                + "        <![CDATA[SELECT * FROM customer]]>\n" + "      </SQL>\n"
                + "      <SQL dialect=\"oracle\">\n" + "        <![CDATA[SELECT * FROM \"customer\"]]>\n"
                + "      </SQL>\n" + "      <SQL dialect=\"hsqldb\">\n"
                + "        <![CDATA[SELECT * FROM \"customer\"]]>\n" + "      </SQL>\n"
                + "      <SQL dialect=\"derby\">\n" + "        <![CDATA[SELECT * FROM \"customer\"]]>\n"
                + "      </SQL>\n" + "      <SQL dialect=\"luciddb\">\n"
                + "        <![CDATA[SELECT * FROM \"customer\"]]>\n" + "      </SQL>\n"
                + "      <SQL dialect=\"db2\">\n" + "        <![CDATA[SELECT * FROM \"customer\"]]>\n"
                + "      </SQL>\n" + "      <SQL dialect=\"neoview\">\n"
                + "        <![CDATA[SELECT * FROM \"customer\"]]>\n" + "      </SQL>\n"
                + "      <SQL dialect=\"netezza\">\n" + "        <![CDATA[SELECT * FROM \"customer\"]]>\n"
                + "      </SQL>\n" + "      <SQL dialect=\"snowflake\">\n"
                + "        <![CDATA[SELECT * FROM \"customer\"]]>\n" + "      </SQL>\n" + "    </View>\n"
                + "    <Level name=\"Gender\" column=\"gender\" uniqueMembers=\"true\"/>\n" + "  </Hierarchy>\n"
                + "</Dimension>", null ));
         */

    	private static final  SqlSelectQueryMappingImpl v = SqlSelectQueryMappingImpl.builder()
                .withAlias("gender2")
                .withSql(List.of(
                	SQLMappingImpl.builder().withDialects(List.of("generic")).withStatement("SELECT * FROM customer").build(),
                    SQLMappingImpl.builder().withDialects(
                        List.of("oracle", "hsqldb", "derby", "luciddb", "db2", "neoview", "netezza", "snowflake"))
                        .withStatement("SELECT * FROM \"customer\"").build()
                )).build();

        public BasicQueryTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(DimensionConnectorMappingImpl.builder()
                	.withOverrideDimensionName("Gender2")
                	.withForeignKey("customer_id")
                	.withDimension(
                		StandardDimensionMappingImpl.builder()
                			.withName("Gender2")
                			.withHierarchies(List.of(
                			   HierarchyMappingImpl.builder()
                            	.withHasAll(true)
                            	.withAllMemberName("All Gender")
                            	.withPrimaryKey("customer_id")
                            	.withQuery(v)
                            	.withLevels(List.of(
                                        LevelMappingImpl.builder()
                                            .withName("Gender")
                                            .withColumn("gender")
                                            .withUniqueMembers(true)
                                            .build()
                            	))
                            	.build()
                			 )).build())
                    .build());
            }
            return result;
        }
    }

    public static class BasicQueryTestModifier2 extends PojoMappingModifier {

        /*
            "   <Dimension name=\"ProdAmbiguousLevelName\" foreignKey=\"product_id\">\n"
                + "    <Hierarchy hasAll=\"true\" primaryKey=\"product_id\" primaryKeyTable=\"product\">\n"
                + "      <Join leftKey=\"product_class_id\" rightKey=\"product_class_id\">\n"
                + "        <Table name=\"product\"/>\n" + "        <Table name=\"product_class\"/>\n"
                + "      </Join>\n" + "\n"
                + "      <Level name=\"Drink\" table=\"product_class\" column=\"product_family\"\n"
                + "          uniqueMembers=\"true\"/>\n"
                + "      <Level name=\"Beverages\" table=\"product_class\" column=\"product_department\"\n"
                + "          uniqueMembers=\"false\"/>\n"
                + "      <Level name=\"Product Category\" table=\"product_class\" column=\"product_category\"\n"
                + "          uniqueMembers=\"false\"/>\n" + "    </Hierarchy>\n" + "  </Dimension>\n", null ));
         */
        public BasicQueryTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(DimensionConnectorMappingImpl.builder()
                	.withOverrideDimensionName("ProdAmbiguousLevelName")
                    .withForeignKey("product_id")
                    .withDimension(
                    	StandardDimensionMappingImpl.builder()
                    		.withName("ProdAmbiguousLevelName")
                    		.withHierarchies(List.of(
                    			HierarchyMappingImpl.builder()
                    				.withHasAll(true)
                    				.withPrimaryKey("product_id")
                    				.withPrimaryKeyTable("product")
                    				.withQuery(JoinQueryMappingImpl.builder()
                    						.withLeft(JoinedQueryElementMappingImpl.builder()
                    							.withKey("product_class_id")
                    							.withQuery(TableQueryMappingImpl.builder().withName("product").build())
                    							.build())
                    						.withRight(JoinedQueryElementMappingImpl.builder()
                        							.withKey("product_class_id")
                        							.withQuery(TableQueryMappingImpl.builder().withName("product_class").build())
                        							.build())
                    						.build()
                    				)
                    				.withLevels(List.of(
                    					LevelMappingImpl.builder()
                    						.withName("Drink")
                    						.withTable("product_class")
                    						.withColumn("product_family")
                    						.withUniqueMembers(true)
                    						.build(),
                    					LevelMappingImpl.builder()
                    						.withName("Beverages")
                    						.withTable("product_class")
                    						.withColumn("product_department")
                    						.withUniqueMembers(false)
                    						.build(),
                    					LevelMappingImpl.builder()
                    						.withName("Product Category")
                    						.withTable("product_class")
                    						.withColumn("product_category")
                    						.withUniqueMembers(false)
                    						.build()
                    				))
                    				.build()
                    		))
                    		.build())
                    .build());
            }
            return result;

        }
    }

    public static class BasicQueryTestModifier3 extends PojoMappingModifier {

        /*
            "<Dimension name=\"ProductView\" foreignKey=\"product_id\">\n"
                + "   <Hierarchy hasAll=\"true\" primaryKey=\"product_id\" primaryKeyTable=\"productView\">\n"
                + "       <View alias=\"productView\">\n" + "           <SQL dialect=\"db2\"><![CDATA[\n"
                + "SELECT *\n" + "FROM \"product\", \"product_class\"\n"
                + "WHERE \"product\".\"product_class_id\" = \"product_class\".\"product_class_id\"\n" + "]]>\n"
                + "           </SQL>\n" + "           <SQL dialect=\"mssql\"><![CDATA[\n"
                + "SELECT \"product\".\"product_id\",\n" + "\"product\".\"brand_name\",\n"
                + "\"product\".\"product_name\",\n" + "\"product\".\"SKU\",\n" + "\"product\".\"SRP\",\n"
                + "\"product\".\"gross_weight\",\n" + "\"product\".\"net_weight\",\n"
                + "\"product\".\"recyclable_package\",\n" + "\"product\".\"low_fat\",\n"
                + "\"product\".\"units_per_case\",\n" + "\"product\".\"cases_per_pallet\",\n"
                + "\"product\".\"shelf_width\",\n" + "\"product\".\"shelf_height\",\n"
                + "\"product\".\"shelf_depth\",\n" + "\"product_class\".\"product_class_id\",\n"
                + "\"product_class\".\"product_subcategory\",\n" + "\"product_class\".\"product_category\",\n"
                + "\"product_class\".\"product_department\",\n" + "\"product_class\".\"product_family\"\n"
                + "FROM \"product\" inner join \"product_class\"\n"
                + "ON \"product\".\"product_class_id\" = \"product_class\".\"product_class_id\"\n" + "]]>\n"
                + "           </SQL>\n" + "           <SQL dialect=\"mysql\"><![CDATA[\n"
                + "SELECT `product`.`product_id`,\n" + "`product`.`brand_name`,\n" + "`product`.`product_name`,\n"
                + "`product`.`SKU`,\n" + "`product`.`SRP`,\n" + "`product`.`gross_weight`,\n"
                + "`product`.`net_weight`,\n" + "`product`.`recyclable_package`,\n" + "`product`.`low_fat`,\n"
                + "`product`.`units_per_case`,\n" + "`product`.`cases_per_pallet`,\n" + "`product`.`shelf_width`,\n"
                + "`product`.`shelf_height`,\n" + "`product`.`shelf_depth`,\n"
                + "`product_class`.`product_class_id`,\n" + "`product_class`.`product_family`,\n"
                + "`product_class`.`product_department`,\n" + "`product_class`.`product_category`,\n"
                + "`product_class`.`product_subcategory` \n" + "FROM `product`, `product_class`\n"
                + "WHERE `product`.`product_class_id` = `product_class`.`product_class_id`\n" + "]]>\n"
                + "           </SQL>\n" + "           <SQL dialect=\"generic\"><![CDATA[\n" + "SELECT *\n"
                + "FROM \"product\", \"product_class\"\n"
                + "WHERE \"product\".\"product_class_id\" = \"product_class\".\"product_class_id\"\n" + "]]>\n"
                + "           </SQL>\n" + "       </View>\n"
                + "       <Level name=\"Product Family\" column=\"product_family\" uniqueMembers=\"true\"/>\n"
                + "       <Level name=\"Product Department\" column=\"product_department\" uniqueMembers=\"false\"/>\n"
                + "       <Level name=\"Product Category\" column=\"product_category\" uniqueMembers=\"false\"/>\n"
                + "       <Level name=\"Product Subcategory\" column=\"product_subcategory\" uniqueMembers=\"false\"/>\n"
                + "       <Level name=\"Brand Name\" column=\"brand_name\" uniqueMembers=\"false\"/>\n"
                + "       <Level name=\"Product Name\" column=\"product_name\" uniqueMembers=\"true\"/>\n"
                + "   </Hierarchy>\n" + "</Dimension>" ));
         */
        public BasicQueryTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
            	SqlSelectQueryMappingImpl v = SqlSelectQueryMappingImpl.builder()
                        .withAlias("productView")
                        .withSql(List.of(
                            SQLMappingImpl.builder().withDialects(List.of("db2"))
                                .withStatement(
                                    "SELECT * FROM \"product\", \"product_class\" WHERE \"product\".\"product_class_id\" = \"product_class\".\"product_class_id\""
                                )
                                .build(),
                             SQLMappingImpl.builder().withDialects(List.of("mssql"))
                                .withStatement(
                                    "SELECT \"product\".\"product_id\",\n" + "\"product\".\"brand_name\",\n"
                                        + "\"product\".\"product_name\",\n" + "\"product\".\"SKU\",\n" + "\"product\".\"SRP\",\n"
                                        + "\"product\".\"gross_weight\",\n" + "\"product\".\"net_weight\",\n"
                                        + "\"product\".\"recyclable_package\",\n" + "\"product\".\"low_fat\",\n"
                                        + "\"product\".\"units_per_case\",\n" + "\"product\".\"cases_per_pallet\",\n"
                                        + "\"product\".\"shelf_width\",\n" + "\"product\".\"shelf_height\",\n"
                                        + "\"product\".\"shelf_depth\",\n" + "\"product_class\".\"product_class_id\",\n"
                                        + "\"product_class\".\"product_subcategory\",\n" + "\"product_class\".\"product_category\",\n"
                                        + "\"product_class\".\"product_department\",\n" + "\"product_class\".\"product_family\"\n"
                                        + "FROM \"product\" inner join \"product_class\"\n"
                                        + "ON \"product\".\"product_class_id\" = \"product_class\".\"product_class_id\"\n"
                                )
                                .build(),
                            SQLMappingImpl.builder().withDialects(List.of("mysql"))
                                .withStatement(
                                    "SELECT `product`.`product_id`,\n" + "`product`.`brand_name`,\n" + "`product`.`product_name`,\n"
                                        + "`product`.`SKU`,\n" + "`product`.`SRP`,\n" + "`product`.`gross_weight`,\n"
                                        + "`product`.`net_weight`,\n" + "`product`.`recyclable_package`,\n" + "`product`.`low_fat`,\n"
                                        + "`product`.`units_per_case`,\n" + "`product`.`cases_per_pallet`,\n" + "`product`.`shelf_width`,\n"
                                        + "`product`.`shelf_height`,\n" + "`product`.`shelf_depth`,\n"
                                        + "`product_class`.`product_class_id`,\n" + "`product_class`.`product_family`,\n"
                                        + "`product_class`.`product_department`,\n" + "`product_class`.`product_category`,\n"
                                        + "`product_class`.`product_subcategory` \n" + "FROM `product`, `product_class`\n"
                                        + "WHERE `product`.`product_class_id` = `product_class`.`product_class_id`\n"
                                )
                                .build(),
                            SQLMappingImpl.builder().withDialects(List.of("db2"))
                                .withStatement(
                                    "SELECT *\n"
                                        + "FROM \"product\", \"product_class\"\n"
                                        + "WHERE \"product\".\"product_class_id\" = \"product_class\".\"product_class_id\"\n"
                                )
                                .build()
                        ))
                        .build();

                    result.add(DimensionConnectorMappingImpl.builder()
                    	.withOverrideDimensionName("ProductView")
                    	.withForeignKey("product_id")
                    	.withDimension(
                        		StandardDimensionMappingImpl.builder()
                        		.withName("ProductView")
                        		.withHierarchies(List.of(
                        			HierarchyMappingImpl.builder()
                                    	.withHasAll(true)
                                    	.withPrimaryKey("product_id")
                                    	.withPrimaryKeyTable("View")
                                    	.withQuery(v)
                                    	.withLevels(List.of(
                                    		LevelMappingImpl.builder()
                                            	.withName("Product Family")
                                            	.withColumn("product_family")
                                            	.withUniqueMembers(true)
                                            	.build(),
                                            LevelMappingImpl.builder()
                                            	.withName("Product Department")
                                            	.withColumn("product_department")
                                            	.withUniqueMembers(false)
                                            	.build(),
                                            LevelMappingImpl.builder()
                                            	.withName("Product Category")
                                            	.withColumn("product_category")
                                            	.withUniqueMembers(false)
                                            	.build(),
                                            LevelMappingImpl.builder()
                                            	.withName("Product Subcategory")
                                            	.withColumn("product_subcategory")
                                            	.withUniqueMembers(false)
                                            	.build(),
                                            LevelMappingImpl.builder()
                                            	.withName("Brand Name")
                                            	.withColumn("brand_name")
                                            	.withUniqueMembers(false)
                                            	.build(),
                                            LevelMappingImpl.builder()
                                            	.withName("Product Name")
                                            	.withColumn("product_name")
                                            	.withUniqueMembers(false)
                                            	.build()
                                    ))
                                    .build()
                        		))
                        		.build()
                    	).build());
            }
            return result;
        }


    }

    public static class BasicQueryTestModifier4 extends PojoMappingModifier {

        /*
            <DimensionUsage name="Other Store" source="Store" foreignKey="unit_sales" />
         */
        public BasicQueryTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(DimensionConnectorMappingImpl.builder()
                	.withOverrideDimensionName("Other Store")
                	.withDimension(FoodmartMappingSupplier.DIMENSION_STORE_WITH_QUERY_STORE)
                    .withForeignKey("unit_sales")
                    .build());
            }
            return result;
        }
    }

    public static class BasicQueryTestModifier5 extends PojoMappingModifier {

        /*
                        "<Dimension name=\"Gender3\" foreignKey=\"customer_id\">\n"
                + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Gender\"\n"
                + " allMemberCaption=\"Frauen und Maenner\" primaryKey=\"customer_id\">\n"
                + "  <Table name=\"customer\"/>\n"
                + "    <Level name=\"Gender\" column=\"gender\" uniqueMembers=\"true\"/>\n" + "  </Hierarchy>\n"
                + "</Dimension>" ));

         */
        public BasicQueryTestModifier5(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(DimensionConnectorMappingImpl.builder()
                	.withOverrideDimensionName("Gender3")
                    .withForeignKey("customer_id")
                    .withDimension(StandardDimensionMappingImpl.builder()
                    		.withName("Gender3")
                    		.withHierarchies(List.of(
                    			HierarchyMappingImpl.builder()
                    			.withHasAll(true)
                    			.withAllMemberName("All Gender")
                    			.withAllMemberCaption("Frauen und Maenner")
                    			.withPrimaryKey("customer_id")
                    			.withQuery(TableQueryMappingImpl.builder().withName("customer").build())
                    			.withLevels(List.of(
                    				LevelMappingImpl.builder()
                                    .withName("Gender")
                                    .withColumn("gender")
                                    .withUniqueMembers(true)
                                    .build()
                            ))
                            .build()
                    )).build())
                    .build());
            }
            return result;

        }
    }

    public static class BasicQueryTestModifier6 extends PojoMappingModifier {

        /*
            "<Dimension name=\"Position2608\" foreignKey=\"employee_id\">\n"
                + " <Hierarchy hasAll=\"true\" allMemberName=\"All Position\"\n"
                + "        primaryKey=\"employee_id\">\n" + "   <Table name=\"employee\"/>\n"
                + "   <Level name=\"Management Role\" uniqueMembers=\"true\"\n"
                + "          column=\"management_role\"/>\n"
                + "   <Level name=\"Position Title\" uniqueMembers=\"false\"\n"
                + "          column=\"position_title\" ordinalColumn=\"position_id\"/>\n" + " </Hierarchy>\n"
                + "</Dimension>" ));
         */
        public BasicQueryTestModifier6(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("HR".equals(cube.getName())) {
                result.add(DimensionConnectorMappingImpl.builder()
                	.withOverrideDimensionName("Position2608")
                    .withForeignKey("employee_id")
                    .withDimension(StandardDimensionMappingImpl.builder()
                    	.withName("Position2608")
                    	.withHierarchies(List.of(
                        HierarchyMappingImpl.builder()
                            .withHasAll(true)
                            .withAllMemberName("All Position")
                            .withAllMemberCaption("Frauen und Maenner")
                            .withPrimaryKey("employee_id")
                            .withQuery(TableQueryMappingImpl.builder().withName("employee").build())
                            .withLevels(List.of(
                                LevelMappingImpl.builder()
                                    .withName("Management Role")
                                    .withColumn("management_role")
                                    .withUniqueMembers(true)
                                    .build(),
                                LevelMappingImpl.builder()
                                    .withName("Position Title")
                                    .withUniqueMembers(false)
                                    .withColumn("position_title")
                                    .withOrdinalColumn("position_id")
                                    .build()
                            ))
                            .build()
                    ))
                    .build()).build());
            }
            return result;
        }
    }

    public static class BasicQueryTestModifier7 extends PojoMappingModifier {

        /*
            "<Measure name='zero' aggregator='sum'>\n"
            + " <MeasureExpression>\n" + " <SQL dialect='generic'>\n" + " NULL" + " </SQL>"
            + " <SQL dialect='vertica'>\n" + " NULL::FLOAT" + " </SQL>" + "</MeasureExpression></Measure>"
        */
        public BasicQueryTestModifier7(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends MeasureGroupMapping> physicalCubeMeasureGroups(PhysicalCubeMapping cube) {
            List<MeasureGroupMapping> result = new ArrayList<>();
            result.addAll(super.physicalCubeMeasureGroups(cube));
            MeasureGroupMappingImpl mg;
            if ("Sales".equals(cube.getName())) {
                result.add(mg = MeasureGroupMappingImpl.builder().withPhysicalCube(cube).build());
                mg.setMeasures(List.of(MeasureMappingImpl.builder()
                	.withName("zero")
                	.withAggregatorType(MeasureAggregatorType.SUM)
                	.withMeasureGroup(mg)
                	.withMeasureExpression(SQLExpressionMappingImpl.builder()
                        .withSqls(List.of(
                        	SQLMappingImpl.builder()
                                .withDialects(List.of("generic"))
                                .withStatement(" NULL ")
                                .build(),
                            SQLMappingImpl.builder()
                                .withDialects(List.of("vertica"))
                                .withStatement(" NULL::FLOAT ")
                                .build()
                        ))
                        .build()).build()));
            }
            return result;

        }
    }

    public static class BasicQueryTestModifier8 extends PojoMappingModifier {

        /*
            "<Dimension foreignKey=\"product_id\" type=\"StandardDimension\" visible=\"true\" highCardinality=\"false\" "
                + "name=\"Example\">\n"
                + "  <Hierarchy name=\"Example Hierarchy\" visible=\"true\" hasAll=\"true\" allMemberName=\"All\" "
                + "allMemberCaption=\"All\" primaryKey=\"product_id\" primaryKeyTable=\"product\">\n"
                + "    <Join leftKey=\"product_class_id\" rightKey=\"product_class_id\">\n"
                + "      <Table name=\"product\">\n" + "      </Table>\n" + "         <Table name=\"product_class\">\n"
                + "      </Table>\n" + "    </Join>\n"
                + "    <Level name=\"IsZero\" visible=\"true\" table=\"product\" column=\"product_id\" type=\"Integer\" "
                + "uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "      <NameExpression>\n" + "        <SQL dialect=\"generic\">\n" + "          <![CDATA[case when "
                + dialect.quoteIdentifier( "product", "product_id" ) + "=0 then 'Zero' else 'Non-Zero' end]]>\n"
                + "        </SQL>\n" + "      </NameExpression>\n" + "    </Level>\n"
                + "    <Level name=\"SubCat\" visible=\"true\" table=\"product_class\" column=\"product_class_id\" "
                + "type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "      <NameExpression>\n" + "        <SQL dialect=\"generic\">\n" + "          <![CDATA[" + dialect
                    .quoteIdentifier( "product_class", "product_subcategory" ) + "]]>\n" + "        </SQL>\n"
                + "      </NameExpression>\n" + "    </Level>\n"
                + "    <Level name=\"ProductName\" visible=\"true\" table=\"product\" column=\"product_id\" "
                + "type=\"Integer\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "      <NameExpression>\n" + "        <SQL dialect=\"generic\">\n" + "          <![CDATA[" + dialect
                    .quoteIdentifier( "product", "product_name" ) + "]]>\n" + "        </SQL>\n"
                + "      </NameExpression>\n" + "    </Level>\n" + "  </Hierarchy>\n" + "</Dimension>\n", null, null,
         */
        private Dialect dialect;
        public BasicQueryTestModifier8(CatalogMapping catalog, Dialect dialect) {
            super(catalog);
            this.dialect = dialect;
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(DimensionConnectorMappingImpl.builder()
                        .withForeignKey("product_id")
                        .withOverrideDimensionName("Example")
                        .withDimension(StandardDimensionMappingImpl.builder()
                        .withVisible(true)
                        .withName("Example")
                        .withHierarchies(List.of(
                            HierarchyMappingImpl.builder()
                                .withHasAll(true)
                                .withName("Example Hierarchy")
                                .withVisible(true)
                                .withHasAll(true)
                                .withAllMemberName("All")
                                .withAllMemberCaption("All")
                                .withPrimaryKey("product_id")
                                .withPrimaryKeyTable("product")
                                .withQuery(JoinQueryMappingImpl.builder()
                                		.withLeft(JoinedQueryElementMappingImpl.builder()
                                			.withKey("product_class_id")
                                			.withQuery(TableQueryMappingImpl.builder().withName("product").build())
                                			.build()
                                		)
                                		.withRight(JoinedQueryElementMappingImpl.builder()
                                    			.withKey("product_class_id")
                                    			.withQuery(TableQueryMappingImpl.builder().withName("product_class").build())
                                    			.build()
                                    	)
                                		.build()
                                )
                                .withLevels(List.of(
                                    LevelMappingImpl.builder()
                                        .withName("IsZero")
                                        .withVisible(true)
                                        .withTable("product")
                                        .withColumn("product_id")
                                        .withType(DataType.INTEGER)
                                        .withUniqueMembers(false)
                                        .withLevelType(LevelType.REGULAR)
                                        .withHideMemberIfType(HideMemberIfType.NEVER)
                                        .withNameExpression(SQLExpressionMappingImpl.builder()
                                        	.withSqls(List.of(SQLMappingImpl.builder()
                                                    .withDialects(List.of("generic"))
                                                    .withStatement("case when " + dialect.quoteIdentifier( "product", "product_id" ) + "=0 then 'Zero' else 'Non-Zero' end")
                                                    .build()
                                            ))
                                            .build())
                                        .build(),
                                    LevelMappingImpl.builder()
                                        .withName("SubCat")
                                        .withVisible(true)
                                        .withTable("product_class")
                                        .withColumn("product_class_id")
                                        .withType(DataType.STRING)
                                        .withUniqueMembers(false)
                                        .withLevelType(LevelType.REGULAR)
                                        .withHideMemberIfType(HideMemberIfType.NEVER)
                                        .withNameExpression(SQLExpressionMappingImpl.builder()
                                        		.withSqls(List.of(
                                        			SQLMappingImpl.builder()
                                                    .withDialects(List.of("generic"))
                                                    .withStatement(dialect.quoteIdentifier( "product_class", "product_subcategory" ))
                                                    .build()
                                            )).build())
                                        .build(),
                                    LevelMappingImpl.builder()
                                        .withName("ProductName")
                                        .withVisible(true)
                                        .withTable("product")
                                        .withColumn("product_id")
                                        .withType(DataType.INTEGER)
                                        .withUniqueMembers(false)
                                        .withLevelType(LevelType.REGULAR)
                                        .withHideMemberIfType(HideMemberIfType.NEVER)
                                        .withNameExpression(SQLExpressionMappingImpl.builder()
                                        	.withSqls(List.of(
                                        		SQLMappingImpl.builder()
                                                    .withDialects(List.of("generic"))
                                                    .withStatement(dialect.quoteIdentifier( "product", "product_name" ))
                                                    .build()
                                            )).build())
                                        .build()
                                    ))
                                .build()
                        )).build()).build());
                }
                return result;
            }


    }

    public static class BasicQueryTestModifier9 extends PojoMappingModifier {

        /*
            "<CalculatedMember dimension=\"Gender\" visible=\"true\" name=\"last\">"
                + "<Formula>([Gender].LastChild)</Formula>" + "</CalculatedMember>" ));
        */
        public BasicQueryTestModifier9(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(CalculatedMemberMappingImpl.builder()
                	//.dimension("Gender")
                	.withHierarchy(FoodmartMappingSupplier.genderHierarchy)
                    .withVisible(true)
                    .withName("last")
                    .withFormula("([Gender].LastChild)")
                    .build());
            }
            return result;
        }
    }

    public static class BasicQueryTestModifier10 extends PojoMappingModifier {

        /*
            "<Dimension name=\"Gender4\" foreignKey=\"customer_id\">\n"
                + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Gender\"\n"
                + " allLevelName=\"GenderLevel\" primaryKey=\"customer_id\">\n" + "  <Table name=\"customer\"/>\n"
                + "    <Level name=\"Gender\" column=\"gender\" uniqueMembers=\"true\"/>\n" + "  </Hierarchy>\n"
                + "</Dimension>" ));
         */
        public BasicQueryTestModifier10(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Gender4")
                		.withForeignKey("customer_id")
                		.withDimension(StandardDimensionMappingImpl.builder()
                			.withName("Gender4")
                            .withHierarchies(List.of(
                            	HierarchyMappingImpl.builder()
                                        .withHasAll(true)
                                        .withAllMemberName("All Gender")
                                        .withAllLevelName("GenderLevel")
                                        .withPrimaryKey("customer_id")
                                        .withQuery(TableQueryMappingImpl.builder().withName("customer").build())
                                        .withLevels(List.of(
                                            LevelMappingImpl.builder()
                                                .withName("Gender")
                                                .withColumn("gender")
                                                .withUniqueMembers(true)
                                                .build()
                                        ))
                                        .build()
                                ))
                			.build())
                		.build());
            }
            return result;
        }
    }

    public static class BasicQueryTestModifier11 extends PojoMappingModifier {

        /*
            "  <Dimension name=\"Customer_2\" foreignKey=\"customer_id\">\n" + "    <Hierarchy hasAll=\"true\" "
                + "allMemberName=\"All Customers\" " + "primaryKey=\"customer_id\" " + " >\n"
                + "      <Table name=\"customer\"/>\n"
                + "      <Level name=\"Name1\" column=\"customer_id\" uniqueMembers=\"true\"/>"
                + "      <Level name=\"Name2\" column=\"customer_id\" uniqueMembers=\"true\"/>\n"
                + "    </Hierarchy>\n" + "  </Dimension>" ));
         */
        public BasicQueryTestModifier11(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Customer_2")
                		.withForeignKey("customer_id")
                		.withDimension(StandardDimensionMappingImpl.builder()
                			.withName("Customer_2")
                            .withHierarchies(List.of(
                            	HierarchyMappingImpl.builder()
                                        .withHasAll(true)
                                        .withAllMemberName("All Customers")
                                        .withPrimaryKey("customer_id")
                                        .withQuery(TableQueryMappingImpl.builder().withName("customer").build())
                                        .withLevels(List.of(
                                            LevelMappingImpl.builder()
                                                .withName("Name1")
                                                .withColumn("customer_id")
                                                .withUniqueMembers(true)
                                                .build(),
                                            LevelMappingImpl.builder()
                                                .withName("Name2")
                                                .withColumn("customer_id")
                                                .withUniqueMembers(true)
                                                .build()
                                        ))
                                        .build()
                                ))
                			.build())
                		.build());
            }
            return result;
        }
    }

    public static class BasicQueryTestModifier12 extends PojoMappingModifier {

        /*
            "<Measure name='zero' aggregator='sum'>\n"
            + "  <MeasureExpression>\n" + "  <SQL dialect='generic'>\n" + "    0"
            + "  </SQL></MeasureExpression></Measure>", null, null ));        */
        public BasicQueryTestModifier12(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends MeasureGroupMapping> physicalCubeMeasureGroups(PhysicalCubeMapping cube) {
            List<MeasureGroupMapping> result = new ArrayList<>();
            result.addAll(super.physicalCubeMeasureGroups(cube));
            if ("Sales".equals(cube.getName())) {

                result.add(MeasureGroupMappingImpl.builder()
                	.withMeasures(List.of(
                		MeasureMappingImpl.builder()
                        .withName("zero")
                        .withAggregatorType(MeasureAggregatorType.SUM)
                        .withMeasureExpression(SQLExpressionMappingImpl.builder()
                        	.withSqls(List.of(
                        		SQLMappingImpl.builder()
                                    .withDialects(List.of("generic"))
                                    .withStatement("0")
                                    .build()
                            ))
                        	.build())
                        .build()))
                	.build());
            }
            return result;
        }
    }

    public static class BasicQueryTestModifier14 extends PojoMappingModifier {

        /*
        "" + "<?xml version=\"1.0\"?>\n" + "<Schema name=\"FoodMart 2442\">\n"
            + "<Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">\n" + "  <Table name=\"sales_fact_1997\">\n"
            + "    <AggName name=\"agg_c_special_sales_fact_1997\">\n"
            + "        <AggFactCount column=\"FACT_COUNT\"/>\n" + "        <AggIgnoreColumn column=\"foo\"/>\n"
            + "        <AggIgnoreColumn column=\"bar\"/>\n"
            + "        <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"UNIT_SALES_SUM\" />\n"
            + "        <AggLevel name=\"[Time].[Year]\" column=\"TIME_YEAR\" />\n"
            + "        <AggLevel name=\"[Time].[Quarter]\" column=\"TIME_QUARTER\" />\n" + "    </AggName>\n"
            + "  </Table>\n"

            + " <Dimension name=\"Time\"" + " type=\"TimeDimension\" foreignKey=\"time_id\">\n"
            + "   <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n" + "      <Table name=\"time_by_day\"/>\n"
            + "      <Level name=\"Year\" \n"

            // column and nameColumn are the same
            + "         column=\"the_year\" nameColumn=\"the_year\" ordinalColumn=\"the_year\"\n"
            + "         type=\"Numeric\" uniqueMembers=\"true\" levelType=\"TimeYears\"/>\n"
            + "      <Level name=\"Quarter\" \n" + "         column=\"quarter\" ordinalColumn=\"quarter\"\n"
            + "         uniqueMembers=\"false\" levelType=\"TimeQuarters\"/>\n" + "    </Hierarchy>\n"
            + "  </Dimension>\n"

            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n" + "</Cube>\n" + "</Schema>";
            */

    	private static final MeasureMappingImpl m = MeasureMappingImpl.builder()
    	        .withName("Unit Sales")
    	        .withColumn("unit_sales")
    	        .withAggregatorType(MeasureAggregatorType.SUM)
    	        .withFormatString("Standard")
    	        .build();

        public BasicQueryTestModifier14(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<SchemaMapping> catalogSchemas(CatalogMapping catalog2) {
            return List.of(SchemaMappingImpl.builder()
            		.withName("FoodMart 2442")
                    .withCubes(List.of(
                            PhysicalCubeMappingImpl.builder()
                                .withName("Sales")
                                .withDefaultMeasure(m)
                                .withQuery(TableQueryMappingImpl.builder()
                                		.withName("sales_fact_1997")
                                		.withAggregationTables(List.of(
                                				AggregationNameMappingImpl.builder()
                                				.withName("agg_c_special_sales_fact_1997")
                                                .withAggregationFactCount(AggregationColumnNameMappingImpl.builder()
                                                        .withColumn("FACT_COUNT")
                                                        .build())
                                                    .withAggregationIgnoreColumns(List.of(
                                                    	AggregationColumnNameMappingImpl.builder()
                                                            .withColumn("foo")
                                                            .build(),
                                                        AggregationColumnNameMappingImpl.builder()
                                                            .withColumn("bar")
                                                            .build()
                                                    ))
                                                    .withAggregationMeasures(List.of(
                                                    	AggregationMeasureMappingImpl.builder()
                                                            .withName("[Measures].[Unit Sales]")
                                                            .withColumn("UNIT_SALES_SUM")
                                                            .build()
                                                    ))
                                                    .withAggregationLevels(List.of(
                                                        AggregationLevelMappingImpl.builder()
                                                            .withName("[Time].[Year]")
                                                            .withColumn("TIME_YEAR")
                                                            .build(),
                                                        AggregationLevelMappingImpl.builder()
                                                            .withName("[Time].[Quarter]")
                                                            .withColumn("TIME_QUARTER")
                                                            .build()
                                                    ))
                                                    .build()
                                		))
                                		.build())
                                .withDimensionConnectors(List.of(
                                    DimensionConnectorMappingImpl.builder()
                                    	.withOverrideDimensionName("Time")
                                        .withForeignKey("time_id")
                                        .withDimension(TimeDimensionMappingImpl.builder()
                                        		.withName("Time")
                                                .withHierarchies(List.of(
                                                        HierarchyMappingImpl.builder()
                                                            .withHasAll(false)
                                                            .withPrimaryKey("time_id")
                                                            .withQuery(TableQueryMappingImpl.builder().withName("time_by_day").build())
                                                            .withLevels(List.of(
                                                                LevelMappingImpl.builder()
                                                                    .withName("Year")
                                                                    .withColumn("the_year")
                                                                    .withNameColumn("the_year")
                                                                    .withOrdinalColumn("the_year")
                                                                    .withType(DataType.NUMERIC)
                                                                    .withUniqueMembers(true)
                                                                    .withLevelType(LevelType.TIME_YEARS)
                                                                    .build(),
                                                                LevelMappingImpl.builder()
                                                                    .withName("Quarter")
                                                                    .withColumn("quarter")
                                                                    .withOrdinalColumn("quarter")
                                                                    .withUniqueMembers(false)
                                                                    .withLevelType(LevelType.TIME_QUARTERS)
                                                                    .build()
                                                            ))
                                                            .build()
                                                    ))
                                        		.build())
                                        .build()
                                ))
                                .withMeasureGroups(List.of(
                                		MeasureGroupMappingImpl.builder()
                                		.withMeasures(List.of(m))
                                		.build()
                                ))
                                .build()
                        ))
            		.build());
        }

    }

    public static class BasicQueryTestModifier15 extends PojoMappingModifier {

        /*
        "" + "<?xml version=\"1.0\"?>\n" + "<Schema name=\"FoodMart 2285\">\n"
            + "<Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">\n" + "  <Table name=\"sales_fact_1997\">\n"
            + "     <AggExclude name=\"agg_c_special_sales_fact_1997\" />" + "  </Table>\n"
            + "  <Dimension name=\"Product\" foreignKey=\"product_id\">\n"
            + "     <Hierarchy hasAll=\"true\" primaryKey=\"product_id\" primaryKeyTable=\"product\">\n"
            + "         <Join leftKey=\"product_class_id\" rightKey=\"product_class_id\">\n"
            + "             <Table name=\"product\"/>\n" + "             <Table name=\"product_class\"/>\n"
            + "         </Join>\t  \n"
            + "         <Level name=\"Product Subcategory\" table=\"product_class\" column=\"product_class_id\"\n"
            + "             uniqueMembers=\"false\"/>\n" + "     </Hierarchy>\n" + "  </Dimension>\n"
            + "  <Dimension name=\"Time\" type=\"TimeDimension\" foreignKey=\"time_id\">\n"
            + "     <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n" + "         <Table name=\"time_by_day\"/>\n"
            + "         <Level name=\"Month Upper\" column=\"month_of_year\" nameColumn=\"the_month\" "
            + "             uniqueMembers=\"false\" type=\"Numeric\" levelType=\"TimeMonths\"/>"
            + "         <Level name=\"Month\" column=\"month_of_year\" nameColumn=\"the_month\" "
            + "             uniqueMembers=\"false\" type=\"Numeric\" levelType=\"TimeMonths\"/>\n"
            + "    </Hierarchy>\n" + "  </Dimension>\n"
            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\" "
            + "     formatString=\"Standard\"/>\n" + "</Cube>\n" + "</Schema>";
            */

    	private static final MeasureMappingImpl m = MeasureMappingImpl.builder()
    	        .withName("Unit Sales")
    	        .withColumn("unit_sales")
    	        .withAggregatorType(MeasureAggregatorType.SUM)
    	        .withFormatString("Standard")
    	        .build();

        public BasicQueryTestModifier15(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<SchemaMapping> catalogSchemas(CatalogMapping catalog2) {
            return List.of(SchemaMappingImpl.builder()
            		.withName("FoodMart 2285")
                    .withCubes(List.of(
                            PhysicalCubeMappingImpl.builder()
                                .withName("Sales")
                                .withDefaultMeasure(m)
                                .withQuery(TableQueryMappingImpl.builder()
                                		.withName("sales_fact_1997")
                                		.withAggregationTables(List.of(
                                				AggregationNameMappingImpl.builder()
                                				.withName("agg_c_special_sales_fact_1997")
                                                .build()
                                		))
                                		.build())
                                .withDimensionConnectors(List.of(
                                	DimensionConnectorMappingImpl.builder()
                                    	.withOverrideDimensionName("Product")
                                        .withForeignKey("product_id")
                                        .withDimension(TimeDimensionMappingImpl.builder()
                                        		.withName("Product")
                                                .withHierarchies(List.of(
                                                        HierarchyMappingImpl.builder()
                                                            .withHasAll(true)
                                                            .withPrimaryKey("product_id")
                                                            .withPrimaryKeyTable("product")
                                                            .withQuery(JoinQueryMappingImpl.builder()
                                        							.withLeft(JoinedQueryElementMappingImpl.builder()
                                                                			.withKey("product_class_id")
                                                                			.withQuery(TableQueryMappingImpl.builder().withName("product").build())
                                                                			.build())
                                        							.withRight(JoinedQueryElementMappingImpl.builder()
                                                                			.withKey("product_class_id")
                                                                			.withQuery(TableQueryMappingImpl.builder().withName("product_class").build())
                                                                			.build())
                                        							.build()
                                        					)
                                                            .withLevels(List.of(
                                                                LevelMappingImpl.builder()
                                                                    .withName("Product Subcategory")
                                                                    .withTable("product_class")
                                                                    .withColumn("product_class_id")
                                                                    .withUniqueMembers(false)
                                                                    .build()
                                                            ))
                                                            .build()
                                                    ))
                                        		.build())
                                        .build(),
                                    DimensionConnectorMappingImpl.builder()
                                    	.withOverrideDimensionName("Time")
                                        .withForeignKey("time_id")
                                        .withDimension(TimeDimensionMappingImpl.builder()
                                        		.withName("Time")
                                                .withHierarchies(List.of(
                                                        HierarchyMappingImpl.builder()
                                                            .withHasAll(false)
                                                            .withPrimaryKey("time_id")
                                                            .withQuery(TableQueryMappingImpl.builder().withName("time_by_day").build())
                                                            .withLevels(List.of(
                                                                LevelMappingImpl.builder()
                                                                    .withName("Month Upper")
                                                                    .withColumn("month_of_year")
                                                                    .withNameColumn("the_month")
                                                                    .withUniqueMembers(false)
                                                                    .withType(DataType.NUMERIC)
                                                                    .withLevelType(LevelType.TIME_MONTHS)
                                                                    .build(),
                                                                LevelMappingImpl.builder()
                                                                    .withName("Month")
                                                                    .withColumn("month_of_year")
                                                                    .withNameColumn("the_month")
                                                                    .withUniqueMembers(false)
                                                                    .withType(DataType.NUMERIC)
                                                                    .withLevelType(LevelType.TIME_MONTHS)
                                                                    .build()
                                                            ))
                                                            .build()
                                                    ))
                                        		.build())
                                        .build()
                                ))
                                .withMeasureGroups(List.of(
                                		MeasureGroupMappingImpl.builder()
                                		.withMeasures(List.of(m))
                                		.build()
                                ))
                                .build()
                        ))
            		.build());
        }

    }

    public static class BasicQueryTestModifier16 extends PojoMappingModifier {

        /*
        "" + "<?xml version=\"1.0\"?>\n" + "<Schema name=\"tiny\">\n"
            + "  <Dimension name=\"Time\" type=\"TimeDimension\">\n"
            + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n" + "      <Table name=\"time_by_day\" />\n"
            + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\" "
            + "levelType=\"TimeYears\" />\n"
            + "      <Level name=\"Quarter\" uniqueMembers=\"false\" levelType=\"TimeQuarters\" >\n"
            + "        <KeyExpression><SQL>RTRIM(quarter)</SQL></KeyExpression>\n" + "      </Level>\n"
            + "    </Hierarchy>\n" + "  </Dimension>\n" + "

            <Dimension name=\"Product\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"product_id\" primaryKeyTable=\"product\">\n"
            + "      <Join leftKey=\"product_class_id\" rightKey=\"product_class_id\">\n"
            + "        <Table name=\"product\"/>\n" + "        <Table name=\"product_class\"/>\n" + "      </Join>\n"
            + "      <Level name=\"Product Family\" table=\"product_class\" column=\"product_family\" "
            + "uniqueMembers=\"true\" />\n" + "    </Hierarchy>\n" + "  </Dimension>\n"

            + "  <Dimension name=\"Warehouse\">\n" + "    <Hierarchy hasAll=\"true\" primaryKey=\"warehouse_id\">\n"
            + "      <Table name=\"warehouse\"/>\n"
            + "      <Level name=\"Country\" column=\"warehouse_country\" uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"State Province\" column=\"warehouse_state_province\"\n"
            + "          uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"City\" column=\"warehouse_city\" uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Warehouse Name\" column=\"warehouse_name\" uniqueMembers=\"true\"/>\n"
            + "    </Hierarchy>\n" + "  </Dimension>\n" + "


            <Cube name=\"Sales\">\n"
            + "    <Table name=\"sales_fact_1997\" />\n"
            + "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\" />\n"
            + "    <DimensionUsage name=\"Product\" source=\"Product\" foreignKey=\"product_id\" />\n"
            + "    <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\" formatString=\"Standard\" />\n"
            + "  </Cube>\n" + "
            <Cube name=\"Warehouse\">\n" + "    <Table name=\"inventory_fact_1997\" />\n"
            + "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\" />\n"
            + "    <DimensionUsage name=\"Product\" source=\"Product\" foreignKey=\"product_id\" />\n"
            + "    <DimensionUsage name=\"Warehouse\" source=\"Warehouse\" foreignKey=\"warehouse_id\"/>\n"
            + "    <Measure name=\"Warehouse Sales\" column=\"warehouse_sales\" aggregator=\"sum\" "
            + "formatString=\"Standard\" />\n"
            + "    <CalculatedMember name=\"Warehouse Sales Calc\" dimension=\"Measures\">\n"
            + "      <Formula>[Measures].[Warehouse Sales]</Formula>\n" + "    </CalculatedMember>\n" + "  </Cube>\n"

            + "  <VirtualCube name=\"Warehouse and Sales\">\n" + "    <VirtualCubeDimension name=\"Time\" />\n"
            + "    <VirtualCubeDimension name=\"Product\" />\n"
            + "    <VirtualCubeDimension cubeName=\"Warehouse\" name=\"Warehouse\"/>\n"
            + "    <VirtualCubeMeasure cubeName=\"Sales\" name=\"[Measures].[Unit Sales]\" />\n"
            + "    <VirtualCubeMeasure cubeName=\"Warehouse\" name=\"[Measures].[Warehouse Sales Calc]\" />\n"
            + "  </VirtualCube>\n" + "</Schema>\n";

            */

    	private static final HierarchyMappingImpl timeHierarchy = HierarchyMappingImpl.builder()
		.withHasAll(false)
		.withPrimaryKey("time_id")
		.withQuery(TableQueryMappingImpl.builder().withName("time_by_day").build())
		.withLevels(List.of(
			LevelMappingImpl.builder()
				.withName("Year").withColumn("the_year").withType(DataType.NUMERIC).withUniqueMembers(true).withLevelType(LevelType.TIME_YEARS)
				.build(),
			LevelMappingImpl.builder()
				.withName("Quarter").withUniqueMembers(false).withLevelType(LevelType.TIME_QUARTERS)
				.withKeyExpression(SQLExpressionMappingImpl.builder()
						.withSqls(List.of(
                            SQLMappingImpl.builder()
                            	.withDialects(List.of("generic"))
                                .withStatement("RTRIM(quarter)")
                                .build()
						))
						.build())
				.build()
		))
		.build();


    	private static final TimeDimensionMappingImpl timeDimension = TimeDimensionMappingImpl.builder()
    			.withName("Time")
    			.withHierarchies(List.of(timeHierarchy)).build();

    	private static final HierarchyMappingImpl productHierarchy = HierarchyMappingImpl.builder()
		.withHasAll(true)
		.withPrimaryKey("product_id")
		.withPrimaryKeyTable("product")
		.withQuery(JoinQueryMappingImpl.builder()
				.withLeft(JoinedQueryElementMappingImpl.builder()
            			.withKey("product_class_id")
            			.withQuery(TableQueryMappingImpl.builder().withName("product").build())
            			.build())
				.withRight(JoinedQueryElementMappingImpl.builder()
            			.withKey("product_class_id")
            			.withQuery(TableQueryMappingImpl.builder().withName("product_class").build())
            			.build())
				.build())
		.withLevels(List.of(
            LevelMappingImpl.builder()
                .withName("Product Family")
                .withTable("product_class")
                .withColumn("product_family")
                .withUniqueMembers(true)
                .build()
		))
		.build();

    	private static final TimeDimensionMappingImpl productDimension = TimeDimensionMappingImpl.builder()
    			.withName("Product")
    			.withHierarchies(List.of(productHierarchy)).build();

    	private static final HierarchyMappingImpl warehouseHierarchy = HierarchyMappingImpl.builder()
		.withHasAll(true)
		.withPrimaryKey("warehouse_id")
		.withQuery(TableQueryMappingImpl.builder().withName("warehouse").build())
		.withLevels(List.of(
            LevelMappingImpl.builder()
                .withName("Country")
                .withColumn("warehouse_country")
                .withUniqueMembers(true)
                .build(),
            LevelMappingImpl.builder()
                .withName("State Province")
                .withColumn("warehouse_state_province")
                .withUniqueMembers(true)
                .build(),
            LevelMappingImpl.builder()
                .withName("City")
                .withColumn("warehouse_city")
                .withUniqueMembers(false)
                .build(),
            LevelMappingImpl.builder()
                .withName("Warehouse Name")
                .withColumn("warehouse_name")
                .withUniqueMembers(true)
                .build()

		))
		.build();

    	private static final TimeDimensionMappingImpl warehouseDimension = TimeDimensionMappingImpl.builder()
    			.withName("Warehouse")
    			.withHierarchies(List.of(warehouseHierarchy)).build();

        public BasicQueryTestModifier16(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<SchemaMapping> catalogSchemas(CatalogMapping catalog2) {
        	PhysicalCubeMappingImpl warehouseCube;
        	MeasureMappingImpl mUnitSales;
        	CalculatedMemberMappingImpl mWarehouseSalesCalc;
            return List.of(SchemaMappingImpl.builder()
            		.withName("tiny")
                    .withCubes(List.of(
                        PhysicalCubeMappingImpl.builder()
                            .withName("Sales")
                            .withQuery(TableQueryMappingImpl.builder().withName("sales_fact_1997").build())
                            .withDimensionConnectors(List.of(
                            	DimensionConnectorMappingImpl.builder()
                            	.withOverrideDimensionName("Time")
                            	.withDimension(timeDimension)
                            	.withForeignKey("time_id")
                            	.build(),
                            	DimensionConnectorMappingImpl.builder()
                            	.withOverrideDimensionName("Product")
                            	.withDimension(productDimension)
                            	.withForeignKey("product_id")
                            	.build()
                            ))
                            .withMeasureGroups(List.of(
                            	MeasureGroupMappingImpl.builder()
                            	.withMeasures(List.of(
                            			mUnitSales = MeasureMappingImpl.builder()
                                        .withName("Unit Sales")
                                        .withColumn("unit_sales")
                                        .withAggregatorType(MeasureAggregatorType.SUM)
                                        .withFormatString("Standard")
                                        .build()
                            	))
                            	.build()
                            ))
                            .build(),
                        warehouseCube = PhysicalCubeMappingImpl.builder()
                            .withName("Warehouse")
                            .withQuery(TableQueryMappingImpl.builder().withName("inventory_fact_1997").build())
                            .withDimensionConnectors(List.of(
                                	DimensionConnectorMappingImpl.builder()
                                	.withOverrideDimensionName("Time")
                                	.withDimension(timeDimension)
                                	.withForeignKey("time_id")
                                	.build(),
                                	DimensionConnectorMappingImpl.builder()
                                	.withOverrideDimensionName("Product")
                                	.withDimension(productDimension)
                                	.withForeignKey("product_id")
                                	.build(),
                                	DimensionConnectorMappingImpl.builder()
                                	.withOverrideDimensionName("Warehouse")
                                	.withDimension(warehouseDimension)
                                	.withForeignKey("warehouse_id")
                                	.build()
                             ))
                            .withMeasureGroups(List.of(
                            	MeasureGroupMappingImpl.builder()
                            	.withMeasures(List.of(
                                    MeasureMappingImpl.builder()
                                        .withName("Warehouse Sales")
                                        .withColumn("warehouse_sales")
                                        .withAggregatorType(MeasureAggregatorType.SUM)
                                        .withFormatString("Standard")
                                        .build()
                            	))
                            	.build()
                            ))
                            .withCalculatedMembers(List.of(
                            	mWarehouseSalesCalc = CalculatedMemberMappingImpl.builder()
                                    .withName("Warehouse Sales Calc")
                                    //.dimension("Measures")
                                    .withFormula("[Measures].[Warehouse Sales]")
                                    .build()
                            ))
                            .build(),
                        VirtualCubeMappingImpl.builder()
                            .withName("Warehouse and Sales")
                            .withDimensionConnectors(List.of(
                            	DimensionConnectorMappingImpl.builder()
                            	.withOverrideDimensionName("Time")
                            	.withDimension(timeDimension)
                            	.build(),
                            	DimensionConnectorMappingImpl.builder()
                            	.withOverrideDimensionName("Product")
                            	.withDimension(productDimension)
                            	.build(),
                            	DimensionConnectorMappingImpl.builder()
                            	.withOverrideDimensionName("Warehouse")
                            	.withPhysicalCube(warehouseCube)
                            	.withDimension(warehouseDimension)
                            	.build()
                            ))
                            .withReferencedMeasures(List.of(
                            	mUnitSales
                            ))
                            .withReferencedCalculatedMembers(List.of(
                            	mWarehouseSalesCalc
                            ))
                            .build()
                    ))
                    .build());
        }


    }

    public static class BasicQueryTestModifier17 extends PojoMappingModifier {

        /*
        "" + "<?xml version=\"1.0\"?>\n" + "<Schema name=\"FoodMart 2399 Rollup Type\">\n"
            + "<Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">\n" + "  <Table name=\"sales_fact_1997\">\n"
            + "<AggExclude name=\"agg_c_14_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_g_ms_pcat_sales_fact_1997\" />\n"
            + "    <AggExclude name=\"agg_l_03_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_l_04_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_l_05_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_lc_06_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_lc_100_sales_fact_1997\" />\n"
            + "    <AggExclude name=\"agg_ll_01_sales_fact_1997\" />\n"
            + "    <AggExclude name=\"agg_pl_01_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_c_special_sales_fact_1997\" />\n"
            + "    <AggName name=\"agg_c_10_sales_fact_1997\">\n" + "        <AggFactCount column=\"FACT_COUNT\"/>\n"
            + "        <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"UNIT_SALES\" rollupType=\"AvgFromSum\" />\n"
            + "        <AggLevel name=\"[Time].[Year]\" column=\"THE_YEAR\" />\n"
            + "        <AggLevel name=\"[Time].[Quarter]\" column=\"QUARTER\" />\n" + "    </AggName>\n"
            + "  </Table>\n" + "  <Dimension name=\"Time\" type=\"TimeDimension\" foreignKey=\"time_id\">\n"
            + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n" + "      <Table name=\"time_by_day\"/>\n"
            + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
            + "          levelType=\"TimeYears\"/>\n"
            + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
            + "          levelType=\"TimeQuarters\"/>\n" + "    </Hierarchy>\n" + "  </Dimension>\n"
            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"avg\" />\n" + "</Cube>\n"
            + "</Schema>";
            */

    	private static final MeasureMappingImpl m = MeasureMappingImpl.builder()
    	        .withName("Unit Sales")
    	        .withColumn("unit_sales")
    	        .withAggregatorType(MeasureAggregatorType.SUM)
    	        .withFormatString("Standard")
    	        .build();

        public BasicQueryTestModifier17(CatalogMapping catalog) {
            super(catalog);
        }

    	private static final TableQueryMappingImpl t = TableQueryMappingImpl.builder()
    			.withName("sales_fact_1997")
    			.withAggregationExcludes(
    				List.of(
                		AggregationExcludeMappingImpl.builder().withName("agg_c_14_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_g_ms_pcat_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_l_03_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_l_04_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_l_05_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_lc_06_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_lc_100_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_ll_01_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_pl_01_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_c_special_sales_fact_1997").build()
                    )
    			)
    			.withAggregationTables(List.of(
    				AggregationNameMappingImpl.builder()
                        .withName("agg_c_10_sales_fact_1997")
                        .withAggregationFactCount(AggregationColumnNameMappingImpl.builder().withColumn("FACT_COUNT").build())
                        .withAggregationMeasures(List.of(
                        		AggregationMeasureMappingImpl.builder()
                                .withName("[Measures].[Unit Sales]")
                                .withColumn("UNIT_SALES")
                                .withRollupType("AvgFromSum")
                                .build()
                        ))
                        .withAggregationLevels(List.of(
                        		AggregationLevelMappingImpl.builder()
                                .withName("[Time].[Year]")
                                .withColumn("THE_YEAR")
                                .build(),
                        		AggregationLevelMappingImpl.builder()
                                .withName("[Time].[Quarter]")
                                .withColumn("QUARTER")
                                .build()
                        		))
                        .build())
    			)
    			.build();


        protected List<SchemaMapping> catalogSchemas(CatalogMapping catalog2) {
            return List.of(SchemaMappingImpl.builder()
            		.withName("FoodMart 2399 Rollup Type")
                    .withCubes(List.of(
                        PhysicalCubeMappingImpl.builder()
                            .withName("Sales")
                            .withDefaultMeasure(m)
                            .withQuery(t)
                            .withDimensionConnectors(List.of(
                            	DimensionConnectorMappingImpl.builder()
                            	.withOverrideDimensionName("Time")
                            	.withForeignKey("time_id")
                            	.withDimension(
                            			TimeDimensionMappingImpl.builder()
                                        .withName("Time")
                                        .withHierarchies(List.of(
                                            HierarchyMappingImpl.builder()
                                                .withHasAll(false)
                                                .withPrimaryKey("time_id")
                                                .withQuery(TableQueryMappingImpl.builder().withName("time_by_day").build())
                                                .withLevels(List.of(
                                                    LevelMappingImpl.builder()
                                                        .withName("Year")
                                                        .withColumn("the_year")
                                                        .withType(DataType.NUMERIC)
                                                        .withUniqueMembers(true)
                                                        .withLevelType(LevelType.TIME_YEARS)
                                                        .build(),
                                                    LevelMappingImpl.builder()
                                                        .withName("Quarter")
                                                        .withColumn("quarter")
                                                        .withUniqueMembers(false)
                                                        .withLevelType(LevelType.TIME_QUARTERS)
                                                        .build()
                                                ))
                                                .build()
                                        ))
                                        .build()
                            	)
                            	.build()
                            ))
                            .withMeasureGroups(List.of(
                            	MeasureGroupMappingImpl.builder()
                            	.withMeasures(List.of(
                                    MeasureMappingImpl.builder()
                                        .withName("Unit Sales")
                                        .withColumn("unit_sales")
                                        .withAggregatorType(MeasureAggregatorType.SUM)
                                        .build()
                                ))
                            	.build()
                            ))
                            .build()))
                    .build()
                    );
        }
    }

    public static class BasicQueryTestModifier18 extends PojoMappingModifier {

        /*
        "" + "<?xml version=\"1.0\"?>\n" + "<Schema name=\"FoodMart 2399 Rollup Type\">\n"
            + "<Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">\n" + "  <Table name=\"sales_fact_1997\">\n"
            + "<AggExclude name=\"agg_c_14_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_g_ms_pcat_sales_fact_1997\" />\n"
            + "    <AggExclude name=\"agg_l_03_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_l_04_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_l_05_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_lc_06_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_lc_100_sales_fact_1997\" />\n"
            + "    <AggExclude name=\"agg_ll_01_sales_fact_1997\" />\n"
            + "    <AggExclude name=\"agg_pl_01_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_c_special_sales_fact_1997\" />\n"
            + "    <AggName name=\"agg_c_10_sales_fact_1997\">\n" + "        <AggFactCount column=\"FACT_COUNT\"/>\n"
            + "        <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"UNIT_SALES\" rollupType=\"SumFromAvg\" />\n"
            + "        <AggLevel name=\"[Time].[Year]\" column=\"THE_YEAR\" />\n"
            + "        <AggLevel name=\"[Time].[Quarter]\" column=\"QUARTER\" />\n" + "    </AggName>\n"
            + "  </Table>\n" + "  <Dimension name=\"Time\" type=\"TimeDimension\" foreignKey=\"time_id\">\n"
            + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n" + "      <Table name=\"time_by_day\"/>\n"
            + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
            + "          levelType=\"TimeYears\"/>\n"
            + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
            + "          levelType=\"TimeQuarters\"/>\n" + "    </Hierarchy>\n" + "  </Dimension>\n"
            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"avg\" />\n" + "</Cube>\n"
            + "</Schema>";
            */
        public BasicQueryTestModifier18(CatalogMapping catalog) {
            super(catalog);
        }
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("FoodMart 2399 Rollup Type")
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("Sales")
                        .defaultMeasure("Unit Sales")
                        .fact(new TableR("sales_fact_1997",
                                List.of(
                                    AggExcludeRBuilder.builder().name("agg_c_14_sales_fact_1997").build(),
                                    AggExcludeRBuilder.builder().name("agg_g_ms_pcat_sales_fact_1997").build(),
                                    AggExcludeRBuilder.builder().name("agg_l_03_sales_fact_1997").build(),
                                    AggExcludeRBuilder.builder().name("agg_l_04_sales_fact_1997").build(),
                                    AggExcludeRBuilder.builder().name("agg_l_05_sales_fact_1997").build(),
                                    AggExcludeRBuilder.builder().name("agg_lc_06_sales_fact_1997").build(),
                                    AggExcludeRBuilder.builder().name("agg_lc_100_sales_fact_1997").build(),
                                    AggExcludeRBuilder.builder().name("agg_ll_01_sales_fact_1997").build(),
                                    AggExcludeRBuilder.builder().name("agg_pl_01_sales_fact_1997").build(),
                                    AggExcludeRBuilder.builder().name("agg_c_special_sales_fact_1997").build()
                                ),
                                List.of(
                                    AggNameRBuilder.builder()
                                        .name("agg_c_10_sales_fact_1997")
                                        .aggFactCount(AggColumnNameRBuilder.builder()
                                            .column("FACT_COUNT")
                                            .build())
                                        .aggMeasures(List.of(
                                            AggMeasureRBuilder.builder()
                                                .name("[Measures].[Unit Sales]")
                                                .column("UNIT_SALES")
                                                .rollupType("SumFromAvg")
                                                .build()
                                        ))
                                        .aggLevels(List.of(
                                            AggLevelRBuilder.builder()
                                                .name("[Time].[Year]")
                                                .column("THE_YEAR")
                                                .build(),
                                            AggLevelRBuilder.builder()
                                                .name("[Time].[Quarter]")
                                                .column("QUARTER")
                                                .build()
                                        ))
                                        .build())
                            )
                        )
                        .dimensionUsageOrDimensions(List.of(
                            PrivateDimensionRBuilder.builder()
                                .name("Time")
                                .type(DimensionTypeEnum.TIME_DIMENSION)
                                .foreignKey("time_id")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(false)
                                        .primaryKey("time_id")
                                        .relation(new TableR("time_by_day"))
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Year")
                                                .column("the_year")
                                                .type(TypeEnum.NUMERIC)
                                                .uniqueMembers(true)
                                                .levelType(LevelTypeEnum.TIME_YEARS)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Quarter")
                                                .column("quarter")
                                                .uniqueMembers(false)
                                                .levelType(LevelTypeEnum.TIME_QUARTERS)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Unit Sales")
                                .column("unit_sales")
                                .aggregator("avg")
                                .build()
                        )).build()
                ))
                .build();
        }
        */

    }

    public static class BasicQueryTestModifier19 extends PojoMappingModifier {

        /*
        "" + "<?xml version=\"1.0\"?>\n" + "<Schema name=\"FoodMart 2399 Rollup Type\">\n"
            + "<Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">\n" + "  <Table name=\"sales_fact_1997\">\n"
            + "<AggExclude name=\"agg_c_14_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_g_ms_pcat_sales_fact_1997\" />\n"
            + "    <AggExclude name=\"agg_l_03_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_l_04_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_l_05_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_lc_06_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_lc_100_sales_fact_1997\" />\n"
            + "    <AggExclude name=\"agg_ll_01_sales_fact_1997\" />\n"
            + "    <AggExclude name=\"agg_pl_01_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_c_special_sales_fact_1997\" />\n"
            + "    <AggName name=\"agg_c_10_sales_fact_1997\">\n" + "        <AggFactCount column=\"FACT_COUNT\"/>\n"
            + "        <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"UNIT_SALES\" />\n"
            + "        <AggLevel name=\"[Time].[Year]\" column=\"THE_YEAR\" />\n"
            + "        <AggLevel name=\"[Time].[Quarter]\" column=\"QUARTER\" />\n" + "    </AggName>\n"
            + "  </Table>\n" + "  <Dimension name=\"Time\" type=\"TimeDimension\" foreignKey=\"time_id\">\n"
            + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n" + "      <Table name=\"time_by_day\"/>\n"
            + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
            + "          levelType=\"TimeYears\"/>\n"
            + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
            + "          levelType=\"TimeQuarters\"/>\n" + "    </Hierarchy>\n" + "  </Dimension>\n"
            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"avg\" />\n" + "</Cube>\n"
            + "</Schema>";
            */
        public BasicQueryTestModifier19(CatalogMapping catalog) {
            super(catalog);
        }
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("FoodMart 2399 Rollup Type")
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("Sales")
                        .defaultMeasure("Unit Sales")
                        .fact(new TableR("sales_fact_1997",
                                List.of(
                                    AggExcludeRBuilder.builder().name("agg_c_14_sales_fact_1997").build(),
                                    AggExcludeRBuilder.builder().name("agg_g_ms_pcat_sales_fact_1997").build(),
                                    AggExcludeRBuilder.builder().name("agg_l_03_sales_fact_1997").build(),
                                    AggExcludeRBuilder.builder().name("agg_l_04_sales_fact_1997").build(),
                                    AggExcludeRBuilder.builder().name("agg_l_05_sales_fact_1997").build(),
                                    AggExcludeRBuilder.builder().name("agg_lc_06_sales_fact_1997").build(),
                                    AggExcludeRBuilder.builder().name("agg_lc_100_sales_fact_1997").build(),
                                    AggExcludeRBuilder.builder().name("agg_ll_01_sales_fact_1997").build(),
                                    AggExcludeRBuilder.builder().name("agg_pl_01_sales_fact_1997").build(),
                                    AggExcludeRBuilder.builder().name("agg_c_special_sales_fact_1997").build()
                                ),
                            List.of(
                                    AggNameRBuilder.builder()
                                        .name("agg_c_10_sales_fact_1997")
                                        .aggFactCount(AggColumnNameRBuilder.builder()
                                            .column("FACT_COUNT")
                                            .build())
                                        .aggMeasures(List.of(
                                            AggMeasureRBuilder.builder()
                                                .name("[Measures].[Unit Sales]")
                                                .column("UNIT_SALES")
                                                .build()
                                        ))
                                        .aggLevels(List.of(
                                            AggLevelRBuilder.builder()
                                                .name("[Time].[Year]")
                                                .column("THE_YEAR")
                                                .build(),
                                            AggLevelRBuilder.builder()
                                                .name("[Time].[Quarter]")
                                                .column("QUARTER")
                                                .build()
                                        ))
                                        .build())
                            )
                        )
                        .dimensionUsageOrDimensions(List.of(
                            PrivateDimensionRBuilder.builder()
                                .name("Time")
                                .type(DimensionTypeEnum.TIME_DIMENSION)
                                .foreignKey("time_id")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(false)
                                        .primaryKey("time_id")
                                        .relation(new TableR("time_by_day"))
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Year")
                                                .column("the_year")
                                                .type(TypeEnum.NUMERIC)
                                                .uniqueMembers(true)
                                                .levelType(LevelTypeEnum.TIME_YEARS)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Quarter")
                                                .column("quarter")
                                                .uniqueMembers(false)
                                                .levelType(LevelTypeEnum.TIME_QUARTERS)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Unit Sales")
                                .column("unit_sales")
                                .aggregator("avg")
                                .build()
                        )).build()
                ))
                .build();
        }
        */
    }

    public static class BasicQueryTestModifier20 extends PojoMappingModifier {

        /*
            String cubeName = "Sales_MemberVis";
            String schema = SchemaUtil.getSchema(baseSchema, null, "<Cube name=\"" + cubeName + "\">\n"
            + "  <Table name=\"sales_fact_1997\"/>\n"
            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\" visible=\"false\"/>\n"
            + "  <Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n"
            + "  <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n"
            + "  <Measure name=\"Sales Count\" column=\"product_id\" aggregator=\"count\"\n"
            + "      formatString=\"#,###\"/>\n" + "  <Measure name=\"Customer Count\" column=\"customer_id\"\n"
            + "      aggregator=\"distinct-count\" formatString=\"#,###\"/>\n" + "  <CalculatedMember\n"
            + "      name=\"Profit\"\n" + "      dimension=\"Measures\"\n" + "      visible=\"false\"\n"
            + "      formula=\"[Measures].[Store Sales]-[Measures].[Store Cost]\">\n"
            + "    <CalculatedMemberProperty name=\"FORMAT_STRING\" value=\"$#,##0.00\"/>\n"
            + "  </CalculatedMember>\n" + "</Cube>", null, null, null, null );
            */
        public BasicQueryTestModifier20(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingCube> schemaCubes(CatalogMapping catalogOriginal) {
            List<MappingCube> result = new ArrayList<>();
            result.addAll(super.schemaCubes(mappingSchemaOriginal));
            result.add(CubeRBuilder.builder()
                .name("Sales_MemberVis")
                .fact(new TableR("sales_fact_1997"))
                .measures(List.of(
                    MeasureRBuilder.builder()
                        .name("Unit Sales")
                        .column("unit_sales")
                        .aggregator("sum")
                        .formatString("Standard")
                        .visible(false)
                        .build(),
                   MeasureRBuilder.builder()
                        .name("Store Cost")
                        .column("store_cost")
                        .aggregator("sum")
                        .formatString("#,###.00")
                        .build(),
                    MeasureRBuilder.builder()
                        .name("Store Sales")
                        .column("store_sales")
                        .aggregator("sum")
                        .formatString("#,###.00")
                        .build(),
                    MeasureRBuilder.builder()
                        .name("Sales Count")
                        .column("product_id")
                        .aggregator("count")
                        .formatString("#,###")
                        .build(),
                    MeasureRBuilder.builder()
                        .name("Customer Count")
                        .column("customer_id")
                        .aggregator("distinct-count")
                        .formatString("#,###")
                        .build()
                ))
                .calculatedMembers(List.of(
                    CalculatedMemberRBuilder.builder()
                        .name("Profit")
                        .dimension("Measures")
                        .visible(false)
                        .formula("[Measures].[Store Sales]-[Measures].[Store Cost]")
                        .calculatedMemberProperties(List.of(
                            CalculatedMemberPropertyRBuilder.builder()
                                .name("FORMAT_STRING")
                                .value("$#,##0.00")
                                .build()
                        ))
                        .build()
                ))
                .build());
            return result;
        }
        */
    }

    public static class BasicQueryTestModifier21 extends PojoMappingModifier {

        /*
            "<Cube name=\"Sales_DimWithoutAll\">\n"
            + "  <Table name=\"sales_fact_1997\"/>\n" + "  <Dimension name=\"Product\" foreignKey=\"product_id\">\n"
            + "    <Hierarchy hasAll=\"false\" primaryKey=\"product_id\" " + "primaryKeyTable=\"product\">\n"
            + "      <Join leftKey=\"product_class_id\" " + "rightKey=\"product_class_id\">\n"
            + "        <Table name=\"product\"/>\n" + "        <Table name=\"product_class\"/>\n" + "      </Join>\n"
            + "      <Level name=\"Product Family\" table=\"product_class\" " + "column=\"product_family\"\n"
            + "          uniqueMembers=\"true\"/>\n" + "      <Level name=\"Product Department\" "
            + "table=\"product_class\" column=\"product_department\"\n" + "          uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Product Category\" table=\"product_class\"" + " column=\"product_category\"\n"
            + "          uniqueMembers=\"false\"/>\n" + "      <Level name=\"Product Subcategory\" "
            + "table=\"product_class\" column=\"product_subcategory\"\n" + "          uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Brand Name\" table=\"product\" "
            + "column=\"brand_name\" uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Product Name\" table=\"product\" " + "column=\"product_name\"\n"
            + "          uniqueMembers=\"true\"/>\n" + "    </Hierarchy>\n" + "  </Dimension>\n"
            + "  <Dimension name=\"Gender\" foreignKey=\"customer_id\">\n"
            + "    <Hierarchy hasAll=\"false\" primaryKey=\"customer_id\">\n" + "    <Table name=\"customer\"/>\n"
            + "      <Level name=\"Gender\" column=\"gender\" " + "uniqueMembers=\"true\"/>\n" + "    </Hierarchy>\n"
            + "  </Dimension>" + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" " + "aggregator=\"sum\"\n"
            + "      formatString=\"Standard\" visible=\"false\"/>\n"
            + "  <Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n" + "</Cube>"
            */
        public BasicQueryTestModifier21(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingCube> schemaCubes(CatalogMapping catalogOriginal) {
            List<MappingCube> result = new ArrayList<>();
            result.addAll(super.schemaCubes(mappingSchemaOriginal));
            result.add(CubeRBuilder.builder()
                .name("Sales_DimWithoutAll")
                .fact(new TableR("sales_fact_1997"))
                .dimensionUsageOrDimensions(List.of(
                    PrivateDimensionRBuilder.builder()
                        .name("Product")
                        .foreignKey("product_id")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(false)
                                .primaryKey("product_id")
                                .primaryKeyTable("product")
                                .relation(
                                    new JoinR(
                                        new JoinedQueryElementR(null, "product_class_id", new TableR("product")),
                                        new JoinedQueryElementR(null, "product_class_id", new TableR("product_class"))
                                    )
                                )
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Product Family")
                                        .table("product_class")
                                        .column("product_family")
                                        .uniqueMembers(true)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Product Department")
                                        .table("product_class")
                                        .column("product_department")
                                        .uniqueMembers(false)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Product Category")
                                        .table("product_class")
                                        .column("product_category")
                                        .uniqueMembers(false)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Product Subcategory")
                                        .table("product_class")
                                        .column("product_subcategory")
                                        .uniqueMembers(false)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Brand Name")
                                        .table("product")
                                        .column("brand_name")
                                        .uniqueMembers(false)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Product Name")
                                        .table("product")
                                        .column("product_name")
                                        .uniqueMembers(true)
                                        .build()
                                ))
                                .build()
                        ))
                        .build(),
                    PrivateDimensionRBuilder.builder()
                        .name("Gender")
                        .foreignKey("customer_id")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(false)
                                .primaryKey("customer_id")
                                .relation(new TableR("customer"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Gender")
                                        .column("gender")
                                        .uniqueMembers(true)
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .measures(List.of(
                    MeasureRBuilder.builder()
                        .name("Unit Sales")
                        .column("unit_sales")
                        .aggregator("sum")
                        .formatString("Standard")
                        .visible(false)
                        .build(),
                    MeasureRBuilder.builder()
                        .name("Store Cost")
                        .column("store_cost")
                        .aggregator("sum")
                        .formatString("#,###.00")
                        .build()
                ))
                .build());
            return result;
        }
        */
    }

    public static class BasicQueryTestModifier22 extends PojoMappingModifier {

        /*
            final String cubeName = "Sales_withCities";
      String baseSchema = TestUtil.getRawSchema(context);
      String schema = SchemaUtil.getSchema(baseSchema, null, "<Cube name=\"" + cubeName + "\">\n"
            + "  <Table name=\"sales_fact_1997\"/>\n"
            + "  <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
            + "  <Dimension name=\"Cities\" foreignKey=\"customer_id\">\n"
            + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Cities\" primaryKey=\"customer_id\">\n"
            + "      <Table name=\"customer\"/>\n"
            + "      <Level name=\"City\" column=\"city\" uniqueMembers=\"false\"/> \n" + "    </Hierarchy>\n"
            + "  </Dimension>\n" + "  <Dimension name=\"Customers\" foreignKey=\"customer_id\">\n"
            + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Customers\" primaryKey=\"customer_id\">\n"
            + "      <Table name=\"customer\"/>\n"
            + "      <Level name=\"Country\" column=\"country\" uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"State Province\" column=\"state_province\" uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"City\" column=\"city\" uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Name\" column=\"fullname\" uniqueMembers=\"true\">\n"
            + "        <Property name=\"Gender\" column=\"gender\"/>\n"
            + "        <Property name=\"Marital Status\" column=\"marital_status\"/>\n"
            + "        <Property name=\"Education\" column=\"education\"/>\n"
            + "        <Property name=\"Yearly Income\" column=\"yearly_income\"/>\n" + "      </Level>\n"
            + "    </Hierarchy>\n" + "  </Dimension>\n" + "  <Dimension name=\"Gender\" foreignKey=\"customer_id\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"customer_id\">\n" + "    <Table name=\"customer\"/>\n"
            + "      <Level name=\"Gender\" column=\"gender\" uniqueMembers=\"true\"/>\n" + "    </Hierarchy>\n"
            + "  </Dimension>" + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\" visible=\"false\"/>\n"
            + "  <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n" + "</Cube>", null, null, null, null );
            */
        public BasicQueryTestModifier22(CatalogMapping catalog) {
            super(catalog);
        }
        /* TODO: DENIS MAPPING-MODIFIERv
        @Override
        protected List<MappingCube> schemaCubes(CatalogMapping catalogOriginal) {
            List<MappingCube> result = new ArrayList<>();
            result.addAll(super.schemaCubes(mappingSchemaOriginal));
            result.add(CubeRBuilder.builder()
                .name("Sales_withCities")
                .fact(new TableR("sales_fact_1997"))
                .dimensionUsageOrDimensions(List.of(
                    DimensionUsageRBuilder.builder()
                        .name("Time")
                        .source("Time")
                        .foreignKey("time_id")
                        .build(),
                    PrivateDimensionRBuilder.builder()
                        .name("Cities")
                        .foreignKey("customer_id")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .allMemberName("All Cities")
                                .primaryKey("customer_id")
                                .relation(new TableR("customer"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("City")
                                        .column("city")
                                        .uniqueMembers(false)
                                        .build()
                                ))
                                .build()
                        ))
                        .build(),
                    PrivateDimensionRBuilder.builder()
                        .name("Customers")
                        .foreignKey("customer_id")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .allMemberName("All Customers")
                                .primaryKey("customer_id")
                                .relation(new TableR("customer"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Country")
                                        .column("country")
                                        .uniqueMembers(true)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("State Province")
                                        .column("state_province")
                                        .uniqueMembers(true)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("City")
                                        .column("city")
                                        .uniqueMembers(false)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Name")
                                        .column("fullname")
                                        .uniqueMembers(true)
                                        .properties(List.of(
                                            PropertyRBuilder.builder()
                                                .name("Gender")
                                                .column("gender")
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Marital Status")
                                                .column("marital_status")
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Education")
                                                .column("education")
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Yearly Income")
                                                .column("yearly_income")
                                                .build()


                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build(),
                    PrivateDimensionRBuilder.builder()
                        .name("Gender")
                        .foreignKey("customer_id")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .primaryKey("customer_id")
                                .relation(new TableR("customer"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Gender")
                                        .column("gender")
                                        .uniqueMembers(true)
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .measures(List.of(
                    MeasureRBuilder.builder()
                        .name("Unit Sales")
                        .column("unit_sales")
                        .aggregator("sum")
                        .formatString("Standard")
                        .visible(false)
                        .build(),
                    MeasureRBuilder.builder()
                        .name("Store Sales")
                        .column("store_sales")
                        .aggregator("sum")
                        .formatString("#,###.00")
                        .build()
                ))
                .build());
            return result;
        }*/
    }

    public static class BasicQueryTestModifier23 extends PojoMappingModifier {

        /*
            <Cube name=\"SalesWithBadMeasure\">\n"
            + "  <Table name=\"sales_fact_1997\"/>\n"
            + "  <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
            + "  <Measure name=\"Bad Measure\" aggregator=\"sum\"\n" + "      formatString=\"Standard\"/>\n"
            + "</Cube>
            */
        public BasicQueryTestModifier23(CatalogMapping catalog) {
            super(catalog);
        }
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingCube> schemaCubes(CatalogMapping catalogOriginal) {
            List<MappingCube> result = new ArrayList<>();
            result.addAll(super.schemaCubes(mappingSchemaOriginal));
            result.add(CubeRBuilder.builder()
                .name("SalesWithBadMeasure")
                .fact(new TableR("sales_fact_1997"))
                .dimensionUsageOrDimensions(List.of(
                    DimensionUsageRBuilder.builder()
                        .name("Time")
                        .source("Time")
                        .foreignKey("time_id")
                        .build()
                ))
                .measures(List.of(
                    MeasureRBuilder.builder()
                        .name("Bad Measure")
                        .aggregator("sum").formatString("Standard")
                        .build()
                ))
                .build());
            return result;
        }

    */
    }

    public static class BasicQueryTestModifier24 extends PojoMappingModifier {

        /*
            "<Cube name=\"SalesWithBadMeasure2\">\n"
            + "  <Table name=\"sales_fact_1997\"/>\n"
            + "  <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
            + "  <Measure name=\"Bad Measure\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\">\n" + "    <MeasureExpression>\n" + "       <SQL dialect=\"generic\">\n"
            + "         unit_sales\n" + "       </SQL>\n" + "    </MeasureExpression>\n" + "  </Measure>\n"
            + "</Cube>"
            */
        public BasicQueryTestModifier24(CatalogMapping catalog) {
            super(catalog);
        }
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingCube> schemaCubes(CatalogMapping catalogOriginal) {
            List<MappingCube> result = new ArrayList<>();
            result.addAll(super.schemaCubes(mappingSchemaOriginal));
            result.add(CubeRBuilder.builder()
                .name("SalesWithBadMeasure2")
                .fact(new TableR("sales_fact_1997"))
                .dimensionUsageOrDimensions(List.of(
                    DimensionUsageRBuilder.builder()
                        .name("Time")
                        .source("Time")
                        .foreignKey("time_id")
                        .build()
                ))
                .measures(List.of(
                    MeasureRBuilder.builder()
                        .name("Bad Measure")
                        .column("unit_sales")
                        .aggregator("sum")
                        .formatString("Standard")
                        .measureExpression(ExpressionViewRBuilder.builder()
                            .sql(SqlSelectQueryRBuilder.builder()
                            .sqls(List.of(
                                SQLRBuilder.builder()
                                    .dialects(List.of("generic"))
                                    .statement("unit_sales")
                                    .build()
                            )).build())
                            .build())
                        .build()
                ))
                .build());
            return result;
        }

    */
    }

    public static class BasicQueryTestModifier25 extends PojoMappingModifier {

        /*
            <UserDefinedFunction name=\"SleepUdf\" className=\""
            + SleepUdf.class.getName() + "\"/>"
            */
        public BasicQueryTestModifier25(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("SleepUdf")
                .className(BasicQueryTest.SleepUdf.class.getName())
                .build());
            return result;
        }
        */
    }

    public static class BasicQueryTestModifier26 extends PojoMappingModifier {

        /*
            <Cube name=\"DefaultMeasureTesting\" defaultMeasure=\"Supply Time\">\n"
            + "  <Table name=\"inventory_fact_1997\"/>\n" + "  <DimensionUsage name=\"Store\" source=\"Store\" "
            + "foreignKey=\"store_id\"/>\n" + "  <DimensionUsage name=\"Store Type\" source=\"Store Type\" "
            + "foreignKey=\"store_id\"/>\n" + "  <Measure name=\"Store Invoice\" column=\"store_invoice\" "
            + "aggregator=\"sum\"/>\n" + "  <Measure name=\"Supply Time\" column=\"supply_time\" "
            + "aggregator=\"sum\"/>\n" + "  <Measure name=\"Warehouse Cost\" column=\"warehouse_cost\" "
            + "aggregator=\"sum\"/>\n" + "</Cube>
            */
        public BasicQueryTestModifier26(CatalogMapping catalog) {
            super(catalog);
        }
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingCube> schemaCubes(CatalogMapping catalogOriginal) {
            List<MappingCube> result = new ArrayList<>();
            result.addAll(super.schemaCubes(mappingSchemaOriginal));
            result.add(CubeRBuilder.builder()
                .name("DefaultMeasureTesting")
                .defaultMeasure("Supply Time")
                .fact(new TableR("inventory_fact_1997"))
                .dimensionUsageOrDimensions(List.of(
                    DimensionUsageRBuilder.builder()
                        .name("Store")
                        .source("Store")
                        .foreignKey("store_id")
                        .build(),
                    DimensionUsageRBuilder.builder()
                        .name("Store Type")
                        .source("Store Type")
                        .foreignKey("store_id")
                        .build()
                ))
                .measures(List.of(
                    MeasureRBuilder.builder()
                        .name("Store Invoice")
                        .column("store_invoice")
                        .aggregator("sum")
                        .build(),
                    MeasureRBuilder.builder()
                        .name("Supply Time")
                        .column("supply_time")
                        .aggregator("sum")
                        .build(),
                    MeasureRBuilder.builder()
                        .name("Warehouse Cost")
                        .column("warehouse_cost")
                        .aggregator("sum")
                        .build()
                ))
                .build());
            return result;
        }

  */
    }

    public static class BasicQueryTestModifier27 extends PojoMappingModifier {

        private final String defaultMeasure;

        /*
                                "<Cube name=\"DefaultMeasureTesting\" defaultMeasure=\"Supply Time Error\">\n"
                        + "  <Table name=\"inventory_fact_1997\"/>\n" + "  <DimensionUsage name=\"Store\" source=\"Store\" "
                        + "foreignKey=\"store_id\"/>\n" + "  <DimensionUsage name=\"Store Type\" source=\"Store Type\" "
                        + "foreignKey=\"store_id\"/>\n" + "  <Measure name=\"Store Invoice\" column=\"store_invoice\" "
                        + "aggregator=\"sum\"/>\n" + "  <Measure name=\"Supply Time\" column=\"supply_time\" "
                        + "aggregator=\"sum\"/>\n" + "  <Measure name=\"Warehouse Cost\" column=\"warehouse_cost\" "
                        + "aggregator=\"sum\"/>\n" + "</Cube>"
                    */
        public BasicQueryTestModifier27(CatalogMapping catalog, String defaultMeasure) {
            super(catalog);
            this.defaultMeasure = defaultMeasure;
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingCube> schemaCubes(CatalogMapping catalogOriginal) {
            List<MappingCube> result = new ArrayList<>();
            result.addAll(super.schemaCubes(mappingSchemaOriginal));
            result.add(CubeRBuilder.builder()
                .name("DefaultMeasureTesting")
                .defaultMeasure(defaultMeasure)
                .fact(new TableR("inventory_fact_1997"))
                .dimensionUsageOrDimensions(List.of(
                    DimensionUsageRBuilder.builder()
                        .name("Store")
                        .source("Store")
                        .foreignKey("store_id")
                        .build(),
                    DimensionUsageRBuilder.builder()
                        .name("Store Type")
                        .source("Store Type")
                        .foreignKey("store_id")
                        .build()
                ))
                .measures(List.of(
                    MeasureRBuilder.builder()
                        .name("Store Invoice")
                        .column("store_invoice")
                        .aggregator("sum")
                        .build(),
                    MeasureRBuilder.builder()
                        .name("Supply Time")
                        .column("supply_time")
                        .aggregator("sum")
                        .build(),
                    MeasureRBuilder.builder()
                        .name("Warehouse Cost")
                        .column("warehouse_cost")
                        .aggregator("sum")
                        .build()
                ))
                .build());
            return result;
        }
        */
    }

    public static class BasicQueryTestModifier28 extends PojoMappingModifier {

        /*
                        <Cube name='FooBarZerOneAnything'>\n" + "  <Table name='sales_fact_1997'/>\n"
            + "  <Dimension name='Gender' foreignKey='customer_id'>\n"
            + "    <Hierarchy hasAll='true' allMemberName='All Gender' primaryKey='customer_id'>\n"
            + "      <Table name='customer'/>\n"
            + "      <Level name='Gender' column='gender' uniqueMembers='true'/>\n" + "    </Hierarchy>\n"
            + "  </Dimension>" + "<Measure name='zero' aggregator='sum'>\n" + "  <MeasureExpression>\n"
            + "  <SQL dialect='generic'>\n" + "    0" + "  </SQL></MeasureExpression></Measure>" + "</Cube>
            */
        public BasicQueryTestModifier28(CatalogMapping catalog) {
            super(catalog);
        }
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingCube> schemaCubes(CatalogMapping catalogOriginal) {
            List<MappingCube> result = new ArrayList<>();
            result.addAll(super.schemaCubes(mappingSchemaOriginal));
            result.add(CubeRBuilder.builder()
                .name("FooBarZerOneAnything")
                .fact(new TableR("sales_fact_1997"))
                .dimensionUsageOrDimensions(List.of(
                    PrivateDimensionRBuilder.builder()
                        .name("Gender")
                        .foreignKey("customer_id")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .allMemberName("All Gender")
                                .primaryKey("customer_id")
                                .relation(new TableR("customer"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Gender").column("gender").uniqueMembers(true)
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .measures(List.of(
                    MeasureRBuilder.builder()
                        .name("zero")
                        .aggregator("sum")
                        .measureExpression(ExpressionViewRBuilder.builder()
                            .sql(SqlSelectQueryRBuilder.builder()
                            .sqls(List.of(
                                SQLRBuilder.builder()
                                    .dialects(List.of("generic"))
                                    .statement("0")
                                    .build()
                            )).build())
                            .build())
                        .build()
                ))
                .build());
            return result;
        }
    */

    }

    public static class BasicQueryTestModifier29 extends PojoMappingModifier {

        /*
            <UserDefinedFunction name='CountConcurrentUdf' className='" + CountConcurrentUdf.class.getName() + "'/>
            */
        public BasicQueryTestModifier29(CatalogMapping catalog) {
            super(catalog);
        }
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("CountConcurrentUdf")
                .className(BasicQueryTest.CountConcurrentUdf.class.getName())
                .build());
            return result;
        }

        */
    }

    public static class BasicQueryTestModifier30 extends PojoMappingModifier {

        /*
        "<Schema name=\"Foo\">\n" + "  <Cube name=\"Bar\">\n"
            + "    <Table name=\"warehouse\">\n" + "      <SQL>sleep(0.1) = 0</SQL>\n" + "    </Table>   \n"
            + " <Dimension name=\"Dim\">\n" + "   <Hierarchy hasAll=\"true\">\n"
            + "     <Level name=\"Level\" column=\"warehouse_id\"/>\n" + "      </Hierarchy>\n" + " </Dimension>\n"
            + " <Measure name=\"Measure\" aggregator=\"sum\">\n" + "   <MeasureExpression>\n" + "     <SQL>1</SQL>\n"
            + "   </MeasureExpression>\n" + " </Measure>\n" + "  </Cube>\n" + "</Schema>\n"
            */
        public BasicQueryTestModifier30(CatalogMapping catalog) {
            super(catalog);
        }
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("Foo")
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("Bar")
                        .fact(new TableR("warehouse", SQLRBuilder.builder().statement("sleep(0.1) = 0").build()))
                        .dimensionUsageOrDimensions(List.of(
                            PrivateDimensionRBuilder.builder()
                                .name("Dim")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true)
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Level").column("warehouse_id")
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Measure").aggregator("sum")
                                .measureExpression(ExpressionViewRBuilder.builder()
                                    .sql(SqlSelectQueryRBuilder.builder()
                                    .sqls(List.of(
                                        SQLRBuilder.builder().statement("1").build()
                                    )).build())
                                    .build())
                                .build()
                        ))
                        .build()))
                .build();
        }

    */

    }

    public static class BasicQueryTestModifier31 extends PojoMappingModifier {

        /*
        "" + "<?xml version=\"1.0\"?>\n" + "<Schema name=\"snowflake bug\">\n" + "  <Cube name=\"Bug\">\n"
            + "    <Table name=\"sales_fact_1997\"/>\n"
            + "    <Dimension name=\"Product - Bug\" foreignKey=\"product_id\" highCardinality=\"false\">\n"
            + "      <Hierarchy hasAll=\"true\" primaryKeyTable=\"product\" primaryKey=\"product_id\">\n"
            + "        <Join leftAlias=\"product_class\" leftKey=\"product_class_id\" rightAlias=\"product\" "
            + "rightKey=\"product_class_id\">\n"
            + "          <Table name=\"product_class\" alias=\"product_class\"/>\n"
            + "          <Table name=\"product\" alias=\"product\"/>\n" + "        </Join>\n"
            + "        <Level name=\"Product Family\" table=\"product_class\" column=\"product_family\" "
            + "uniqueMembers=\"false\"/>\n" + "      </Hierarchy>\n" + "    </Dimension>\n"
            + "    <Measure name=\"Sales\" aggregator=\"sum\" column=\"store_sales\"/>\n" + "  </Cube>\n"
            + "  <Cube name=\"No Bug\">\n" + "    <Table name=\"sales_fact_1997\"/>\n"
            + "    <Dimension name=\"Product - no Bug\" highCardinality=\"false\" foreignKey=\"product_id\">\n"
            + "      <Hierarchy hasAll=\"true\" primaryKeyTable=\"product\" primaryKey=\"product_id\">\n"
            + "        <Join leftAlias=\"product\" leftKey=\"product_class_id\" rightAlias=\"product_class\" "
            + "rightKey=\"product_class_id\">\n" + "          <Table name=\"product\" alias=\"product\"/>\n"
            + "          <Table name=\"product_class\" alias=\"product_class\"/>\n" + "        </Join>\n"
            + "        <Level name=\"Product Family\" table=\"product_class\" column=\"product_family\"/>\n"
            + "      </Hierarchy>\n" + "    </Dimension>\n"
            + "    <Measure name=\"Sales\" aggregator=\"sum\" column=\"store_sales\"/>\n" + "  </Cube>\n"
            + "</Schema>";

            */
        public BasicQueryTestModifier31(CatalogMapping catalog) {
            super(catalog);
        }
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("snowflake bug")
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("Bug")
                        .fact(new TableR("sales_fact_1997"))
                        .dimensionUsageOrDimensions(List.of(
                            PrivateDimensionRBuilder.builder()
                                .name("Product - Bug")
                                .foreignKey("product_id")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true)
                                        .primaryKeyTable("product")
                                        .primaryKey("product_id")
                                        .relation(
                                            new JoinR(
                                                new JoinedQueryElementR("product_class", "product_class_id", new TableR(null, "product_class", "product_class", List.of())),
                                                new JoinedQueryElementR("product", "product_class_id", new TableR(null, "product", "product", List.of()))
                                            )
                                        )
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Product Family")
                                                .table("product_class")
                                                .column("product_family")
                                                //.uniqueMembers(false)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Sales").aggregator("sum")
                                .column("store_sales")
                                .build()
                        ))
                        .build(),
                    CubeRBuilder.builder()
                    	.name("No Bug")
                    	.fact(new TableR("sales_fact_1997"))
                    	.dimensionUsageOrDimensions(List.of(
                    	    PrivateDimensionRBuilder.builder()
                                .name("Product - no Bug")
                                .foreignKey("product_id")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true)
                                        .primaryKeyTable("product")
                                        .primaryKey("product_id")
                                        .relation(
                                            new JoinR(
                                                new JoinedQueryElementR("product", "product_class_id", new TableR(null, "product", "product", List.of())),
                                                new JoinedQueryElementR("product_class", "product_class_id", new TableR(null, "product_class", "product_class", List.of()))
                                            )
                                        )
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Product Family")
                                                .table("product_class")
                                                .column("product_family")
                                                .build()
                                        ))
                                        .build()
                                ))
                    			.build()
                    			))
                    	.measures(List.of(
                    	    MeasureRBuilder.builder()
                                .name("Sales")
                                .aggregator("sum")
                                .column("store_sales")
                                .build()
                        ))
                        .build()
                        ))

                .build();
        }


    */
    }

    public static class BasicQueryTestModifier32 extends PojoMappingModifier {

        /*
            "<Schema name=\"FoodMart\">\n"
            + "  <Dimension name=\"Store Size in SQFT\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n" + "      <Table name=\"store\"/>\n"
            + "      <Level name=\"Store Sqft\" column=\"store_sqft\" type=\"Numeric\" uniqueMembers=\"true\"/>\n"
            + "    </Hierarchy>\n" + "  </Dimension>\n" + "  <Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">\n"
            + "    <Table name=\"sales_fact_1997\"/>\n"
            + "    <DimensionUsage name=\"Store Size in SQFT\" source=\"Store Size in SQFT\" foreignKey=\"store_id\"/>\n"
            + "    <DimensionUsage name=\"SQFT 2\" source=\"Store Size in SQFT\" foreignKey=\"store_id\"/>\n"
            + "    <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\" formatString=\"Standard\"/>\n"
            + "  </Cube>\n" + "</Schema>"
            */
        public BasicQueryTestModifier32(CatalogMapping catalog) {
            super(catalog);
        }
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("FoodMart")
                .dimensions(List.of(
                    PrivateDimensionRBuilder.builder()
                        .name("Store Size in SQFT")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .primaryKey("store_id")
                                .relation(new TableR("store"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Store Sqft")
                                        .column("store_sqft")
                                        .type(TypeEnum.NUMERIC)
                                        .uniqueMembers(true)
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("Sales")
                        .defaultMeasure("Unit Sales")
                        .fact(new TableR("sales_fact_1997"))
                        .dimensionUsageOrDimensions(List.of(
                            DimensionUsageRBuilder.builder()
                                .name("Store Size in SQFT")
                                .source("Store Size in SQFT")
                                .foreignKey("store_id")
                                .build(),
                            DimensionUsageRBuilder.builder()
                                .name("SQFT 2")
                                .source("Store Size in SQFT")
                                .foreignKey("store_id")
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Unit Sales").aggregator("sum")
                                .column("unit_sales")
                                .formatString("Standard")
                                .build()
                        ))
                        .build()))
                .build();
        }

    */
    }

    public static class RolapCubeTestModifier1 extends PojoMappingModifier {

        /*
        String nonAccessibleMember =
            "  <CalculatedMember name=\"~Missing\" dimension=\"Gender\">\n"
            + "    <Formula>100</Formula>\n"
            + "  </CalculatedMember>\n";
        String accessibleMember =
            "  <CalculatedMember name=\"~Missing\" dimension=\"Product\">\n"
            + "    <Formula>100</Formula>\n"
            + "  </CalculatedMember>\n";
        */
        public RolapCubeTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(CalculatedMemberMappingImpl.builder()
                    .withName("~Missing")
                    .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.genderHierarchy))
                    //.withDimension("Gender")
                    .withFormula("100")
                    .build());
                result.add(CalculatedMemberMappingImpl.builder()
                    .withName("~Missing")
                    .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.HIERARCHY_PRODUCT1))
                    //.withDimension("Product")
                    .withFormula("100")
                    .build());
            }
            return result;
        }
    }

    public static class OrderByAliasTestModifier1KE extends PojoMappingModifier {

        /*
        "<Dimension name=\"Promotions\" foreignKey=\"promotion_id\">\n"
        + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
        + "    <Table name=\"promotion\"/>\n"
        + "    <Level name=\"Promotion Name\" column=\"promotion_name\" uniqueMembers=\"true\">\n"
        + "      <KeyExpression><SQL>RTRIM("
        + colName + ")</SQL></KeyExpression>\n"
        + "    </Level>\n"
        + "  </Hierarchy>\n"
        + "</Dimension>"));
         */

        private StringBuilder colName;
        public OrderByAliasTestModifier1KE(CatalogMapping catalog, final StringBuilder colName) {
            super(catalog);
            this.colName = colName;
        }
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingCubeDimension> cubeDimensionUsageOrDimensions(MappingCube cube) {
            List<MappingCubeDimension> result = new ArrayList<>();
            result.addAll(super.cubeDimensionUsageOrDimensions(cube));
            if ("Sales".equals(cube.name())) {
                Optional<MappingCubeDimension> o = result.stream().filter(d -> d instanceof PrivateDimensionR).findFirst();
                int i = 0;
                if (o.isPresent()) {
                    i = result.indexOf(o.get());
                }
                result.add(i, PrivateDimensionRBuilder.builder()
                    .name("Promotions")
                    .foreignKey("promotion_id")
                    .hierarchies(List.of(
                        HierarchyRBuilder.builder()
                            .hasAll(true)
                            .allMemberName("All Promotions")
                            .primaryKey("promotion_id")
                            .defaultMember("[All Promotions]")
                            .relation(new TableR("promotion"))
                            .levels(List.of(
                                LevelRBuilder.builder()
                                    .name("Promotion Name")
                                    .column("promotion_name")
                                    .uniqueMembers(true)
                                    .keyExpression(ExpressionViewRBuilder.builder()
                                        .sql(SqlSelectQueryRBuilder.builder()
                                        .sqls(List.of(
                                            SQLRBuilder.builder()
                                                .statement("RTRIM("+ colName + ")")
                                                .build()
                                        )).build())
                                        .build())
                                    .build()
                            ))
                            .build()
                    ))
                    .build());
            }
            return result;
        }

    */
    }

    public static class OrderByAliasTestModifier1OE extends PojoMappingModifier {

        /*
        "<Dimension name=\"Promotions\" foreignKey=\"promotion_id\">\n"
        + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
        + "    <Table name=\"promotion\"/>\n"
        + "    <Level name=\"Promotion Name\" column=\"promotion_name\" uniqueMembers=\"true\">\n"
        + "      <OrdinalExpression><SQL>RTRIM("
        + colName + ")</SQL></OrdinalExpression>\n"
        + "    </Level>\n"
        + "  </Hierarchy>\n"
        + "</Dimension>"));
         */

        private StringBuilder colName;
        public OrderByAliasTestModifier1OE(CatalogMapping catalog, final StringBuilder colName) {
            super(catalog);
            this.colName = colName;
        }
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingCubeDimension> cubeDimensionUsageOrDimensions(MappingCube cube) {
            List<MappingCubeDimension> result = new ArrayList<>();
            result.addAll(super.cubeDimensionUsageOrDimensions(cube));
            if ("Sales".equals(cube.name())) {
                Optional<MappingCubeDimension> o = result.stream().filter(d -> d instanceof PrivateDimensionR).findFirst();
                int i = 0;
                if (o.isPresent()) {
                    i = result.indexOf(o.get());
                }
                result.add(i, PrivateDimensionRBuilder.builder()
                    .name("Promotions")
                    .foreignKey("promotion_id")
                    .hierarchies(List.of(
                        HierarchyRBuilder.builder()
                            .hasAll(true)
                            .allMemberName("All Promotions")
                            .primaryKey("promotion_id")
                            .defaultMember("[All Promotions]")
                            .relation(new TableR("promotion"))
                            .levels(List.of(
                                LevelRBuilder.builder()
                                    .name("Promotion Name")
                                    .column("promotion_name")
                                    .uniqueMembers(true)
                                    .ordinalExpression(ExpressionViewRBuilder.builder()
                                        .sql(SqlSelectQueryRBuilder.builder()
                                        .sqls(List.of(
                                            SQLRBuilder.builder()
                                                .statement("RTRIM("+ colName + ")")
                                                .build()
                                        )).build())
                                        .build())
                                    .build()
                            ))
                            .build()
                    ))
                    .build());
            }
            return result;
        }

*/

    }

    public static class OrderByAliasTestModifier1ME extends PojoMappingModifier {

        /*
        "<Dimension name=\"Promotions\" foreignKey=\"promotion_id\">\n"
        + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
        + "    <Table name=\"promotion\"/>\n"
        + "    <Level name=\"Promotion Name\" column=\"promotion_name\" uniqueMembers=\"true\">\n"
        + "      <MeasureExpression><SQL>RTRIM("
        + colName + ")</SQL></MeasureExpression>\n"
        + "    </Level>\n"
        + "  </Hierarchy>\n"
        + "</Dimension>"));
         */

        private StringBuilder colName;
        public OrderByAliasTestModifier1ME(CatalogMapping catalog, final StringBuilder colName) {
            super(catalog);
            this.colName = colName;
        }
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingCubeDimension> cubeDimensionUsageOrDimensions(MappingCube cube) {
            List<MappingCubeDimension> result = new ArrayList<>();
            result.addAll(super.cubeDimensionUsageOrDimensions(cube));
            if ("Sales".equals(cube.name())) {
                Optional<MappingCubeDimension> o = result.stream().filter(d -> d instanceof PrivateDimensionR).findFirst();
                int i = 0;
                if (o.isPresent()) {
                    i = result.indexOf(o.get());
                }
                result.add(i, PrivateDimensionRBuilder.builder()
                    .name("Promotions")
                    .foreignKey("promotion_id")
                    .hierarchies(List.of(
                        HierarchyRBuilder.builder()
                            .hasAll(true)
                            .allMemberName("All Promotions")
                            .primaryKey("promotion_id")
                            .defaultMember("[All Promotions]")
                            .relation(new TableR("promotion"))
                            .levels(List.of(
                                LevelRBuilder.builder()
                                    .name("Promotion Name")
                                    .column("promotion_name")
                                    .uniqueMembers(true)
                                    .build()
                            ))
                            .build()
                    ))
                    .build());
            }
            return result;
        }

    */

    }

    public static class OrderByAliasTestModifier1CE extends PojoMappingModifier {

        /*
        "<Dimension name=\"Promotions\" foreignKey=\"promotion_id\">\n"
        + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
        + "    <Table name=\"promotion\"/>\n"
        + "    <Level name=\"Promotion Name\" column=\"promotion_name\" uniqueMembers=\"true\">\n"
        + "      <CaptionExpression><SQL>RTRIM("
        + colName + ")</SQL></CaptionExpression>\n"
        + "    </Level>\n"
        + "  </Hierarchy>\n"
        + "</Dimension>"));
         */

        private StringBuilder colName;
        public OrderByAliasTestModifier1CE(CatalogMapping catalog, final StringBuilder colName) {
            super(catalog);
            this.colName = colName;
        }
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingCubeDimension> cubeDimensionUsageOrDimensions(MappingCube cube) {
            List<MappingCubeDimension> result = new ArrayList<>();
            result.addAll(super.cubeDimensionUsageOrDimensions(cube));
            if ("Sales".equals(cube.name())) {
                Optional<MappingCubeDimension> o = result.stream().filter(d -> d instanceof PrivateDimensionR).findFirst();
                int i = 0;
                if (o.isPresent()) {
                    i = result.indexOf(o.get());
                }
                result.add(i, PrivateDimensionRBuilder.builder()
                    .name("Promotions")
                    .foreignKey("promotion_id")
                    .hierarchies(List.of(
                        HierarchyRBuilder.builder()
                            .hasAll(true)
                            .allMemberName("All Promotions")
                            .primaryKey("promotion_id")
                            .defaultMember("[All Promotions]")
                            .relation(new TableR("promotion"))
                            .levels(List.of(
                                LevelRBuilder.builder()
                                    .name("Promotion Name")
                                    .column("promotion_name")
                                    .uniqueMembers(true)
                                    .captionExpression(ExpressionViewRBuilder.builder()
                                        .sql(SqlSelectQueryRBuilder.builder()
                                        .sqls(List.of(
                                            SQLRBuilder.builder()
                                                .statement("RTRIM("+ colName + ")")
                                                .build()
                                        )).build())
                                        .build())
                                    .build()
                            ))
                            .build()
                    ))
                    .build());
            }
            return result;
        }


    */
    }

    public static class OrderByAliasTestModifier1NE extends PojoMappingModifier {

        /*
        "<Dimension name=\"Promotions\" foreignKey=\"promotion_id\">\n"
        + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
        + "    <Table name=\"promotion\"/>\n"
        + "    <Level name=\"Promotion Name\" column=\"promotion_name\" uniqueMembers=\"true\">\n"
        + "      <NameExpression><SQL>RTRIM("
        + colName + ")</SQL></NameExpression>\n"
        + "    </Level>\n"
        + "  </Hierarchy>\n"
        + "</Dimension>"));
         */

        private StringBuilder colName;
        public OrderByAliasTestModifier1NE(CatalogMapping catalog, final StringBuilder colName) {
            super(catalog);
            this.colName = colName;
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingCubeDimension> cubeDimensionUsageOrDimensions(MappingCube cube) {
            List<MappingCubeDimension> result = new ArrayList<>();
            result.addAll(super.cubeDimensionUsageOrDimensions(cube));
            if ("Sales".equals(cube.name())) {
                Optional<MappingCubeDimension> o = result.stream().filter(d -> d instanceof PrivateDimensionR).findFirst();
                int i = 0;
                if (o.isPresent()) {
                    i = result.indexOf(o.get());
                }
                result.add(i, PrivateDimensionRBuilder.builder()
                    .name("Promotions")
                    .foreignKey("promotion_id")
                    .hierarchies(List.of(
                        HierarchyRBuilder.builder()
                            .hasAll(true)
                            .allMemberName("All Promotions")
                            .primaryKey("promotion_id")
                            .defaultMember("[All Promotions]")
                            .relation(new TableR("promotion"))
                            .levels(List.of(
                                LevelRBuilder.builder()
                                    .name("Promotion Name")
                                    .column("promotion_name")
                                    .uniqueMembers(true)
                                    .nameExpression(ExpressionViewRBuilder.builder()
                                        .sql(SqlSelectQueryRBuilder.builder()
                                        .sqls(List.of(
                                            SQLRBuilder.builder()
                                                .statement("RTRIM("+ colName + ")")
                                                .build()
                                        )).build())
                                        .build())
                                    .build()
                            ))
                            .build()
                    ))
                    .build());
            }
            return result;
        }
        */
    }

    public static class OrderByAliasTestModifier2 extends PojoMappingModifier {

        /*
        "<Dimension name=\"Employees\" foreignKey=\"employee_id\">\n"
        + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Employees\"\n"
        + "      primaryKey=\"employee_id\">\n"
        + "    <Table name=\"employee\"/>\n"
        + "    <Level name=\"Employee Id\" type=\"Numeric\" uniqueMembers=\"true\"\n"
        + "        column=\"employee_id\" parentColumn=\"supervisor_id\"\n"
        + "        nameColumn=\"full_name\" nullParentValue=\"0\">\n"
        + "      <ParentExpression><SQL>RTRIM("
        + colName + ")</SQL></ParentExpression>\n"
        + "      <Closure parentColumn=\"supervisor_id\" childColumn=\"employee_id\">\n"
        + "        <Table name=\"employee_closure\"/>\n"
        + "      </Closure>\n"
        + "      <Property name=\"Marital Status\" column=\"marital_status\"/>\n"
        + "      <Property name=\"Position Title\" column=\"position_title\"/>\n"
        + "      <Property name=\"Gender\" column=\"gender\"/>\n"
        + "      <Property name=\"Salary\" column=\"salary\"/>\n"
        + "      <Property name=\"Education Level\" column=\"education_level\"/>\n"
        + "      <Property name=\"Management Role\" column=\"management_role\"/>\n"
        + "    </Level>\n"
        + "  </Hierarchy>\n"
        + "</Dimension>"));
         */
        private StringBuilder colName;
        public OrderByAliasTestModifier2(CatalogMapping catalog, final StringBuilder colName) {
            super(catalog);
            this.colName = colName;
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingCubeDimension> cubeDimensionUsageOrDimensions(MappingCube cube) {
            List<MappingCubeDimension> result = new ArrayList<>();
            result.addAll(super.cubeDimensionUsageOrDimensions(cube));
            if ("HR".equals(cube.name())) {
                Optional<MappingCubeDimension> o = result.stream().filter(d -> d instanceof PrivateDimensionR).findFirst();
                int i = 0;
                if (o.isPresent()) {
                    i = result.indexOf(o.get());
                }
                result.add(i, PrivateDimensionRBuilder.builder()
                    .name("Employees")
                    .foreignKey("employee_id")
                    .hierarchies(List.of(
                        HierarchyRBuilder.builder()
                            .hasAll(true)
                            .allMemberName("All Employees")
                            .primaryKey("employee_id")
                            .relation(new TableR("employee"))
                            .levels(List.of(
                                LevelRBuilder.builder()
                                    .name("Employee Id")
                                    .type(TypeEnum.NUMERIC)
                                    .uniqueMembers(true)
                                    .column("employee_id")
                                    .parentColumn("supervisor_id")
                                    .nameColumn("full_name")
                                    .nullParentValue("0")
                                    .parentExpression(ExpressionViewRBuilder.builder()
                                        .sql(SqlSelectQueryRBuilder.builder()
                                        .sqls(List.of(
                                            SQLRBuilder.builder()
                                                .statement("RTRIM("+ colName + ")")
                                                .build()
                                        )).build())
                                        .build())
                                    .closure(ClosureRBuilder.builder()
                                        .parentColumn("supervisor_id")
                                        .childColumn("employee_id")
                                        .table(new TableR("employee_closure"))
                                        .build())
                                    .properties(List.of(
                                        PropertyRBuilder.builder()
                                            .name("Marital Status").column("marital_status")
                                            .build(),
                                        PropertyRBuilder.builder()
                                            .name("Position Title").column("position_title")
                                            .build(),
                                        PropertyRBuilder.builder()
                                            .name("Gender").column("gender")
                                            .build(),
                                        PropertyRBuilder.builder()
                                            .name("Salary").column("salary")
                                            .build(),
                                        PropertyRBuilder.builder()
                                            .name("Education Level").column("education_level")
                                            .build(),
                                        PropertyRBuilder.builder()
                                            .name("Management Role").column("management_role")
                                            .build()
                                    ))
                                    .build()
                            ))
                            .build()
                    ))
                    .build());
            }
            return result;
        }
        */
    }

    public static class OrderByAliasTestModifier3 extends PojoMappingModifier {

        /*
        "<Dimension name=\"Promotions\" foreignKey=\"promotion_id\">\n"
        + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
        + "    <Table name=\"promotion\"/>\n"
        + "    <Level name=\"Promotion Name\" column=\"promotion_name\" uniqueMembers=\"true\">\n"
        + "      <PropertyExpression name=\"Rtrim Name\"><SQL>RTRIM("
        + colName + ")</SQL></PropertyExpression>\n"
        + "    </Level>\n"
        + "  </Hierarchy>\n"
        + "</Dimension>"));
         */

        private StringBuilder colName;
        public OrderByAliasTestModifier3(CatalogMapping catalog, final StringBuilder colName) {
            super(catalog);
            this.colName = colName;
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingCubeDimension> cubeDimensionUsageOrDimensions(MappingCube cube) {
            List<MappingCubeDimension> result = new ArrayList<>();
            result.addAll(super.cubeDimensionUsageOrDimensions(cube));
            if ("Sales".equals(cube.name())) {
                result.add(PrivateDimensionRBuilder.builder()
                    .name("Promotions")
                    .foreignKey("promotion_id")
                    .hierarchies(List.of(
                        HierarchyRBuilder.builder()
                            .hasAll(true)
                            .allMemberName("All Promotions")
                            .primaryKey("promotion_id")
                            .defaultMember("[All Promotions]")
                            .relation(new TableR("promotion"))
                            .levels(List.of(
                                LevelRBuilder.builder()
                                    .name("Promotion Name")
                                    .column("promotion_name")
                                    .uniqueMembers(true)
                                    .keyExpression(ExpressionViewRBuilder.builder()
                                        .name("Rtrim Name")
                                        .sql(SqlSelectQueryRBuilder.builder()
                                        .sqls(List.of(
                                            SQLRBuilder.builder()
                                                .statement("RTRIM("+ colName + ")")
                                                .build()
                                        )).build())
                                        .build())
                                    .build()
                            ))
                            .build()
                    ))
                    .build());
            }
            return result;
        }
        */
    }

    public static class OrderByAliasTestModifier4 extends PojoMappingModifier {

        /*
                "<?xml version=\"1.0\"?>\n"
        + "<Schema name=\"FoodMart\">\n"
        + "  <Dimension name=\"Time\" type=\"TimeDimension\">\n"
        + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n"
        + "      <Table name=\"time_by_day\" />\n"
        + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\" "
        + "levelType=\"TimeYears\" />\n"
        + "      <Level name=\"Quarter\" uniqueMembers=\"false\" levelType=\"TimeQuarters\" >\n"
        + "        <KeyExpression><SQL>RTRIM(quarter)</SQL></KeyExpression>\n"
        + "      </Level>\n"
        + "    </Hierarchy>\n"
        + "  </Dimension>\n"
        + "  <Dimension name=\"Product\">\n"
        + "    <Hierarchy hasAll=\"true\" primaryKey=\"product_id\" primaryKeyTable=\"product\">\n"
        + "      <Join leftKey=\"product_class_id\" rightKey=\"product_class_id\">\n"
        + "        <Table name=\"product\"/>\n"
        + "        <Table name=\"product_class\"/>\n"
        + "      </Join>\n"
        + "      <Level name=\"Product Family\" table=\"product_class\" column=\"product_family\" "
        + "uniqueMembers=\"true\" />\n"
        + "    </Hierarchy>\n"
        + "  </Dimension>\n"
        + "  <Cube name=\"Sales\">\n"
        + "    <Table name=\"sales_fact_1997\" />\n"
        + "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\" />\n"
        + "    <DimensionUsage name=\"Product\" source=\"Product\" foreignKey=\"product_id\" />\n"
        + "    <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\" formatString=\"Standard\" />\n"
        + "  </Cube>\n"
        + "  <Cube name=\"Warehouse\">\n"
        + "    <Table name=\"inventory_fact_1997\" />\n"
        + "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\" />\n"
        + "    <DimensionUsage name=\"Product\" source=\"Product\" foreignKey=\"product_id\" />\n"
        + "    <Measure name=\"Warehouse Sales\" column=\"warehouse_sales\" aggregator=\"sum\" "
        + "formatString=\"Standard\" />\n"
        + "  </Cube>\n"
        + "  <VirtualCube name=\"Warehouse and Sales\">\n"
        + "    <VirtualCubeDimension name=\"Time\" />\n"
        + "    <VirtualCubeDimension name=\"Product\" />\n"
        + "    <VirtualCubeMeasure cubeName=\"Sales\" name=\"[Measures].[Unit Sales]\" />\n"
        + "    <VirtualCubeMeasure cubeName=\"Warehouse\" name=\"[Measures].[Warehouse Sales]\" />\n"
        + "  </VirtualCube>\n"
        + "</Schema>");
         */


        public OrderByAliasTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("FoodMart")
                .dimensions(List.of(
                    PrivateDimensionRBuilder.builder()
                        .name("Time")
                        .type(DimensionTypeEnum.TIME_DIMENSION)
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(false)
                                .primaryKey("time_id")
                                .relation(new TableR("time_by_day"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Year")
                                        .column("the_year")
                                        .type(TypeEnum.NUMERIC)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.TIME_YEARS)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Quarter")
                                        .column("the_year")
                                        .uniqueMembers(false)
                                        .levelType(LevelTypeEnum.TIME_QUARTERS)
                                        .keyExpression(
                                            ExpressionViewRBuilder.builder()
                                                .sql(SqlSelectQueryRBuilder.builder()
                                                .sqls(List.of(
                                                    SQLRBuilder.builder()
                                                        .statement("RTRIM(quarter)")
                                                        .build()
                                                )).build())
                                                .build())
                                        .build()
                                ))
                                .build()
                        ))
                        .build(),
                    PrivateDimensionRBuilder.builder()
                        .name("Product")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .primaryKey("product_id")
                                .primaryKeyTable("product")
                                .relation(
                                    new JoinR(
                                        new JoinedQueryElementR(null, "product_class_id", new TableR("product")),
                                        new JoinedQueryElementR(null, "product_class_id", new TableR("product_class"))
                                    )
                                )
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Product Family")
                                        .table("product_class")
                                        .column("product_family")
                                        .uniqueMembers(true)
                                        .build()
                                ))
                                .build()
                        ))
                        .build()))
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("Sales")
                        .fact(new TableR("sales_fact_1997"))
                        .dimensionUsageOrDimensions(List.of(
                            DimensionUsageRBuilder.builder()
                                .name("Time").source("Time").foreignKey("time_id")
                                .build(),
                            DimensionUsageRBuilder.builder()
                                .name("Product").source("Product").foreignKey("product_id")
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Unit Sales")
                                .column("unit_sales")
                                .aggregator("sum")
                                .formatString("Standard")
                                .build()
                        ))
                        .build(),
                    CubeRBuilder.builder()
                        .name("Warehouse")
                        .fact(new TableR("inventory_fact_1997"))
                        .dimensionUsageOrDimensions(List.of(
                            DimensionUsageRBuilder.builder()
                                .name("Time").source("Time").foreignKey("time_id")
                                .build(),
                            DimensionUsageRBuilder.builder()
                                .name("Product").source("Product").foreignKey("product_id")
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Warehouse Sales")
                                .column("warehouse_sales")
                                .aggregator("sum")
                                .formatString("Standard")
                                .build()
                        ))
                        .build()
                ))
                .virtualCubes(List.of(
                    VirtualCubeRBuilder.builder()
                        .name("Warehouse and Sales")
                        .virtualCubeDimensions(List.of(
                            VirtualCubeDimensionRBuilder.builder().name("Time").build(),
                            VirtualCubeDimensionRBuilder.builder().name("Product").build()
                        ))
                        .virtualCubeMeasures(List.of(
                            VirtualCubeMeasureRBuilder.builder()
                                .cubeName("Sales")
                                .name("[Measures].[Unit Sales]")
                                .build(),
                            VirtualCubeMeasureRBuilder.builder()
                                .cubeName("Warehouse")
                                .name("[Measures].[Warehouse Sales]")
                                .build()
                        ))
                        .build()
                ))
                .build();

        }
        */
    }

    public static class TestCalculatedMembersModifier1 extends PojoMappingModifier {

        /*
            "<CalculatedMember name='Profit With Spaces'"
            + "  dimension='Measures'"
            + "  formula='[Measures].[Store Sales]-[Measures].[Store Cost]'/>"));
        */
        public TestCalculatedMembersModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Warehouse and Sales".equals(cube.getName())) {
                result.add(CalculatedMemberMappingImpl.builder()
                    .withName("Profit With Spaces")
                    //.withDimension("Measures")
                    .withFormula("[Measures].[Store Sales]-[Measures].[Store Cost]")
                    .build());
            }
            return result;
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingCalculatedMember> virtualCubeCalculatedMember(MappingVirtualCube virtualCube) {
            List<MappingCalculatedMember> result = new ArrayList<>();
            result.addAll(super.virtualCubeCalculatedMember(virtualCube));
            if ("Warehouse and Sales".equals(virtualCube.name())) {
                result.add(CalculatedMemberRBuilder.builder()
                    .name("Profit With Spaces")
                    .dimension("Measures")
                    .formula("[Measures].[Store Sales]-[Measures].[Store Cost]")
                    .build());
            }
            return result;
        }
        */
    }

    public static class TestCalculatedMembersModifier2 extends PojoMappingModifier {

        /*
            "<CalculatedMember\n"
            + "    name=\"Profit Formatted\"\n"
            + "    dimension=\"Measures\"\n"
            + "    visible=\"false\"\n"
            + "    formula=\"[Measures].[Store Sales]-[Measures].[Store Cost]\">\n"
            + "  <CalculatedMemberProperty name=\"FORMAT_STRING\" value=\"$#,##0.00\"/>\n"
            + "  <CalculatedMemberProperty name=\"CELL_FORMATTER\" value=\""
            + UdfTest.FooBarCellFormatter.class.getName()
            + "\"/>\n"
            + "</CalculatedMember>\n"));
        */
        public TestCalculatedMembersModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(CalculatedMemberMappingImpl.builder()
                    .withName("Profit Formatted")
                    .withVisible(false)
                    .withFormula("[Measures].[Store Sales]-[Measures].[Store Cost]")
                    .withCalculatedMemberProperties(List.of(
                        CalculatedMemberPropertyMappingImpl.builder()
                            .withName("FORMAT_STRING")
                            .withValue("$#,##0.00")
                            .build(),
                        CalculatedMemberPropertyMappingImpl.builder()
                            .withName("CELL_FORMATTER")
                            .withValue(UdfTest.FooBarCellFormatter.class.getName())
                            .build()
                    ))
                    .build());
            }
            return result;

        }

    }

    public static class TestCalculatedMembersModifier3 extends PojoMappingModifier {

        /*
                "<CalculatedMember\n"
                + "    name=\"My Tuple\"\n"
                + "    dimension=\"Measures\"\n"
                + "    visible=\"false\"\n"
                + "    formula=\"StrToTuple('([Gender].[M], [Marital Status].[S])', [Gender], [Marital Status])\"/>\n"));
        */
        public TestCalculatedMembersModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(CalculatedMemberMappingImpl.builder()
                    .withName("My Tuple")
                    .withVisible(false)
                    .withFormula("StrToTuple('([Gender].[M], [Marital Status].[S])', [Gender], [Marital Status])")
                    .build());
            }
            return result;
        }
    }

    public static class TestCalculatedMembersModifier4 extends PojoMappingModifier {

        /*
                "  <CalculatedMember\n"
                + "    name=\"Profit Formatted\"\n"
                + "    dimension=\"Measures\"\n"
                + "    visible=\"false\"\n"
                + "    formula=\"[Measures].[Store Sales]-[Measures].[Store Cost]\">\n"
                + "  <CalculatedMemberProperty name=\"FORMAT_STRING\" value=\"$#,##0.00\"/>\n"
                + "  <CalculatedMemberProperty name=\"CELL_FORMATTER\" value=\"mondrian.test.NonExistentCellFormatter\"/>\n"
                + "</CalculatedMember>\n"));
        */
        public TestCalculatedMembersModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
        	List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(CalculatedMemberMappingImpl.builder()
                    .withName("Profit Formatted")
                    .withVisible(false)
                    .withFormula("[Measures].[Store Sales]-[Measures].[Store Cost]")
                    .withCalculatedMemberProperties(List.of(
                        CalculatedMemberPropertyMappingImpl.builder()
                            .withName("FORMAT_STRING")
                            .withValue("$#,##0.00")
                            .build(),
                        CalculatedMemberPropertyMappingImpl.builder()
                            .withName("CELL_FORMATTER")
                            .withValue("mondrian.test.NonExistentCellFormatter")
                            .build()
                    ))
                    .build());
            }
            return result;
        }

    }

    public static class TestAggregationManagerModifier1 extends PojoMappingModifier {

        /*
            "<Dimension name=\"Store2\" foreignKey=\"store_id\">\n"
            + "  <Hierarchy hasAll=\"true\" primaryKey=\"store_id\" allMemberName=\"All Stores\">"
            + "    <Table name=\"store\"/>\n"
            + "    <Level name=\"Store Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
            + "    <Level name=\"Store State\"   column=\"store_state\"   uniqueMembers=\"true\"/>\n"
            + "    <Level name=\"Store City\"    column=\"store_city\"    uniqueMembers=\"false\"/>\n"
            + "    <Level name=\"Store Type\"    column=\"store_type\"    uniqueMembers=\"false\"/>\n"
            + "    <Level name=\"Store Name\"    column=\"store_name\"    uniqueMembers=\"true\"/>\n"
            + "  </Hierarchy>\n"
            + "</Dimension>"));
         */

        public TestAggregationManagerModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(DimensionConnectorMappingImpl.builder()
                	.withOverrideDimensionName("Store2")
                	.withForeignKey("store_id")
                	.withDimension(
                		StandardDimensionMappingImpl.builder()
                			.withName("Store2")
                			.withHierarchies(List.of(
                			   HierarchyMappingImpl.builder()
                            	.withHasAll(true)
                            	.withPrimaryKey("store_id")
                            	.withAllMemberName("All Stores")
                            	.withQuery(TableQueryMappingImpl.builder().withName("store").build())
                            	.withLevels(List.of(
                            			LevelMappingImpl.builder()
                            				.withName("Store Country")
                            				.withColumn("store_country")
                            				.withUniqueMembers(true)
                            				.build(),
                            			LevelMappingImpl.builder()
                            				.withName("Store State")
                            				.withColumn("store_state")
                            				.withUniqueMembers(true)
                            				.build(),
                            			LevelMappingImpl.builder()
                            				.withName("Store City")
                            				.withColumn("store_city")
                            				.withUniqueMembers(false)
                            				.build(),
                            			LevelMappingImpl.builder()
                            				.withName("Store Type")
                            				.withColumn("store_type")
                            				.withUniqueMembers(false)
                            				.build(),
                            			LevelMappingImpl.builder()
                            				.withName("Store Name")
                            				.withColumn("store_name")
                            				.withUniqueMembers(true)
                            				.build()
                            	))
                            	.build()
                			 )).build())
                    .build());
            }
            return result;
        }

    }

    public static class TestAggregationManagerModifier2 extends PojoMappingModifier {

        /*
            "<Dimension name=\"Promotions\" foreignKey=\"promotion_id\">\n"
            + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
            + "    <Table name=\"promotion\"/>\n"
            + "    <Level name=\"Promotion Name\" column=\"promotion_name\" uniqueMembers=\"true\">\n"
            + "      <KeyExpression><SQL>ERROR_TEST_FUNCTION_NAME("
            + colName + ")</SQL></KeyExpression>\n"
            + "    </Level>\n"
            + "  </Hierarchy>\n"
            + "</Dimension>", false));
         */
        private final StringBuilder colName;

        public TestAggregationManagerModifier2(CatalogMapping catalog, final StringBuilder colName) {
            super(catalog);
            this.colName = colName;
        }

		@Override
		protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
			List<DimensionConnectorMapping> result = new ArrayList<>();
			result.addAll(super.cubeDimensionConnectors(cube).stream()
					.filter(d -> !"Promotions".equals(d.getOverrideDimensionName())).toList());
			if ("Sales".equals(cube.getName())) {
				result.add(DimensionConnectorMappingImpl.builder().withOverrideDimensionName("Promotions")
						.withForeignKey("promotion_id")
						.withDimension(StandardDimensionMappingImpl.builder().withName("Promotions")
								.withHierarchies(List.of(HierarchyMappingImpl.builder().withHasAll(true)
										.withAllMemberName("All Promotions").withPrimaryKey("promotion_id")
										.withDefaultMember("[All Promotions]")
										.withQuery(TableQueryMappingImpl.builder().withName("promotion").build())
										.withLevels(List.of(LevelMappingImpl.builder().withName("Promotion Name")
												.withColumn("promotion_name").withUniqueMembers(true)
												.withKeyExpression(SQLExpressionMappingImpl.builder()
														.withSqls(List.of(SQLMappingImpl.builder()
																.withStatement(
																		"ERROR_TEST_FUNCTION_NAME(" + colName + ")")
																.withDialects(List.of("generic")).build()))
														.build())
												.build()))
										.build()))
								.build())
						.build());
			}
			return result;

        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingCubeDimension> cubeDimensionUsageOrDimensions(MappingCube cube) {
            List<MappingCubeDimension> result = new ArrayList<>();
            result.addAll(super.cubeDimensionUsageOrDimensions(cube)
                .stream().filter(d -> !"Promotions".equals(d.name())).toList());
            if ("Sales".equals(cube.name())) {
                result.add(PrivateDimensionRBuilder.builder()
                    .name("Promotions")
                    .foreignKey("promotion_id")
                    .hierarchies(List.of(
                        HierarchyRBuilder.builder()
                            .hasAll(true)
                            .allMemberName("All Promotions")
                            .primaryKey("promotion_id")
                            .defaultMember("[All Promotions]")
                            .relation(new TableR("promotion"))
                            .levels(List.of(
                                LevelRBuilder.builder()
                                    .name("Promotion Name")
                                    .column("promotion_name")
                                    .uniqueMembers(true)
                                    .keyExpression(ExpressionViewRBuilder.builder()
                                        .sql(SqlSelectQueryRBuilder.builder()
                                        .sqls(List.of(
                                            SQLRBuilder.builder()
                                                .statement("ERROR_TEST_FUNCTION_NAME(" + colName + ")")
                                                .build()
                                        )).build())
                                        .build())
                                    .build()

                            ))
                            .build()
                    ))
                    .build());
            }
            return result;
        }
        */
    }

    public static class TestAggregationManagerModifier10 extends PojoMappingModifier {

        /*
            "<Dimension name=\"Promotions\" foreignKey=\"promotion_id\">\n"
            + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
            + "    <Table name=\"promotion\"/>\n"
            + "    <Level name=\"Promotion Name\" column=\"promotion_name\" uniqueMembers=\"true\">\n"
            + "      <KeyExpression><SQL>RTRIM("
            + colName + ")</SQL></KeyExpression>\n"
            + "    </Level>\n"
            + "  </Hierarchy>\n"
            + "</Dimension>", false));
         */
        private final StringBuilder colName;

        public TestAggregationManagerModifier10(CatalogMapping catalog, final StringBuilder colName) {
            super(catalog);
            this.colName = colName;
        }

        @Override
		protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
			List<DimensionConnectorMapping> result = new ArrayList<>();
			result.addAll(super.cubeDimensionConnectors(cube).stream()
					.filter(d -> !"Promotions".equals(d.getOverrideDimensionName())).toList());
			if ("Sales".equals(cube.getName())) {
				result.add(DimensionConnectorMappingImpl.builder().withOverrideDimensionName("Promotions")
						.withForeignKey("promotion_id")
						.withDimension(StandardDimensionMappingImpl.builder().withName("Promotions")
								.withHierarchies(List.of(HierarchyMappingImpl.builder()
										.withHasAll(true)
										.withAllMemberName("All Promotions")
										.withPrimaryKey("promotion_id")
										.withDefaultMember("[All Promotions]")
										.withQuery(TableQueryMappingImpl.builder().withName("promotion").build())
										.withLevels(List.of(
												LevelMappingImpl.builder()
												.withName("Promotion Name")
												.withColumn("promotion_name").withUniqueMembers(true)
												.withKeyExpression(SQLExpressionMappingImpl.builder()
														.withSqls(List.of(SQLMappingImpl.builder()
																.withStatement("RTRIM(" + colName + ")")
																.withDialects(List.of("generic")).build()))
														.build())
												.build()))
										.build()))
								.build())
						.build());
			}
			return result;

        }
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingCubeDimension> cubeDimensionUsageOrDimensions(MappingCube cube) {
            List<MappingCubeDimension> result = new ArrayList<>();
            result.addAll(super.cubeDimensionUsageOrDimensions(cube)
                .stream().filter(d -> !"Promotions".equals(d.name())).toList());
            if ("Sales".equals(cube.name())) {
                result.add(PrivateDimensionRBuilder.builder()
                    .name("Promotions")
                    .foreignKey("promotion_id")
                    .hierarchies(List.of(
                        HierarchyRBuilder.builder()
                            .hasAll(true)
                            .allMemberName("All Promotions")
                            .primaryKey("promotion_id")
                            .defaultMember("[All Promotions]")
                            .relation(new TableR("promotion"))
                            .levels(List.of(
                                LevelRBuilder.builder()
                                    .name("Promotion Name")
                                    .column("promotion_name")
                                    .uniqueMembers(true)
                                    .keyExpression(ExpressionViewRBuilder.builder()
                                        .sql(SqlSelectQueryRBuilder.builder()
                                        .sqls(List.of(
                                            SQLRBuilder.builder()
                                                .statement("RTRIM(" + colName + ")")
                                                .build()
                                        )).build())
                                        .build())
                                    .build()

                            ))
                            .build()
                    ))
                    .build());
            }
            return result;
        }
        */
    }

    public static class DrillThroughTestModifier1 extends PojoMappingModifier {

        /*
            "  <Dimension name=\"Store2\" foreignKey=\"store_id\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "      <Table name=\"store_ragged\"/>\n"
            + "      <Level name=\"Store Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"Store Id\" column=\"store_id\" captionColumn=\"store_name\" uniqueMembers=\"true\" type=\"Integer\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension name=\"Store3\" foreignKey=\"store_id\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "      <Table name=\"store\"/>\n"
            + "      <Level name=\"Store Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"Store Id\" column=\"store_id\" captionColumn=\"store_name\" uniqueMembers=\"true\" type=\"Numeric\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"));
         */


        public DrillThroughTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Store2")
                		.withForeignKey("store_id")
                		.withDimension(
                			StandardDimensionMappingImpl.builder()
                				.withName("Store2")
                				.withHierarchies(List.of(
                					HierarchyMappingImpl.builder()
                						.withHasAll(true)
                						.withPrimaryKey("store_id")
                						.withQuery(TableQueryMappingImpl.builder().withName("store_ragged").build())
                						.withLevels(List.of(
                							LevelMappingImpl.builder()
                								.withName("Store Country")
                								.withColumn("store_country")
                								.withUniqueMembers(true)
                								.build(),
                							LevelMappingImpl.builder()
                								.withName("Store Id")
                								.withColumn("store_id")
                								.withCaptionColumn("store_name")
                								.withUniqueMembers(true)
                								.withType(DataType.INTEGER)
                								.build()
                						))
                						.build()
                				))
                				.build())
                    .build());
                result.add(DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Store3")
                		.withForeignKey("store_id")
                		.withDimension(
                			StandardDimensionMappingImpl.builder()
                				.withName("Store3")
                				.withHierarchies(List.of(
                					HierarchyMappingImpl.builder()
                						.withHasAll(true)
                						.withPrimaryKey("store_id")
                						.withQuery(TableQueryMappingImpl.builder().withName("store").build())
                						.withLevels(List.of(
                							LevelMappingImpl.builder()
                								.withName("Store Country")
                								.withColumn("store_country")
                								.withUniqueMembers(true)
                								.build(),
                							LevelMappingImpl.builder()
                								.withName("Store Id")
                								.withColumn("store_id")
                								.withCaptionColumn("store_name")
                								.withUniqueMembers(true)
                								.withType(DataType.NUMERIC)
                								.build()
                						))
                						.build()
                		        ))
                		        .build())
                    .build());


            }
            return result;

        }

    }

    public static class DrillThroughTestModifier2 extends PojoMappingModifier {

        /*
                "  <Dimension name=\"Store2\" foreignKey=\"store_id\">\n"
                + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Stores\" >\n"
                + "      <Table name=\"store_ragged\"/>\n"
                + "      <Level name=\"Store Id\" column=\"store_id\" nameColumn=\"store_id\" ordinalColumn=\"region_id\" uniqueMembers=\"true\">\n"
                + "     </Level>"
                + "    </Hierarchy>\n"
                + "  </Dimension>\n"));
         */


        public DrillThroughTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
            	//Optional<MappingCubeDimension> o = result.stream().filter(d -> d instanceof PrivateDimensionR).findFirst();
            	//int i = 0;
            	//if (o.isPresent()) {
            	//    i = result.indexOf(o.get());
                //}
                //result.add(i, PrivateDimensionRBuilder.builder()
            	result.add(DimensionConnectorMappingImpl.builder()
            		.withOverrideDimensionName("Store2")
            		.withForeignKey("store_id")
            		.withDimension(
            			StandardDimensionMappingImpl.builder()
            				.withName("Store2")
            				.withHierarchies(List.of(
            					HierarchyMappingImpl.builder()
            						.withHasAll(true)
            						.withAllMemberName("All Stores")
            						.withQuery(TableQueryMappingImpl.builder().withName("store_ragged").build())
            						.withLevels(List.of(
            							LevelMappingImpl.builder()
            								.withName("Store Id")
            								.withColumn("store_id")
                                            .withNameColumn("store_id")
                                            .withOrdinalColumn("region_id")
                                            .withUniqueMembers(true)
                                            .build()
            						))
            						.build()
            			    ))
            		        .build()
            		)
                    .build());
            }
            return result;
        }

    }

    public static class DrillThroughTestModifier3 extends PojoMappingModifier {

        /*
            "  <Dimension name=\"Education Level2\" foreignKey=\"customer_id\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"customer_id\">\n"
            + "      <Table name=\"customer\"/>\n"
            + "      <Level name=\"Education Level but with a very long name that will be too long if converted directly into a column\" column=\"education\" uniqueMembers=\"true\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>",
         */


        public DrillThroughTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
            	//Optional<MappingCubeDimension> o = result.stream().filter(d -> d instanceof PrivateDimensionR).findFirst();
            	//int i = 0;
            	//if (o.isPresent()) {
            	//    i = result.indexOf(o.get());
                //}
                //result.add(i, PrivateDimensionRBuilder.builder()
            	result.add(DimensionConnectorMappingImpl.builder()
            		.withOverrideDimensionName("Education Level2")
            		.withForeignKey("customer_id")
            		.withDimension(
            			StandardDimensionMappingImpl.builder()
            				.withName("Education Level2")
            				.withHierarchies(List.of(
            					HierarchyMappingImpl.builder()
            						.withHasAll(true)
            						.withPrimaryKey("customer_id")
            						.withQuery(TableQueryMappingImpl.builder().withName("customer").build())
            						.withLevels(List.of(
            							LevelMappingImpl.builder()
            								.withName("Education Level but with a very long name that will be too long if converted directly into a column")
            								.withColumn("education")
                                            .withUniqueMembers(true)
                                            .build()
            						))
            						.build()
            			    ))
            		        .build()
            		)
                    .build());
            }
            return result;
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingCubeDimension> cubeDimensionUsageOrDimensions(MappingCube cube) {
            List<MappingCubeDimension> result = new ArrayList<>();
            result.addAll(super.cubeDimensionUsageOrDimensions(cube));
            if ("Sales".equals(cube.name())) {
                Optional<MappingCubeDimension> o = result.stream().filter(d -> d instanceof PrivateDimensionR).findFirst();
                int i = 0;
                if (o.isPresent()) {
                    i = result.indexOf(o.get());
                }
                result.add(i, PrivateDimensionRBuilder.builder()
                    .name("Education Level2")
                    .foreignKey("customer_id")
                    .hierarchies(List.of(
                        HierarchyRBuilder.builder()
                            .hasAll(true)
                            .primaryKey("customer_id")
                            .relation(new TableR("customer"))
                            .levels(List.of(
                                LevelRBuilder.builder()
                                    .name("Education Level but with a very long name that will be too long if converted directly into a column")
                                    .column("education")
                                    .uniqueMembers(true)
                                    .build()
                            ))
                            .build()
                    ))
                    .build());


            }
            return result;
        }
        */
    }

    public static class RaggedHierarchyTestModifier1 extends PojoMappingModifier {

        /*
                "<Dimension name=\"Gender4\" foreignKey=\"customer_id\">\n"
                + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Gender\" primaryKey=\"customer_id\">\n"
                + "      <Table name=\"customer\"/>\n"
                + "      <Level name=\"Gender\" column=\"gender\" uniqueMembers=\"true\" hideMemberIf=\"IfBlankName\">\n"
                + "         <NameExpression> "
                + " <SQL dialect='generic'> "
                    +           "case \"gender\" "
                    +           "when 'F' then ' ' "
                    +           "when 'M' then 'M' "
                    + " end "
                    + "</SQL> "
                    + "</NameExpression>  "
                    + "      </Level>"
                    + "    </Hierarchy>\n"
                    + "  </Dimension>"));
         */


        public RaggedHierarchyTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
            	result.add(DimensionConnectorMappingImpl.builder()
            		.withOverrideDimensionName("Gender4")
            		.withForeignKey("customer_id")
            		.withDimension(
            			StandardDimensionMappingImpl.builder()
            				.withName("Gender4")
            				.withHierarchies(List.of(
            					HierarchyMappingImpl.builder()
            						.withHasAll(true)
            						.withPrimaryKey("customer_id")
            						.withQuery(TableQueryMappingImpl.builder().withName("customer").build())
            						.withLevels(List.of(
            							LevelMappingImpl.builder()
            								.withName("Gender")
            								.withColumn("gender")
                                            .withUniqueMembers(true)
                                            .withHideMemberIfType(HideMemberIfType.IF_BLANK_NAME)
                                            .withNameExpression(SQLExpressionMappingImpl.builder()
                                            		.withSqls(List.of(
                                            			SQLMappingImpl.builder()
                                            			.withDialects(List.of("generic"))
                                            			.withStatement("case \"gender\" when 'F' then ' ' when 'M' then 'M' ")
                                            			.build()
                                            				))
                                            		.build())
                                            .build()
            						))
            						.build()
            			    ))
            		        .build()
            		)
                    .build());
            }
            return result;
        }
    }

    public static class RaggedHierarchyTestModifier2 extends PojoMappingModifier {

        /*
            "<Dimension name=\"Store\" foreignKey=\"store_id\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "      <Table name=\"store_ragged\"/>\n"
            + "      <Level name=\"Store Country\" column=\"store_country\" uniqueMembers=\"true\"\n"
            + "          hideMemberIf=\"Never\"/>\n"
            + "      <Level name=\"Store State\" column=\"store_state\" uniqueMembers=\"true\"\n"
            + "          hideMemberIf=\"IfParentsName\"/>\n"
            + "      <Level name=\"Store City\" column=\"store_city\" uniqueMembers=\"false\"\n"
            + "          hideMemberIf=\"IfBlankName\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>"));
         */


        public RaggedHierarchyTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales Ragged".equals(cube.getName())) {
            	result.add(DimensionConnectorMappingImpl.builder()
            		.withOverrideDimensionName("Store")
            		.withForeignKey("store_id")
            		.withDimension(
            			StandardDimensionMappingImpl.builder()
            				.withName("Store")
            				.withHierarchies(List.of(
            					HierarchyMappingImpl.builder()
            						.withHasAll(true)
            						.withPrimaryKey("store_id")
            						.withQuery(TableQueryMappingImpl.builder().withName("store_ragged").build())
            						.withLevels(List.of(
            							LevelMappingImpl.builder()
            								.withName("Store Country")
            								.withColumn("store_country")
                                            .withUniqueMembers(true)
                                            .withHideMemberIfType(HideMemberIfType.NEVER)
                                            .build(),
              							LevelMappingImpl.builder()
            								.withName("Store State")
            								.withColumn("store_state")
                                            .withUniqueMembers(true)
                                            .withHideMemberIfType(HideMemberIfType.IF_PARENTS_NAME)
                                            .build(),
               							LevelMappingImpl.builder()
                								.withName("Store City")
                								.withColumn("store_city")
                                                .withUniqueMembers(false)
                                                .withHideMemberIfType(HideMemberIfType.IF_BLANK_NAME)
                                                .build()
            						))
            						.build()
            			    ))
            		        .build()
            		)
                    .build());
            }
            return result;
        }

    }

    public static class RolapResultTestModifier extends PojoMappingModifier {

        /*
            "<Dimension name=\"Promotions2\" foreignKey=\"promotion_id\">\n"
            + "  <Hierarchy hasAll=\"false\" primaryKey=\"promotion_id\">\n"
            + "    <Table name=\"promotion\"/>\n"
            + "    <Level name=\"Promotion2 Name\" column=\"promotion_name\" uniqueMembers=\"true\"/>\n"
            + "  </Hierarchy>\n"
            + "</Dimension>"));
         */


        public RolapResultTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
            	result.add(DimensionConnectorMappingImpl.builder()
            		.withOverrideDimensionName("Promotions2")
            		.withForeignKey("promotion_id")
            		.withDimension(
            			StandardDimensionMappingImpl.builder()
            				.withName("Promotions2")
            				.withHierarchies(List.of(
            					HierarchyMappingImpl.builder()
            						.withHasAll(true)
            						.withPrimaryKey("promotion_id")
            						.withQuery(TableQueryMappingImpl.builder().withName("promotion").build())
            						.withLevels(List.of(
            							LevelMappingImpl.builder()
            								.withName("Promotion2 Name")
            								.withColumn("promotion_name")
                                            .withUniqueMembers(true)
                                            .build()
            						))
            						.build()
            			    ))
            		        .build()
            		)
                    .build());
            }
            return result;
        }
    }

    public static class VirtualCubeTestModifier1 extends PojoMappingModifier {

        /*
            "  <CalculatedMember name=\"Shipped per Ordered\" dimension=\"Measures\">\n"
            + "    <Formula>[Measures].[Units Shipped] / [Measures].[Unit Sales]</Formula>\n"
            + "    <CalculatedMemberProperty name=\"FORMAT_STRING\" value=\"#.0%\"/>\n"
            + "  </CalculatedMember>\n"));
        */
        public VirtualCubeTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Warehouse and Sales".equals(cube.getName())) {
                result.add(CalculatedMemberMappingImpl.builder()
                    .withName("Shipped per Ordered")
                    .withFormula("[Measures].[Units Shipped] / [Measures].[Unit Sales]")
                    .withCalculatedMemberProperties(List.of(
                    		CalculatedMemberPropertyMappingImpl.builder()
                            .withName("FORMAT_STRING")
                            .withValue("#.0%")
                    		.build()
                    		))
                    .build());
            }
            return result;
        }
    }

    public static class VirtualCubeTestModifier2 extends PojoMappingModifier {

        /*
            <VirtualCubeMeasure cubeName=\"Sales\" name=\"[Measures].[Customer Count]\"/>"
        */
        public VirtualCubeTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingVirtualCubeMeasure> virtualCubeVirtualCubeMeasure(MappingVirtualCube virtualCube) {
            List<MappingVirtualCubeMeasure> result = new ArrayList<>();
            result.addAll(super.virtualCubeVirtualCubeMeasure(virtualCube));
            if ("Warehouse and Sales".equals(virtualCube.name())) {
                result.add(VirtualCubeMeasureRBuilder.builder()
                    .cubeName("Sales")
                    .name("[Measures].[Customer Count]")
                    .build());
            }
            return result;
        }
        */
    }

    public static class VirtualCubeTestModifier3 extends PojoMappingModifier {

        /*
            "<Schema name=\"FoodMart\">"
          + "<Dimension type=\"TimeDimension\" highCardinality=\"false\" name=\"Time\">"
          + "<Hierarchy visible=\"true\" hasAll=\"false\" primaryKey=\"time_id\">"
          + "<Table name=\"time_by_day\">"
          + "</Table>"
          + "<Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\" levelType=\"TimeYears\">"
          + "</Level>"
          + "<Level name=\"Quarter\" column=\"quarter\" type=\"String\" uniqueMembers=\"false\" levelType=\"TimeQuarters\">"
          + "</Level>"
          + "</Hierarchy>"
          + "</Dimension>"
          + "<Cube name=\"Sales\" visible=\"true\" defaultMeasure=\"Unit Sales\" >"
          + "<Table name=\"sales_fact_1997\">"
          + "<AggName name=\"agg_c_special_sales_fact_1997\">"
          + "<AggFactCount column=\"FACT_COUNT\">"
          + "</AggFactCount>"
          + "<AggMeasure column=\"UNIT_SALES_SUM\" name=\"[Measures].[Unit Sales]\">"
          + "</AggMeasure>"
          + "<AggLevel column=\"TIME_YEAR\" name=\"[Time].[Year]\">"
          + "</AggLevel>"
          + "</AggName>"
          + "</Table>"
          + "<DimensionUsage source=\"Time\" name=\"Time\" foreignKey=\"time_id\" highCardinality=\"false\">"
          + "</DimensionUsage>"
          + "<Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\">"
          + "</Measure>"
          + "<CalculatedMember name=\"recurse\" dimension=\"Measures\" visible=\"true\">"
          + "<Formula>"
          + "<![CDATA[(CoalesceEmpty((Measures.[Unit Sales], [Time].CurrentMember ) ,"
          + "(Measures.[recurse],[Time].CurrentMember.PrevMember)))]]>"
          + "</Formula>"
          + "</CalculatedMember>"
          + "</Cube>"
          + "<VirtualCube enabled=\"true\" name=\"Warehouse and Sales\" defaultMeasure=\"Store Sales\" visible=\"true\">"
          + "<VirtualCubeDimension visible=\"true\" highCardinality=\"false\" name=\"Time\">"
          + "</VirtualCubeDimension>"
          + "<VirtualCubeMeasure cubeName=\"Sales\" name=\"[Measures].[recurse]\" visible=\"true\">"
          + "</VirtualCubeMeasure>"
          + "</VirtualCube>"
          + "</Schema>";
         */
        public VirtualCubeTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {

            return SchemaRBuilder.builder()
                .name("FoodMart")
                .dimensions(List.of(
                    PrivateDimensionRBuilder.builder()
                        .type(DimensionTypeEnum.TIME_DIMENSION)
                        .name("Time")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .visible(true)
                                .hasAll(false)
                                .primaryKey("time_id")
                                .relation(new TableR("time_by_day"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Year")
                                        .column("the_year")
                                        .type(TypeEnum.NUMERIC)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.TIME_YEARS)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Quarter")
                                        .column("quarter")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(false)
                                        .levelType(LevelTypeEnum.TIME_QUARTERS)
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("Sales")
                        .visible(true)
                        .defaultMeasure("Unit Sales")
                        .fact(new TableR("sales_fact_1997",
                            List.of(),
                            List.of(
                                AggNameRBuilder.builder()
                                    .name("agg_c_special_sales_fact_1997")
                                    .aggFactCount(
                                        AggColumnNameRBuilder.builder()
                                            .column("FACT_COUNT")
                                            .build())
                                    .aggMeasures(List.of(
                                        AggMeasureRBuilder.builder()
                                            .column("UNIT_SALES_SUM")
                                            .name("[Measures].[Unit Sales]")
                                            .build()
                                    ))
                                    .aggLevels(List.of(
                                        AggLevelRBuilder.builder()
                                            .column("TIME_YEAR")
                                            .name("[Time].[Year]")
                                            .build()
                                    ))
                                    .build()
                            )))
                        .dimensionUsageOrDimensions(List.of(
                            DimensionUsageRBuilder.builder()
                                .source("Time")
                                .name("Time")
                                .foreignKey("time_id")
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Unit Sales")
                                .column("unit_sales")
                                .aggregator("sum")
                                .build()
                        ))
                        .calculatedMembers(List.of(
                            CalculatedMemberRBuilder.builder()
                                .name("recurse")
                                .dimension("Measures")
                                .visible(true)
                                .formulaElement(FormulaRBuilder.builder()
                                    .cdata("(CoalesceEmpty((Measures.[Unit Sales], [Time].CurrentMember ) ,(Measures.[recurse],[Time].CurrentMember.PrevMember)))")
                                    .build())
                                .build()
                        ))
                        .build()
                ))
                .virtualCubes(List.of(
                    VirtualCubeRBuilder.builder()
                        .enabled(true)
                        .name("Warehouse and Sales")
                        .defaultMeasure("Store Sales")
                        .visible(true)
                        .virtualCubeDimensions(List.of(
                            VirtualCubeDimensionRBuilder.builder()
                                .visible(true)
                                .name("Time")
                                .build()
                        ))
                        .virtualCubeMeasures(List.of(
                            VirtualCubeMeasureRBuilder.builder()
                                .cubeName("Sales")
                                .name("[Measures].[recurse]")
                                .visible(true)
                                .build()
                        ))
                        .build()
                ))
                .build();
        }
        */
    }

    public static class SqlQueryTestModifier extends PojoMappingModifier {

        /*
                        " <Measure name=\"Avg Sales\" column=\"unit_sales\" aggregator=\"avg\"\n"
            + " formatString=\"#.###\"/>",

        */
        public SqlQueryTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends MeasureGroupMapping> physicalCubeMeasureGroups(PhysicalCubeMapping cube) {
            List<MeasureGroupMapping> result = new ArrayList<>();
            result.addAll(super.physicalCubeMeasureGroups(cube));
            if ("Sales".equals(cube.getName())) {
            	MeasureGroupMappingImpl mg;
                result.add(mg = MeasureGroupMappingImpl.builder().withPhysicalCube(cube).build());
                mg.setMeasures(List.of(MeasureMappingImpl.builder()
                            .withName("Avg Sales")
                            .withColumn("unit_sales")
                            .withAggregatorType(MeasureAggregatorType.AVG)
                            .withFormatString("#.###")
                            .withMeasureGroup(mg)
                			.build()));
            }
            return result;
        }

    }


    public static class CompoundSlicerTestModifier1 extends PojoMappingModifier {

        /*
                "<Measure name='Unit Sales Foo Bar' column='unit_sales'\n"
                        + "    aggregator='sum' formatString='Standard' formatter='"
                        + UdfTest.FooBarCellFormatter.class.getName()
                        + "'/>";
        */
        public CompoundSlicerTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends MeasureGroupMapping> physicalCubeMeasureGroups(PhysicalCubeMapping cube) {
        	List<MeasureGroupMapping> result = new ArrayList<>();
            result.addAll(super.physicalCubeMeasureGroups(cube));
            if ("Sales".equals(cube.getName())) {
            	MeasureGroupMappingImpl mg;
                result.add(mg = MeasureGroupMappingImpl.builder().withPhysicalCube(cube).build());
                mg.setMeasures(List.of(MeasureMappingImpl.builder()
                            .withName("Unit Sales Foo Bar")
                            .withColumn("unit_sales")
                            .withAggregatorType(MeasureAggregatorType.SUM)
                            .withFormatter(UdfTest.FooBarCellFormatter.class.getName())
                            .withMeasureGroup(mg)
                			.build()));
            }
            return result;
        }
    }

    public static class CompoundSlicerTestModifier2 extends PojoMappingModifier {

        /*
                "<Measure name='Avg Unit Sales' aggregator='avg' column='unit_sales'/>\n"
                        + "<Measure name='Count Unit Sales' aggregator='count' column='unit_sales'/>\n"
                        + "<Measure name='Sum Unit Sales' aggregator='sum' column='unit_sales'/>\n",
        */
        public CompoundSlicerTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends MeasureGroupMapping> physicalCubeMeasureGroups(PhysicalCubeMapping cube) {
        	List<MeasureGroupMapping> result = new ArrayList<>();
            result.addAll(super.physicalCubeMeasureGroups(cube));
            if ("Sales".equals(cube.getName())) {
            	MeasureGroupMappingImpl mg;
                result.add(mg = MeasureGroupMappingImpl.builder().withPhysicalCube(cube).build());
                mg.setMeasures(List.of(
                		MeasureMappingImpl.builder()
                			.withName("Avg Unit Sales")
                			.withColumn("unit_sales")
                			.withAggregatorType(MeasureAggregatorType.AVG)
                			.withMeasureGroup(mg)
                			.build(),
                    	MeasureMappingImpl.builder()
                			.withName("Count Unit Sales")
                			.withColumn("unit_sales")
                			.withAggregatorType(MeasureAggregatorType.COUNT)
                			.withMeasureGroup(mg)
                			.build(),
                        MeasureMappingImpl.builder()
                    		.withName("Sum Unit Sales")
                    		.withColumn("unit_sales")
                    		.withAggregatorType(MeasureAggregatorType.SUM)
                    		.withMeasureGroup(mg)
                    		.build()
                	));
            }
            return result;
        }

    }

    public static class CompoundSlicerTestModifier3 extends PojoMappingModifier {

        /*
                            "<VirtualCubeMeasure cubeName=\"Sales\" name=\"[Measures].[Customer Count]\"/>\n",
                " <CalculatedMember name=\"Unit Sales by Customer\" dimension=\"Measures\">"
                        + "<Formula>Measures.[Unit Sales]/Measures.[Customer Count]</Formula>"
                        + "</CalculatedMember>",

        */
        public CompoundSlicerTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingVirtualCubeMeasure> virtualCubeVirtualCubeMeasure(MappingVirtualCube virtualCube) {
            List<MappingVirtualCubeMeasure> result = new ArrayList<>();
            result.addAll(super.virtualCubeVirtualCubeMeasure(virtualCube));
            if ("Warehouse and Sales".equals(virtualCube.name())) {
                result.add(VirtualCubeMeasureRBuilder.builder()
                    .cubeName("Sales")
                    .name("[Measures].[Customer Count]")
                    .build());
            }
            return result;
        }

        protected String virtualCubeDefaultMeasure(MappingVirtualCube virtualCube) {
            if ("Warehouse and Sales".equals(virtualCube.name())) {
                return "Warehouse Sales";
            }
            return virtualCube.defaultMeasure();
        }

        @Override
        protected List<MappingCalculatedMember> virtualCubeCalculatedMember(MappingVirtualCube virtualCube) {
            List<MappingCalculatedMember> result = new ArrayList<>();
            result.addAll(super.virtualCubeCalculatedMember(virtualCube));
            if ("Warehouse and Sales".equals(virtualCube.name())) {
                result.add(CalculatedMemberRBuilder.builder()
                    .name("Unit Sales by Customer")
                    .dimension("Measures")
                    .formulaElement(FormulaRBuilder.builder()
                        .cdata("Measures.[Unit Sales]/Measures.[Customer Count]")
                        .build())
                    .build());
            }
            return result;
        }
        */

    }

    public static class XmlaHandlerTypeTestModifier extends PojoMappingModifier {

        /*
            "<Measure name='typeMeasure' " + aggregator + datatype + ">\n"
            + "  <MeasureExpression>\n"
            + "  <SQL dialect='generic'>\n"
            + expression
            + "  </SQL></MeasureExpression></Measure>",
        */
        private final String expression;
        private final String type;
        public XmlaHandlerTypeTestModifier(CatalogMapping catalog, String expression, String type) {
            super(catalog);
            this.expression = expression;
            this.type = type;
        }


        protected List<? extends MeasureGroupMapping> physicalCubeMeasureGroups(PhysicalCubeMapping cube) {
        	List<MeasureGroupMapping> result = new ArrayList<>();
            result.addAll(super.physicalCubeMeasureGroups(cube));
            if ("Sales".equals(cube.getName())) {
            	MeasureAggregatorType aggregator = MeasureAggregatorType.SUM;
                if (type != null) {
                    if (type.equals("String")) {
                        aggregator = MeasureAggregatorType.MAX;
                    }
                }
                MeasureGroupMappingImpl mg;
                result.add(mg = MeasureGroupMappingImpl.builder().withPhysicalCube(cube).build());
                mg.setMeasures(List.of(
                		MeasureMappingImpl.builder()
                			.withName("typeMeasure")
                			.withAggregatorType(aggregator)
                			.withDatatype(type != null ? DataType.fromValue(type) : null)
                			.withMeasureExpression(SQLExpressionMappingImpl.builder()
                					.withSqls(List.of(
                						SQLMappingImpl.builder()
                						.withDialects(List.of("generic"))
                						.withStatement(expression)
                						.build()
                							))
                					.build())
                			.build()
                	));
            }
            return result;
        }
    }

    public static class MultipleHierarchyTestModifier1 extends PojoMappingModifier {

        /*
            "<Dimension name=\"NuStore\" foreignKey=\"store_id\">\n"
            + "<Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "  <Table name=\"store\"/>\n"
            + "  <Level name=\"NuStore Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
            + "  <Level name=\"NuStore State\" column=\"store_state\" uniqueMembers=\"true\"/>\n"
            + "  <Level name=\"NuStore City\" column=\"store_city\" uniqueMembers=\"false\"/>\n"
            + "  <Level name=\"NuStore Name\" column=\"store_name\" uniqueMembers=\"true\">\n"
            + "    <Property name=\"NuStore Type\" column=\"store_type\"/>\n"
            + "    <Property name=\"NuStore Manager\" column=\"store_manager\"/>\n"
            + "    <Property name=\"NuStore Sqft\" column=\"store_sqft\" type=\"Numeric\"/>\n"
            + "    <Property name=\"Grocery Sqft\" column=\"grocery_sqft\" type=\"Numeric\"/>\n"
            + "    <Property name=\"Frozen Sqft\" column=\"frozen_sqft\" type=\"Numeric\"/>\n"
            + "    <Property name=\"Meat Sqft\" column=\"meat_sqft\" type=\"Numeric\"/>\n"
            + "    <Property name=\"Has coffee bar\" column=\"coffee_bar\" type=\"Boolean\"/>\n"
            + "    <Property name=\"Street address\" column=\"store_street_address\" type=\"String\"/>\n"
            + "  </Level>\n"
            + "</Hierarchy>\n"
            + "<Hierarchy caption=\"NuStore2\" name=\"NuStore2\" allMemberName=\"All NuStore2s\" hasAll=\"true\" primaryKey=\"NuStore_id\">\n"
            + "  <Table name=\"store\"/>\n"
            + "  <Level name=\"NuStore City\" column=\"store_city\" uniqueMembers=\"false\"/>\n"
            + "  <Level name=\"NuStore Name\" column=\"store_name\"  uniqueMembers=\"true\">\n"
            + "    <Property name=\"NuStore Type\" column=\"store_type\"/>\n"
            + "    <Property name=\"NuStore Manager\" column=\"store_manager\"/>\n"
            + "    <Property name=\"NuStore Sqft\" column=\"store_sqft\" type=\"Numeric\"/>\n"
            + "    <Property name=\"Grocery Sqft\" column=\"grocery_sqft\" type=\"Numeric\"/>\n"
            + "    <Property name=\"Frozen Sqft\" column=\"frozen_sqft\" type=\"Numeric\"/>\n"
            + "    <Property name=\"Meat Sqft\" column=\"meat_sqft\" type=\"Numeric\"/>\n"
            + "    <Property name=\"Has coffee bar\" column=\"coffee_bar\" type=\"Boolean\"/>\n"
            + "    <Property name=\"Street address\" column=\"store_street_address\" type=\"String\"/>\n"
            + "  </Level>\n"
            + "</Hierarchy>\n"
            + "</Dimension>"));
         */


        public MultipleHierarchyTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
            	result.add(DimensionConnectorMappingImpl.builder()
            		.withOverrideDimensionName("NuStore")
            		.withForeignKey("store_id")
            		.withDimension(
            			StandardDimensionMappingImpl.builder()
            				.withName("NuStore")
            				.withHierarchies(List.of(
            					HierarchyMappingImpl.builder()
            						.withHasAll(true)
            						.withPrimaryKey("store_id")
            						.withQuery(TableQueryMappingImpl.builder().withName("store").build())
            						.withLevels(List.of(
            							LevelMappingImpl.builder()
            								.withName("NuStore Country")
            								.withColumn("store_country")
                                            .withUniqueMembers(true)
                                            .build(),
                						LevelMappingImpl.builder()
            								.withName("NuStore State")
            								.withColumn("store_state")
                                            .withUniqueMembers(true)
                                            .build(),
                    					LevelMappingImpl.builder()
                								.withName("NuStore Name")
                								.withColumn("store_name")
                                                .withUniqueMembers(true)
                                                .withMemberProperties(List.of(
                                                	MemberPropertyMappingImpl.builder()
                                                        .withName("NuStore Type")
                                                        .withColumn("store_type")
                                                        .build(),
                                                    MemberPropertyMappingImpl.builder()
                                                        .withName("NuStore Manager")
                                                        .withColumn("store_manager")
                                                        .build(),
                                                    MemberPropertyMappingImpl.builder()
                                                        .withName("NuStore Sqft")
                                                        .withColumn("store_sqft")
                                                        .withDataType(DataType.NUMERIC)
                                                        .build(),
                                                    MemberPropertyMappingImpl.builder()
                                                        .withName("Grocery Sqft")
                                                        .withColumn("grocery_sqft")
                                                        .withDataType(DataType.NUMERIC)
                                                        .build(),
                                                    MemberPropertyMappingImpl.builder()
                                                        .withName("Frozen Sqft")
                                                        .withColumn("frozen_sqft")
                                                        .withDataType(DataType.NUMERIC)
                                                        .build(),
                                                    MemberPropertyMappingImpl.builder()
                                                        .withName("Meat Sqft")
                                                        .withColumn("meat_sqft")
                                                        .withDataType(DataType.NUMERIC)
                                                        .build(),
                                                    MemberPropertyMappingImpl.builder()
                                                        .withName("Has coffee bar")
                                                        .withColumn("coffee_bar")
                                                        .withDataType(DataType.BOOLEAN)
                                                        .build(),
                                                    MemberPropertyMappingImpl.builder()
                                                        .withName("Street address")
                                                        .withColumn("store_street_address")
                                                        .withDataType(DataType.STRING)
                                                        .build()
                                                 ))
                                                .build()
            						))
            						.build(),
                					HierarchyMappingImpl.builder()


                                    .withName("NuStore2")
                                    .withAllMemberName("All NuStore2s")
            						.withHasAll(true)
            						.withPrimaryKey("NuStore_id")
            						.withQuery(TableQueryMappingImpl.builder().withName("store").build())
            						.withLevels(List.of(
            							LevelMappingImpl.builder()
            								.withName("NuStore City")
            								.withColumn("store_city")
                                            .withUniqueMembers(false)
                                            .build(),
                    					LevelMappingImpl.builder()
                								.withName("NuStore Name")
                								.withColumn("store_name")
                                                .withUniqueMembers(true)
                                                .withMemberProperties(List.of(
                                                	MemberPropertyMappingImpl.builder()
                                                        .withName("NuStore Type")
                                                        .withColumn("store_type")
                                                        .build(),
                                                    MemberPropertyMappingImpl.builder()
                                                        .withName("NuStore Manager")
                                                        .withColumn("store_manager")
                                                        .build(),
                                                    MemberPropertyMappingImpl.builder()
                                                        .withName("NuStore Sqft")
                                                        .withColumn("store_sqft")
                                                        .withDataType(DataType.NUMERIC)
                                                        .build(),
                                                    MemberPropertyMappingImpl.builder()
                                                        .withName("Grocery Sqft")
                                                        .withColumn("grocery_sqft")
                                                        .withDataType(DataType.NUMERIC)
                                                        .build(),
                                                    MemberPropertyMappingImpl.builder()
                                                        .withName("Frozen Sqft")
                                                        .withColumn("frozen_sqft")
                                                        .withDataType(DataType.NUMERIC)
                                                        .build(),
                                                    MemberPropertyMappingImpl.builder()
                                                        .withName("Meat Sqft")
                                                        .withColumn("meat_sqft")
                                                        .withDataType(DataType.NUMERIC)
                                                        .build(),
                                                    MemberPropertyMappingImpl.builder()
                                                        .withName("Has coffee bar")
                                                        .withColumn("coffee_bar")
                                                        .withDataType(DataType.BOOLEAN)
                                                        .build(),
                                                    MemberPropertyMappingImpl.builder()
                                                        .withName("Street address")
                                                        .withColumn("store_street_address")
                                                        .withDataType(DataType.STRING)
                                                        .build()
                                                 ))
                                                .build()
            						))
            						.build()
            			    ))
            		        .build()
            		)
                    .build());
            }
            return result;
        }
    }

    public static class MultipleHierarchyTestModifier2 extends PojoMappingModifier {

        /*
            "<Dimension name=\"NuStore\" foreignKey=\"store_id\">\n"
            + "<Hierarchy name=\"NuStore\" hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "  <Table name=\"store\"/>\n"
            + "  <Level name=\"NuStore Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
            + "  <Level name=\"NuStore State\" column=\"store_state\" uniqueMembers=\"true\"/>\n"
            + "  <Level name=\"NuStore City\" column=\"store_city\" uniqueMembers=\"false\"/>\n"
            + "  <Level name=\"NuStore Name\" column=\"store_name\" uniqueMembers=\"true\"/>\n"
            + "</Hierarchy>\n"
            + "<Hierarchy caption=\"NuStore2\" name=\"NuStore2\" allMemberName=\"All NuStore2s\" hasAll=\"true\" primaryKey=\"NuStore_id\">\n"
            + "  <Table name=\"store\"/>\n"
            + "  <Level name=\"NuStore City\" column=\"store_city\" uniqueMembers=\"false\"/>\n"
            + "  <Level name=\"NuStore Name\" column=\"store_name\"  uniqueMembers=\"true\"/>\n"
            + "</Hierarchy>\n"
            + "</Dimension>"));
         */
        public MultipleHierarchyTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
            	result.add(DimensionConnectorMappingImpl.builder()
            		.withOverrideDimensionName("NuStore")
            		.withForeignKey("store_id")
            		.withDimension(
            			StandardDimensionMappingImpl.builder()
            				.withName("NuStore")
            				.withHierarchies(List.of(
            					HierarchyMappingImpl.builder()
            						.withHasAll(true)
            						.withPrimaryKey("store_id")
            						.withQuery(TableQueryMappingImpl.builder().withName("store").build())
            						.withLevels(List.of(
            							LevelMappingImpl.builder()
            								.withName("NuStore Country")
            								.withColumn("store_country")
                                            .withUniqueMembers(true)
                                            .build(),
                						LevelMappingImpl.builder()
            								.withName("NuStore State")
            								.withColumn("store_state")
                                            .withUniqueMembers(true)
                                            .build(),
                    						LevelMappingImpl.builder()
                								.withName("NuStore City")
                								.withColumn("store_city")
                                                .withUniqueMembers(false)
                                                .build(),
                    					LevelMappingImpl.builder()
                								.withName("NuStore Name")
                								.withColumn("store_name")
                                                .withUniqueMembers(true)
                                                .build()
            						))
            						.build(),
                					HierarchyMappingImpl.builder()
                					.withName("NuStore2")
                					.withAllMemberName("All NuStore2s")
            						.withHasAll(true)
            						.withPrimaryKey("NuStore_id")
            						.withQuery(TableQueryMappingImpl.builder().withName("store").build())
            						.withLevels(List.of(
                    					LevelMappingImpl.builder()
                								.withName("NuStore City")
                								.withColumn("store_city")
                                                .withUniqueMembers(false)
                                                .build(),
                    					LevelMappingImpl.builder()
                								.withName("NuStore Name")
                								.withColumn("store_name")
                                                .withUniqueMembers(true)
                                                .build()
            						))
            						.build()
            			    ))
            		        .build()
            		)
                    .build());
            }
            return result;
        }
    }

    public static class PerformanceTestModifier1 extends PojoMappingModifier {

        /*
      "      <Dimension name=\"ACC\" caption=\"Account\" type=\"StandardDimension\" foreignKey=\"customer_id\">\n"
        + "         <Hierarchy hasAll=\"true\" allMemberName=\"All\" primaryKey=\"customer_id\">\n"
        + "            <Table name=\"customer\"/>\n"
        + "            <Level name=\"CODE\" caption=\"Account\" uniqueMembers=\"true\" column=\"account_num\" "
        + "type=\"String\"/>\n"
        + "         </Hierarchy>\n"
        + "      </Dimension>\n"
        + "      <Dimension name=\"Store Name sans All\" type=\"StandardDimension\" foreignKey=\"store_id\">\n"
        + "         <Hierarchy hasAll=\"false\" primaryKey=\"store_id\">\n"
        + "            <Table name=\"store\" />\n"
        + "            <Level name=\"Store Name\" uniqueMembers=\"true\" column=\"store_number\" type=\"Numeric\" "
        + "ordinalColumn=\"store_name\"/>\n"
        + "         </Hierarchy>\n"
        + "      </Dimension>\n",
      "      <CalculatedMember dimension=\"Measures\" name=\"EXP2_4\" formula=\"IIf([ACC].CurrentMember.Level.Ordinal"
        + " = [ACC].[All].Ordinal, Sum([ACC].[All].Children, [Measures].[Unit Sales]),     [Measures].[Unit Sales])"
        + "\"/>\n"
        + "      <CalculatedMember dimension=\"Measures\" name=\"EXP2\" formula=\"IIf(0 &#60; [Measures].[EXP2_4], "
        + "[Measures].[EXP2_4], NULL)\"/>\n" ));
         */

        public PerformanceTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
            	result.add(DimensionConnectorMappingImpl.builder()
            		.withOverrideDimensionName("ACC")
            		//.withCaption("Account")
            		.withForeignKey("customer_id")
            		.withDimension(
            			StandardDimensionMappingImpl.builder()
            				.withName("ACC")
            				.withHierarchies(List.of(
            					HierarchyMappingImpl.builder()
            						.withHasAll(true)
            						.withAllMemberName("All")
            						.withPrimaryKey("customer_id")
            						.withQuery(TableQueryMappingImpl.builder().withName("customer").build())
            						.withLevels(List.of(
            							LevelMappingImpl.builder()
            								.withName("CODE")
            								//.withCaption("Account")
            								.withColumn("account_num")
                                            .withUniqueMembers(true)
                                            .withType(DataType.STRING)
                                            .build()
            						))
            						.build()
            			    ))
            		        .build()
            		)
                    .build());

            	result.add(DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Store Name sans All")
                		//.withCaption("Account")
                		.withForeignKey("store_id")
                		.withDimension(
                			StandardDimensionMappingImpl.builder()
                				.withName("Store Name sans All")
                				.withHierarchies(List.of(
                					HierarchyMappingImpl.builder()
                						.withHasAll(false)
                						.withPrimaryKey("store_id")
                						.withQuery(TableQueryMappingImpl.builder().withName("store").build())
                						.withLevels(List.of(
                							LevelMappingImpl.builder()
                								.withName("Store Name")
                								.withColumn("store_number")
                                                .withUniqueMembers(true)
                                                .withType(DataType.NUMERIC)
                                                .withOrdinalColumn("store_name")
                                                .build()
                						))
                						.build()
                			    ))
                		        .build()
                		)
                        .build());
            }
            return result;
        }

        @Override
        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(CalculatedMemberMappingImpl.builder()
                	.withName("EXP2_4")
                    .withFormula("IIf([ACC].CurrentMember.Level.Ordinal = [ACC].[All].Ordinal, Sum([ACC].[All].Children, [Measures].[Unit Sales]), [Measures].[Unit Sales])")
                    .build());
                result.add(CalculatedMemberMappingImpl.builder()
                    .withName("EXP2")
                    .withFormula("IIf(0 < [Measures].[EXP2_4], [Measures].[EXP2_4], NULL)")
                    .build());
            }
            return result;
        }
    }

    public static class Ssas2005CompatibilityTestModifier1 extends PojoMappingModifier {

        /*
            "<Dimension name=\"Store Type 2\" foreignKey=\"store_id\">"
            + " <Hierarchy name=\"Store Type 2\" hasAll=\"true\" primaryKey=\"store_id\">"
            + " <Table name=\"store\"/>"
            + " <Level name=\"Store Type\" column=\"store_type\" uniqueMembers=\"true\"/>"
            + " </Hierarchy>"
            + "</Dimension>",
            */
        public Ssas2005CompatibilityTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }


        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
            	result.add(DimensionConnectorMappingImpl.builder()
            		.withOverrideDimensionName("Store Type 2")
            		.withForeignKey("store_id")
            		.withDimension(
            			StandardDimensionMappingImpl.builder()
            				.withName("Store Type 2")
            				.withHierarchies(List.of(
            					HierarchyMappingImpl.builder()
            						.withHasAll(true)
            						.withPrimaryKey("store_id")
            						.withQuery(TableQueryMappingImpl.builder().withName("store").build())
            						.withLevels(List.of(
            							LevelMappingImpl.builder()
            								.withName("Store Type")
            								.withColumn("store_type")
                                            .withUniqueMembers(true)
                                            .build()
            						))
            						.build()
            			    ))
            		        .build()
            		)
                    .build());
            }
            return result;
        }

    }

    public static class Ssas2005CompatibilityTestModifier2 extends PojoMappingModifier {

        /*
             "<Dimension name=\"SameName\" foreignKey=\"customer_id\">\n"
             + " <Hierarchy hasAll=\"true\" primaryKey=\"id\">\n"
             + " <InlineTable alias=\"sn\">\n"
             + " <ColumnDefs>\n"
             + " <ColumnDef name=\"id\" type=\"Numeric\" />\n"
             + " <ColumnDef name=\"desc\" type=\"String\" />\n"
             + " </ColumnDefs>\n"
             + " <Rows>\n"
             + " <Row>\n"
             + " <Value column=\"id\">1</Value>\n"
             + " <Value column=\"desc\">SameName</Value>\n"
             + " </Row>\n"
             + " </Rows>\n"
             + " </InlineTable>\n"
             + " <Level name=\"SameName\" column=\"desc\" uniqueMembers=\"true\" />\n"
             + " </Hierarchy>\n"
             + "</Dimension>"));
            */

        InlineTableQueryMappingImpl i = InlineTableQueryMappingImpl.builder()
                .withAlias("sn")
                .withColumnDefinitions(List.of(
                	InlineTableColumnDefinitionMappingImpl.builder()
                        .withName("id")
                        .withType(DataType.NUMERIC)
                        .build(),
                    InlineTableColumnDefinitionMappingImpl.builder()
                    	.withName("desc")
                    	.withType(DataType.STRING)
                        .build()
                ))
                .withRows(List.of(
                	InlineTableRowMappingImpl.builder()
                        .withCells(List.of(
                        	InlineTableRowCellMappingImpl.builder()
                        		.withColumnName("id")
                        		.withValue("1")
                                .build(),
                            InlineTableRowCellMappingImpl.builder()
                            	.withColumnName("desc")
                            	.withValue("SameName")
                                .build()
                        ))
                        .build()
                ))
                .build();

        public Ssas2005CompatibilityTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
            	result.add(DimensionConnectorMappingImpl.builder()
            		.withOverrideDimensionName("SameName")
            		.withForeignKey("customer_id")
            		.withDimension(
            			StandardDimensionMappingImpl.builder()
            				.withName("SameName")
            				.withHierarchies(List.of(
            					HierarchyMappingImpl.builder()
            						.withHasAll(true)
            						.withPrimaryKey("id")
            						.withQuery(i)
            						.withLevels(List.of(
            							LevelMappingImpl.builder()
            								.withName("SameName")
            								.withColumn("desc")
                                            .withUniqueMembers(true)
                                            .build()
            						))
            						.build()
            			    ))
            		        .build()
            		)
                    .build());
            }
            return result;
        }

    }

    public static class Ssas2005CompatibilityTestModifier3 extends PojoMappingModifier {

        /*
                "  <Dimension name=\"Customer Last Name\" "
                + "foreignKey=\"customer_id\">\n"
                + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Customers\""
                + " primaryKey=\"customer_id\">\n"
                + "      <Table name=\"customer\"/>\n"
                + "      <Level name=\"Last Name\" column=\"lname\" keyColumn=\"customer_id\" uniqueMembers=\"true\"/>\n"
                + "    </Hierarchy>\n"
                + "  </Dimension>\n"));
            */
        public Ssas2005CompatibilityTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
            	result.add(DimensionConnectorMappingImpl.builder()
            		.withOverrideDimensionName("Customer Last Name")
            		.withForeignKey("customer_id")
            		.withDimension(
            			StandardDimensionMappingImpl.builder()
            				.withName("Customer Last Name")
            				.withHierarchies(List.of(
            					HierarchyMappingImpl.builder()
            						.withHasAll(true)
            						.withAllMemberName("All Customers")
            						.withPrimaryKey("customer_id")
            						.withQuery(TableQueryMappingImpl.builder().withName("customer").build())
            						.withLevels(List.of(
            							LevelMappingImpl.builder()
            								.withName("Last Name")
            								.withColumn("lname")
                                            .withUniqueMembers(true)
                                            .build()
            						))
            						.build()
            			    ))
            		        .build()
            		)
                    .build());
            }
            return result;
        }
    }

    public static class Ssas2005CompatibilityTestModifier4 extends PojoMappingModifier {

        /*
            final String cubeName = "Sales_inline";
            "<Cube name=\"" + cubeName + "\">\n"
            + "  <Table name=\"sales_fact_1997\"/>\n"
            + "  <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
            + "  <Dimension name=\"Alternative Promotion\" foreignKey=\"promotion_id\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"promo_id\">\n"
            + "      <InlineTable alias=\"alt_promotion\">\n"
            + "        <ColumnDefs>\n"
            + "          <ColumnDef name=\"promo_id\" type=\"Numeric\"/>\n"
            + "          <ColumnDef name=\"promo_name\" type=\"String\"/>\n"
            + "        </ColumnDefs>\n"
            + "        <Rows>\n"
            + "          <Row>\n"
            + "            <Value column=\"promo_id\">0</Value>\n"
            + "            <Value column=\"promo_name\">Promo0</Value>\n"
            + "          </Row>\n"
            + "          <Row>\n"
            + "            <Value column=\"promo_id\">1</Value>\n"
            + "          </Row>\n"
            + "        </Rows>\n"
            + "      </InlineTable>\n"
            + "      <Level name=\"Alternative Promotion\" column=\"promo_name\" uniqueMembers=\"true\"/> \n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\" visible=\"false\"/>\n"
            + "  <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n"
            + "</Cube>",
            */
        public Ssas2005CompatibilityTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends CubeMapping> schemaCubes(SchemaMapping catalogOriginal) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.schemaCubes(catalogOriginal));
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("Sales_inline")
                .withQuery(TableQueryMappingImpl.builder().withName("sales_fact_1997").build())
                .withDimensionConnectors(List.of(
                	DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Time")
                		.withForeignKey("time_id")
                		.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_TIME))
                		.build(),
                    DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Alternative Promotion")
                		.withForeignKey("promotion_id")
                		.withDimension(
                			StandardDimensionMappingImpl.builder()
                                .withName("Alternative Promotion")
                                .withHierarchies(List.of(
                                    HierarchyMappingImpl.builder()
                                        .withHasAll(true)
                                        .withPrimaryKey("promo_id")
                                        .withQuery(InlineTableQueryMappingImpl.builder()
                                            .withAlias("alt_promotion")
                                            .withColumnDefinitions(List.of(
                                            	InlineTableColumnDefinitionMappingImpl.builder()
                                                    .withName("promo_id")
                                                    .withType(DataType.NUMERIC)
                                                    .build(),
                                                InlineTableColumnDefinitionMappingImpl.builder()
                                                    .withName("promo_name")
                                                    .withType(DataType.STRING)
                                                    .build()
                                            ))
                                            .withRows(List.of(
                                            	InlineTableRowMappingImpl.builder()
                                            	    .withCells(List.of(
                                            	    	InlineTableRowCellMappingImpl.builder()
                                            	    	    .withColumnName("promo_id")
                                            	    	    .withValue("0")
                                                            .build(),
                                                        InlineTableRowCellMappingImpl.builder()
                                                        	.withColumnName("promo_name")
                                                            .withValue("Promo0")
                                                            .build()
                                                    ))
                                                    .build(),
                                               InlineTableRowMappingImpl.builder()
                                                    .withCells(List.of(
                                                    	InlineTableRowCellMappingImpl.builder()
                                                            .withColumnName("promo_id")
                                                            .withValue("1")
                                                            .build()
                                                    ))
                                                    .build()
                                            ))
                                            .build())
                                        .withLevels(List.of(
                                            LevelMappingImpl.builder()
                                                .withName("Alternative Promotion")
                                                .withColumn("promo_name")
                                                .withUniqueMembers(true)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build())
                		.build()
                	)
                )
                .withMeasureGroups(List.of(MeasureGroupMappingImpl.builder()
                		.withMeasures(List.of(
                            MeasureMappingImpl.builder()
                                .withName("Unit Sales")
                                .withColumn("unit_sales")
                                .withAggregatorType(MeasureAggregatorType.SUM)
                                .withFormatString("Standard")
                                .withVisible(false)
                                .build(),
                            MeasureMappingImpl.builder()
                            	.withName("Store Sales")
                            	.withColumn("store_sales")
                            	.withAggregatorType(MeasureAggregatorType.SUM)
                            	.withFormatString("#,###.00")
                                .build()
                        ))
                        .build()
                )).build());
            return result;

        }
    }

    public static class PerformanceTestModifier2 extends PojoMappingModifier {

        /*
          "<Dimension name=\"Gender%d \" foreignKey=\"customer_id\">"
            + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Gender\" primaryKey=\"customer_id\">"
            + "    <Table name=\"customer\"/>"
            + "    <Level name=\"Gender\" column=\"gender\" uniqueMembers=\"true\"/>"
            + "  </Hierarchy>"
            + "</Dimension>"         */
        public PerformanceTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                for (int i = 0; i < 1000; i++) {
            	result.add(DimensionConnectorMappingImpl.builder()
            		.withOverrideDimensionName(new StringBuilder("Gender").append(i).toString())
            		.withForeignKey("customer_id")
            		.withDimension(
            			StandardDimensionMappingImpl.builder()
            				.withName(new StringBuilder("Gender").append(i).toString())
            				.withHierarchies(List.of(
            					HierarchyMappingImpl.builder()
            						.withHasAll(true)
            						.withAllMemberName("All Gender")
            						.withPrimaryKey("customer_id")
            						.withQuery(TableQueryMappingImpl.builder().withName("customer").build())
            						.withLevels(List.of(
            							LevelMappingImpl.builder()
            								.withName("Gender")
            								.withColumn("gender")
                                            .withUniqueMembers(true)
                                            .build()
            						))
            						.build()
            			    ))
            		        .build()
            		)
                    .build());
                }
            }
            return result;
        }
    }

    public static class PerformanceTestModifier3 extends PojoMappingModifier {

        public PerformanceTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        /*
        "<Role name='Role1'>\n"
          + "  <SchemaGrant access='none'>\n"
          + "    <CubeGrant cube='Sales' access='all'>\n"
          + "      <HierarchyGrant hierarchy='[Store Type]' access='custom' rollupPolicy='partial'>\n"
          + "        <MemberGrant member='[Store Type].[All Store Types]' access='all'/>\n"
          + "        <MemberGrant member='[Store Type].[Supermarket]' access='none'/>\n"
          + "      </HierarchyGrant>\n"
          + "      <HierarchyGrant hierarchy='[Customers]' access='custom' rollupPolicy='partial'>\n"
          + "        <MemberGrant member='[Customers].[All Customers]' access='all'/>\n"
          + "        <MemberGrant member='[Customers].[USA].[CA].[Los Angeles]' access='none'/>\n"
          + "      </HierarchyGrant>\n"
          + "      <HierarchyGrant hierarchy='[Product]' access='custom' rollupPolicy='partial'>\n"
          + "        <MemberGrant member='[Product].[All Products]' access='all'/>\n"
          + "        <MemberGrant member='[Product].[Drink]' access='none'/>\n"
          + "      </HierarchyGrant>\n"
          + "      <HierarchyGrant hierarchy='[Promotion Media]' access='custom' rollupPolicy='partial'>\n"
          + "        <MemberGrant member='[Promotion Media].[All Media]' access='all'/>\n"
          + "        <MemberGrant member='[Promotion Media].[TV]' access='none'/>\n"
          + "      </HierarchyGrant>\n"
          + "      <HierarchyGrant hierarchy='[Education Level]' access='custom' rollupPolicy='partial'>\n"
          + "        <MemberGrant member='[Education Level].[All Education Levels]' access='all'/>\n"
          + "        <MemberGrant member='[Education Level].[Graduate Degree]' access='none'/>\n"
          + "      </HierarchyGrant>\n"
          + "    </CubeGrant>\n"
          + "  </SchemaGrant>\n"
          + "</Role>\n" );
         */

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(AccessRoleMappingImpl.builder()
                .withName("Role1")
                .withAccessSchemaGrants(List.of(
                		AccessSchemaGrantMappingImpl.builder()
                		.withAccess(AccessSchema.NONE)
                		.withCubeGrant(List.of(
                			AccessCubeGrantMappingImpl.builder()
                                .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                .withAccess(AccessCube.ALL)
                                .withHierarchyGrants(List.of(
                                	AccessHierarchyGrantMappingImpl.builder()
                                        .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.HIERARCHY_STORE_TYPE))
                                        .withAccess(AccessHierarchy.CUSTOM)
                                        .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                        .withMemberGrants(List.of(
                                        	AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Store Type].[All Store Types]")
                                                .withAccess(AccessMember.ALL)
                                                .build(),
                                            AccessMemberGrantMappingImpl.builder()
                                            	.withMember("[Store Type].[Supermarket]")
                                                .withAccess(AccessMember.NONE)
                                                .build()
                                        ))
                                        .build(),
                                    AccessHierarchyGrantMappingImpl.builder()
                                        .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.customersHierarchy))
                                        .withAccess(AccessHierarchy.CUSTOM)
                                        .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                        .withMemberGrants(List.of(
                                        	AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Customers].[All Customers]")
                                                .withAccess(AccessMember.ALL)
                                                .build(),
                                            AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Customers].[USA].[CA].[Los Angeles]")
                                                .withAccess(AccessMember.NONE)
                                                .build()
                                        ))
                                        .build(),
                                    AccessHierarchyGrantMappingImpl.builder()
                                        .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.HIERARCHY_PRODUCT1))
                                        .withAccess(AccessHierarchy.CUSTOM)
                                        .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                        .withMemberGrants(List.of(
                                        	AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Product].[All Products]")
                                                .withAccess(AccessMember.ALL)
                                                .build(),
                                            AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Product].[Drink]")
                                                .withAccess(AccessMember.NONE)
                                                .build()
                                        ))
                                        .build(),
                                    AccessHierarchyGrantMappingImpl.builder()
                                    	.withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.HIERARCHY_PROMOTION_MEDIA))
                                        .withAccess(AccessHierarchy.CUSTOM)
                                        .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                        .withMemberGrants(List.of(
                                        	AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Promotion Media].[All Media]")
                                                .withAccess(AccessMember.ALL)
                                                .build(),
                                            AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Promotion Media].[TV]")
                                                .withAccess(AccessMember.NONE)
                                                .build()
                                        ))
                                        .build(),
                                    AccessHierarchyGrantMappingImpl.builder()
                                    	.withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.HIERARCHY_EDUCATION_LEVEL))
                                        .withAccess(AccessHierarchy.CUSTOM)
                                        .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                        .withMemberGrants(List.of(
                                        	AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Education Level].[All Education Levels]")
                                                .withAccess(AccessMember.ALL)
                                                .build(),
                                            AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Education Level].[Graduate Degree]")
                                                .withAccess(AccessMember.NONE)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .build());
            return result;
        }
    }
    public static class PerformanceTestModifier4 extends PojoMappingModifier {

        /*
      "<UserDefinedFunction name=\"StringMult\" className=\""
        + CounterUdf.class.getName()
        + "\"/>\n",

            */


        public PerformanceTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("StringMult")
                .className(PerformanceTest.CounterUdf.class.getName())
                .build());
            return result;
        }
        */
    }

    public static class NativeSetEvaluationTestModifier extends PojoMappingModifier {

        /*
                <DimensionUsage name="PurchaseDate" source="Time" foreignKey="time_id"/>
            */
        public NativeSetEvaluationTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
            	result.add(DimensionConnectorMappingImpl.builder()
            		.withOverrideDimensionName("PurchaseDate")
            		.withForeignKey("time_id")
            		.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_TIME))
                    .build());
            }
            return result;
        }
    }

    public static class Olap4jTestModifier extends PojoMappingModifier {

        /*
            <CalculatedMember name='H1 1997' formula='Aggregate([Time].[1997].[Q1]:[Time].[1997].[Q2])' dimension='Time' />
         */
        public Olap4jTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(CalculatedMemberMappingImpl.builder()
                    .withName("H1 1997")
                    .withFormula("Aggregate([Time].[1997].[Q1]:[Time].[1997].[Q2])")
                    .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.HIERARCHY_TIME1))
                    //.dimension("Time")
                    .build());
            }
            return result;
        }
    }

    public static class ScenarioTestModifier1 extends PojoMappingModifier {

        /*
                "<Dimension name='Scenario' foreignKey='time_id'>\n"
                + "  <Hierarchy primaryKey='time_id' hasAll='true'>\n"
                + "    <InlineTable alias='foo'>\n"
                + "      <ColumnDefs>\n"
                + "        <ColumnDef name='foo' type='Numeric'/>\n"
                + "      </ColumnDefs>\n"
                + "      <Rows/>\n"
                + "    </InlineTable>\n"
                + "    <Level name='Scenario' column='foo'/>\n"
                + "  </Hierarchy>\n"
                + "</Dimension>",
                "<Measure name='Atomic Cell Count' aggregator='count'/>"));

            */

        public ScenarioTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
            	result.add(DimensionConnectorMappingImpl.builder()
            		.withOverrideDimensionName("Scenario")
            		.withForeignKey("time_id")
            		.withDimension(StandardDimensionMappingImpl.builder()
            				.withName("Scenario")
                            .withHierarchies(List.of(
                                    HierarchyMappingImpl.builder()
                                        .withPrimaryKey("time_id")
                                        .withHasAll(true)
                                        .withQuery(InlineTableQueryMappingImpl.builder()
                                            .withAlias("foo")
                                            .withColumnDefinitions(List.of(
                                            	InlineTableColumnDefinitionMappingImpl.builder()
                                            		.withName("foo")
                                            		.withType(DataType.NUMERIC)
                                                    .build()
                                            ))
                                            .withRows(List.of())
                                            .build())
                                        .withLevels(List.of(
                                            LevelMappingImpl.builder()
                                                .withName("Scenario")
                                                .withColumn("foo")
                                                .build()
                                        ))
                                        .build()
                                )).build()
                    ).build());
            }
            return result;
        }

        protected List<? extends MeasureGroupMapping> physicalCubeMeasureGroups(PhysicalCubeMapping cube) {
            List<MeasureGroupMapping> result = new ArrayList<>();
            result.addAll(super.physicalCubeMeasureGroups(cube));
            if ("Sales".equals(cube.getName())) {
            	MeasureGroupMappingImpl mg;
                result.add(mg = MeasureGroupMappingImpl.builder().withPhysicalCube(cube).build());
                	mg.setMeasures(List.of(MeasureMappingImpl.builder()
                            .withName("Atomic Cell Count")
                            .withAggregatorType(MeasureAggregatorType.COUNT)
                			.build()));
            }
            return result;

        }

    }

    public static class SolveOrderScopeIsolationTestModifier extends PojoMappingModifier {

        /*
        "<CalculatedMember\n"
        + "    name=\"maleMinusFemale\"\n"
        + "    dimension=\"gender\"\n"
        + "    visible=\"false\"\n"
        + "    formula=\"gender.m - gender.f\">\n"
        + "  <CalculatedMemberProperty name=\"SOLVE_ORDER\" value=\"3000\"/>\n"
        + "</CalculatedMember>"
        + "<CalculatedMember\n"
        + "    name=\"ProfitSolveOrder3000\"\n"
        + "    dimension=\"Measures\">\n"
        + "  <Formula>[Measures].[Store Sales] - [Measures].[Store Cost]</Formula>\n"
        + "  <CalculatedMemberProperty name=\"SOLVE_ORDER\" value=\"3000\"/>\n"
        + "  <CalculatedMemberProperty name=\"FORMAT_STRING\" value=\"$#,##0.000000\"/>\n"
        + "</CalculatedMember>"
        + "<CalculatedMember\n"
        + "    name=\"ratio\"\n"
        + "    dimension=\"measures\"\n"
        + "    visible=\"false\"\n"
        + "    formula=\"measures.[unit sales] / measures.[sales count]\">\n"
        + "  <CalculatedMemberProperty name=\"FORMAT_STRING\" value=\"0.0#\"/>\n"
        + "  <CalculatedMemberProperty name=\"SOLVE_ORDER\" value=\"10\"/>\n"
        + "</CalculatedMember>"
        + "<CalculatedMember\n"
        + "    name=\"Total\"\n"
        + "    hierarchy=\"[Time].[Time]\"\n"
        + "    visible=\"false\"\n"
        + "    formula=\"AGGREGATE({[Time].[1997].[Q1],[Time].[1997].[Q2]})\">\n"
        + "  <CalculatedMemberProperty name=\"SOLVE_ORDER\" value=\"20\"/>\n"
        + "</CalculatedMember>";
         */
        public SolveOrderScopeIsolationTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(CalculatedMemberMappingImpl.builder()
                    .withName("maleMinusFemale")
                    //.dimension("gender")
                    .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.genderHierarchy))
                    .withVisible(false)
                    .withFormula("gender.m - gender.f")
                    .withCalculatedMemberProperties(List.of(
                        CalculatedMemberPropertyMappingImpl.builder()
                            .withName("SOLVE_ORDER")
                            .withValue("3000")
                            .build()
                    ))
                    .build());
                result.add(CalculatedMemberMappingImpl.builder()
                    .withName("ProfitSolveOrder3000")
                    //.dimension("Measures")
                    .withFormatString("[Measures].[Store Sales] - [Measures].[Store Cost]")
                    .withCalculatedMemberProperties(List.of(
                    	CalculatedMemberPropertyMappingImpl.builder()
                            .withName("SOLVE_ORDER")
                            .withValue("3000")
                            .build(),
                        CalculatedMemberPropertyMappingImpl.builder()
                            .withName("FORMAT_STRING")
                            .withValue("$#,##0.000000")
                            .build()
                    ))
                    .build());
                result.add(CalculatedMemberMappingImpl.builder()
                    .withName("ratio")
                    //.dimension("measures")
                    .withFormula("measures.[unit sales] / measures.[sales count]")
                    .withCalculatedMemberProperties(List.of(
                    	CalculatedMemberPropertyMappingImpl.builder()
                            .withName("FORMAT_STRING")
                            .withValue("0.0#")
                            .build(),
                       CalculatedMemberPropertyMappingImpl.builder()
                            .withName("SOLVE_ORDER")
                            .withValue("10")
                            .build()
                        ))
                    .build());
                result.add(CalculatedMemberMappingImpl.builder()
                    .withName("Total")
                    .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.HIERARCHY_TIME1))
                    .withVisible(false)
                    .withFormula("AGGREGATE({[Time].[1997].[Q1],[Time].[1997].[Q2]})")
                    .withCalculatedMemberProperties(List.of(
                    	CalculatedMemberPropertyMappingImpl.builder()
                            .withName("SOLVE_ORDER")
                            .withValue("20")
                            .build()
                    ))
                    .build());
            }
            return result;
        }

    }

    public static class UdfTestModifier1 extends PojoMappingModifier {

        /*
            "<Measure name='Unit Sales Foo Bar' column='unit_sales'\n"
            + "    aggregator='sum' formatString='Standard' formatter='"
            + FooBarCellFormatter.class.getName()
            + "'/>");
        */
        public UdfTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends MeasureGroupMapping> physicalCubeMeasureGroups(PhysicalCubeMapping cube) {
            List<MeasureGroupMapping> result = new ArrayList<>();
            result.addAll(super.physicalCubeMeasureGroups(cube));
            if ("Sales".equals(cube.getName())) {
            	MeasureGroupMappingImpl mg;
                result.add(mg = MeasureGroupMappingImpl.builder().withPhysicalCube(cube).build());
                mg.setMeasures(List.of(MeasureMappingImpl.builder()
                            .withName("Unit Sales Foo Bar")
                            .withColumn("unit_sales")
                            .withAggregatorType(MeasureAggregatorType.SUM)
                            .withFormatString("Standard")
                            .withFormatter(UdfTest.FooBarCellFormatter.class.getName())
                			.build()));
            }
            return result;
        }

    }

    public static class UdfTestModifier2 extends PojoMappingModifier {

         /*
           "<Measure name='Unit Sales Foo Bar' column='unit_sales'\n"
            + "    aggregator='sum' formatString='Standard'>\n"
            + "  <CellFormatter>\n"
            + "    <Script>\n"
            + "      return \"foo\" + value + \"bar\";\n"
            + "    </Script>\n"
            + "  </CellFormatter>\n"
            + "</Measure>");

        */
        public UdfTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends MeasureGroupMapping> physicalCubeMeasureGroups(PhysicalCubeMapping cube) {
            List<MeasureGroupMapping> result = new ArrayList<>();
            result.addAll(super.physicalCubeMeasureGroups(cube));
            if ("Sales".equals(cube.getName())) {
            	MeasureGroupMappingImpl mg;
                result.add(mg = MeasureGroupMappingImpl.builder().withPhysicalCube(cube).build());
                mg.setMeasures(List.of(MeasureMappingImpl.builder()
                            .withName("Unit Sales Foo Bar")
                            .withColumn("unit_sales")
                            .withAggregatorType(MeasureAggregatorType.SUM)
                            .withFormatString("Standard")
                            .withCellFormatter(CellFormatterMappingImpl.builder()
                            		.withRef("return \"foo\" + value + \"bar\";")
                            		.build())
                			.build()));
            }
            return result;
        }

    }

    public static class UdfTestModifier3 extends PojoMappingModifier {

        /*
                        "<CalculatedMember\n"
            + "  name='Unit Sales Foo Bar'\n"
            + "      dimension='Measures'>\n"
            + "  <Formula>[Measures].[Unit Sales]</Formula>\n"
            + "  <CalculatedMemberProperty name='CELL_FORMATTER' value='"
            + FooBarCellFormatter.class.getName()
            + "'/>\n"
            + "</CalculatedMember>");

         */
        public UdfTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(CalculatedMemberMappingImpl.builder()
                    .withName("Unit Sales Foo Bar")
                    .withFormula("[Measures].[Unit Sales]")
                    //.dimension("Measures")
                    .withCalculatedMemberProperties(List.of(
                        CalculatedMemberPropertyMappingImpl.builder()
                            .withName("CELL_FORMATTER")
                            .withValue(UdfTest.FooBarCellFormatter.class.getName())
                            .build()
                    ))
                    .build());
            }
            return result;
        }
    }

    public static class UdfTestModifier4 extends PojoMappingModifier {

        /*
            "<CalculatedMember\n"
            + "  name='Unit Sales Foo Bar'\n"
            + "      dimension='Measures'>\n"
            + "  <Formula>[Measures].[Unit Sales]</Formula>\n"
            + "  <CellFormatter className='"
            + FooBarCellFormatter.class.getName()
            + "'/>\n"
            + "</CalculatedMember>");
         */
        public UdfTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(CalculatedMemberMappingImpl.builder()
                    .withName("Unit Sales Foo Bar")
                    .withFormula("[Measures].[Unit Sales]")
                    //.dimension("Measures")
                    .withCellFormatter(CellFormatterMappingImpl.builder()
                    		.withRef(UdfTest.FooBarCellFormatter.class.getName())
                    		.build())
                    .build());
            }
            return result;
        }

    }

    public static class UdfTestModifier5 extends PojoMappingModifier {

        /*
            "<CalculatedMember\n"
            + "  name='Unit Sales Foo Bar'\n"
            + "      dimension='Measures'>\n"
            + "  <Formula>[Measures].[Unit Sales]</Formula>\n"
            + "  <CellFormatter>\n"
            + "    <Script>\n"
            + "      return \"foo\" + value + \"bar\";\n"
            + "    </Script>\n"
            + "  </CellFormatter>\n"
            + "</CalculatedMember>");
         */
        public UdfTestModifier5(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(CalculatedMemberMappingImpl.builder()
                    .withName("Unit Sales Foo Bar")
                    .withFormula("[Measures].[Unit Sales]")
                    //.dimension("Measures")
                    .withCellFormatter(CellFormatterMappingImpl.builder()
                    		.withRef("return \"foo\" + value + \"bar\";\n")
                    		.build())
                    .build());
            }
            return result;
        }
    }

    public static class UdfTestModifier6 extends PojoMappingModifier {

        /*
            "  <Dimension name='Promotion Media2' foreignKey='promotion_id'>\n"
            + "    <Hierarchy hasAll='true' allMemberName='All Media' primaryKey='promotion_id'>\n"
            + "      <Table name='promotion'/>\n"
            + "      <Level name='Media Type' column='media_type'\n"
            + "          uniqueMembers='true' formatter='"
            + FooBarMemberFormatter.class.getName()
            + "'/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>"));
            */


        public UdfTestModifier6(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
            	result.add(DimensionConnectorMappingImpl.builder()
            		.withOverrideDimensionName("Promotion Media2")
            		.withForeignKey("promotion_id")
            		.withDimension(
            			StandardDimensionMappingImpl.builder()
            				.withName("Promotion Media2")
            				.withHierarchies(List.of(
            					HierarchyMappingImpl.builder()
            						.withHasAll(true)
            						.withAllMemberName("All Media")
            						.withPrimaryKey("promotion_id")
            						.withQuery(TableQueryMappingImpl.builder().withName("promotion").build())
            						.withLevels(List.of(
            							LevelMappingImpl.builder()
            								.withName("Media Type")
            								.withColumn("media_type")
                                            .withUniqueMembers(true)
                                            //.withFormatter(UdfTest.FooBarMemberFormatter.class.getName())
                                            .withMemberFormatter(MemberFormatterMappingImpl.builder()
                                            		.withRef(UdfTest.FooBarMemberFormatter.class.getName())
                                            		.build())
                                            .build()
            						))
            						.build()
            			    ))
            		        .build()
            		)
                    .build());
            }
            return result;
        }

    }

    public static class UdfTestModifier7 extends PojoMappingModifier {

        /*
            "  <Dimension name='Promotion Media2' foreignKey='promotion_id'>\n"
            + "    <Hierarchy hasAll='true' allMemberName='All Media' primaryKey='promotion_id'>\n"
            + "      <Table name='promotion'/>\n"
            + "      <Level name='Media Type' column='media_type'\n"
            + "          uniqueMembers='true'>\n"
            + "        <MemberFormatter>\n"
            + "          <Script language='JavaScript'>\n"
            + "             return \"foo\" + member.getName() + \"bar\"\n"
            + "          </Script>\n"
            + "        </MemberFormatter>\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>"));

            */

        public UdfTestModifier7(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
            	result.add(DimensionConnectorMappingImpl.builder()
            		.withOverrideDimensionName("Promotion Media2")
            		.withForeignKey("promotion_id")
            		.withDimension(
            			StandardDimensionMappingImpl.builder()
            				.withName("Promotion Media2")
            				.withHierarchies(List.of(
            					HierarchyMappingImpl.builder()
            						.withHasAll(true)
            						.withAllMemberName("All Media")
            						.withPrimaryKey("promotion_id")
            						.withQuery(TableQueryMappingImpl.builder().withName("promotion").build())
            						.withLevels(List.of(
            							LevelMappingImpl.builder()
            								.withName("Media Type")
            								.withColumn("media_type")
                                            .withUniqueMembers(true)
                                            //.withFormatter(UdfTest.FooBarMemberFormatter.class.getName())
                                            .withMemberFormatter(MemberFormatterMappingImpl.builder()
                                            		.withRef("return \"foo\" + member.getName() + \"bar\"\n")
                                            		.build())
                                            .build()
            						))
            						.build()
            			    ))
            		        .build()
            		)
                    .build());
            }
            return result;
        }
    }

    public static class UdfTestModifier8 extends PojoMappingModifier {

        /*
            "<Dimension name='Promotions2' foreignKey='promotion_id'>\n"
            + "  <Hierarchy hasAll='true' allMemberName='All Promotions' primaryKey='promotion_id' defaultMember='[All Promotions]'>\n"
            + "    <Table name='promotion'/>\n"
            + "    <Level name='Promotion Name' column='promotion_id' uniqueMembers='true'>\n"
            + "      <Property name='Medium' column='media_type' formatter='"
            + FooBarPropertyFormatter.class.getName()
            + "'/>\n"
            + "    </Level>\n"
            + "  </Hierarchy>\n"
            + "</Dimension>"));

            */


        public UdfTestModifier8(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
            	result.add(DimensionConnectorMappingImpl.builder()
            		.withOverrideDimensionName("Promotions2")
            		.withForeignKey("promotion_id")
            		.withDimension(
            			StandardDimensionMappingImpl.builder()
            				.withName("Promotions2")
            				.withHierarchies(List.of(
            					HierarchyMappingImpl.builder()
            						.withHasAll(true)
            						.withAllMemberName("All Promotions")
            						.withPrimaryKey("promotion_id")
            						.withDefaultMember("[All Promotions]")
            						.withQuery(TableQueryMappingImpl.builder().withName("promotion").build())
            						.withLevels(List.of(
            							LevelMappingImpl.builder()
            								.withName("Promotion Name")
            								.withColumn("promotion_id")
                                            .withUniqueMembers(true)
                                            .withMemberProperties(List.of(
                                            		MemberPropertyMappingImpl.builder()
                                                    .withName("Medium")
                                                    .withColumn("media_type")
                                                    .withFormatter(MemberPropertyFormatterMappingImpl.builder().withRef(UdfTest.FooBarPropertyFormatter.class.getName()).build())
                                            		.build()
                                            		))
                                            .build()
            						))
            						.build()
            			    ))
            		        .build()
            		)
                    .build());
            }
            return result;
        }
    }

    public static class UdfTestModifier9 extends PojoMappingModifier {

        /*
            "<Dimension name='Promotions2' foreignKey='promotion_id'>\n"
            + "  <Hierarchy hasAll='true' allMemberName='All Promotions' primaryKey='promotion_id' defaultMember='[All Promotions]'>\n"
            + "    <Table name='promotion'/>\n"
            + "    <Level name='Promotion Name' column='promotion_id' uniqueMembers='true'>\n"
            + "      <Property name='Medium' column='media_type'>\n"
            + "        <PropertyFormatter className='"
            + FooBarPropertyFormatter.class.getName()
            + "'/>\n"
            + "      </Property>\n"
            + "    </Level>\n"
            + "  </Hierarchy>\n"
            + "</Dimension>"));

            */


        public UdfTestModifier9(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
            	result.add(DimensionConnectorMappingImpl.builder()
            		.withOverrideDimensionName("Promotions2")
            		.withForeignKey("promotion_id")
            		.withDimension(
            			StandardDimensionMappingImpl.builder()
            				.withName("Promotions2")
            				.withHierarchies(List.of(
            					HierarchyMappingImpl.builder()
            						.withHasAll(true)
            						.withAllMemberName("All Promotions")
            						.withPrimaryKey("promotion_id")
            						.withDefaultMember("[All Promotions]")
            						.withQuery(TableQueryMappingImpl.builder().withName("promotion").build())
            						.withLevels(List.of(
            							LevelMappingImpl.builder()
            								.withName("Promotion Name")
            								.withColumn("promotion_id")
                                            .withUniqueMembers(true)
                                            .withMemberProperties(List.of(
                                            		MemberPropertyMappingImpl.builder()
                                                    .withName("Medium")
                                                    .withColumn("media_type")
                                                    .withFormatter(MemberPropertyFormatterMappingImpl.builder().withRef(UdfTest.FooBarPropertyFormatter.class.getName()).build())
                                            		.build()
                                            		))
                                            .build()
            						))
            						.build()
            			    ))
            		        .build()
            		)
                    .build());
            }
            return result;
        }
    }

    public static class UdfTestModifier10 extends PojoMappingModifier {

        /*
            "<Dimension name='Promotions2' foreignKey='promotion_id'>\n"
            + "  <Hierarchy hasAll='true' allMemberName='All Promotions' primaryKey='promotion_id' defaultMember='[All Promotions]'>\n"
            + "    <Table name='promotion'/>\n"
            + "    <Level name='Promotion Name' column='promotion_id' uniqueMembers='true'>\n"
            + "      <Property name='Medium' column='media_type'>\n"
            + "        <PropertyFormatter>\n"
            + "          <Script language='JavaScript'>\n"
            + "            return \"foo\" + member.getName() + \"/\"\n"
            + "                   + propertyName + \"/\"\n"
            + "                   + propertyValue + \"bar\";\n"
            + "          </Script>\n"
            + "        </PropertyFormatter>\n"
            + "      </Property>\n"
            + "    </Level>\n"
            + "  </Hierarchy>\n"
            + "</Dimension>"));

            */


        public UdfTestModifier10(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
            	result.add(DimensionConnectorMappingImpl.builder()
            		.withOverrideDimensionName("Promotions2")
            		.withForeignKey("promotion_id")
            		.withDimension(
            			StandardDimensionMappingImpl.builder()
            				.withName("Promotions2")
            				.withHierarchies(List.of(
            					HierarchyMappingImpl.builder()
            						.withHasAll(true)
            						.withAllMemberName("All Promotions")
            						.withPrimaryKey("promotion_id")
            						.withDefaultMember("[All Promotions]")
            						.withQuery(TableQueryMappingImpl.builder().withName("promotion").build())
            						.withLevels(List.of(
            							LevelMappingImpl.builder()
            								.withName("Promotion Name")
            								.withColumn("promotion_id")
                                            .withUniqueMembers(true)
                                            .withMemberProperties(List.of(
                                            		MemberPropertyMappingImpl.builder()
                                                    .withName("Medium")
                                                    .withColumn("media_type")
                                                    .withFormatter(MemberPropertyFormatterMappingImpl.builder().withRef("return \"foo\" + member.getName() + \"/\"\n + propertyName + \"/\"\n + propertyValue + \"bar\";\n").build())
                                            		.build()
                                            		))
                                            .build()
            						))
            						.build()
            			    ))
            		        .build()
            		)
                    .build());
            }
            return result;
        }
    }

    public static class UdfTestModifier11 extends PojoMappingModifier {

        /*
            "<UserDefinedFunction name=\"PlusOne\" className=\""
            + PlusOneUdf.class.getName()
            + "\"/>\n");

            */


        public UdfTestModifier11(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("PlusOne")
                .className(UdfTest.PlusOneUdf.class.getName())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier12 extends PojoMappingModifier {

        /*
            "<UserDefinedFunction name=\"BadPlusOne\" className=\""
            + BadPlusOneUdf.class.getName()
            + "\"/>\n");

            */


        public UdfTestModifier12(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("BadPlusOne")
                .className(UdfTest.BadPlusOneUdf.class.getName())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier14 extends PojoMappingModifier {

        /*
            "<UserDefinedFunction name=\"GenericPlusOne\" className=\""
            + PlusOrMinusOneUdf.class.getName()
            + "\"/>\n"
            + "<UserDefinedFunction name=\"GenericMinusOne\" className=\""
            + PlusOrMinusOneUdf.class.getName()
            + "\"/>\n");

            */


        public UdfTestModifier14(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("GenericPlusOne")
                .className(UdfTest.PlusOrMinusOneUdf.class.getName())
                .build());
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("GenericMinusOne")
                .className(UdfTest.PlusOrMinusOneUdf.class.getName())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier15 extends PojoMappingModifier {

        /*
            "<UserDefinedFunction name=\"StringMult\" className=\""
            + StringMultUdf.class.getName()
            + "\"/>\n");
            */


        public UdfTestModifier15(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("StringMult")
                .className(UdfTest.StringMultUdf.class.getName())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier16 extends PojoMappingModifier {

        /*
            "<UserDefinedFunction name=\"PlusOne\" className=\""
            + PlusOneUdf.class.getName() + "\"/>\n"
            + "<UserDefinedFunction name=\"AnotherMemberError\" className=\""
            + AnotherMemberErrorUdf.class.getName() + "\"/>");

            */


        public UdfTestModifier16(CatalogMapping catalog) {
            super(catalog);
        }
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("PlusOne")
                .className(UdfTest.PlusOneUdf.class.getName())
                .build());
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("AnotherMemberError")
                .className(UdfTest.AnotherMemberErrorUdf.class.getName())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier17 extends PojoMappingModifier {

        /*
            "<UserDefinedFunction name=\"Reverse\" className=\""
            + functionClass.getName()
            + "\"/>\n");
            */

        private final Class<? extends UdfTest.ReverseFunction> functionClass;

        public UdfTestModifier17(CatalogMapping catalog, final Class<? extends UdfTest.ReverseFunction> functionClass) {
            super(catalog);
            this.functionClass = functionClass;
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema).stream().filter(f -> !"Reverse".equals(f.name())).toList());
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("Reverse")
                .className(functionClass.getName())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier18 extends PojoMappingModifier {

        /*
            "<UserDefinedFunction name=\"Reverse2\" className=\""
            + ReverseFunctionNotStatic.class.getName()
            + "\"/>\n");
            + "\"/>\n");            */


        public UdfTestModifier18(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("Reverse2")
                .className(UdfTest.ReverseFunctionNotStatic.class.getName())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier19 extends PojoMappingModifier {

        /*
            "<UserDefinedFunction name=\"MemberName\" className=\""
            + MemberNameFunction.class.getName()
            + "\"/>\n");
        */


        public UdfTestModifier19(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("MemberName")
                .className(UdfTest.MemberNameFunction.class.getName())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier20 extends PojoMappingModifier {

        /*
            "<UserDefinedFunction name='StringMult'/>\n");
        */


        public UdfTestModifier20(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("StringMult")
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier21 extends PojoMappingModifier {

        /*
                        "<UserDefinedFunction name='StringMult' className='foo'>\n"
            + " <Script>bar</Script>\n"
            + "</UserDefinedFunction>");

        */


        public UdfTestModifier21(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("StringMult")
                .script(ScriptRBuilder.builder()
                    .cdata("bar")
                    .build())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier22 extends PojoMappingModifier {

        /*
            "<UserDefinedFunction name='StringMult'>\n"
            + " <Script language='bad'>bar</Script>\n"
            + "</UserDefinedFunction>");

        */


        public UdfTestModifier22(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("StringMult")
                .script(ScriptRBuilder.builder()
                    .language("bad")
                    .cdata("bar")
                    .build())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier23 extends PojoMappingModifier {

        /*
            "<UserDefinedFunction name='StringMult'>\n"
            + "  <Script language='JavaScript'>\n"
            + "    function getParameterTypes() {\n"
            + "      return new Array(\n"
            + "        new mondrian.olap.type.NumericType(),\n"
            + "        new mondrian.olap.type.StringType());\n"
            + "    }\n"
            + "    function getReturnType(parameterTypes) {\n"
            + "      return new mondrian.olap.type.StringType();\n"
            + "    }\n"
            + "    function execute(evaluator, arguments) {\n"
            + "      var n = arguments[0].evaluateScalar(evaluator);\n"
            + "      var s = arguments[1].evaluateScalar(evaluator);\n"
            + "      var r = \"\";\n"
            + "      while (n-- > 0) {\n"
            + "        r = r + s;\n"
            + "      }\n"
            + "      return r;\n"
            + "    }\n"
            + "  </Script>\n"
            + "</UserDefinedFunction>\n");

        */


        public UdfTestModifier23(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            String f = """
                            function getParameterTypes() {
                                return new Array(
                                    new mondrian.olap.type.NumericType(),
                                    new mondrian.olap.type.StringType());
                            }
                            function getReturnType(parameterTypes) {
                                return new mondrian.olap.type.StringType();
                            }
                            function execute(evaluator, arguments) {
                                var n = arguments[0].evaluateScalar(evaluator);
                                var s = arguments[1].evaluateScalar(evaluator);
                                var r = \\"\\";
                                while (n-- > 0) {
                                    r = r + s;
                                }
                                  return r;
                            }
                """;
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("StringMult")
                .script(ScriptRBuilder.builder()
                    .language("JavaScript")
                    .cdata(f)
                    .build())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier24 extends PojoMappingModifier {

        /*
            "<UserDefinedFunction name='Factorial'>\n"
            + "  <Script language='JavaScript'><![CDATA[\n"
            + "    function getParameterTypes() {\n"
            + "      return new Array(\n"
            + "        new mondrian.olap.type.NumericType());\n"
            + "    }\n"
            + "    function getReturnType(parameterTypes) {\n"
            + "      return new mondrian.olap.type.NumericType();\n"
            + "    }\n"
            + "    function execute(evaluator, arguments) {\n"
            + "      var n = arguments[0].evaluateScalar(evaluator);\n"
            + "      return factorial(n);\n"
            + "    }\n"
            + "    function factorial(n) {\n"
            + "      return n <= 1 ? 1 : n * factorial(n - 1);\n"
            + "    }\n"
            + "  ]]>\n"
            + "  </Script>\n"
            + "</UserDefinedFunction>\n");
        */


        public UdfTestModifier24(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            String f = """
                    function getParameterTypes() {
                      return new Array(
                        new mondrian.olap.type.NumericType());
                    }
                    function getReturnType(parameterTypes) {
                      return new mondrian.olap.type.NumericType();
                    }
                    function execute(evaluator, arguments) {
                      var n = arguments[0].evaluateScalar(evaluator);
                      return factorial(n);
                    }
                    function factorial(n) {
                      return n <= 1 ? 1 : n * factorial(n - 1);
                    }
                    """;
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("Factorial")
                .script(ScriptRBuilder.builder()
                    .language("JavaScript")
                    .cdata(f)
                    .build())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier25 extends PojoMappingModifier {

        /*
            "<UserDefinedFunction name='Factorial'>\n"
            + "  <Script language='JavaScript'><![CDATA[\n"
            + "    function getParameterTypes() {\n"
            + "      return new Array(\n"
            + "        new mondrian.olap.type.NumericType());\n"
            + "    }\n"
            + "    function getReturnType(parameterTypes) {\n"
            + "      return new mondrian.olap.type.NumericType();\n"
            + "    }\n"
            + "    function execute(evaluator, arguments) {\n"
            + "      var n = arguments[0].evaluateScalar(evaluator);\n"
            + "      return factorial(n);\n"
            + "    }\n"
            + "    function factorial(n) {\n"
            + "      return n <= 1 ? 1 : n * factorial_xx(n - 1);\n"
            + "    }\n"
            + "  ]]>\n"
            + "  </Script>\n"
            + "</UserDefinedFunction>\n");
        */


        public UdfTestModifier25(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            String f = """
                    function getParameterTypes() {
                      return new Array(
                        new mondrian.olap.type.NumericType());
                    }
                    function getReturnType(parameterTypes) {
                      return new mondrian.olap.type.NumericType();
                    }
                    function execute(evaluator, arguments) {
                      var n = arguments[0].evaluateScalar(evaluator);
                      return factorial(n);
                    }
                    function factorial(n) {
                      return n <= 1 ? 1 : n * factorial_xx(n - 1);
                    }
                        """;
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("Factorial")
                .script(ScriptRBuilder.builder()
                    .language("JavaScript")
                    .cdata(f)
                    .build())
                .build());
            return result;
        }
        */
    }

    public static class TestAggregationManagerModifier extends PojoMappingModifier {

        /*
                    "<Schema name=\"AMC\"><Cube name=\"Foo\" defaultMeasure=\"Unit Sales\">\n"
            + "  <Table name=\"sales_fact_1997\">\n"
            + "    <AggExclude name=\"agg_g_ms_pcat_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_c_14_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_pl_01_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_ll_01_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_l_03_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_lc_06_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_l_04_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_c_10_sales_fact_1997\"/>"
            + "    <AggName name=\"agg_l_05_sales_fact_1997\">"
            + "        <AggFactCount column=\"fact_count\"/>\n"
            + "        <AggIgnoreColumn column=\"customer_id\"/>\n"
            + "        <AggIgnoreColumn column=\"store_id\"/>\n"
            + "        <AggIgnoreColumn column=\"promotion_id\"/>\n"
            + " <AggForeignKey factColumn=\"product_id\" aggColumn=\"product_id\"/>"
            + "        <AggMeasure name=\"[Measures].[Store Cost]\" column=\"store_cost\" />\n"
            + "        <AggMeasure name=\"[Measures].[Store Sales]\" column=\"store_sales\" />\n"
            + "        <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"unit_sales\" />\n"
            + "    </AggName>\n"
            + "</Table>\n"
            + "  <Dimension name=\"Product\" foreignKey=\"product_id\">\n"
            + "<Hierarchy hasAll=\"true\" primaryKey=\"product_id\" primaryKeyTable=\"product\">\n"
            + "      <Join leftKey=\"product_class_id\" rightKey=\"product_class_id\">\n"
            + "        <Table name=\"product\"/>\n"
            + "        <Table name=\"product_class\"/>\n"
            + "     </Join>\n"
            + "     <Level name=\"Product Family\" table=\"product_class\" column=\"product_family\"\n"
            + "        uniqueMembers=\"true\"/>"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "<Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "<Measure name=\"Customer Count\" column=\"customer_id\" aggregator=\"distinct-count\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "<Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "<Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "</Cube></Schema>\n";
         */
        public TestAggregationManagerModifier(CatalogMapping catalog) {
            super(catalog);
        }

    	private static final TableQueryMappingImpl t = TableQueryMappingImpl.builder()
    			.withName("sales_fact_1997")
    			.withAggregationExcludes(
    				List.of(
                		AggregationExcludeMappingImpl.builder().withName("agg_g_ms_pcat_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_c_14_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_pl_01_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_ll_01_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_l_03_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_lc_06_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_l_04_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_c_10_sales_fact_1997").build()
                    )
    			)
    			.withAggregationTables(List.of(
    				AggregationNameMappingImpl.builder()
                        .withName("agg_l_05_sales_fact_1997")
                        .withAggregationFactCount(AggregationColumnNameMappingImpl.builder().withColumn("fact_count").build())
                        .withAggregationIgnoreColumns(List.of(
                        	AggregationColumnNameMappingImpl.builder()
                                .withColumn("customer_id")
                                .build(),
                            AggregationColumnNameMappingImpl.builder()
                                .withColumn("store_id")
                                .build(),
                            AggregationColumnNameMappingImpl.builder()
                                .withColumn("promotion_id")
                                .build()
                        ))
                        .withAggregationForeignKeys(List.of(
                        		AggregationForeignKeyMappingImpl.builder()
                                .withFactColumn("product_id")
                                .withAggregationColumn("product_id")
                                .build()
                        		)
                        )
                        .withAggregationMeasures(List.of(
                        		AggregationMeasureMappingImpl.builder()
                                .withName("[Measures].[Store Cost]")
                                .withColumn("store_cost")
                                .build(),
                                AggregationMeasureMappingImpl.builder()
                                .withName("[Measures].[Store Sales]")
                                .withColumn("store_sales")
                                .build(),
                                AggregationMeasureMappingImpl.builder()
                                .withName("[Measures].[Unit Sales]")
                                .withColumn("unit_sales")
                                .build()
                        ))
                        .build()))
    			.build();

    	private static final MeasureMappingImpl m = MeasureMappingImpl.builder()
    	        .withName("Unit Sales")
    	        .withColumn("unit_sales")
    	        .withAggregatorType(MeasureAggregatorType.SUM)
    	        .withFormatString("Standard")
    	        .build();


        protected List<SchemaMapping> catalogSchemas(CatalogMapping catalog2) {
            return List.of(SchemaMappingImpl.builder()
                    .withName("AMC")
                    .withCubes(List.of(
                        PhysicalCubeMappingImpl.builder()
                            .withName("Foo")
                            .withDefaultMeasure(m)
                            .withQuery(t)
                            .withDimensionConnectors(List.of(
                            		DimensionConnectorMappingImpl.builder()
                            		.withForeignKey("product_id")
                            		.withOverrideDimensionName("Product")
                            		.withDimension(StandardDimensionMappingImpl.builder()
                            				.withName("Product")
                            				.withHierarchies(List.of(
                            						HierarchyMappingImpl.builder()
                                                    .withHasAll(true)
                                                    .withPrimaryKey("product_id")
                                                    .withPrimaryKeyTable("product")
                                                    .withQuery(
                                                    	JoinQueryMappingImpl.builder()
                                                    	.withLeft(
                                                    		JoinedQueryElementMappingImpl.builder().withKey("product_class_id")
                                                    			.withQuery(TableQueryMappingImpl.builder().withName("product").build())
                                                    			.build())
                                                    	.withRight(
                                                        		JoinedQueryElementMappingImpl.builder().withKey("product_class_id")
                                                    			.withQuery(TableQueryMappingImpl.builder().withName("product_class").build())
                                                    			.build())
                                                    	.build()
                                                    )
                                                    .withLevels(List.of(
                                                        LevelMappingImpl.builder()
                                                            .withName("Product Family")
                                                            .withTable("product_class")
                                                            .withColumn("product_family")
                                                            .withUniqueMembers(true)
                                                            .build()
                                                    ))
                            						.build()
                            						))
                            				.build())
                            		.build()
                            ))
                            .withMeasureGroups(List.of(MeasureGroupMappingImpl.builder()
                            		.withMeasures(
                            				List.of(m,
                            						MeasureMappingImpl.builder()
                                                        .withName("Customer Count")
                                                        .withColumn("customer_id")
                                                        .withAggregatorType(MeasureAggregatorType.SUM)
                                                        .withFormatString("Standard")
                                                        .build(),
                                                   MeasureMappingImpl.builder()
                                                        .withName("Store Sales")
                                                        .withColumn("store_sales")
                                                        .withAggregatorType(MeasureAggregatorType.SUM)
                                                        .withFormatString("Standard")
                                                        .build(),
                                                   MeasureMappingImpl.builder()
                                                        .withName("Store Cost")
                                                        .withColumn("store_cost")
                                                        .withAggregatorType(MeasureAggregatorType.SUM)
                                                        .withFormatString("Standard")
                                                        .build()
                            				)).build()
                            ))
                            .build()
                    ))
            		.build());
        }

    }

    public static class TestAggregationManagerModifier3 extends PojoMappingModifier {

        /*
                "<Schema name=\"FoodMart\">"
                + "<Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">\n"
                + "  <Table name=\"sales_fact_1997\" />\n"
                + "  <Dimension name=\"Gender\" foreignKey=\"customer_id\">\n"
                + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Gender\" primaryKey=\"customer_id\">\n"
                + "      <Table name=\"customer\"/>\n"
                + "      <Level name=\"Gender\" column=\"gender\" uniqueMembers=\"true\"/>\n"
                + "    </Hierarchy>\n"
                + "  </Dimension>\n"
                + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
                + "      formatString=\"Standard\"/>\n"
                + "</Cube>\n"
                + "</Schema>");
         */
        public TestAggregationManagerModifier3(CatalogMapping catalog) {
            super(catalog);
        }

    	private static final MeasureMappingImpl m = MeasureMappingImpl.builder()
    	        .withName("Unit Sales")
    	        .withColumn("unit_sales")
    	        .withAggregatorType(MeasureAggregatorType.SUM)
    	        .withFormatString("Standard")
    	        .build();

        protected List<SchemaMapping> catalogSchemas(CatalogMapping catalog2) {
            return List.of(SchemaMappingImpl.builder()
                    .withName("FoodMart")
                    .withCubes(List.of(
                        PhysicalCubeMappingImpl.builder()
                            .withName("Sales")
                            .withDefaultMeasure(m)
                            .withQuery(TableQueryMappingImpl.builder()
                        			.withName("sales_fact_1997").build())
                            .withDimensionConnectors(List.of(
                            		DimensionConnectorMappingImpl.builder()
                            		.withForeignKey("customer_id")
                            		.withOverrideDimensionName("Gender")
                            		.withDimension(StandardDimensionMappingImpl.builder()
                            				.withName("Gender")
                            				.withHierarchies(List.of(
                            						HierarchyMappingImpl.builder()
                                                    .withHasAll(true)
                                                    .withAllMemberName("All Gender")
                                                    .withPrimaryKey("customer_id")
                                                    .withQuery(TableQueryMappingImpl.builder()
                                                			.withName("sales_fact_1997").build())
                                                    .withLevels(List.of(
                                                        LevelMappingImpl.builder()
                                                            .withName("Gender")
                                                            .withColumn("gender")
                                                            .withUniqueMembers(true)
                                                            .build()
                                                    ))
                            						.build()
                            						))
                            				.build())
                            		.build()
                            ))
                            .withMeasureGroups(List.of(MeasureGroupMappingImpl.builder()
                            		.withMeasures(
                            				List.of(m)).build()
                            ))
                            .build()
                    ))
            		.build());
        }
    }

    public static class TestAggregationManagerModifier4 extends PojoMappingModifier {

        /*
                "<Schema name=\"FoodMart\">"
                + "  <Dimension name=\"Time\" type=\"TimeDimension\">\n"
                + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n"
                + "      <Table name=\"time_by_day\"/>\n"
                + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
                + "          levelType=\"TimeYears\"/>\n"
                + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
                + "          levelType=\"TimeQuarters\"/>\n"
                + "    </Hierarchy>\n"
                + "  </Dimension>\n"
                + "<Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">\n"
                + "  <Table name=\"sales_fact_1997\">\n"
                + "    <AggExclude name=\"agg_c_special_sales_fact_1997\" />\n"
                + "    <AggExclude name=\"agg_lc_100_sales_fact_1997\" />\n"
                + "    <AggExclude name=\"agg_lc_10_sales_fact_1997\" />\n"
                + "    <AggExclude name=\"agg_pc_10_sales_fact_1997\" />\n"
                + "    <AggName name=\"agg_g_ms_pcat_sales_fact_1997\">\n"
                + "        <AggFactCount column=\"FACT_COUNT\"/>\n"
                + "        <AggIgnoreColumn column=\"Quarter\"/>\n"
                + "        <AggIgnoreColumn column=\"MONTH_OF_YEAR\"/>\n"
                + "        <AggMeasure name=\"[Measures].[Customer Count]\" column=\"customer_count\" />\n"
                + "        <AggLevel name=\"[Time].[Year]\" column=\"the_year\" />\n"
                + "    </AggName>\n"
                + "  </Table>\n"
                + "  <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
                + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
                + "      formatString=\"Standard\"/>\n"
                + "  <Measure name=\"Customer Count\" column=\"customer_id\" aggregator=\"distinct-count\"\n"
                + "      formatString=\"Standard\"/>\n"
                + "</Cube>\n"
                + "</Schema>");
         */

    	private static TableQueryMappingImpl t = TableQueryMappingImpl.builder()
            	.withName("sales_fact_1997")
            	.withAggregationExcludes(
                    List.of(
                    	AggregationExcludeMappingImpl.builder().withName("agg_c_special_sales_fact_1997").build(),
                    	AggregationExcludeMappingImpl.builder().withName("agg_lc_100_sales_fact_1997").build(),
                    	AggregationExcludeMappingImpl.builder().withName("agg_lc_10_sales_fact_1997").build(),
                    	AggregationExcludeMappingImpl.builder().withName("agg_pc_10_sales_fact_1997").build()
                    ))
            	.withAggregationTables(
                    List.of(
                    		AggregationNameMappingImpl.builder()
                            .withName("agg_g_ms_pcat_sales_fact_1997")
                            .withAggregationFactCount(
                            	AggregationColumnNameMappingImpl.builder()
                                    .withColumn("FACT_COUNT")
                                    .build())
                            .withAggregationIgnoreColumns(List.of(
                            	AggregationColumnNameMappingImpl.builder()
                                    .withColumn("Quarter")
                                    .build(),
                                AggregationColumnNameMappingImpl.builder()
                                    .withColumn("MONTH_OF_YEAR")
                                    .build()
                            		))
                            .withAggregationMeasures(List.of(
                            	AggregationMeasureMappingImpl.builder()
                                    .withName("[Measures].[Customer Count]")
                                    .withColumn("customer_count")
                                    .build()
                            ))
                            .withAggregationLevels(List.of(
                            		AggregationLevelMappingImpl.builder()
                                    .withName("[Time].[Year]")
                                    .withColumn("the_year")
                                    .build()
                            ))
                            .build()
                )).build();

        private static final MeasureMappingImpl m = MeasureMappingImpl.builder()
        .withName("Unit Sales")
        .withColumn("unit_sales")
        .withAggregatorType(MeasureAggregatorType.SUM)
        .withFormatString("Standard")
        .build();

        public TestAggregationManagerModifier4(CatalogMapping catalog) {
            super(catalog);
        }


        protected List<SchemaMapping> catalogSchemas(CatalogMapping catalog2) {
            return List.of(SchemaMappingImpl.builder()
            		.withName("FoodMart")
                    .withCubes(List.of(
                            PhysicalCubeMappingImpl.builder()
                                .withName("Sales")
                                .withDefaultMeasure(m)
                                .withQuery(t)
                                .withDimensionConnectors(List.of(DimensionConnectorMappingImpl.builder()
                                		.withForeignKey("time_id")
                                		.withOverrideDimensionName("Time")
                                		.withDimension(
                                		TimeDimensionMappingImpl.builder()
                                        .withName("Time")

                                        .withHierarchies(List.of(
                                                HierarchyMappingImpl.builder()
                                                    .withHasAll(true)
                                                    .withPrimaryKey("time_id")
                                                    .withQuery(TableQueryMappingImpl.builder()
                                                        	.withName("time_by_day").build())
                                                    .withLevels(List.of(
                                                        LevelMappingImpl.builder()
                                                            .withName("Year").withColumn("the_year")
                                                            .withType(DataType.NUMERIC)
                                                            .withUniqueMembers(true)
                                                            .withLevelType(LevelType.TIME_YEARS)
                                                            .build(),
                                                        LevelMappingImpl.builder()
                                                            .withName("Quarter").withColumn("quarter")
                                                            .withUniqueMembers(false)
                                                            .withLevelType(LevelType.TIME_QUARTERS)
                                                            .build()
                                                    ))
                                                    .build()
                                            ))

                                		.build())
                                		.build()))
                                .withMeasureGroups(List.of(MeasureGroupMappingImpl.builder().withMeasures(
                                		List.of(
                                            	m,
                                                MeasureMappingImpl.builder()
                                                    .withName("Customer Count")
                                                    .withColumn("customer_id")
                                                    .withAggregatorType(MeasureAggregatorType.DICTINCT_COUNT)
                                                    .withFormatString("Standard")
                                                    .build()
                                            )).build()))
                                .build()
                        ))

            		.build());
        }

    }

    public static class TestAggregationManagerModifier5 extends PojoMappingModifier {

        /*
                "<Schema name=\"FooSchema\"><Cube name=\"Sales_Foo\" defaultMeasure=\"Unit Sales\">\n"
                + "  <Table name=\"sales_fact_1997\">\n"
                + " <AggName name=\"agg_pl_01_sales_fact_1997\" approxRowCount=\"86000\">\n"
                + "     <AggFactCount column=\"FACT_COUNT\"/>\n"
                + "     <AggForeignKey factColumn=\"product_id\" aggColumn=\"PRODUCT_ID\" />\n"
                + "     <AggForeignKey factColumn=\"customer_id\" aggColumn=\"CUSTOMER_ID\" />\n"
                + "     <AggForeignKey factColumn=\"time_id\" aggColumn=\"TIME_ID\" />\n"
                + "     <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"UNIT_SALES_SUM\" />\n"
                + "     <AggMeasure name=\"[Measures].[Store Cost]\" column=\"STORE_COST_SUM\" />\n"
                + "     <AggMeasure name=\"[Measures].[Store Sales]\" column=\"STORE_SALES_SUM\" />\n"
                + " </AggName>\n"
                + "    <AggExclude name=\"agg_c_special_sales_fact_1997\" />\n"
                + "    <AggExclude name=\"agg_lc_100_sales_fact_1997\" />\n"
                + "    <AggExclude name=\"agg_lc_10_sales_fact_1997\" />\n"
                + "    <AggExclude name=\"agg_pc_10_sales_fact_1997\" />\n"
                + "  </Table>\n"
                + "<Dimension name=\"Time\" type=\"TimeDimension\" foreignKey=\"time_id\">\n"
                + "    <Hierarchy hasAll=\"true\" name=\"Weekly\" primaryKey=\"time_id\">\n"
                + "      <Table name=\"time_by_day\"/>\n"
                + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
                + "          levelType=\"TimeYears\"/>\n"
                + "      <Level name=\"Week\" column=\"week_of_year\" type=\"Numeric\" uniqueMembers=\"false\"\n"
                + "          levelType=\"TimeWeeks\"/>\n"
                + "      <Level name=\"Day\" column=\"day_of_month\" uniqueMembers=\"false\" type=\"Numeric\"\n"
                + "          levelType=\"TimeDays\"/>\n"
                + "    </Hierarchy>\n"
                + "</Dimension>\n"
                + "<Dimension name=\"Product\" foreignKey=\"product_id\">\n"
                + "    <Hierarchy hasAll=\"true\" primaryKey=\"product_id\" primaryKeyTable=\"product\">\n"
                + "      <Join leftKey=\"product_class_id\" rightKey=\"product_class_id\">\n"
                + "        <Table name=\"product\"/>\n"
                + "        <Table name=\"product_class\"/>\n"
                + "      </Join>\n"
                + "      <Level name=\"Product Family\" table=\"product_class\" column=\"product_family\"\n"
                + "          uniqueMembers=\"true\"/>\n"
                + "      <Level name=\"Product Department\" table=\"product_class\" column=\"product_department\"\n"
                + "          uniqueMembers=\"false\"/>\n"
                + "      <Level name=\"Product Category\" table=\"product_class\" column=\"product_category\"\n"
                + "          uniqueMembers=\"false\"/>\n"
                + "      <Level name=\"Product Subcategory\" table=\"product_class\" column=\"product_subcategory\"\n"
                + "          uniqueMembers=\"false\"/>\n"
                + "      <Level name=\"Brand Name\" table=\"product\" column=\"brand_name\" uniqueMembers=\"false\"/>\n"
                + "      <Level name=\"Product Name\" table=\"product\" column=\"product_name\"\n"
                + "          uniqueMembers=\"true\"/>\n"
                + "    </Hierarchy>\n"
                + "</Dimension>\n"
                + "  <Dimension name=\"Customers\" foreignKey=\"customer_id\">\n"
                + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Customers\" primaryKey=\"customer_id\">\n"
                + "      <Table name=\"customer\"/>\n"
                + "      <Level name=\"Country\" column=\"country\" uniqueMembers=\"true\"/>\n"
                + "      <Level name=\"State Province\" column=\"state_province\" uniqueMembers=\"true\"/>\n"
                + "      <Level name=\"City\" column=\"city\" uniqueMembers=\"false\"/>\n"
                + "      <Level name=\"Name\" column=\"customer_id\" type=\"Numeric\" uniqueMembers=\"true\">\n"
                + "        <NameExpression>\n"
                + "          <SQL dialect=\"oracle\">\n"
                + "\"fname\" || ' ' || \"lname\"\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"hive\">\n"
                + "`customer`.`fullname`\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"hsqldb\">\n"
                + "\"fname\" || ' ' || \"lname\"\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"access\">\n"
                + "fname + ' ' + lname\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"postgres\">\n"
                + "\"fname\" || ' ' || \"lname\"\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"mysql\">\n"
                + "CONCAT(`customer`.`fname`, ' ', `customer`.`lname`)\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"mssql\">\n"
                + "fname + ' ' + lname\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"derby\">\n"
                + "\"customer\".\"fullname\"\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"db2\">\n"
                + "CONCAT(CONCAT(\"customer\".\"fname\", ' '), \"customer\".\"lname\")\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"luciddb\">\n"
                + "\"fname\" || ' ' || \"lname\"\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"neoview\">\n"
                + "\"customer\".\"fullname\"\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"teradata\">\n"
                + "\"fname\" || ' ' || \"lname\"\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"generic\">\n"
                + "fullname\n"
                + "          </SQL>\n"
                + "        </NameExpression>\n"
                + "        <OrdinalExpression>\n"
                + "          <SQL dialect=\"oracle\">\n"
                + "\"fname\" || ' ' || \"lname\"\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"hsqldb\">\n"
                + "\"fname\" || ' ' || \"lname\"\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"access\">\n"
                + "fname + ' ' + lname\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"postgres\">\n"
                + "\"fname\" || ' ' || \"lname\"\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"mysql\">\n"
                + "CONCAT(`customer`.`fname`, ' ', `customer`.`lname`)\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"mssql\">\n"
                + "fname + ' ' + lname\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"neoview\">\n"
                + "\"customer\".\"fullname\"\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"derby\">\n"
                + "\"customer\".\"fullname\"\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"db2\">\n"
                + "CONCAT(CONCAT(\"customer\".\"fname\", ' '), \"customer\".\"lname\")\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"luciddb\">\n"
                + "\"fname\" || ' ' || \"lname\"\n"
                + "          </SQL>\n"
                + "          <SQL dialect=\"generic\">\n"
                + "fullname\n"
                + "          </SQL>\n"
                + "        </OrdinalExpression>\n"
                + "        <Property name=\"Gender\" column=\"gender\"/>\n"
                + "        <Property name=\"Marital Status\" column=\"marital_status\"/>\n"
                + "        <Property name=\"Education\" column=\"education\"/>\n"
                + "        <Property name=\"Yearly Income\" column=\"yearly_income\"/>\n"
                + "      </Level>\n"
                + "    </Hierarchy>\n"
                + "  </Dimension>\n"
                + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
                + "      formatString=\"Standard\"/>\n"
                + "  <Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\"\n"
                + "      formatString=\"#,###.00\"/>\n"
                + "  <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
                + "      formatString=\"#,###.00\"/>\n"
                + "  <Measure name=\"Sales Count\" column=\"product_id\" aggregator=\"count\"\n"
                + "      formatString=\"#,###\"/>\n"
                + "  <Measure name=\"Customer Count\" column=\"customer_id\"\n"
                + "      aggregator=\"distinct-count\" formatString=\"#,###\"/>\n"
                + "</Cube></Schema>\n");

         */

        private static TableQueryMappingImpl t = TableQueryMappingImpl.builder()
        	.withName("sales_fact_1997")
        	.withAggregationExcludes(
                List.of(
                	AggregationExcludeMappingImpl.builder().withName("agg_c_special_sales_fact_1997").build(),
                	AggregationExcludeMappingImpl.builder().withName("agg_lc_100_sales_fact_1997").build(),
                	AggregationExcludeMappingImpl.builder().withName("agg_lc_10_sales_fact_1997").build(),
                	AggregationExcludeMappingImpl.builder().withName("agg_pc_10_sales_fact_1997").build()
                ))
        	.withAggregationTables(
                List.of(
                		AggregationNameMappingImpl.builder()
                        .withName("agg_pl_01_sales_fact_1997")
                        .withApproxRowCount("86000")
                        .withAggregationFactCount(
                        	AggregationColumnNameMappingImpl.builder()
                                .withColumn("FACT_COUNT")
                                .build())
                        .withAggregationForeignKeys(List.of(
                        	AggregationForeignKeyMappingImpl.builder()
                                .withFactColumn("product_id")
                                .withAggregationColumn("PRODUCT_ID")
                                .build(),
                            AggregationForeignKeyMappingImpl.builder()
                                .withFactColumn("customer_id")
                                .withAggregationColumn("CUSTOMER_ID")
                                .build(),
                            AggregationForeignKeyMappingImpl.builder()
                                .withFactColumn("time_id")
                                .withAggregationColumn("TIME_ID")
                                .build()
                        ))
                        .withAggregationMeasures(List.of(
                        	AggregationMeasureMappingImpl.builder()
                                .withName("[Measures].[Unit Sales]")
                                .withColumn("UNIT_SALES_SUM")
                                .build(),
                            AggregationMeasureMappingImpl.builder()
                                .withName("[Measures].[Store Cost]")
                                .withColumn("STORE_COST_SUM")
                                .build(),
                            AggregationMeasureMappingImpl.builder()
                                .withName("[Measures].[Store Sales]")
                                .withColumn("STORE_SALES_SUM")
                                .build()
                        ))
                        .build()
            )).build();

        MeasureMappingImpl m = MeasureMappingImpl.builder()
        .withName("Unit Sales")
        .withColumn("unit_sales")
        .withAggregatorType(MeasureAggregatorType.SUM)
        .withFormatString("Standard")
        .build();

        public TestAggregationManagerModifier5(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<SchemaMapping> catalogSchemas(CatalogMapping catalog2) {
        	return List.of(
        			SchemaMappingImpl.builder()
                    .withName("FooSchema")
                    .withCubes(List.of(
                        PhysicalCubeMappingImpl.builder()
                            .withName("Sales_Foo")
                            .withDefaultMeasure(m)
                            .withQuery(t)
                            .withDimensionConnectors(List.of(
                            	DimensionConnectorMappingImpl.builder()
                            		.withForeignKey("time_id")
                            		.withOverrideDimensionName("Time")
                            		.withDimension(
                            			TimeDimensionMappingImpl.builder()
                                            .withName("Time")
                                            .withHierarchies(List.of(
                                                HierarchyMappingImpl.builder()
                                                    .withHasAll(true)
                                                    .withName("Weekly")
                                                    .withPrimaryKey("time_id")
                                                    .withQuery(TableQueryMappingImpl.builder().withName("time_by_day").build())
                                                    .withLevels(List.of(
                                                        LevelMappingImpl.builder()
                                                            .withName("Year")
                                                            .withColumn("the_year")
                                                            .withType(DataType.NUMERIC)
                                                            .withUniqueMembers(true)
                                                            .withLevelType(LevelType.TIME_YEARS)
                                                            .build(),
                                                        LevelMappingImpl.builder()
                                                            .withName("Week")
                                                            .withColumn("week_of_year")
                                                            .withType(DataType.NUMERIC)
                                                            .withUniqueMembers(false)
                                                            .withLevelType(LevelType.TIME_WEEKS)
                                                            .build(),
                                                        LevelMappingImpl.builder()
                                                            .withName("Day")
                                                            .withColumn("day_of_month")
                                                            .withUniqueMembers(false)
                                                            .withType(DataType.NUMERIC)
                                                            .withLevelType(LevelType.TIME_DAYS)
                                                            .build()
                                                    ))
                                                    .build()
                                            ))
                                            .build()
                            		)
                            		.build(),
                            	DimensionConnectorMappingImpl.builder()
                            		.withForeignKey("product_id")
                            		.withOverrideDimensionName("Product")
                            		.withDimension(
                            			StandardDimensionMappingImpl.builder()
                                            .withName("Product")
                                            .withHierarchies(List.of(
                                                HierarchyMappingImpl.builder()
                                                    .withHasAll(true)
                                                    .withPrimaryKey("product_id")
                                                    .withPrimaryKeyTable("product")
                                                    .withQuery(
                                                        JoinQueryMappingImpl.builder()
                                                        .withLeft(
                                                        	JoinedQueryElementMappingImpl.builder()
                                                        		.withKey("product_class_id")
                                                        		.withQuery(TableQueryMappingImpl.builder().withName("product").build())
                                                        		.build())
                                                        .withRight(
                                                        	JoinedQueryElementMappingImpl.builder()
                                                        		.withKey("product_class_id")
                                                        		.withQuery(TableQueryMappingImpl.builder().withName("product_class").build())
                                                        		.build())
                                                        .build()
                                                    )
                                                    .withLevels(List.of(
                                                        LevelMappingImpl.builder()
                                                            .withName("Product Family")
                                                            .withTable("product_class")
                                                            .withColumn("product_family")
                                                            .withUniqueMembers(true)
                                                            .build(),
                                                        LevelMappingImpl.builder()
                                                            .withName("Product Department")
                                                            .withTable("product_class")
                                                            .withColumn("product_department")
                                                            .withUniqueMembers(false)
                                                            .build(),
                                                        LevelMappingImpl.builder()
                                                            .withName("Product Category")
                                                            .withTable("product_class")
                                                            .withColumn("product_category")
                                                            .withUniqueMembers(false)
                                                            .build(),
                                                        LevelMappingImpl.builder()
                                                            .withName("Product Subcategory")
                                                            .withTable("product_class")
                                                            .withColumn("product_subcategory")
                                                            .withUniqueMembers(false)
                                                            .build(),
                                                        LevelMappingImpl.builder()
                                                            .withName("Brand Name")
                                                            .withTable("product")
                                                            .withColumn("brand_name")
                                                            .withUniqueMembers(false)
                                                            .build(),
                                                        LevelMappingImpl.builder()
                                                            .withName("Product Name")
                                                            .withTable("product")
                                                            .withColumn("product_name")
                                                            .withUniqueMembers(true)
                                                            .build()
                                                    ))
                                                    .build()
                                            ))
                                            .build()
                            		)
                            		.build(),
                                	DimensionConnectorMappingImpl.builder()
                            			.withForeignKey("customer_id")
                            			.withOverrideDimensionName("Customers")
                            			.withDimension(
                            					StandardDimensionMappingImpl.builder()
                            						.withName("Customers")
                            						.withHierarchies(List.of(
                            							HierarchyMappingImpl.builder()
                            								.withHasAll(true)
                            								.withAllMemberName("All Customers")
                            								.withPrimaryKey("customer_id")
                            								.withQuery(TableQueryMappingImpl.builder().withName("customer").build())
                            								.withLevels(List.of(
                            									LevelMappingImpl.builder()
                            										.withName("Country")
                            										.withColumn("country")
                            										.withUniqueMembers(true)
                            										.build(),
                            									LevelMappingImpl.builder()
                            										.withName("State Province")
                            										.withColumn("state_province")
                            										.withUniqueMembers(true)
                            										.build(),
                            									LevelMappingImpl.builder()
                            										.withName("City")
                            										.withColumn("city")
                            										.withUniqueMembers(false)
                            										.build(),
                            									LevelMappingImpl.builder()
                            										.withName("Name")
                            										.withColumn("customer_id")
                            										.withType(DataType.NUMERIC)
                            										.withUniqueMembers(true)
                            										.withNameExpression(SQLExpressionMappingImpl.builder()
                            											.withSqls(List.of(
                            												SQLMappingImpl.builder()
                            													.withDialects(List.of("oracle"))
                            													.withStatement("\"fname\" || ' ' || \"lname\"\n")
                            													.build(),
                            												SQLMappingImpl.builder()
                            													.withDialects(List.of("hive"))
                            													.withStatement("`customer`.`fullname`\n")
                            													.build(),
                            												SQLMappingImpl.builder()
                            													.withDialects(List.of("hsqldb"))
                            													.withStatement("\"fname\" || ' ' || \"lname\"\n")
                            													.build(),
                            												SQLMappingImpl.builder()
                            													.withDialects(List.of("access"))
                            													.withStatement("fname + ' ' + lname\n")
                            													.build(),
                            												SQLMappingImpl.builder()
                            													.withDialects(List.of("postgres"))
                            													.withStatement("\"fname\" || ' ' || \"lname\"\n")
                            													.build(),
                            												SQLMappingImpl.builder()
                            													.withDialects(List.of("mysql"))
                            													.withStatement("CONCAT(`customer`.`fname`, ' ', `customer`.`lname`)\n")
                            													.build(),
                            												SQLMappingImpl.builder()
                            													.withDialects(List.of("mssql"))
                            													.withStatement("fname + ' ' + lname\n")
                            													.build(),
                            												SQLMappingImpl.builder()
                            													.withDialects(List.of("derby"))
                            													.withStatement("\"customer\".\"fullname\"\n")
                            													.build(),
                            												SQLMappingImpl.builder()
                            													.withDialects(List.of("db2"))
                            													.withStatement("CONCAT(CONCAT(\"customer\".\"fname\", ' '), \"customer\".\"lname\")\n")
                            													.build(),
                            												SQLMappingImpl.builder()
                            													.withDialects(List.of("luciddb"))
                            													.withStatement("\"fname\" || ' ' || \"lname\"\n")
                            													.build(),
                            												SQLMappingImpl.builder()
                            													.withDialects(List.of("neoview"))
                            													.withStatement("\"customer\".\"fullname\"\n")
                            													.build(),
                            												SQLMappingImpl.builder()
                            													.withDialects(List.of("teradata"))
                            													.withStatement("\"fname\" || ' ' || \"lname\"\n")
                            													.build(),
                            												SQLMappingImpl.builder()
                            													.withDialects(List.of("generic"))
                            													.withStatement("fullname")
                            													.build()
                            							                )).build())
                            										.withMemberProperties(List.of(
                            												MemberPropertyMappingImpl.builder().withName("Gender").withColumn("gender").build(),
                            												MemberPropertyMappingImpl.builder().withName("Marital Status").withColumn("marital_status").build(),
                            												MemberPropertyMappingImpl.builder().withName("Education").withColumn("education").build(),
                            												MemberPropertyMappingImpl.builder().withName("Yearly Income").withColumn("yearly_income").build()
                            										))
                            										.build()
                            									))
                            								.build()//hierarchy
                            								))
                            						.build()
                            		).build())
                             )
                            .withMeasureGroups(List.of(
                            		MeasureGroupMappingImpl.builder()
                            		.withMeasures(
                            		List.of(m,
                                            MeasureMappingImpl.builder()
                                                .withName("Store Cost")
                                                .withColumn("store_cost")
                                                .withAggregatorType(MeasureAggregatorType.SUM)
                                                .withFormatString("#,###.00")
                                                .build(),
                                            MeasureMappingImpl.builder()
                                                .withName("Store Sales")
                                                .withColumn("store_sales")
                                                .withAggregatorType(MeasureAggregatorType.SUM)
                                                .withFormatString("#,###.00")
                                                .build(),
                                            MeasureMappingImpl.builder()
                                                .withName("Sales Count")
                                                .withColumn("product_id")
                                                .withAggregatorType(MeasureAggregatorType.COUNT)
                                                .withFormatString("#,###")
                                                .build(),
                                            MeasureMappingImpl.builder()
                                                .withName("Customer Count")
                                                .withColumn("customer_id")
                                                .withAggregatorType(MeasureAggregatorType.DICTINCT_COUNT)
                                                .withFormatString("#,###")
                                                .build()
                                        )
                            	).build())).build())).build());
        }

    }

    public static class TestAggregationManagerModifier6 extends PojoMappingModifier {

        /*
            "<?xml version=\"1.0\"?>\n"
            + "<Schema name=\"custom\">\n"
            + "  <Dimension name=\"Store\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "      <Table name=\"store\"/>\n"
            + "      <Level name=\"Store Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"Store State\" column=\"store_state\" uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"Store City\" column=\"store_city\" uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Store Name\" column=\"store_name\" uniqueMembers=\"true\">\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension name=\"Time\" type=\"TimeDimension\">\n"
            + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n"
            + "      <Table name=\"time_by_day\"/>\n"
            + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
            + "          levelType=\"TimeYears\"/>\n"
            + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
            + "          levelType=\"TimeQuarters\"/>\n"
            + "      <Level name=\"Month\" column=\"month_of_year\" uniqueMembers=\"true\" type=\"Numeric\"\n"
            + "          levelType=\"TimeMonths\"/>\n"
            + "      <Level name=\"Day\" column=\"day_of_month\" uniqueMembers=\"false\" type=\"Numeric\"\n"
            + "          levelType=\"TimeDays\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Cube name=\"Sales1\" defaultMeasure=\"Unit Sales\">\n"
            + "    <Table name=\"sales_fact_1997\">\n"
            + "      <AggExclude name=\"agg_c_special_sales_fact_1997\"/>"
            + "      <AggExclude name=\"agg_c_10_sales_fact_1997\"/>"
            + "      <AggExclude name=\"agg_l_04_sales_fact_1997\"/>"
            + "      <AggExclude name=\"agg_g_ms_pcat_sales_fact_1997\"/>"
            + "      <AggExclude name=\"agg_lc_06_sales_fact_1997\"/>"
            + "      <AggExclude name=\"agg_l_03_sales_fact_1997\"/>"
            + "      <AggExclude name=\"agg_lc_100_sales_fact_1997\"/>"
            + "      <AggExclude name=\"agg_pl_01_sales_fact_1997\"/>"
            + "      <AggExclude name=\"agg_ll_01_sales_fact_1997\"/>"
            + "      <AggExclude name=\"agg_l_05_sales_fact_1997\"/>"
            + "      <AggName name=\"agg_c_14_sales_fact_1997\">\n"
            + "        <AggFactCount column=\"fact_count\"/>\n"
            + "        <AggIgnoreColumn column=\"product_id\" />\n"
            + "        <AggIgnoreColumn column=\"customer_id\" />\n"
            + "        <AggIgnoreColumn column=\"promotion_id\" />\n"
            + "        <AggIgnoreColumn column=\"the_year\" />\n"
            + "        <AggIgnoreColumn column=\"quarter\" />\n"
            + "        <AggForeignKey factColumn=\"store_id\" aggColumn=\"store_id\" />\n"
            + "        <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"unit_sales\" />\n"
            + "        <AggMeasure name=\"[Measures].[Store Cost]\" column=\"store_cost\" />\n"
            + "        <AggMeasure name=\"[Measures].[Store Sales]\" column=\"store_sales\" />\n"
            + "        <AggLevel name=\"[Time].[Month]\" column=\"month_of_year\" collapsed=\"false\" />\n"
            + "      </AggName>\n"
            + "    </Table>\n"
            + "    <DimensionUsage name=\"Store\" source=\"Store\" foreignKey=\"store_id\"/>\n"
            + "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
            + "    <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "    <Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n"
            + "    <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n"
            + "  </Cube>\n"
            + "</Schema>\n";
         */

    	private static final TableQueryMappingImpl t = TableQueryMappingImpl.builder()
    			.withName("sales_fact_1997")
    			.withAggregationExcludes(
    				List.of(
                		AggregationExcludeMappingImpl.builder().withName("agg_c_special_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_c_10_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_l_04_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_g_ms_pcat_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_lc_06_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_l_03_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_lc_100_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_pl_01_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_ll_01_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_l_05_sales_fact_1997").build()
                    )
    			)
    			.withAggregationTables(List.of(
    				AggregationNameMappingImpl.builder()
                        .withName("agg_c_14_sales_fact_1997")
                        .withAggregationFactCount(AggregationColumnNameMappingImpl.builder().withColumn("fact_count").build())
                        .withAggregationIgnoreColumns(List.of(
                        	AggregationColumnNameMappingImpl.builder()
                                .withColumn("product_id")
                                .build(),
                            AggregationColumnNameMappingImpl.builder()
                                .withColumn("customer_id")
                                .build(),
                            AggregationColumnNameMappingImpl.builder()
                                .withColumn("promotion_id")
                                .build(),
                            AggregationColumnNameMappingImpl.builder()
                                .withColumn("the_year")
                                .build(),
                            AggregationColumnNameMappingImpl.builder()
                                .withColumn("quarter")
                                .build())
                        )
                        .withAggregationForeignKeys(List.of(
                        		AggregationForeignKeyMappingImpl.builder()
                                .withFactColumn("store_id")
                                .withAggregationColumn("store_id")
                                .build()
                        		)
                        )
                        .withAggregationMeasures(List.of(
                        		AggregationMeasureMappingImpl.builder()
                                .withName("[Measures].[Unit Sales]")
                                .withColumn("unit_sales")
                                .build(),
                                AggregationMeasureMappingImpl.builder()
                                .withName("[Measures].[Store Cost]")
                                .withColumn("store_cost")
                                .build(),
                                AggregationMeasureMappingImpl.builder()
                                .withName("[Measures].[Store Sales]")
                                .withColumn("store_sales")
                                .build()
                        ))
                        .withAggregationLevels(List.of(
                        		AggregationLevelMappingImpl.builder()
                                .withName("[Time].[Month]")
                                .withColumn("month_of_year")
                                .withCollapsed(false)
                                .build()
                        		))
                        .build()))
    			.build();

    	private static final MeasureMappingImpl m = MeasureMappingImpl.builder()
        .withName("Unit Sales")
        .withColumn("unit_sales")
        .withAggregatorType(MeasureAggregatorType.SUM)
        .withFormatString("Standard")
        .build();

    	private static final StandardDimensionMappingImpl dimensionStore = StandardDimensionMappingImpl.builder()
                .withName("Store")
                .withHierarchies(List.of(
                    HierarchyMappingImpl.builder()
                        .withHasAll(true)
                        .withPrimaryKey("store_id")
                        .withQuery(TableQueryMappingImpl.builder().withName("store").build())
                        .withLevels(List.of(
                            LevelMappingImpl.builder()
                                .withName("Store Country")
                                .withColumn("store_country")
                                .withUniqueMembers(true)
                                .build(),
                            LevelMappingImpl.builder()
                                .withName("Store State")
                                .withColumn("store_state")
                                .withUniqueMembers(true)
                                .build(),
                            LevelMappingImpl.builder()
                                .withName("Store City")
                                .withColumn("store_city")
                                .withUniqueMembers(false)
                                .build(),
                            LevelMappingImpl.builder()
                                .withName("Store Name")
                                .withColumn("store_name")
                                .withUniqueMembers(true)
                                .build()
                        ))
                        .build()
                ))
    			.build();

    	private static final TimeDimensionMappingImpl dimensionTime = TimeDimensionMappingImpl.builder()
                .withName("Time")
                .withHierarchies(List.of(
                    HierarchyMappingImpl.builder()
                        .withHasAll(false)
                        .withPrimaryKey("time_id")
                        .withQuery(TableQueryMappingImpl.builder().withName("time_by_day").build())
                        .withLevels(List.of(
                            LevelMappingImpl.builder()
                                .withName("Year")
                                .withColumn("the_year")
                                .withType(DataType.NUMERIC)
                                .withUniqueMembers(true)
                                .withLevelType(LevelType.TIME_YEARS)
                                .build(),
                            LevelMappingImpl.builder()
                                .withName("Quarter")
                                .withColumn("quarter")
                                .withUniqueMembers(false)
                                .withLevelType(LevelType.TIME_QUARTERS)
                                .build(),
                            LevelMappingImpl.builder()
                                .withName("Month")
                                .withColumn("month_of_year")
                                .withUniqueMembers(true)
                                .withType(DataType.NUMERIC)
                                .withLevelType(LevelType.TIME_MONTHS)
                                .build(),
                            LevelMappingImpl.builder()
                                .withName("Day")
                                .withColumn("day_of_month")
                                .withUniqueMembers(false)
                                .withType(DataType.NUMERIC)
                                .withLevelType(LevelType.TIME_DAYS)
                                .build()
                        ))
                        .build()
                ))
    			.build();

        public TestAggregationManagerModifier6(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<SchemaMapping> catalogSchemas(CatalogMapping catalog2) {
            return List.of(SchemaMappingImpl.builder()
                    .withName("custom")
                    .withCubes(List.of(
                        PhysicalCubeMappingImpl.builder()
                            .withName("Sales1")
                            .withDefaultMeasure(m)
                            .withQuery(t)
                            .withDimensionConnectors(List.of(
                            		DimensionConnectorMappingImpl.builder()
                            		.withForeignKey("store_id")
                            		.withOverrideDimensionName("Store")
                            		.withDimension(dimensionStore)
                            		.build(),
                            		DimensionConnectorMappingImpl.builder()
                            		.withForeignKey("time_id")
                            		.withOverrideDimensionName("Time")
                            		.withDimension(dimensionTime)
                            		.build()
                            ))
                            .withMeasureGroups(List.of(MeasureGroupMappingImpl.builder()
                            		.withMeasures(
                            				List.of(m,
                            						MeasureMappingImpl.builder()
                                                        .withName("Store Cost")
                                                        .withColumn("store_cost")
                                                        .withAggregatorType(MeasureAggregatorType.SUM)
                                                        .withFormatString("#,###.00")
                                                        .build(),
                                                   MeasureMappingImpl.builder()
                                                        .withName("Store Sales")
                                                        .withColumn("store_sales")
                                                        .withAggregatorType(MeasureAggregatorType.SUM)
                                                        .withFormatString("#,###.00")
                                                        .build()
                                                )
                            		)
                            		.build()))
                            .build()
                    ))
            		.build());
        }

    }

    public static class TestAggregationManagerModifier7 extends PojoMappingModifier {

        /*
                "<Schema name=\"FoodMart\">"
                + "  <Dimension name=\"Time\" type=\"TimeDimension\">\n"
                + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n"
                + "      <Table name=\"time_by_day\"/>\n"
                + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
                + "          levelType=\"TimeYears\"/>\n"
                + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
                + "          levelType=\"TimeQuarters\"/>\n"
                + "    </Hierarchy>\n"
                + "  </Dimension>\n"
                + "<Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">\n"
                + "  <Table name=\"sales_fact_1997\">\n"
                + "    <AggExclude name=\"agg_c_special_sales_fact_1997\" />\n"
                + "    <AggExclude name=\"agg_lc_100_sales_fact_1997\" />\n"
                + "    <AggExclude name=\"agg_lc_10_sales_fact_1997\" />\n"
                + "    <AggExclude name=\"agg_pc_10_sales_fact_1997\" />\n"
                + "    <AggName name=\"agg_c_10_sales_fact_1997\">\n"
                + "        <AggFactCount column=\"FACT_COUNT\"/>\n"
                + "        <AggIgnoreColumn column=\"Quarter\"/>\n"
                + "        <AggIgnoreColumn column=\"MONTH_OF_YEAR\"/>\n"
                + "        <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"unit_sales\" />\n"
                + "        <AggLevel name=\"[Time].[Year]\" column=\"the_year\" />\n"
                + "    </AggName>\n"
                + "  </Table>\n"
                + "  <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
                + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
                + "      formatString=\"Standard\"/>\n"
                + "</Cube>\n"
                + "</Schema>");

         */

    	private static final TableQueryMappingImpl t = TableQueryMappingImpl.builder()
    			.withName("sales_fact_1997")
    			.withAggregationExcludes(
    				List.of(
                		AggregationExcludeMappingImpl.builder().withName("agg_c_special_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_lc_100_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_lc_10_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_pc_10_sales_fact_1997").build()
                    )
    			)
    			.withAggregationTables(List.of(
    				AggregationNameMappingImpl.builder()
                        .withName("agg_c_10_sales_fact_1997")
                        .withAggregationFactCount(AggregationColumnNameMappingImpl.builder().withColumn("FACT_COUNT").build())
                        .withAggregationIgnoreColumns(List.of(
                        	AggregationColumnNameMappingImpl.builder()
                                .withColumn("Quarter")
                                .build(),
                            AggregationColumnNameMappingImpl.builder()
                                .withColumn("MONTH_OF_YEAR")
                                .build()
                        ))
                        .withAggregationMeasures(List.of(
                        		AggregationMeasureMappingImpl.builder()
                                .withName("[Measures].[Unit Sales]")
                                .withColumn("unit_sales")
                                .build()
                        ))
                        .withAggregationLevels(List.of(
                        		AggregationLevelMappingImpl.builder()
                                .withName("[Time].[Year]")
                                .withColumn("the_year")
                                .build()
                        		))
                        .build()))
    			.build();

    	private static final MeasureMappingImpl m = MeasureMappingImpl.builder()
    		.withName("Unit Sales")
            .withColumn("unit_sales")
            .withAggregatorType(MeasureAggregatorType.SUM)
            .withFormatString("Standard")
            .build();

        public TestAggregationManagerModifier7(CatalogMapping catalog) {
            super(catalog);
        }


        protected List<SchemaMapping> catalogSchemas(CatalogMapping catalog2) {
            return List.of(SchemaMappingImpl.builder()
                    .withName("FoodMart")
                    .withCubes(List.of(
                        PhysicalCubeMappingImpl.builder()
                            .withName("Sales")
                            .withDefaultMeasure(m)
                            .withQuery(t)
                            .withDimensionConnectors(List.of(
                            		DimensionConnectorMappingImpl.builder()
                            		.withForeignKey("time_id")
                            		.withOverrideDimensionName("Time")
                            		.withDimension(TimeDimensionMappingImpl.builder()
                                            .withName("Time")
                                            .withHierarchies(List.of(
                                                HierarchyMappingImpl.builder()
                                                    .withHasAll(false)
                                                    .withPrimaryKey("time_id")
                                                    .withQuery(TableQueryMappingImpl.builder().withName("time_by_day").build())
                                                    .withLevels(List.of(
                                                        LevelMappingImpl.builder()
                                                            .withName("Year")
                                                            .withColumn("the_year")
                                                            .withType(DataType.NUMERIC)
                                                            .withUniqueMembers(true)
                                                            .withLevelType(LevelType.TIME_YEARS)
                                                            .build(),
                                                        LevelMappingImpl.builder()
                                                            .withName("Quarter")
                                                            .withColumn("quarter")
                                                            .withUniqueMembers(false)
                                                            .withLevelType(LevelType.TIME_QUARTERS)
                                                            .build()
                                                    ))
                                                    .build()
                                            ))
                            				.build())
                            		.build()
                            ))
                            .withMeasureGroups(List.of(MeasureGroupMappingImpl.builder()
                            		.withMeasures(
                            				List.of(m)
                            		)
                            		.build()))
                            .build()
                    ))
            		.build());
        }

    }

    public static class TestAggregationManagerModifier8 extends PojoMappingModifier {

        /*
            "<Schema name=\"AMC\"><Cube name=\"Foo\" defaultMeasure=\"Unit Sales\">\n"
            + "  <Table name=\"sales_fact_1997\">\n"
            + "    <AggExclude name=\"agg_g_ms_pcat_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_c_14_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_pl_01_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_ll_01_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_l_03_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_lc_06_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_l_04_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_c_10_sales_fact_1997\"/>"
            + "    <AggName name=\"agg_l_05_sales_fact_1997\">"
            + "        <AggFactCount column=\"fact_count\"/>\n"
            + "        <AggIgnoreColumn column=\"customer_id\"/>\n"
            + "        <AggIgnoreColumn column=\"store_id\"/>\n"
            + "        <AggIgnoreColumn column=\"promotion_id\"/>\n"
            + " <AggForeignKey factColumn=\"promotion_id\" aggColumn=\"promotion_id\"/>"
            + "        <AggMeasure name=\"[Measures].[Store Cost]\" column=\"store_cost\" />\n"
            + "        <AggMeasure name=\"[Measures].[Store Sales]\" column=\"store_sales\" />\n"
            + "        <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"unit_sales\" />\n"
            + "    </AggName>\n"
            + "</Table>\n"
            + "  <Dimension name=\"Promotions\" foreignKey=\"promotion_id\">\n"
            + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
            + "      <Table name=\"promotion\"/>\n"
            + "      <Level name=\"Media Type\" column=\"media_type\" uniqueMembers=\"true\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>"
            + "<Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "<Measure name=\"Customer Count\" column=\"customer_id\" aggregator=\"distinct-count\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "<Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "<Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "</Cube></Schema>\n";
         */


    	private static final TableQueryMappingImpl t = TableQueryMappingImpl.builder()
    			.withName("sales_fact_1997")
    			.withAggregationExcludes(
    				List.of(
                		AggregationExcludeMappingImpl.builder().withName("agg_g_ms_pcat_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_c_14_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_pl_01_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_ll_01_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_l_03_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_lc_06_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_l_04_sales_fact_1997").build(),
                		AggregationExcludeMappingImpl.builder().withName("agg_c_10_sales_fact_1997").build()
                    )
    			)
    			.withAggregationTables(List.of(
    				AggregationNameMappingImpl.builder()
                        .withName("agg_l_05_sales_fact_1997")
                        .withAggregationFactCount(AggregationColumnNameMappingImpl.builder().withColumn("fact_count").build())
                        .withAggregationIgnoreColumns(List.of(
                        	AggregationColumnNameMappingImpl.builder()
                                .withColumn("customer_id")
                                .build(),
                            AggregationColumnNameMappingImpl.builder()
                                .withColumn("store_id")
                                .build(),
                                AggregationColumnNameMappingImpl.builder()
                                .withColumn("promotion_id")
                                .build()
                        ))
                        .withAggregationForeignKeys(List.of(
                        		AggregationForeignKeyMappingImpl.builder()
                                .withFactColumn("promotion_id")
                                .withAggregationColumn("promotion_id")
                                .build()
                        ))
                        .withAggregationMeasures(List.of(
                        		AggregationMeasureMappingImpl.builder()
                                .withName("[Measures].[Store Cost]")
                                .withColumn("unit_sales")
                                .build()
                        ))
                        .withAggregationLevels(List.of(
                        		AggregationLevelMappingImpl.builder()
                                .withName("[Time].[Year]")
                                .withColumn("store_cost")
                                .build(),
                        		AggregationLevelMappingImpl.builder()
                                .withName("[Measures].[Store Sales]")
                                .withColumn("store_sales")
                                .build(),
                        		AggregationLevelMappingImpl.builder()
                                .withName("[Measures].[Unit Sales]")
                                .withColumn("unit_sales")
                                .build()
                        		))
                        .build())
    			)
    			.build();

    	private static final MeasureMappingImpl m = MeasureMappingImpl.builder()
    		.withName("Unit Sales")
            .withColumn("unit_sales")
            .withAggregatorType(MeasureAggregatorType.SUM)
            .withFormatString("Standard")
            .build();

        public TestAggregationManagerModifier8(CatalogMapping catalog) {
            super(catalog);
        }


        protected List<SchemaMapping> catalogSchemas(CatalogMapping catalog2) {
            return List.of(SchemaMappingImpl.builder()
                    .withName("AMC")
                    .withCubes(List.of(
                        PhysicalCubeMappingImpl.builder()
                            .withName("Foo")
                            .withDefaultMeasure(m)
                            .withQuery(t)
                            .withDimensionConnectors(List.of(
                            		DimensionConnectorMappingImpl.builder()
                            		.withForeignKey("promotion_id")
                            		.withOverrideDimensionName("Promotions")
                            		.withDimension(TimeDimensionMappingImpl.builder()
                                            .withName("Promotions")
                                            .withHierarchies(List.of(
                                                HierarchyMappingImpl.builder()
                                                    .withHasAll(true)
                                                    .withAllMemberName("All Promotions")
                                                    .withPrimaryKey("promotion_id")
                                                    .withDefaultMember("[All Promotions]")
                                                    .withQuery(TableQueryMappingImpl.builder().withName("promotion").build())
                                                    .withLevels(List.of(
                                                        LevelMappingImpl.builder()
                                                            .withName("Media Type")
                                                            .withColumn("media_type")
                                                            .withUniqueMembers(true)
                                                            .build()
                                                    ))
                                                    .build()
                                            ))
                            				.build())
                            		.build()
                            ))
                            .withMeasureGroups(List.of(MeasureGroupMappingImpl.builder()
                            	.withMeasures(
                            		List.of(
                            			m,
                            			MeasureMappingImpl.builder()
                                            .withName("Customer Count")
                                            .withColumn("customer_id")
                                            .withAggregatorType(MeasureAggregatorType.DICTINCT_COUNT)
                                            .withFormatString("Standard")
                                            .build(),
                                        MeasureMappingImpl.builder()
                                            .withName("Store Sales")
                                            .withColumn("store_sales")
                                            .withAggregatorType(MeasureAggregatorType.SUM)
                                            .withFormatString("Standard")
                                            .build(),
                                        MeasureMappingImpl.builder()
                                             .withName("Store Cost")
                                             .withColumn("store_cost")
                                             .withAggregatorType(MeasureAggregatorType.SUM)
                                             .withFormatString("Standard")
                                             .build()
                            				)
                            		)
                            		.build()))
                            .build()
                    ))
            		.build());
        }

    }

    public static class TestAggregationManagerModifier9 extends PojoMappingModifier {

        /*
            "<?xml version=\"1.0\"?>\n"
            + "<Schema name=\"custom\">\n"
            + "  <Dimension name=\"Store\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "      <Table name=\"store\"/>\n"
            + "      <Level name=\"Store Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"Store State\" column=\"store_state\" uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"Store City\" column=\"store_city\" uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Store Name\" column=\"store_name\" uniqueMembers=\"true\">\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension name=\"Time\" type=\"TimeDimension\">\n"
            + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n"
            + "      <Table name=\"time_by_day\"/>\n"
            + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
            + "          levelType=\"TimeYears\"/>\n"
            + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
            + "          levelType=\"TimeQuarters\"/>\n"
            + "      <Level name=\"Month\" column=\"month_of_year\" uniqueMembers=\"false\" type=\"Numeric\"\n"
            + "          levelType=\"TimeMonths\"/>\n"
            + "    </Hierarchy>\n"
            + "    <Hierarchy hasAll=\"true\" name=\"Weekly\" primaryKey=\"time_id\">\n"
            + "      <Table name=\"time_by_day\"/>\n"
            + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
            + "          levelType=\"TimeYears\"/>\n"
            + "      <Level name=\"Week\" column=\"week_of_year\" type=\"Numeric\" uniqueMembers=\"false\"\n"
            + "          levelType=\"TimeWeeks\"/>\n"
            + "      <Level name=\"Day\" column=\"day_of_month\" uniqueMembers=\"false\" type=\"Numeric\"\n"
            + "          levelType=\"TimeDays\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Cube name=\"Sales1\" defaultMeasure=\"Unit Sales\">\n"
            + "    <Table name=\"sales_fact_1997\">\n"
            + "      <AggName name=\"agg_c_special_sales_fact_1997\">\n"
            + "        <AggFactCount column=\"FACT_COUNT\"/>\n"
            + "        <AggIgnoreColumn column=\"foo\"/>\n"
            + "        <AggIgnoreColumn column=\"bar\"/>\n"
            + "        <AggIgnoreColumn column=\"PRODUCT_ID\" />\n"
            + "        <AggIgnoreColumn column=\"CUSTOMER_ID\" />\n"
            + "        <AggIgnoreColumn column=\"PROMOTION_ID\" />\n"
            + "        <AggForeignKey factColumn=\"store_id\" aggColumn=\"STORE_ID\" />\n"
            + "        <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"UNIT_SALES_SUM\" />\n"
            + "        <AggMeasure name=\"[Measures].[Store Cost]\" column=\"STORE_COST_SUM\" />\n"
            + "        <AggMeasure name=\"[Measures].[Store Sales]\" column=\"STORE_SALES_SUM\" />\n"
            + "        <AggLevel name=\"[Time].[Year]\" column=\"TIME_YEAR\" />\n"
            + "        <AggLevel name=\"[Time].[Quarter]\" column=\"TIME_QUARTER\" />\n"
            + "        <AggLevel name=\"[Time].[Month]\" column=\"TIME_MONTH\" />\n"
            + "      </AggName>\n"
            + "    </Table>\n"
            + "    <DimensionUsage name=\"Store\" source=\"Store\" foreignKey=\"store_id\"/>\n"
            + "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
            + "    <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "    <Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n"
            + "    <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n"
            + "  </Cube>\n"
            + "  <Cube name=\"Sales2\" defaultMeasure=\"Unit Sales\">\n"
            + "    <Table name=\"sales_fact_1997\">\n"
            + "      <AggName name=\"agg_c_special_sales_fact_1997\">\n"
            + "        <AggFactCount column=\"FACT_COUNT\"/>\n"
            + "        <AggIgnoreColumn column=\"foo\"/>\n"
            + "        <AggIgnoreColumn column=\"bar\"/>\n"
            + "        <AggIgnoreColumn column=\"PRODUCT_ID\" />\n"
            + "        <AggIgnoreColumn column=\"CUSTOMER_ID\" />\n"
            + "        <AggIgnoreColumn column=\"PROMOTION_ID\" />\n"
            + "        <AggForeignKey factColumn=\"store_id\" aggColumn=\"STORE_ID\" />\n"
            + "        <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"UNIT_SALES_SUM\" />\n"
            + "        <AggMeasure name=\"[Measures].[Store Cost]\" column=\"STORE_COST_SUM\" />\n"
            + "        <AggMeasure name=\"[Measures].[Store Sales]\" column=\"STORE_SALES_SUM\" />\n"
            + "        <AggLevel name=\"[Time].[Year]\" column=\"TIME_YEAR\" />\n"
            + "        <AggLevel name=\"[Time].[Quarter]\" column=\"TIME_QUARTER\" />\n"
            + "        <AggLevel name=\"[Time].[Month]\" column=\"TIME_MONTH\" />\n"
            + "      </AggName>\n"
            + "    </Table>\n"
            + "    <DimensionUsage name=\"Store\" source=\"Store\" foreignKey=\"store_id\"/>\n"
            + "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
            + "    <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "    <Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n"
            + "    <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n"
            + "  </Cube>\n"
            + "  <VirtualCube name=\"SuperSales\" defaultMeasure=\"Unit Sales\">\n"
            + "    <VirtualCubeDimension cubeName=\"Sales1\" name=\"Store\"/>\n"
            + " <VirtualCubeDimension cubeName=\"Sales1\" name=\"Time\"/>\n"
            + "    <VirtualCubeMeasure cubeName=\"Sales2\" name=\"[Measures].[Unit Sales]\"/>\n"
            + " <VirtualCubeMeasure cubeName=\"Sales2\" name=\"[Measures].[Store Cost]\"/>\n"
            + " <VirtualCubeMeasure cubeName=\"Sales2\" name=\"[Measures].[Store Sales]\"/>\n"
            + "  </VirtualCube>\n"
            + "</Schema>\n";

         */

    	private static final TableQueryMappingImpl t1 = TableQueryMappingImpl.builder()
    			.withName("sales_fact_1997")
    			.withAggregationTables(List.of(
    				AggregationNameMappingImpl.builder()
                        .withName("agg_c_special_sales_fact_1997")
                        .withAggregationFactCount(AggregationColumnNameMappingImpl.builder().withColumn("FACT_COUNT").build())
                        .withAggregationIgnoreColumns(List.of(
                        	AggregationColumnNameMappingImpl.builder()
                                .withColumn("foo")
                                .build(),
                            AggregationColumnNameMappingImpl.builder()
                                .withColumn("bar")
                                .build(),
                            AggregationColumnNameMappingImpl.builder()
                                .withColumn("PRODUCT_ID")
                                .build(),
                            AggregationColumnNameMappingImpl.builder()
                                .withColumn("CUSTOMER_ID")
                                .build(),
                            AggregationColumnNameMappingImpl.builder()
                                .withColumn("PROMOTION_ID")
                                .build()
                        ))
                        .withAggregationForeignKeys(List.of(
                        		AggregationForeignKeyMappingImpl.builder()
                                .withFactColumn("store_id")
                                .withAggregationColumn("STORE_ID")
                                .build()
                        ))
                        .withAggregationMeasures(List.of(
                        	AggregationMeasureMappingImpl.builder()
                                .withName("[Measures].[Unit Sales]")
                                .withColumn("UNIT_SALES_SUM")
                                .build(),
                            AggregationMeasureMappingImpl.builder()
                                .withName("[Measures].[Store Cost]")
                                .withColumn("STORE_COST_SUM")
                                .build(),
                            AggregationMeasureMappingImpl.builder()
                                .withName("[Measures].[Store Sales]")
                                .withColumn("STORE_SALES_SUM")
                                .build()
                        ))
                        .withAggregationLevels(List.of(
                        	AggregationLevelMappingImpl.builder()
                                .withName("[Time].[Year]")
                                .withColumn("TIME_YEAR")
                                .build(),
                            AggregationLevelMappingImpl.builder()
                                .withName("[Time].[Quarter]")
                                .withColumn("TIME_QUARTER")
                                .build(),
                            AggregationLevelMappingImpl.builder()
                                .withName("[Time].[Month]")
                                .withColumn("TIME_MONTH")
                                .build()
                        )).build()
    			))
    			.build();


    	private static final TableQueryMappingImpl t2 = TableQueryMappingImpl.builder()
    			.withName("sales_fact_1997")
    			.withAggregationTables(List.of(
    				AggregationNameMappingImpl.builder()
                        .withName("agg_c_special_sales_fact_1997")
                        .withAggregationFactCount(AggregationColumnNameMappingImpl.builder().withColumn("FACT_COUNT").build())
                        .withAggregationIgnoreColumns(List.of(
                        	AggregationColumnNameMappingImpl.builder()
                                .withColumn("foo")
                                .build(),
                            AggregationColumnNameMappingImpl.builder()
                                .withColumn("bar")
                                .build(),
                            AggregationColumnNameMappingImpl.builder()
                                .withColumn("PRODUCT_ID")
                                .build(),
                            AggregationColumnNameMappingImpl.builder()
                                .withColumn("CUSTOMER_ID")
                                .build(),
                            AggregationColumnNameMappingImpl.builder()
                                .withColumn("PROMOTION_ID")
                                .build()
                        ))
                        .withAggregationForeignKeys(List.of(
                        		AggregationForeignKeyMappingImpl.builder()
                                .withFactColumn("store_id")
                                .withAggregationColumn("STORE_ID")
                                .build()
                        ))
                        .withAggregationMeasures(List.of(
                        	AggregationMeasureMappingImpl.builder()
                                .withName("[Measures].[Unit Sales]")
                                .withColumn("UNIT_SALES_SUM")
                                .build(),
                            AggregationMeasureMappingImpl.builder()
                                .withName("[Measures].[Store Cost]")
                                .withColumn("STORE_COST_SUM")
                                .build(),
                            AggregationMeasureMappingImpl.builder()
                                .withName("[Measures].[Store Sales]")
                                .withColumn("STORE_SALES_SUM")
                                .build()
                        ))
                        .withAggregationLevels(List.of(
                        	AggregationLevelMappingImpl.builder()
                                .withName("[Time].[Year]")
                                .withColumn("TIME_YEAR")
                                .build(),
                            AggregationLevelMappingImpl.builder()
                                .withName("[Time].[Quarter]")
                                .withColumn("TIME_QUARTER")
                                .build(),
                            AggregationLevelMappingImpl.builder()
                                .withName("[Time].[Month]")
                                .withColumn("TIME_MONTH")
                                .build()
                        )).build()
    			))
    			.build();

    	private static final StandardDimensionMappingImpl storeDimension = StandardDimensionMappingImpl.builder()
        .withName("Store")
        .withHierarchies(List.of(
            HierarchyMappingImpl.builder()
                .withHasAll(true)
                .withPrimaryKey("store_id")
                .withQuery(TableQueryMappingImpl.builder().withName("store").build())
                .withLevels(List.of(
                    LevelMappingImpl.builder()
                        .withName("Store Country")
                        .withColumn("store_country")
                        .withUniqueMembers(true)
                        .build(),
                    LevelMappingImpl.builder()
                        .withName("Store State")
                        .withColumn("store_state")
                        .withUniqueMembers(true)
                        .build(),
                    LevelMappingImpl.builder()
                        .withName("Store City")
                        .withColumn("store_city")
                        .withUniqueMembers(false)
                        .build(),
                    LevelMappingImpl.builder()
                        .withName("Store Name")
                        .withColumn("store_name")
                        .withUniqueMembers(true)
                        .build()
                ))
                .build()
        ))
        .build();

    	private static final TimeDimensionMappingImpl timeDimension = TimeDimensionMappingImpl.builder()
        .withName("Time")
        .withHierarchies(List.of(
            HierarchyMappingImpl.builder()
                .withHasAll(false)
                .withPrimaryKey("time_id")
                .withQuery(TableQueryMappingImpl.builder().withName("time_by_day").build())
                .withLevels(List.of(
                    LevelMappingImpl.builder()
                        .withName("Year").withColumn("the_year")
                        .withType(DataType.NUMERIC)
                        .withUniqueMembers(true)
                        .withLevelType(LevelType.TIME_YEARS)
                        .build(),
                    LevelMappingImpl.builder()
                        .withName("Quarter").withColumn("quarter")
                        .withUniqueMembers(false)
                        .withLevelType(LevelType.TIME_QUARTERS)
                        .build(),
                    LevelMappingImpl.builder()
                        .withName("Month").withColumn("month_of_year")
                        .withUniqueMembers(false)
                        .withType(DataType.NUMERIC)
                        .withLevelType(LevelType.TIME_MONTHS)
                        .build()
                ))
                .build(),
            HierarchyMappingImpl.builder()
                .withHasAll(true)
                .withName("Weekly")
                .withPrimaryKey("time_id")
                .withQuery(TableQueryMappingImpl.builder().withName("time_by_day").build())
                .withLevels(List.of(
                    LevelMappingImpl.builder()
                        .withName("Year").withColumn("the_year")
                        .withType(DataType.NUMERIC)
                        .withUniqueMembers(true)
                        .withLevelType(LevelType.TIME_YEARS)
                        .build(),
                    LevelMappingImpl.builder()
                        .withName("Week").withColumn("week_of_year")
                        .withUniqueMembers(false)
                        .withType(DataType.NUMERIC)
                        .withLevelType(LevelType.TIME_WEEKS)
                        .build(),
                    LevelMappingImpl.builder()
                        .withName("Day").withColumn("day_of_month")
                        .withUniqueMembers(false)
                        .withType(DataType.NUMERIC)
                        .withLevelType(LevelType.TIME_DAYS)
                        .build()
                ))
                .build()
        ))
        .build();

        public TestAggregationManagerModifier9(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<SchemaMapping> catalogSchemas(CatalogMapping catalog2) {
        	MeasureGroupMappingImpl mgSales1 = MeasureGroupMappingImpl.builder().build();

        	MeasureMappingImpl mUnitSalesSales1 = MeasureMappingImpl.builder()
            		.withName("Unit Sales")
                    .withColumn("unit_sales")
                    .withAggregatorType(MeasureAggregatorType.SUM)
                    .withFormatString("Standard")
                    .withMeasureGroup(mgSales1)
                    .build();

        	MeasureMappingImpl mStoreCostSales1 = MeasureMappingImpl.builder()
        	        .withName("Store Cost")
        	        .withColumn("store_cost")
        	        .withAggregatorType(MeasureAggregatorType.SUM)
        	        .withFormatString("#,###.00")
        	        .withMeasureGroup(mgSales1)
        	        .build();

        	MeasureMappingImpl mStoreSalesSales1 = MeasureMappingImpl.builder()
        	        .withName("Store Sales")
        	        .withColumn("store_sales")
        	        .withAggregatorType(MeasureAggregatorType.SUM)
        	        .withFormatString("#,###.00")
        	        .withMeasureGroup(mgSales1)
        	        .build();

        	mgSales1.setMeasures(List.of(mUnitSalesSales1, mStoreCostSales1, mStoreSalesSales1));

        	MeasureGroupMappingImpl mgSales2 = MeasureGroupMappingImpl.builder().build();

        	MeasureMappingImpl mUnitSalesSales2 = MeasureMappingImpl.builder()
            		.withName("Unit Sales")
                    .withColumn("unit_sales")
                    .withAggregatorType(MeasureAggregatorType.SUM)
                    .withFormatString("Standard")
                    .withMeasureGroup(mgSales2)
                    .build();

        	MeasureMappingImpl mStoreCostSales2 = MeasureMappingImpl.builder()
        	        .withName("Store Cost")
        	        .withColumn("store_cost")
        	        .withAggregatorType(MeasureAggregatorType.SUM)
        	        .withFormatString("#,###.00")
        	        .withMeasureGroup(mgSales2)
        	        .build();

        	MeasureMappingImpl mStoreSalesSales2 = MeasureMappingImpl.builder()
        	        .withName("Store Sales")
        	        .withColumn("store_sales")
        	        .withAggregatorType(MeasureAggregatorType.SUM)
        	        .withFormatString("#,###.00")
        	        .withMeasureGroup(mgSales2)
        	        .build();

        	mgSales2.setMeasures(List.of(mUnitSalesSales2, mStoreCostSales2, mStoreSalesSales2));

        	PhysicalCubeMappingImpl cubeSales1 = PhysicalCubeMappingImpl.builder()
        	        .withName("Sales1")
        	        .withDefaultMeasure(mUnitSalesSales1)
        	        .withQuery(t1)
        	        .withDimensionConnectors(List.of(
        	        	DimensionConnectorMappingImpl.builder()
        	        		.withOverrideDimensionName("Store")
        	        		.withForeignKey("store_id")
        	        		.withDimension(storeDimension)
        	        		.build(),
        	           	DimensionConnectorMappingImpl.builder()
        	            		.withOverrideDimensionName("Time")
        	            		.withForeignKey("time_id")
        	            		.withDimension(timeDimension)
        	            		.build()
        	        ))
        	        .withMeasureGroups(List.of(mgSales1))
        	        .build();
        	mgSales1.setPhysicalCube(cubeSales1);

        	PhysicalCubeMappingImpl cubeSales2 = PhysicalCubeMappingImpl.builder()
        	        .withName("Sales2")
        	        .withDefaultMeasure(mUnitSalesSales2)
        	        .withQuery(t2)
        	        .withDimensionConnectors(List.of(
        	        	DimensionConnectorMappingImpl.builder()
        	        		.withOverrideDimensionName("Store")
        	        		.withForeignKey("store_id")
        	        		.withDimension(storeDimension)
        	        		.build(),
        	           	DimensionConnectorMappingImpl.builder()
        	        		.withOverrideDimensionName("Time")
        	        		.withForeignKey("time_id")
        	        		.withDimension(timeDimension)
        	        		.build()
        	        ))
        	        .withMeasureGroups(List.of(mgSales1))
        	        .build();
        	mgSales2.setPhysicalCube(cubeSales2);

            return List.of(SchemaMappingImpl.builder()
                    .withName("custom")
                    .withCubes(List.of(
                    	cubeSales1,
                    	cubeSales2,
                        VirtualCubeMappingImpl.builder()
                        .withName("SuperSales")
                        .withDefaultMeasure(mUnitSalesSales2)
                        .withDimensionConnectors(List.of(
                        	DimensionConnectorMappingImpl.builder()
                        	.withPhysicalCube(cubeSales1)
                        	.withOverrideDimensionName("Store")
                        	.withDimension(storeDimension)
                        	.build(),
                        	DimensionConnectorMappingImpl.builder()
                        	.withPhysicalCube(cubeSales1)
                        	.withOverrideDimensionName("Time")
                        	.withDimension(timeDimension)
                        	.build()

                        ))
                        .withReferencedMeasures(List.of(
                        			mUnitSalesSales2,
                        			mStoreCostSales2,
                        			mStoreSalesSales2
                        ))
                        .build()
                     )).build());
        }
    }

    public static class TestCalculatedMembers1 extends PojoMappingModifier {

        /*
        final String cubeName = "Sales_Bug1410383";
                "<Cube name=\"" + cubeName + "\">\n"
                + "  <Table name=\"sales_fact_1997\"/>\n"
                + "  <Dimension name=\"Gender\" foreignKey=\"customer_id\">\n"
                + "    <Hierarchy hasAll=\"false\" primaryKey=\"customer_id\">\n"
                + "    <Table name=\"customer\"/>\n"
                + "      <Level name=\"Gender\" column=\"gender\" uniqueMembers=\"true\"/>\n"
                + "    </Hierarchy>\n"
                + "  </Dimension>\n"
                + "  <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
                + "      formatString=\"Standard\" visible=\"false\"/>\n"
                + "  <Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\"\n"
                + "      formatString=\"Standard\" visible=\"false\"/>\n"
                + "  <CalculatedMember\n"
                + "      name=\"Apos in dq\"\n"
                + "      dimension=\"Measures\"\n"
                + "      visible=\"false\"\n"
                + "      formula=\" &quot;an 'apos' in dq&quot; \" />\n"
                + "  <CalculatedMember\n"
                + "      name=\"Dq in dq\"\n"
                + "      dimension=\"Measures\"\n"
                + "      visible=\"false\"\n"
                + "      formula=\" &quot;a &quot;&quot;dq&quot;&quot; in dq&quot; \" />\n"
                + "  <CalculatedMember\n"
                + "      name=\"Apos in apos\"\n"
                + "      dimension=\"Measures\"\n"
                + "      visible=\"false\"\n"
                + "      formula=\" &apos;an &apos;&apos;apos&apos;&apos; in apos&apos; \" />\n"
                + "  <CalculatedMember\n"
                + "      name=\"Dq in apos\"\n"
                + "      dimension=\"Measures\"\n"
                + "      visible=\"false\"\n"
                + "      formula=\" &apos;a &quot;dq&quot; in apos&apos; \" />\n"
                + "  <CalculatedMember\n"
                + "      name=\"Colored Profit\"\n"
                + "      dimension=\"Measures\"\n"
                + "      visible=\"false\"\n"
                + "      formula=\" [Measures].[Store Sales] - [Measures].[Store Cost] \">\n"
                + "    <CalculatedMemberProperty name=\"FORMAT_STRING\" expression=\"Iif([Measures].[Colored Profit] &lt; 0, '|($#,##0.00)|style=red', '|$#,##0.00|style=green')\"/>\n"
                + "  </CalculatedMember>\n"
                + "</Cube>";

         */
        public TestCalculatedMembers1(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CubeMapping> schemaCubes(SchemaMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.schemaCubes(schema));
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("Sales_Bug1410383")
                .withQuery(TableQueryMappingImpl.builder().withName("sales_fact_1997").build())
                .withDimensionConnectors(List.of(DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Gender")
                		.withForeignKey("customer_id")
                		.withDimension(StandardDimensionMappingImpl.builder()
                                .withName("Gender")
                                .withHierarchies(List.of(
                                    HierarchyMappingImpl.builder()
                                        .withHasAll(false)
                                        .withPrimaryKey("customer_id")
                                        .withQuery(TableQueryMappingImpl.builder().withName("customer").build())
                                        .withLevels(List.of(
                                            LevelMappingImpl.builder()
                                                .withName("Gender")
                                                .withColumn("gender")
                                                .withUniqueMembers(true)
                                                .build()
                                        ))
                                        .build()
                                ))
                				.build())
                		.build()))
                .withMeasureGroups(List.of(MeasureGroupMappingImpl.builder()
                	.withMeasures(List.of(
                		MeasureMappingImpl.builder()
                			.withName("Store Sales")
                			.withColumn("store_sales")
                			.withAggregatorType(MeasureAggregatorType.SUM)
                			.withFormatString("Standard")
                			.withVisible(false)
                			.build(),
                		MeasureMappingImpl.builder()
                        	.withName("Store Cost")
                        	.withColumn("store_cost")
                        	.withAggregatorType(MeasureAggregatorType.SUM)
                        	.withFormatString("Standard")
                        	.withVisible(false)
                        	.build()
                    )).build()
                ))
                .withCalculatedMembers(List.of(
                    CalculatedMemberMappingImpl.builder()
                        .withName("Apos in dq")
                        //.dimension("Measures")
                        .withVisible(false)
                        .withFormula(" \"an 'apos' in dq\" ")
                        .build(),
                    CalculatedMemberMappingImpl.builder()
                        .withName("Dq in dq")
                        //.dimension("Measures")
                        .withVisible(false)
                        .withFormula(" \"a \"\"dq\"\" in dq\" ")
                        .build(),
                    CalculatedMemberMappingImpl.builder()
                        .withName("Apos in apos")
                        //.dimension("Measures")
                        .withVisible(false)
                        .withFormula(" 'an ''apos'' in apos' ")
                        .build(),
                    CalculatedMemberMappingImpl.builder()
                        .withName("Dq in apos")
                        //.dimension("Measures")
                        .withVisible(false)
                        .withFormula(" 'a \"dq\" in apos' ")
                        .build(),
                    CalculatedMemberMappingImpl.builder()
                        .withName("Colored Profit")
                        //.dimension("Measures")
                        .withVisible(false)
                        .withFormula(" [Measures].[Store Sales] - [Measures].[Store Cost] ")
                        .withCalculatedMemberProperties(List.of(
                        	CalculatedMemberPropertyMappingImpl.builder()
                                .withName("FORMAT_STRING")
                                .withExpression("Iif([Measures].[Colored Profit] < 0, '|($#,##0.00)|style=red', '|$#,##0.00|style=green')")
                                .build()
                        ))
                        .build()
                ))
                .build());
            return result;
        }

    }

    public static class TestCalculatedMembers2 extends PojoMappingModifier {

        /*
            "<Cube name=\"Store5\"> \n"
            + "  <Table name=\"store\"/> \n"
            + "  <!-- We could have used the shared dimension \"Store Type\", but we \n"
            + "     want to test private dimensions without primary key. --> \n"
            + "  <Dimension name=\"Store Type\"> \n"
            + "    <Hierarchy name=\"Store Types Hierarchy\" allMemberName=\"All Store Types Member Name\" hasAll=\"true\"> \n"
            + "      <Level name=\"Store Type\" column=\"store_type\" uniqueMembers=\"true\"/> \n"
            + "    </Hierarchy> \n"
            + "  </Dimension> \n"
            + "\n"
            + "  <Dimension name=\"Country\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"customer_id\">\n"
            + "      <Level name=\"Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "\n"
            + "  <Measure name=\"Store Sqft\" column=\"store_sqft\" aggregator=\"sum\" \n"
            + "      formatString=\"#,###\"/> \n"
            + "  <Measure name=\"Grocery Sqft\" column=\"grocery_sqft\" aggregator=\"sum\" \n"
            + "      formatString=\"#,###\" description=\"Grocery Sqft Description...\"> \n"
            + "    <Annotations> \n"
            + "        <Annotation name=\"AnalyzerBusinessGroup\">Numbers</Annotation> \n"
            + "    </Annotations> \n"
            + "  </Measure> \n"
            + "  <CalculatedMember \n"
            + "      name=\"Constant 1\" description=\"Constant 1 Description...\" \n"
            + "      dimension=\"Measures\"> \n"
            + "    <Annotations> \n"
            + "        <Annotation name=\"AnalyzerBusinessGroup\">Numbers</Annotation> \n"
            + "    </Annotations> \n"
            + "    <Formula>1</Formula> \n"
            + "  </CalculatedMember> \n"
            + "</Cube> ",


         */
        public TestCalculatedMembers2(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CubeMapping> schemaCubes(SchemaMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.schemaCubes(schema));
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("Store5")
                .withQuery(TableQueryMappingImpl.builder().withName("store").build())
                .withDimensionConnectors(List.of(
                	DimensionConnectorMappingImpl.builder()
                	.withOverrideDimensionName("Store Type")
                	.withDimension(
                		StandardDimensionMappingImpl.builder()
                        	.withName("Store Type")
                        	.withHierarchies(List.of(
                        		HierarchyMappingImpl.builder()
                            		.withName("Store Types Hierarchy")
                            		.withAllMemberName("All Store Types Member Name")
                            		.withHasAll(true)
                            		.withLevels(List.of(
                            			LevelMappingImpl.builder()
                            				.withName("Store Type")
                            				.withColumn("store_type")
                            				.withUniqueMembers(true)
                            				.build()
                            			))
                                    	.build()
                        			))
                        	.build())
                		.build(),
                	DimensionConnectorMappingImpl.builder()
                    .withOverrideDimensionName("Country")
                    .withDimension(
                    	StandardDimensionMappingImpl.builder()
                           	.withName("Country")
                           	.withHierarchies(List.of(
                           		HierarchyMappingImpl.builder()
                               		.withHasAll(true)
                               		.withPrimaryKey("customer_id")
                               		.withLevels(List.of(
                               			LevelMappingImpl.builder()
                               				.withName("Country")
                               				.withColumn("store_country")
                               				.withUniqueMembers(true)
                               				.build()
                               			))
                                       	.build()
                           			))
                           	.build())
                    	.build()
                ))
                .withMeasureGroups(List.of(
                	MeasureGroupMappingImpl.builder()
                	.withMeasures(List.of(
                        MeasureMappingImpl.builder()
                            .withName("Store Sqft")
                            .withColumn("store_sqft")
                            .withAggregatorType(MeasureAggregatorType.SUM)
                            .withFormatString("#,###")
                            .build(),
                        MeasureMappingImpl.builder()
                            .withName("Grocery Sqft")
                            .withColumn("grocery_sqft")
                            .withAggregatorType(MeasureAggregatorType.SUM)
                            .withFormatString("#,###")
                            .withDescription("Grocery Sqft Description...")
                            .withAnnotations(List.of(
                            	AnnotationMappingImpl.builder()
                                    .withName("AnalyzerBusinessGroup")
                                    .withValue("Numbers")
                                    .build()
                            ))
                            .build()
                	))
                	.build()
                ))
                .withCalculatedMembers(List.of(
                    CalculatedMemberMappingImpl.builder()
                        .withName("Constant 1")
                        .withDescription("Constant 1 Description...")
                        //.dimension("Measures")
                        .withAnnotations(List.of(
                            AnnotationMappingImpl.builder()
                                .withName("AnalyzerBusinessGroup")
                                .withValue("Numbers")
                                .build()
                        ))
                        .withFormula("1")
                        .build()
                ))

                .build());
            return result;
        }
    }

    public static class TestCalculatedMembers3 extends PojoMappingModifier {

        /*
        final String cubeName = "Sales_BracketInCubeCalcMemberName";
        String s =
            "<Cube name=\"" + cubeName + "\">\n"
            + "  <Table name=\"sales_fact_1997\"/>\n"
            + "  <Dimension name=\"Gender\" foreignKey=\"customer_id\">\n"
            + "    <Hierarchy hasAll=\"false\" primaryKey=\"customer_id\">\n"
            + "    <Table name=\"customer\"/>\n"
            + "      <Level name=\"Gender\" column=\"gender\" uniqueMembers=\"true\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\" visible=\"false\"/>\n"
            + "  <CalculatedMember\n"
            + "      name=\"With a [bracket] inside it\"\n"
            + "      dimension=\"Measures\"\n"
            + "      visible=\"false\"\n"
            + "      formula=\"[Measures].[Unit Sales] * 10\">\n"
            + "    <CalculatedMemberProperty name=\"FORMAT_STRING\" value=\"$#,##0.00\"/>\n"
            + "  </CalculatedMember>\n"
            + "</Cube>";

         */
        public TestCalculatedMembers3(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends CubeMapping> schemaCubes(SchemaMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.schemaCubes(schema));
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("Sales_BracketInCubeCalcMemberName")
                .withQuery(TableQueryMappingImpl.builder().withName("sales_fact_1997").build())
                .withDimensionConnectors(List.of(
                	DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Gender")
                        .withForeignKey("customer_id")
                        .withDimension(StandardDimensionMappingImpl.builder()
                        	.withName("Gender")
                        	.withHierarchies(List.of(
                        		HierarchyMappingImpl.builder()
                        			.withHasAll(false)
                        			.withPrimaryKey("customer_id")
                        			.withQuery(TableQueryMappingImpl.builder().withName("customer").build())
                        			.withLevels(List.of(
                        					LevelMappingImpl.builder()
                        					.withName("Gender")
                        					.withColumn("gender")
                        					.withUniqueMembers(true)
                        					.build()
                        					))
                        			.build()
                            ))
                            .build()
                         ).build()
                ))
                .withMeasureGroups(List.of(
                	MeasureGroupMappingImpl.builder()
                	.withMeasures(List.of(
                            MeasureMappingImpl.builder()
                            .withName("Unit Sales")
                            .withColumn("unit_sales")
                            .withAggregatorType(MeasureAggregatorType.SUM)
                            .withFormatString("Standard")
                            .withVisible(false)
                            .build()
                	))
                	.build()
                ))
                .withCalculatedMembers(List.of(
                    CalculatedMemberMappingImpl.builder()
                        .withName("With a [bracket] inside it")
                        //.dimension("Measures")
                        .withVisible(false)
                        .withFormula("[Measures].[Unit Sales] * 10")
                        .withCalculatedMemberProperties(List.of(
                            CalculatedMemberPropertyMappingImpl.builder()
                                .withName("FORMAT_STRING")
                                .withValue("$#,##0.00")
                                .build()
                        ))
                        .build()
                ))

                .build());
            return result;
        }
    }


    public static class CurrentDateMemberUdfTestModifier1 extends PojoMappingModifier {

        /*
            "<UserDefinedFunction name=\"MockCurrentDateMember\" "
            + "className=\"mondrian.udf.MockCurrentDateMember\" /> ",

            */


        public CurrentDateMemberUdfTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("MockCurrentDateMember")
                .className("mondrian.udf.MockCurrentDateMember")
                .build());
            return result;
        }
        */
    }

    public static class UsagePrefixTestModifier1 extends PojoMappingModifier {

        /*
            "<Schema name=\"usagePrefixTest\">"
            + "<Dimension name='StoreX' >\n"
            + " <Hierarchy hasAll='true' primaryKey='store_id'>\n"
            + " <Table name='store_x'/>\n"
            + " <Level name='Store Value' column='value' uniqueMembers='true'/>\n"
            + " </Hierarchy>\n"
            + "</Dimension>\n"
            + "<Dimension name='StoreY' >\n"
            + " <Hierarchy hasAll='true' primaryKey='store_id'>\n"
            + " <Table name='store_y'/>\n"
            + " <Level name='Store Value' column='value' uniqueMembers='true'/>\n"
            + " </Hierarchy>\n"
            + "</Dimension>\n"
            + "<Cube name='Cheques'>\n"
            + "<Table name='cheques'>\n"
            + "<AggName name='agg_lp_xxx_cheques'>\n"
            + "<AggFactCount column='FACT_COUNT'/>\n"

            + "<AggMeasure name='[Measures].[Amount]'\n"
            + "   column='amount' />\n"
            + "        <AggLevel name=\"[StoreX].[Store Value]\" column=\"value\" />"
            + "</AggName>\n"
            + "</Table>\n"

            + "<DimensionUsage name=\"StoreX\" source=\"StoreX\" foreignKey=\"store_id\" "
            + " usagePrefix=\"firstprefix_\" />"

            + "<DimensionUsage name=\"StoreY\" source=\"StoreY\" foreignKey=\"store_id\" "
            + " usagePrefix=\"secondprefix_\" />"

            + "<Measure name='Amount' \n"
            + "    column='amount' aggregator='sum'\n"
            + "   formatString='00.0'/>\n"
            + "</Cube>"
            + "</Schema>";

         */

    	private static final DimensionMappingImpl dimensionStoreX = StandardDimensionMappingImpl.builder()
    		.withName("StoreX")
    		.withHierarchies(List.of(
    			HierarchyMappingImpl.builder()
    				.withHasAll(true)
    				.withPrimaryKey("store_id")
    				.withQuery(TableQueryMappingImpl.builder().withName("store_x").build())
    				.withLevels(List.of(
    					LevelMappingImpl.builder()
    						.withName("Store Value")
    						.withColumn("value")
    						.withUniqueMembers(true)
    						.build()
    				))
            .build()
        ))
        .build();

    	private static final DimensionMappingImpl dimensionStoreY = StandardDimensionMappingImpl.builder()
       		.withName("StoreY")
       		.withHierarchies(List.of(
       			HierarchyMappingImpl.builder()
       				.withHasAll(true)
       				.withPrimaryKey("store_id")
       				.withQuery(TableQueryMappingImpl.builder().withName("store_y").build())
       				.withLevels(List.of(
       					LevelMappingImpl.builder()
       						.withName("Store Value")
       						.withColumn("value")
       						.withUniqueMembers(true)
       						.build()
       				))
               .build()
           ))
           .build();

        public UsagePrefixTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<SchemaMapping> catalogSchemas(CatalogMapping catalog) {
            return List.of(SchemaMappingImpl.builder()
                    .withName("usagePrefixTest")
                    .withCubes(List.of(
                        PhysicalCubeMappingImpl.builder()
                            .withName("Cheques")
                            .withQuery(
                            	TableQueryMappingImpl.builder().withName("cheques")
                            		.withAggregationTables(List.of(
                            			AggregationNameMappingImpl.builder()
                            				.withName("agg_lp_xxx_cheques")
                            				.withAggregationFactCount(AggregationColumnNameMappingImpl.builder()
                            					.withColumn("FACT_COUNT")
                            					.build())
                            				.withAggregationMeasures(List.of(
                            					AggregationMeasureMappingImpl.builder()
                            					.withName("[Measures].[Amount]")
                            					.withColumn("amount")
                            					.build()
                            				))
                            				.withAggregationLevels(List.of(
                            					AggregationLevelMappingImpl.builder()
                            						.withName("[StoreX].[Store Value]")
                            						.withColumn("value")
                            						.build()
                            				))
                            				.build())).build()
                            )
                            .withDimensionConnectors(List.of(
                            	DimensionConnectorMappingImpl.builder()
                            	.withOverrideDimensionName("StoreX")
                            	.withDimension(dimensionStoreX)
                                .withForeignKey("store_id")
                                .withUsagePrefix("firstprefix_")
                            	.build(),
                            	DimensionConnectorMappingImpl.builder()
                            	.withOverrideDimensionName("StoreY")
                            	.withDimension(dimensionStoreY)
                                .withForeignKey("store_id")
                                .withUsagePrefix("secondprefix_")
                            	.build()
                            ))
                            .withMeasureGroups(List.of(
                            	MeasureGroupMappingImpl.builder()
                            	.withMeasures(List.of(
                            		MeasureMappingImpl.builder()
                                    	.withName("Amount")
                                        .withColumn("amount")
                                        .withAggregatorType(MeasureAggregatorType.SUM)
                                        .withFormatString("00.0")
                                        .build()
                            	))
                            	.build()
                            ))
                            .build()
                    ))
            		.build());
        }
    }

    public static class DrillThroughExcludeFilterTestModifier extends PojoMappingModifier {

        /*
    String schema = "<Schema name=\"MYFoodmart\">\n"
            + "  <Dimension visible=\"true\" highCardinality=\"false\" name=\"Store\">\n"
            + "    <Hierarchy visible=\"true\" hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "      <Table name=\"store\"/>\n"
            + "      <Level name=\"Store ID\" visible=\"true\" column=\"store_id\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension type=\"TimeDimension\" visible=\"true\" highCardinality=\"false\" name=\"Time\">\n"
            + "    <Hierarchy name=\"Time Hierarchy\" visible=\"true\" hasAll=\"true\" primaryKey=\"time_id\">\n"
            + "      <Table name=\"time_by_day\"/>\n"
            + "      <Level name=\"Year\" visible=\"true\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"false\" levelType=\"TimeYears\" hideMemberIf=\"Never\"/>\n"
            + "      <Level name=\"Quarter\" visible=\"true\" column=\"quarter\" type=\"String\" uniqueMembers=\"false\" levelType=\"TimeQuarters\" hideMemberIf=\"Never\"/>\n"
            + "      <Level name=\"Month\" visible=\"true\" column=\"month_of_year\" nameColumn=\"the_month\" type=\"Integer\" uniqueMembers=\"false\" levelType=\"TimeMonths\" hideMemberIf=\"Never\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension visible=\"true\" highCardinality=\"false\" name=\"Warehouse\">\n"
            + "    <Hierarchy name=\"Warehouse\" visible=\"true\" hasAll=\"true\" primaryKey=\"warehouse_id\">\n"
            + "      <Table name=\"warehouse\"/>\n"
            + "      <Level name=\"Warehouse Name\" visible=\"true\" column=\"warehouse_name\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Cube name=\"Sales\" visible=\"true\" defaultMeasure=\"Unit Sales\" cache=\"true\" enabled=\"true\">\n"
            + "    <Table name=\"sales_fact_1997\"/>\n"
            + "    <DimensionUsage source=\"Store\" name=\"Store\" visible=\"true\" foreignKey=\"store_id\" highCardinality=\"false\"/>\n"
            + "    <DimensionUsage source=\"Time\" name=\"Time\" visible=\"true\" foreignKey=\"time_id\" highCardinality=\"false\"/>\n"
            + "    <Measure name=\"Store Sales\" column=\"store_sales\" formatString=\"#,###.00\" aggregator=\"sum\"/>\n"
            + "  </Cube>\n"
            + "  <Cube name=\"Warehouse\" visible=\"true\" cache=\"true\" enabled=\"true\">\n"
            + "    <Table name=\"inventory_fact_1997\"/>\n"
            + "    <DimensionUsage source=\"Store\" name=\"Store\" visible=\"true\" foreignKey=\"store_id\" highCardinality=\"false\"/>\n"
            + "    <DimensionUsage source=\"Time\" name=\"Time\" visible=\"true\" foreignKey=\"time_id\" highCardinality=\"false\"/>\n"
            + "    <DimensionUsage source=\"Warehouse\" name=\"Warehouse\" visible=\"true\" foreignKey=\"warehouse_id\" highCardinality=\"false\"/>\n"
            + "    <Measure name=\"Warehouse Sales\" column=\"warehouse_sales\" aggregator=\"sum\"/>\n"
            + "  </Cube>\n"
            + "  <VirtualCube enabled=\"true\" name=\"Warehouse and Sales\" defaultMeasure=\"Store Sales\" visible=\"true\">\n"
            + "    <VirtualCubeDimension visible=\"true\" highCardinality=\"false\" name=\"Time\"/>\n"
            + "    <VirtualCubeMeasure cubeName=\"Sales\" name=\"[Measures].[Store Sales]\"/>\n"
            + "    <VirtualCubeMeasure cubeName=\"Warehouse\" name=\"[Measures].[Warehouse Sales]\"/>\n"
            + "  </VirtualCube>  \n"
            + "</Schema>\n";

         */

    	private static final DimensionMappingImpl dimensionStore = StandardDimensionMappingImpl.builder()
           		.withName("Store")
           		.withVisible(true)
           		.withHierarchies(List.of(
           			HierarchyMappingImpl.builder()
           				.withHasAll(true)
           				.withPrimaryKey("store_id")
           				.withQuery(TableQueryMappingImpl.builder().withName("store").build())
           				.withLevels(List.of(
           					LevelMappingImpl.builder()
           						.withName("Store ID")
           						.withVisible(true)
           						.withColumn("store_id")
           						.withType(DataType.STRING)
           						.withUniqueMembers(true)
                                .withLevelType(LevelType.REGULAR)
                                .withHideMemberIfType(HideMemberIfType.NEVER)
           						.build()
           				))
                   .build()
               ))
               .build();

    	private static final DimensionMappingImpl dimensionTime = TimeDimensionMappingImpl.builder()
           		.withName("Time")
           		.withVisible(true)
           		.withHierarchies(List.of(
           			HierarchyMappingImpl.builder()
           				.withName("Time Hierarchy")
           				.withVisible(true)
           				.withHasAll(true)
           				.withPrimaryKey("time_id")
           				.withQuery(TableQueryMappingImpl.builder().withName("time_by_day").build())
           				.withLevels(List.of(
           					LevelMappingImpl.builder()
           						.withName("Year")
           						.withVisible(true)
           						.withColumn("the_year")
           						.withType(DataType.NUMERIC)
           						.withUniqueMembers(true)
                                .withLevelType(LevelType.TIME_YEARS)
                                .withHideMemberIfType(HideMemberIfType.NEVER)
           						.build(),
               				LevelMappingImpl.builder()
           						.withName("Quarter")
           						.withVisible(true)
           						.withColumn("quarter")
           						.withType(DataType.STRING)
           						.withUniqueMembers(false)
                                .withLevelType(LevelType.TIME_QUARTERS)
                                .withHideMemberIfType(HideMemberIfType.NEVER)
           						.build(),
                   			LevelMappingImpl.builder()
               					.withName("Month")
               					.withVisible(true)
               					.withColumn("month_of_year")
               					.withNameColumn("the_month")
               					.withType(DataType.INTEGER)
               					.withUniqueMembers(false)
                                .withLevelType(LevelType.TIME_MONTHS)
                                .withHideMemberIfType(HideMemberIfType.NEVER)
               					.build()
           				))
                   .build()
               ))
               .build();

      	private static final DimensionMappingImpl dimensionWarehouse = StandardDimensionMappingImpl.builder()
           		.withName("Warehouse")
           		.withVisible(true)
           		.withHierarchies(List.of(
           			HierarchyMappingImpl.builder()
           				.withName("Warehouse")
           				.withVisible(true)
           				.withHasAll(true)
           				.withPrimaryKey("warehouse_id")
           				.withQuery(TableQueryMappingImpl.builder().withName("warehouse").build())
           				.withLevels(List.of(
           					LevelMappingImpl.builder()
           						.withName("Warehouse Name")
           						.withVisible(true)
           						.withColumn("warehouse_name")
           						.withType(DataType.STRING)
           						.withUniqueMembers(true)
                                .withLevelType(LevelType.REGULAR)
                                .withHideMemberIfType(HideMemberIfType.NEVER)
           						.build()
           				))
                   .build()
               ))
               .build();



        public DrillThroughExcludeFilterTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<SchemaMapping> catalogSchemas(CatalogMapping catalog) {

        	MeasureGroupMappingImpl mgSales = MeasureGroupMappingImpl.builder().build();
        	MeasureGroupMappingImpl mgWarehouse = MeasureGroupMappingImpl.builder().build();
          	MeasureMappingImpl mStoreSales = MeasureMappingImpl.builder()
              		.withName("Store Sales")
              		.withColumn("store_sales")
              		.withFormatString("#,###.00")
              		.withAggregatorType(MeasureAggregatorType.SUM)
              		.withMeasureGroup(mgSales)
              		.build();

            MeasureMappingImpl mWarehouseSales = MeasureMappingImpl.builder()
              		.withName("Warehouse Sales")
              		.withColumn("warehouse_sales")
              		.withAggregatorType(MeasureAggregatorType.SUM)
              		.withMeasureGroup(mgWarehouse)
              		.build();

            mgSales.setMeasures(List.of(mStoreSales));
            mgWarehouse.setMeasures(List.of(mWarehouseSales));

            PhysicalCubeMappingImpl cubeSales = PhysicalCubeMappingImpl.builder()
        	.withName("Sales")
            .withVisible(true)
            //.withDefaultMeasure("Unit Sales") //TODO Unit Sales is absent in schema
            .withCache(true)
            .withEnabled(true)
            .withQuery(TableQueryMappingImpl.builder().withName("sales_fact_1997").build())
            .withDimensionConnectors(List.of(
            	DimensionConnectorMappingImpl.builder()
            		.withOverrideDimensionName("Store")
            		.withDimension(dimensionStore)
                    .withVisible(true)
                    .withForeignKey("store_id")
                    .build(),
                DimensionConnectorMappingImpl.builder()
            		.withOverrideDimensionName("Time")
            		.withDimension(dimensionTime)
                    .withVisible(true)
                    .withForeignKey("time_id")
                    .build()
            ))
            .withMeasureGroups(List.of(mgSales))
            .build();
            mgSales.setPhysicalCube(cubeSales);

            PhysicalCubeMappingImpl cubeWarehouse = PhysicalCubeMappingImpl.builder()
        	.withName("Warehouse")
            .withVisible(true)
            .withCache(true)
            .withEnabled(true)
            .withQuery(TableQueryMappingImpl.builder().withName("inventory_fact_1997").build())
            .withDimensionConnectors(List.of(
            	DimensionConnectorMappingImpl.builder()
            		.withDimension(dimensionStore)
            		.withOverrideDimensionName("Store")
                    .withVisible(true)
                    .withForeignKey("store_id")
                     .build(),
                DimensionConnectorMappingImpl.builder()
                	.withDimension(dimensionTime)
                    .withOverrideDimensionName("Time")
                    .withVisible(true)
                    .withForeignKey("time_id")
                    .build(),
               DimensionConnectorMappingImpl.builder()
               		.withDimension(dimensionWarehouse)
               		.withOverrideDimensionName("Warehouse")
                    .withVisible(true)
                    .withForeignKey("warehouse_id")
                    .build()
            ))
            .withMeasureGroups(List.of(mgWarehouse)).build();
            mgWarehouse.setPhysicalCube(cubeWarehouse);

            return List.of(SchemaMappingImpl.builder()
                    .withName("MYFoodmart")
                    .withCubes(List.of(cubeSales, cubeWarehouse,
                       VirtualCubeMappingImpl.builder()
                            .withEnabled(true)
                            .withName("Warehouse and Sales")
                            .withDefaultMeasure(mStoreSales)
                            .withVisible(true)
                            .withDimensionConnectors(List.of(
                            	DimensionConnectorMappingImpl.builder()
                            	.withOverrideDimensionName("Time")
                            	.withDimension(dimensionTime)
                            	.withVisible(true)
                            	.build()
                            ))
                            .withReferencedMeasures(List.of(mStoreSales, mWarehouseSales))
                            .build()
                    ))
                    .build());
        }

    }

    public static class CompatibilityTestModifier extends PojoMappingModifier {

        /*
        final String cubeName = "Sales_inline";
        String schema = SchemaUtil.getSchema(
    		baseSchema,
            null,
            "<Cube name=\"" + cubeName + "\">\n"
            + "  <Table name=\"sales_fact_1997\"/>\n"
            + "  <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
            + "  <Dimension name=\"Alternative Promotion\" foreignKey=\"promotion_id\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"promo_id\">\n"
            + "      <InlineTable alias=\"alt_promotion\">\n"
            + "        <ColumnDefs>\n"
            + "          <ColumnDef name=\"promo_id\" type=\"Numeric\"/>\n"
            + "          <ColumnDef name=\"promo_name\" type=\"String\"/>\n"
            + "        </ColumnDefs>\n"
            + "        <Rows>\n"
            + "          <Row>\n"
            + "            <Value column=\"promo_id\">0</Value>\n"
            + "          </Row>\n"
            + "          <Row>\n"
            + "            <Value column=\"promo_id\">1</Value>\n"
            + "            <Value column=\"promo_name\">Promo1</Value>\n"
            + "          </Row>\n"
            + "        </Rows>\n"
            + "      </InlineTable>\n"
            + "      <Level name=\"Alternative Promotion\" column=\"promo_id\" nameColumn=\"promo_name\" uniqueMembers=\"true\"/> \n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\" visible=\"false\"/>\n"
            + "  <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n"
            + "</Cube>", null, null, null, null);
         */
        public CompatibilityTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends CubeMapping> schemaCubes(SchemaMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.schemaCubes(schema));
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("Sales_inline")
                .withQuery(TableQueryMappingImpl.builder().withName("sales_fact_1997").build())
                .withDimensionConnectors(List.of(
                	DimensionConnectorMappingImpl.builder()
                        .withOverrideDimensionName("Time")
                        .withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_TIME))
                        .withForeignKey("time_id")
                        .build(),
                    DimensionConnectorMappingImpl.builder()
                        .withOverrideDimensionName("Alternative Promotion")
                        .withForeignKey("promotion_id")
                        .withDimension(StandardDimensionMappingImpl.builder()
                        	.withName("Alternative Promotion")
                        	.withHierarchies(List.of(
                        		HierarchyMappingImpl.builder()
                                .withHasAll(true)
                                .withPrimaryKey("promo_id")
                                .withQuery(InlineTableQueryMappingImpl.builder()
                                    .withAlias("alt_promotion")
                                    .withColumnDefinitions(List.of(
                                    	InlineTableColumnDefinitionMappingImpl.builder()
                                            .withName("promo_id")
                                            .withType(DataType.NUMERIC)
                                            .build(),
                                        InlineTableColumnDefinitionMappingImpl.builder()
                                            .withName("promo_name")
                                            .withType(DataType.STRING)
                                            .build()
                                    ))
                                    .withRows(List.of(
                                        InlineTableRowMappingImpl.builder()
                                        	.withCells(List.of(
                                        		InlineTableRowCellMappingImpl.builder()
                                        			.withColumnName("promo_id")
                                        			.withValue("0")
                                                    .build()
                                            ))
                                            .build(),
                                        InlineTableRowMappingImpl.builder()
                                        	.withCells(List.of(
                                        		InlineTableRowCellMappingImpl.builder()
                                                    .withColumnName("promo_id")
                                                    .withValue("1")
                                                    .build(),
                                                InlineTableRowCellMappingImpl.builder()
                                                    .withColumnName("promo_name")
                                                    .withValue("Promo1")
                                                    .build()

                                            ))
                                            .build()
                                    ))
                                    .build())
                                .withLevels(List.of(
                                    LevelMappingImpl.builder()
                                        .withName("Alternative Promotion")
                                        .withColumn("promo_id")
                                        .withNameColumn("promo_name")
                                        .withUniqueMembers(true)
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                    ).build()
                ))
                .withMeasureGroups(List.of(
                	MeasureGroupMappingImpl.builder()
                	.withMeasures(List.of(
                       MeasureMappingImpl.builder()
                            .withName("Unit Sales")
                            .withColumn("unit_sales")
                            .withAggregatorType(MeasureAggregatorType.SUM)
                            .withFormatString("Standard")
                            .withVisible(false)
                            .build(),
                       MeasureMappingImpl.builder()
                            .withName("Store Sales")
                            .withColumn("store_sales")
                            .withAggregatorType(MeasureAggregatorType.SUM)
                            .withFormatString("#,###.00")
                            .build()
                	))
                	.build()
                ))
                .build());
            return result;
        }
    }

    public static class CompatibilityTestModifier2 extends PojoMappingModifier {

        /*
        final String cubeName = "Store_NullsCollation";
            "<Cube name=\"" + cubeName + "\">\n"
            + "  <Table name=\"store\"/>\n"
            + "  <Dimension name=\"Store\" foreignKey=\"store_id\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "      <Level name=\"Store Name\" column=\"store_name\"  uniqueMembers=\"true\">\n"
            + "       <OrdinalExpression>\n"
            + "        <SQL dialect=\"access\">\n"
            + "           Iif(store_name = 'HQ', null, store_name)\n"
            + "       </SQL>\n"
            + "        <SQL dialect=\"oracle\">\n"
            + "           case \"store_name\" when 'HQ' then null else \"store_name\" end\n"
            + "       </SQL>\n"
            + "        <SQL dialect=\"hsqldb\">\n"
            + "           case \"store_name\" when 'HQ' then null else \"store_name\" end\n"
            + "       </SQL>\n"
            + "        <SQL dialect=\"db2\">\n"
            + "           case \"store\".\"store_name\" when 'HQ' then null else \"store\".\"store_name\" end\n"
            + "       </SQL>\n"
            + "        <SQL dialect=\"luciddb\">\n"
            + "           case \"store_name\" when 'HQ' then null else \"store_name\" end\n"
            + "       </SQL>\n"
            + "        <SQL dialect=\"netezza\">\n"
            + "           case \"store_name\" when 'HQ' then null else \"store_name\" end\n"
            + "       </SQL>\n"
            + "        <SQL dialect=\"generic\">\n"
            + "           case store_name when 'HQ' then null else store_name end\n"
            + "       </SQL>\n"
            + "       </OrdinalExpression>\n"
            + "        <Property name=\"Store Sqft\" column=\"store_sqft\" type=\"Numeric\"/>\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Measure name=\"Store Sqft\" column=\"store_sqft\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###\"/>\n"
            + "</Cube>",
         */
        public CompatibilityTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends CubeMapping> schemaCubes(SchemaMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.schemaCubes(schema));
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("Store_NullsCollation")
                .withQuery(TableQueryMappingImpl.builder().withName("store").build())
                .withDimensionConnectors(List.of(
                	DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Store")
                        .withForeignKey("store_id")
                        .withDimension(StandardDimensionMappingImpl.builder()
                        		.withName("Store")
                        		.withHierarchies(List.of(
                        			HierarchyMappingImpl.builder()
                        				.withHasAll(true)
                        				.withPrimaryKey("store_id")
                        				.withLevels(List.of(
                        					LevelMappingImpl.builder()
                        						.withName("Store Name")
                        						.withColumn("store_name")
                        						.withUniqueMembers(true)
                        						.withOrdinalExpression(SQLExpressionMappingImpl.builder()
                        							.withSqls(List.of(
                        								SQLMappingImpl.builder().withStatement("Iif(store_name = 'HQ', null, store_name)").withDialects(List.of("access")).build(),
                        								SQLMappingImpl.builder().withStatement("case \"store_name\" when 'HQ' then null else \"store_name\" end").withDialects(List.of("oracle")).build(),
                        								SQLMappingImpl.builder().withStatement("case \"store_name\" when 'HQ' then null else \"store_name\" end").withDialects(List.of("hsqldb")).build(),
                        								SQLMappingImpl.builder().withStatement("case \"store\".\"store_name\" when 'HQ' then null else \"store\".\"store_name\" end").withDialects(List.of("db2")).build(),
                        								SQLMappingImpl.builder().withStatement("case \"store_name\" when 'HQ' then null else \"store_name\" end").withDialects(List.of("luciddb")).build(),
                        								SQLMappingImpl.builder().withStatement("case \"store_name\" when 'HQ' then null else \"store_name\" end").withDialects(List.of("netezza")).build(),
                        								SQLMappingImpl.builder().withStatement("case store_name when 'HQ' then null else store_name end").withDialects(List.of("generic")).build()
                        						)).build())
                        						.withMemberProperties(List.of(
                        							MemberPropertyMappingImpl.builder()
                        								.withName("Store Sqft")
                        								.withColumn("store_sqft")
                        								.withDataType(DataType.NUMERIC)
                        								.build()
                        						))
                        						.build()
                        				)).build()))
                                .build()
                        )
                        .build()
                ))
                .withMeasureGroups(List.of(MeasureGroupMappingImpl.builder()
                		.withMeasures(List.of(
                           MeasureMappingImpl.builder()
                                .withName("Unit Sales")
                                .withColumn("unit_sales")
                                .withAggregatorType(MeasureAggregatorType.SUM)
                                .withFormatString("Standard")
                                .withVisible(false)
                                .build(),
                           MeasureMappingImpl.builder()
                                .withName("Store Sales")
                                .withColumn("store_sales")
                                .withAggregatorType(MeasureAggregatorType.SUM)
                                .withFormatString("#,###.00")
                                .build()
                        ))
                		.build()))
                .build());
            return result;
        }



    }

    public static class AccessControlTestModifier1 extends PojoMappingModifier {

        /*
                "<Role name=\"Role1\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\"bad\" bottomLevel=\"[Customers].[City]\">\n"
                + "        <MemberGrant member=\"[Customers].[USA]\" access=\"all\"/>\n"
                + "        <MemberGrant member=\"[Customers].[USA].[CA].[Los Angeles]\" access=\"none\"/>\n"
                + "      </HierarchyGrant>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>");
        */

        public AccessControlTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(AccessRoleMappingImpl.builder()
                .withName("Role1")
                .withAccessSchemaGrants(List.of(
                	AccessSchemaGrantMappingImpl.builder()
                		.withAccess(AccessSchema.NONE)
                		.withCubeGrant(List.of(
                			AccessCubeGrantMappingImpl.builder()
                				.withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                				.withAccess(AccessCube.ALL)
                				.withHierarchyGrants(List.of(
                					AccessHierarchyGrantMappingImpl.builder()
                                        .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.customersHierarchy))
                                        .withAccess(AccessHierarchy.CUSTOM)
                                        .withRollupPolicyType(RollupPolicyType.HIDDEN) //should be bad
                                        .withBottomLevel((LevelMappingImpl) look(FoodmartMappingSupplier.LEVEL_CITY_TABLE_COLUMN_CITY))
                                        .withMemberGrants(List.of(
                                        	AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Customers].[USA]")
                                                .withAccess(AccessMember.ALL)
                                                .build(),
                                            AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Customers].[USA].[CA].[Los Angeles]")
                                                .withAccess(AccessMember.NONE)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .build());
            return result;
        }
    }

    public static class AccessControlTestModifier2 extends PojoMappingModifier {

        /*
                "<Role name=\"Role1\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\"Partial\">\n"
                + "        <MemberGrant member=\"[Customers].[USA].[CA]\" access=\"all\"/>\n"
                + "        <MemberGrant member=\"[Customers].[USA].[CA].[San Francisco].[Gladys Evans]\" access=\"none\"/>\n"
                + "      </HierarchyGrant>\n"
                + "      <HierarchyGrant hierarchy=\"[Promotion Media]\" access=\"all\"/>\n"
                + "      <HierarchyGrant hierarchy=\"[Marital Status]\" access=\"none\"/>\n"
                + "      <HierarchyGrant hierarchy=\"[Gender]\" access=\"none\"/>\n"
                + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"Partial\" topLevel=\"[Store].[Store State]\"/>\n"
                + "    </CubeGrant>\n"
                + "    <CubeGrant cube=\"Warehouse\" access=\"all\"/>\n"
                + "  </SchemaGrant>\n"
                + "</Role>\n"
                + "<Role name=\"Role2\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"none\">\n"
                + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\"Hidden\">\n"
                + "        <MemberGrant member=\"[Customers].[USA]\" access=\"all\"/>\n"
                + "        <MemberGrant member=\"[Customers].[USA].[CA]\" access=\"none\"/>\n"
                + "        <MemberGrant member=\"[Customers].[USA].[OR]\" access=\"none\"/>\n"
                + "        <MemberGrant member=\"[Customers].[USA].[OR].[Portland]\" access=\"all\"/>\n"
                + "      </HierarchyGrant>\n"
                + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"all\" rollupPolicy=\"Hidden\"/>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>\n");
        */

        public AccessControlTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(AccessRoleMappingImpl.builder()
                .withName("Role1")
                .withAccessSchemaGrants(List.of(
                	AccessSchemaGrantMappingImpl.builder()
                		.withAccess(AccessSchema.NONE)
                		.withCubeGrant(List.of(
                			AccessCubeGrantMappingImpl.builder()
                				.withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                				.withAccess(AccessCube.ALL)
                				.withHierarchyGrants(List.of(
                					AccessHierarchyGrantMappingImpl.builder()
                                        .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.customersHierarchy))
                                        .withAccess(AccessHierarchy.CUSTOM)
                                        .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                        .withMemberGrants(List.of(
                                        	AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Customers].[USA].[CA]")
                                                .withAccess(AccessMember.ALL)
                                                .build(),
                                            AccessMemberGrantMappingImpl.builder()
                                                .withMember("[Customers].[USA].[CA].[San Francisco].[Gladys Evans]")
                                                .withAccess(AccessMember.NONE)
                                                .build()
                                        ))
                                        .build(),
                   					AccessHierarchyGrantMappingImpl.builder()
                                        .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.HIERARCHY_PROMOTION_MEDIA))
                                        .withAccess(AccessHierarchy.ALL)
                                        .build(),
                  					AccessHierarchyGrantMappingImpl.builder()
                                        .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.HIERARCHY_MARITAL_STATUS))
                                        .withAccess(AccessHierarchy.ALL)
                                        .build(),
                      				AccessHierarchyGrantMappingImpl.builder()
                                        .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.genderHierarchy))
                                        .withAccess(AccessHierarchy.NONE)
                                        .build(),
                       				AccessHierarchyGrantMappingImpl.builder()
                                        .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.storeHierarchy))
                                        .withAccess(AccessHierarchy.CUSTOM)
                                        .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                        .withTopLevel((LevelMappingImpl) look(FoodmartMappingSupplier.LEVEL_STORE_CYTY_UNIQUE_MEMBERS_TRUE))
                                        .build()
                                ))
                                .build(),
                            AccessCubeGrantMappingImpl.builder()
                            	.withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_WAREHOUSE))
                            	.withAccess(AccessCube.ALL)
                            	.build()
                        ))
                        .build()

                ))
                .build());

            result.add(AccessRoleMappingImpl.builder()
                    .withName("Role2")
                    .withAccessSchemaGrants(List.of(
                    	AccessSchemaGrantMappingImpl.builder()
                    		.withAccess(AccessSchema.NONE)
                    		.withCubeGrant(List.of(
                    			AccessCubeGrantMappingImpl.builder()
                    				.withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                    				.withAccess(AccessCube.NONE)
                    				.withHierarchyGrants(List.of(
                    					AccessHierarchyGrantMappingImpl.builder()
                                            .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.customersHierarchy))
                                            .withAccess(AccessHierarchy.CUSTOM)
                                            .withRollupPolicyType(RollupPolicyType.HIDDEN)
                                            .withMemberGrants(List.of(
                                            	AccessMemberGrantMappingImpl.builder()
                                                    .withMember("[Customers].[USA]")
                                                    .withAccess(AccessMember.ALL)
                                                    .build(),
                                                AccessMemberGrantMappingImpl.builder()
                                                    .withMember("[Customers].[USA].[CA]")
                                                    .withAccess(AccessMember.NONE)
                                                    .build(),
                                                AccessMemberGrantMappingImpl.builder()
                                                    .withMember("[Customers].[USA].[OR]")
                                                    .withAccess(AccessMember.NONE)
                                                    .build(),
                                                    AccessMemberGrantMappingImpl.builder()
                                                    .withMember("[Customers].[USA].[OR].[Portland]")
                                                    .withAccess(AccessMember.ALL)
                                                    .build()
                                            ))
                                            .build(),
                        				AccessHierarchyGrantMappingImpl.builder()
                                            .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.storeHierarchy))
                                            .withAccess(AccessHierarchy.ALL)
                                            .withRollupPolicyType(RollupPolicyType.HIDDEN)
                                            .build()

                                    ))
                                    .build()
                            ))
                            .build()

                    ))
                    .build());

            return result;
        }
    }

    public static class AccessControlTestModifier3 extends PojoMappingModifier {

        /*
        String roleDefs =
            "<Role name=\"USA manager\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <DimensionGrant access=\"all\" dimension=\"[Measures]\"/>\n"
            + "      <HierarchyGrant access=\"custom\" hierarchy=\"[Customers]\">\n"
            + "        <MemberGrant access=\"all\" member=\"[Customers].[USA]\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>\n"
            + "<Role name=\"parent of USA manager\">\n"
            + "  <Union>\n"
            + "    <RoleUsage roleName=\"USA manager\"/>\n"
            + "  </Union>\n"
            + "</Role>"
            + "<Role name=\"grandparent of USA manager\">\n"
            + "  <Union>\n"
            + "    <RoleUsage roleName=\"parent of USA manager\"/>\n"
            + "  </Union>\n"
            + "</Role>";
        */

        public AccessControlTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(AccessRoleMappingImpl.builder()
                    .withName("USA manager")
                    .withAccessSchemaGrants(List.of(
                    	AccessSchemaGrantMappingImpl.builder()
                            .withAccess(AccessSchema.NONE)
                            .withCubeGrant(List.of(
                            	AccessCubeGrantMappingImpl.builder()
                                    .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                    .withAccess(AccessCube.ALL)
                                    .withDimensionGrants(List.of(
                                    	AccessDimensionGrantMappingImpl.builder()
                                            .withAccess(AccessDimension.ALL)
                                            .withDimension(null)
                                            //.dimension("[Measures]")
                                            .withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_STORE_WITH_QUERY_STORE))
                                            .build()
                                    ))
                                    .withHierarchyGrants(List.of(
                                    	AccessHierarchyGrantMappingImpl.builder()
                                            .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.customersHierarchy))
                                            .withAccess(AccessHierarchy.CUSTOM)
                                            .withMemberGrants(List.of(
                                            	AccessMemberGrantMappingImpl.builder()
                                                    .withMember("[Customers].[USA]")
                                                    .withAccess(AccessMember.ALL)
                                                    .build()
                                            ))
                                            .build()
                                    ))
                                    .build()
                            ))
                            .build()))
            		.build());

            result.add(
            	AccessRoleMappingImpl.builder()
                    .withName("parent of USA manager")
                    .withReferencedAccessRoles(List.of(
                    	AccessRoleMappingImpl.builder()
                        	.withName("USA manager")
                            .build()
                     ))
                     .build()
            );

            result.add(
                AccessRoleMappingImpl.builder()
                    .withName("grandparent of USA manager")
                    .withReferencedAccessRoles(List.of(
                    	AccessRoleMappingImpl.builder()
                            .withName("parent of USA manager")
                            .build()
                    ))
                    .build()
            );

            return result;
        }

    }

    public static class AccessControlTestModifier4 extends PojoMappingModifier {

        /*
                "<Role name=\"Role1\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "  </SchemaGrant>\n"
                + "</Role>\n"
                + "<Role name=\"Role2\">\n"
                + "  <SchemaGrant access=\"all\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\"partial\">\n"
                + "        <MemberGrant member=\"[Customers].[USA].[OR]\" access=\"all\"/>\n"
                + "      </HierarchyGrant>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>\n");

        */

        public AccessControlTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(AccessRoleMappingImpl.builder()
                .withName("Role1")
                .withAccessSchemaGrants(List.of(
                  	AccessSchemaGrantMappingImpl.builder()
                         .withAccess(AccessSchema.NONE)
                         .build()
                ))
                .build()
            );

            result.add(
            	AccessRoleMappingImpl.builder()
                	.withName("Role2")
                    .withAccessSchemaGrants(List.of(
                    	AccessSchemaGrantMappingImpl.builder()
                        	.withAccess(AccessSchema.ALL)
                        	.withCubeGrant(List.of(
                        		AccessCubeGrantMappingImpl.builder()
                                	.withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                    .withAccess(AccessCube.ALL)
                                    .withHierarchyGrants(List.of(
                                    	AccessHierarchyGrantMappingImpl.builder()
                                        	.withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.customersHierarchy))
                                            .withAccess(AccessHierarchy.CUSTOM)
                                            .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                            .withMemberGrants(List.of(
                                            		AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Customers].[USA].[OR]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                             ))
                                             .build()
                                        ))
                                        .build()
                                ))
                                .build()
                ))
                .build()
            );
            return result;
        }
    }

    public static class AccessControlTestModifier5 extends PojoMappingModifier {

        /*
                "<Role name=\"Role1\">\n"
                + "  <SchemaGrant access=\"all\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\"Partial\" topLevel=\"[Customers].[State Province]\" bottomLevel=\"[Customers].[State Province]\">\n"
                + "        <MemberGrant member=\"[Customers].[USA].[CA]\" access=\"all\"/>\n"
                + "      </HierarchyGrant>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>\n"
                + "<Role name=\"Role2\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "  </SchemaGrant>\n"
                + "</Role>\n");

        */

        public AccessControlTestModifier5(CatalogMapping catalog) {
            super(catalog);
        }


        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            	AccessRoleMappingImpl.builder()
                	.withName("Role1")
                    .withAccessSchemaGrants(List.of(
                    	AccessSchemaGrantMappingImpl.builder()
                        	.withAccess(AccessSchema.ALL)
                        	.withCubeGrant(List.of(
                        		AccessCubeGrantMappingImpl.builder()
                                	.withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                    .withAccess(AccessCube.ALL)
                                    .withHierarchyGrants(List.of(
                                    	AccessHierarchyGrantMappingImpl.builder()
                                        	.withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.customersHierarchy))
                                            .withAccess(AccessHierarchy.CUSTOM)
                                            .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                            .withTopLevel((LevelMappingImpl) look(FoodmartMappingSupplier.LEVEL_STATE_PROVINCE_TABLE_COLUMN_STATE_PROVINCE))
                                            .withMemberGrants(List.of(
                                            		AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Customers].[USA].[CA]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                             ))
                                             .build()
                                        ))
                                        .build()
                                ))
                                .build()
                ))
                .build()
            );

            result.add(
                    AccessRoleMappingImpl.builder()
                        .withName("Role2")
                        .withAccessSchemaGrants(List.of(
                        	AccessSchemaGrantMappingImpl.builder()
                                .withAccess(AccessSchema.NONE)
                                .build()
                        ))
                        .build()
            );
            return result;
        }
    }

    public static class AccessControlTestModifier6 extends PojoMappingModifier {

        /*
                "<Role name=\"Role1\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Product]\" access=\"custom\">\n"
                + "        <MemberGrant member=\"[Product].[Drink]\" access=\"all\"/>\n"
                + "      </HierarchyGrant>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>");
        */

        public AccessControlTestModifier6(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            	AccessRoleMappingImpl.builder()
                	.withName("Role1")
                    .withAccessSchemaGrants(List.of(
                    	AccessSchemaGrantMappingImpl.builder()
                        	.withAccess(AccessSchema.NONE)
                        	.withCubeGrant(List.of(
                        		AccessCubeGrantMappingImpl.builder()
                                	.withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                    .withAccess(AccessCube.ALL)
                                    .withHierarchyGrants(List.of(
                                    	AccessHierarchyGrantMappingImpl.builder()
                                        	.withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.HIERARCHY_PRODUCT1))
                                            .withAccess(AccessHierarchy.CUSTOM)
                                            .withMemberGrants(List.of(
                                            		AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Product].[Drink]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                             ))
                                             .build()
                                        ))
                                        .build()
                                ))
                                .build()
                ))
                .build()
            );

            return result;
        }
    }

    public static class AccessControlTestModifier7 extends PojoMappingModifier {

        /*
                "<Role name=\"California manager\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"none\" />\n"
                + "    </CubeGrant>\n"
                + "    <CubeGrant cube=\"Sales Ragged\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" />\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>");
        */

        public AccessControlTestModifier7(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            	AccessRoleMappingImpl.builder()
                	.withName("California manager")
                    .withAccessSchemaGrants(List.of(
                    	AccessSchemaGrantMappingImpl.builder()
                        	.withAccess(AccessSchema.NONE)
                        	.withCubeGrant(List.of(
                        		AccessCubeGrantMappingImpl.builder()
                                	.withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                    .withAccess(AccessCube.ALL)
                                    .withHierarchyGrants(List.of(
                                    	AccessHierarchyGrantMappingImpl.builder()
                                        	.withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.storeHierarchy))
                                            .withAccess(AccessHierarchy.NONE)
                                             .build()
                                        ))
                                        .build(),
                                		AccessCubeGrantMappingImpl.builder()
                                    	.withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES_RAGGED))
                                        .withAccess(AccessCube.ALL)
                                        .withHierarchyGrants(List.of(
                                        	AccessHierarchyGrantMappingImpl.builder()
                                            	.withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.storeHierarchy))
                                                .withAccess(AccessHierarchy.CUSTOM)
                                                 .build()
                                            ))
                                            .build()

                                ))
                                .build()
                ))
                .build()
            );

            return result;
        }
    }

    public static class AccessControlTestModifier8 extends PojoMappingModifier {

        /*
            "<Role name=\"Buggy Role\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"HR\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Employees]\" access=\"custom\"\n"
            + "                      rollupPolicy=\"partial\">\n"
            + "        <MemberGrant\n"
            + "            member=\"[Employees].[All Employees].[Sheri Nowmer].[Darren Stanz]\"\n"
            + "            access=\"all\"/>\n"
            + "      </HierarchyGrant>\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\"\n"
            + "                      rollupPolicy=\"partial\">\n"
            + "        <MemberGrant member=\"[Store].[All Stores].[USA].[CA]\" access=\"all\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>");
        */

        public AccessControlTestModifier8(CatalogMapping catalog) {
            super(catalog);
        }


        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            	AccessRoleMappingImpl.builder()
                	.withName("Buggy Role")
                    .withAccessSchemaGrants(List.of(
                    	AccessSchemaGrantMappingImpl.builder()
                        	.withAccess(AccessSchema.NONE)
                        	.withCubeGrant(List.of(
                        		AccessCubeGrantMappingImpl.builder()
                                	.withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_HR))
                                    .withAccess(AccessCube.ALL)
                                    .withHierarchyGrants(List.of(
                                    	AccessHierarchyGrantMappingImpl.builder()
                                        	.withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.HIERARCHY_EMPLOYEES))
                                            .withAccess(AccessHierarchy.CUSTOM)
                                            .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                            .withMemberGrants(List.of(
                                            		AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Employees].[All Employees].[Sheri Nowmer].[Darren Stanz]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                             ))
                                             .build(),
                                         AccessHierarchyGrantMappingImpl.builder()
                                        	.withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.storeHierarchy))
                                            .withAccess(AccessHierarchy.CUSTOM)
                                            .withMemberGrants(List.of(
                                            		AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[All Stores].[USA].[CA]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                             ))
                                             .build()

                                        ))
                                        .build()

                                ))
                                .build()
                ))
                .build()
            );
            return result;
        }
    }

    public static class AccessControlTestModifier9 extends PojoMappingModifier {

        /*
        "<Role name=\"role1\">\n"
        + " <SchemaGrant access=\"none\">\n"
        + "  <CubeGrant cube=\"Warehouse\" access=\"all\">\n"
        + "   <HierarchyGrant hierarchy=\"[Store Size in SQFT]\" access=\"custom\" rollupPolicy=\"partial\">\n"
        + "    <MemberGrant member=\"[Store Size in SQFT].[20319]\" access=\"all\"/>\n"
        + "    <MemberGrant member=\"[Store Size in SQFT].[21215]\" access=\"none\"/>\n"
        + "   </HierarchyGrant>\n"
        + "   <HierarchyGrant hierarchy=\"[Store Type]\" access=\"custom\" rollupPolicy=\"partial\">\n"
        + "    <MemberGrant member=\"[Store Type].[Supermarket]\" access=\"all\"/>\n"
        + "   </HierarchyGrant>\n"
        + "  </CubeGrant>\n"
        + " </SchemaGrant>\n"
        + "</Role>";
        */

        public AccessControlTestModifier9(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            	AccessRoleMappingImpl.builder()
                	.withName("VCRole")
                    .withAccessSchemaGrants(List.of(
                    	AccessSchemaGrantMappingImpl.builder()
                        	.withAccess(AccessSchema.NONE)
                        	.withCubeGrant(List.of(
                        		AccessCubeGrantMappingImpl.builder()
                                	.withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_VIRTIAL_WAREHOUSE_AND_SALES))
                                    .withAccess(AccessCube.ALL)
                                    .withHierarchyGrants(List.of(
                                    	AccessHierarchyGrantMappingImpl.builder()
                                        	.withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.storeHierarchy))
                                            .withAccess(AccessHierarchy.CUSTOM)
                                            .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                            .withMemberGrants(List.of(
                                            		AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[USA].[CA]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build(),
                                               		AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[USA].[CA].[Los Angeles]")
                                                        .withAccess(AccessMember.NONE)
                                                        .build()
                                             ))
                                             .build(),
                                         AccessHierarchyGrantMappingImpl.builder()
                                        	.withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.customersHierarchy))
                                        	.withTopLevel((LevelMappingImpl) look(FoodmartMappingSupplier.LEVEL_STATE_PROVINCE_TABLE_COLUMN_STATE_PROVINCE))
                                        	.withBottomLevel((LevelMappingImpl) look(FoodmartMappingSupplier.LEVEL_CITY_TABLE_COLUMN_CITY))
                                            .withAccess(AccessHierarchy.CUSTOM)
                                            .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                            .withMemberGrants(List.of(
                                            		AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Customers].[USA].[CA]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build(),
                                                	AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Customers].[USA].[CA].[Los Angeles]")
                                                        .withAccess(AccessMember.NONE)
                                                        .build()
                                             ))
                                             .build(),
                                         AccessHierarchyGrantMappingImpl.builder()
                                         	.withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.genderHierarchy))
                                         	.withAccess(AccessHierarchy.NONE)
                                         	.build()

                                        ))
                                        .build()

                                ))
                                .build()
                ))
                .build()
            );

            return result;
        }

    }

    public static class AccessControlTestModifier10 extends PojoMappingModifier {

        /*
            "<Role name=\"VCRole\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Warehouse and Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\">\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA].[Los Angeles]\" access=\"none\"/>\n"
            + "      </HierarchyGrant>\n"
            + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\"\n"
            + "          topLevel=\"[Customers].[State Province]\" bottomLevel=\"[Customers].[City]\">\n"
            + "        <MemberGrant member=\"[Customers].[USA].[CA]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Customers].[USA].[CA].[Los Angeles]\" access=\"none\"/>\n"
            + "      </HierarchyGrant>\n"
            + "      <HierarchyGrant hierarchy=\"[Gender]\" access=\"none\"/>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>");
        */

        public AccessControlTestModifier10(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            	AccessRoleMappingImpl.builder()
                	.withName("VCRole")
                    .withAccessSchemaGrants(List.of(
                    	AccessSchemaGrantMappingImpl.builder()
                        	.withAccess(AccessSchema.NONE)
                        	.withCubeGrant(List.of(
                        		AccessCubeGrantMappingImpl.builder()
                                	.withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_VIRTIAL_WAREHOUSE_AND_SALES))
                                    .withAccess(AccessCube.ALL)
                                    .withHierarchyGrants(List.of(
                                    	AccessHierarchyGrantMappingImpl.builder()
                                        	.withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.storeHierarchy))
                                            .withAccess(AccessHierarchy.CUSTOM)
                                            .withMemberGrants(List.of(
                                            		AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[USA].[CA]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build(),
                                               		AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[USA].[CA].[Los Angeles]")
                                                        .withAccess(AccessMember.NONE)
                                                        .build()
                                             ))
                                             .build(),
                                         AccessHierarchyGrantMappingImpl.builder()
                                        	.withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.customersHierarchy))
                                            .withAccess(AccessHierarchy.CUSTOM)
                                        	.withTopLevel((LevelMappingImpl) look(FoodmartMappingSupplier.LEVEL_STATE_PROVINCE_TABLE_COLUMN_STATE_PROVINCE))
                                        	.withBottomLevel((LevelMappingImpl) look(FoodmartMappingSupplier.LEVEL_CITY_TABLE_COLUMN_CITY))
                                            .withMemberGrants(List.of(
                                            		AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[USA].[CA]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build(),
                                               		AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[USA].[CA].[Los Angeles]")
                                                        .withAccess(AccessMember.NONE)
                                                        .build()
                                             ))
                                             .build(),
                                         AccessHierarchyGrantMappingImpl.builder()
                                          	.withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.genderHierarchy))
                                          	.withAccess(AccessHierarchy.NONE)
                                          	.build()

                                        ))
                                        .build()

                                ))
                                .build()
                ))
                .build()
            );
            return result;
        }
    }

    public static class AccessControlTestModifier11 extends PojoMappingModifier {

        /*
            "<Role name=\"role2\">"
            + " <SchemaGrant access=\"none\">"
            + "  <CubeGrant cube=\"Sales\" access=\"all\">"
            + "   <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"partial\">"
            + "    <MemberGrant member=\"[Store].[USA].[CA]\" access=\"all\"/>"
            + "    <MemberGrant member=\"[Store].[USA].[CA].[Los Angeles]\" access=\"none\"/>"
            + "   </HierarchyGrant>"
            + "  </CubeGrant>"
            + " </SchemaGrant>"
            + "</Role>";
        */

        public AccessControlTestModifier11(CatalogMapping catalog) {
            super(catalog);
        }


        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            	AccessRoleMappingImpl.builder()
                	.withName("role2")
                    .withAccessSchemaGrants(List.of(
                    	AccessSchemaGrantMappingImpl.builder()
                        	.withAccess(AccessSchema.NONE)
                        	.withCubeGrant(List.of(
                        		AccessCubeGrantMappingImpl.builder()
                                	.withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                    .withAccess(AccessCube.ALL)
                                    .withHierarchyGrants(List.of(
                                    	AccessHierarchyGrantMappingImpl.builder()
                                        	.withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.storeHierarchy))
                                            .withAccess(AccessHierarchy.CUSTOM)
                                            .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                            .withMemberGrants(List.of(
                                            		AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[USA].[CA]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build(),
                                               		AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[USA].[CA].[Los Angeles]")
                                                        .withAccess(AccessMember.NONE)
                                                        .build()
                                             ))
                                             .build()
                                        ))
                                        .build()

                                ))
                                .build()
                ))
                .build()
            );
            return result;
        }
    }

    public static class AccessControlTestModifier12 extends PojoMappingModifier {

        private List<AccessRoleMapping> roles;

        private static final StandardDimensionMappingImpl dCustomers = StandardDimensionMappingImpl.builder()
		.withName("Customers")
		.withHierarchies(List.of(
			HierarchyMappingImpl.builder()
				.withHasAll(true)
				.withPrimaryKey("customer_id")
				.withQuery(TableQueryMappingImpl.builder().withName("customer").build())
				.withLevels(List.of(
					LevelMappingImpl.builder()
						.withName("Country")
						.withColumn("country")
                        .withUniqueMembers(true)
                        .build(),
    				LevelMappingImpl.builder()
						.withName("State Province")
						.withColumn("state_province")
                        .withUniqueMembers(true)
                        .build(),
        			LevelMappingImpl.builder()
    					.withName("City")
    					.withColumn("city")
                        .withUniqueMembers(false)
                        .build(),
                	LevelMappingImpl.builder()
            		 	.withName("Name")
            		    .withColumn("customer_id")
            		    .withType(DataType.NUMERIC)
                        .withUniqueMembers(true)
                        .build()
				))
				.build()
	    ))
        .build();


        public AccessControlTestModifier12(CatalogMapping catalog, List<AccessRoleMapping> roles) {
            super(catalog);
            this.roles = roles;
        }

        @Override
        protected List<CubeMapping> schemaCubes(SchemaMapping Schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.schemaCubes(Schema));
            result.add(PhysicalCubeMappingImpl.builder()
                .withName("Sales with multiple customers")
                .withQuery(TableQueryMappingImpl.builder().withName("sales_fact_1997").build())
                .withDimensionConnectors(List.of(
                	DimensionConnectorMappingImpl.builder()
                		.withOverrideDimensionName("Time")
                		.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_TIME))
                        .withForeignKey("time_id")
                        .build(),
                    DimensionConnectorMappingImpl.builder()
                    	.withOverrideDimensionName("Product")
                    	.withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_PRODUCT))
                        .withForeignKey("product_id")
                        .build(),
                    DimensionConnectorMappingImpl.builder()
                        .withOverrideDimensionName("Customers")
                        .withDimension(dCustomers)
                        .withForeignKey("customer_id")
                        .build(),
                    DimensionConnectorMappingImpl.builder()
                        .withOverrideDimensionName("Customers2")
                        .withDimension(dCustomers)
                        .withForeignKey("customer_id")
                        .build(),
                    DimensionConnectorMappingImpl.builder()
                        .withOverrideDimensionName("Name")
                        .withDimension(dCustomers)
                        .withForeignKey("customer_id")
                        .build()
                ))
                .withMeasureGroups(List.of(
                		MeasureGroupMappingImpl.builder().withMeasures(List.of(
                			MeasureMappingImpl.builder()
                				.withName("Unit Sales")
                				.withColumn("unit_sales")
                				.withAggregatorType(MeasureAggregatorType.SUM)
                				.withFormatString("Standard")
                				.build()
                			))
                			.build()
                ))
                .build());
            return result;
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.addAll(roles);
            return result;
        }

                /*
                    " <Dimension name=\"Customers\"> \n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"customer_id\"> \n"
            + "      <Table name=\"customer\"/> \n"
            + "      <Level name=\"Country\" column=\"country\" uniqueMembers=\"true\"/> \n"
            + "      <Level name=\"State Province\" column=\"state_province\" uniqueMembers=\"true\"/> \n"
            + "      <Level name=\"City\" column=\"city\" uniqueMembers=\"false\"/> \n"
            + "      <Level name=\"Name\" column=\"customer_id\" type=\"Numeric\" uniqueMembers=\"true\"/> \n"
            + "    </Hierarchy> \n"
            + "  </Dimension> ",

        */




        /*
                    "  <Cube name=\"" + cubeName + "\"> \n"
            + "    <Table name=\"sales_fact_1997\"/> \n"
            + "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/> \n"
            + "    <DimensionUsage name=\"Product\" source=\"Product\" foreignKey=\"product_id\"/> \n"
            + "    <DimensionUsage name=\"Customers\" source=\"Customers\" foreignKey=\"customer_id\"/> \n"
            + "    <DimensionUsage name=\"Customers2\" source=\"Customers\" foreignKey=\"customer_id\"/> \n"
            + "    <DimensionUsage name=\"Customers3\" source=\"Customers\" foreignKey=\"customer_id\"/> \n"
            + "    <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\" formatString=\"Standard\"/> \n"
            + "  </Cube> \n",

         */
    }

    public static class AccessControlTestModifier14 extends PojoMappingModifier {

        /*
                        "<Role name=\"REG1\"> \n"
                + "  <SchemaGrant access=\"none\"> \n"
                + "    <CubeGrant cube=\"HR\" access=\"all\"> \n"
                + "      <HierarchyGrant hierarchy=\"Employees\" access=\"custom\" rollupPolicy=\"partial\"> \n"
                + "        <MemberGrant member=\"[Employees].[All Employees]\" access=\"none\"/>\n"
                + "        <MemberGrant member=\"[Employees].[Sheri Nowmer].[Derrick Whelply].[Laurie Borges].[Cody Goldey].[Shanay Steelman].[Steven Betsekas]\" access=\"all\"/> \n"
                + "        <MemberGrant member=\"[Employees].[Sheri Nowmer].[Derrick Whelply].[Laurie Borges].[Cody Goldey].[Shanay Steelman].[Arvid Ziegler]\" access=\"all\"/> \n"
                + "        <MemberGrant member=\"[Employees].[Sheri Nowmer].[Derrick Whelply].[Laurie Borges].[Cody Goldey].[Shanay Steelman].[Ann Weyerhaeuser]\" access=\"all\"/> \n"
                + "      </HierarchyGrant> \n"
                + "    </CubeGrant> \n"
                + "  </SchemaGrant> \n"
                + "</Role>");
        */

        public AccessControlTestModifier14(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            		AccessRoleMappingImpl.builder()
                        .withName("REG1")
                        .withAccessSchemaGrants(List.of(
                        	AccessSchemaGrantMappingImpl.builder()
                                .withAccess(AccessSchema.NONE)
                                .withCubeGrant(List.of(
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_HR))
                                        .withAccess(AccessCube.ALL)
                                        .withHierarchyGrants(List.of(
                                        	AccessHierarchyGrantMappingImpl.builder()
                                                .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.HIERARCHY_EMPLOYEES))
                                                .withAccess(AccessHierarchy.CUSTOM)
                                                .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                                .withMemberGrants(List.of(
                                                	AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Employees].[All Employees]")
                                                        .withAccess(AccessMember.NONE)
                                                        .build(),
                                                    AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Employees].[Sheri Nowmer].[Derrick Whelply].[Laurie Borges].[Cody Goldey].[Shanay Steelman].[Steven Betsekas]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build(),
                                                    AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Employees].[Sheri Nowmer].[Derrick Whelply].[Laurie Borges].[Cody Goldey].[Shanay Steelman].[Arvid Ziegler]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build(),
                                                    AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Employees].[Sheri Nowmer].[Derrick Whelply].[Laurie Borges].[Cody Goldey].[Shanay Steelman].[Ann Weyerhaeuser]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                                    ))
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                );
            return result;
        }
    }

    public static class AccessControlTestModifier15 extends PojoMappingModifier {

        /*
            "<Role name=\"CTO\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\">\n"
            + "        <MemberGrant member=\"[Customers].[USA].[XX]\" access=\"none\"/>\n"
            + "        <MemberGrant member=\"[Customers].[USA].[XX].[Yyy Yyyyyyy]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Customers].[USA]\" access=\"none\"/>\n"
            + "        <MemberGrant member=\"[Customers].[USA].[CA]\" access=\"none\"/>\n"
            + "        <MemberGrant member=\"[Customers].[USA].[CA].[Los Angeles]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Customers].[USA].[CA].[Zzz Zzzz]\" access=\"none\"/>\n"
            + "        <MemberGrant member=\"[Customers].[USA].[CA].[San Francisco]\" access=\"all\"/>\n"
            + "      </HierarchyGrant>\n"
            + "      <HierarchyGrant hierarchy=\"[Gender]\" access=\"none\"/>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>");

        */

        public AccessControlTestModifier15(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            		AccessRoleMappingImpl.builder()
                        .withName("CTO")
                        .withAccessSchemaGrants(List.of(
                        	AccessSchemaGrantMappingImpl.builder()
                                .withAccess(AccessSchema.NONE)
                                .withCubeGrant(List.of(
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                        .withAccess(AccessCube.ALL)
                                        .withHierarchyGrants(List.of(
                                        	AccessHierarchyGrantMappingImpl.builder()
                                                .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.customersHierarchy))
                                                .withAccess(AccessHierarchy.CUSTOM)
                                                .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                                .withMemberGrants(List.of(
                                                	AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Customers].[USA].[XX]")
                                                        .withAccess(AccessMember.NONE)
                                                        .build(),
                                                    AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Customers].[USA].[XX].[Yyy Yyyyyyy]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build(),
                                                    AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Customers].[USA]")
                                                        .withAccess(AccessMember.NONE)
                                                        .build(),
                                                    AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Customers].[USA].[CA]")
                                                        .withAccess(AccessMember.NONE)
                                                        .build(),
                                                    AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Customers].[USA].[CA].[Los Angeles]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build(),
                                                    AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Customers].[USA].[CA].[Zzz Zzzz]")
                                                        .withAccess(AccessMember.NONE)
                                                        .build(),
                                                    AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Customers].[USA].[CA].[San Francisco]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                                    ))
                                                .build(),
                                            	AccessHierarchyGrantMappingImpl.builder()
                                                .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.genderHierarchy))
                                                .withAccess(AccessHierarchy.NONE)
                                                .build()

                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                );
            return result;
        }
    }

    public static class AccessControlTestModifier16 extends PojoMappingModifier {

        /*
                "<Role name=\"Role1\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"Partial\" topLevel=\"[Store].[Store State]\">\n"
                + "      </HierarchyGrant>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>\n");
        */

        public AccessControlTestModifier16(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            		AccessRoleMappingImpl.builder()
                        .withName("Role1")
                        .withAccessSchemaGrants(List.of(
                        	AccessSchemaGrantMappingImpl.builder()
                                .withAccess(AccessSchema.NONE)
                                .withCubeGrant(List.of(
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                        .withAccess(AccessCube.ALL)
                                        .withHierarchyGrants(List.of(
                                        	AccessHierarchyGrantMappingImpl.builder()
                                                .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.storeHierarchy))
                                                .withAccess(AccessHierarchy.CUSTOM)
                                                .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                                .withMemberGrants(List.of(
                                                	AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[Store State]")
                                                        .withAccess(AccessMember.NONE)
                                                        .build()
                                                    ))
                                                .build()

                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                );
            return result;
        }
    }

    public static class AccessControlTestModifier17 extends PojoMappingModifier {

        /*
                "<Role name=\"Role1\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"none\">\n"
                + "      <HierarchyGrant hierarchy=\"[Measures]\" access=\"custom\">\n"
                + "        <MemberGrant member=\"[Measures].[Unit Sales]\" access=\"all\"/>\n"
                + "      </HierarchyGrant>"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>\n"
                + "<Role name=\"Role2\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales Ragged\" access=\"all\"/>\n"
                + "  </SchemaGrant>\n"
                + "</Role>");
        */

        public AccessControlTestModifier17(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            		AccessRoleMappingImpl.builder()
                        .withName("Role1")
                        .withAccessSchemaGrants(List.of(
                        	AccessSchemaGrantMappingImpl.builder()
                                .withAccess(AccessSchema.NONE)
                                .withCubeGrant(List.of(
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                        .withAccess(AccessCube.NONE)
                                        .withHierarchyGrants(List.of(
                                        	AccessHierarchyGrantMappingImpl.builder()
                                                //.withHierarchy([Measures])
                                                .withAccess(AccessHierarchy.CUSTOM)
                                                .withMemberGrants(List.of(
                                                	AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Measures].[Unit Sales]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                                    ))
                                                .build()

                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                );

            result.add(
            		AccessRoleMappingImpl.builder()
                        .withName("Role2")
                        .withAccessSchemaGrants(List.of(
                        	AccessSchemaGrantMappingImpl.builder()
                                .withAccess(AccessSchema.NONE)
                                .withCubeGrant(List.of(
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES_RAGGED))
                                        .withAccess(AccessCube.ALL)
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                );
            return result;
        }
    }

    public static class AccessControlTestModifier18 extends PojoMappingModifier {

        /*
                "<Role name='Role1'>\n"
                + "  <SchemaGrant access='none'>\n"
                + "    <CubeGrant cube='Sales' access='all'>\n"
                + "      <HierarchyGrant hierarchy='[Store Type]' access='custom' rollupPolicy='partial'>\n"
                + "        <MemberGrant member='[Store Type].[All Store Types]' access='none'/>\n"
                + "        <MemberGrant member='[Store Type].[Supermarket]' access='all'/>\n"
                + "      </HierarchyGrant>\n"
                + "      <HierarchyGrant hierarchy='[Customers]' access='custom' rollupPolicy='partial' >\n"
                + "        <MemberGrant member='[Customers].[All Customers]' access='none'/>\n"
                + "        <MemberGrant member='[Customers].[USA].[WA]' access='all'/>\n"
                + "        <MemberGrant member='[Customers].[USA].[CA]' access='none'/>\n"
                + "        <MemberGrant member='[Customers].[USA].[CA].[Los Angeles]' access='all'/>\n"
                + "      </HierarchyGrant>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>\n");

        */

        public AccessControlTestModifier18(CatalogMapping catalog) {
            super(catalog);
        }


        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            		AccessRoleMappingImpl.builder()
                        .withName("Role1")
                        .withAccessSchemaGrants(List.of(
                        	AccessSchemaGrantMappingImpl.builder()
                                .withAccess(AccessSchema.NONE)
                                .withCubeGrant(List.of(
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                        .withAccess(AccessCube.ALL)
                                        .withHierarchyGrants(List.of(
                                        	AccessHierarchyGrantMappingImpl.builder()
                                                .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.HIERARCHY_STORE_TYPE))
                                                .withAccess(AccessHierarchy.CUSTOM)
                                                .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                                .withMemberGrants(List.of(
                                                	AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store Type].[All Store Types]")
                                                        .withAccess(AccessMember.NONE)
                                                        .build(),
                                                    AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store Type].[Supermarket]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                                    ))
                                                .build(),
                                            AccessHierarchyGrantMappingImpl.builder()
                                                .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.customersHierarchy))
                                                .withAccess(AccessHierarchy.CUSTOM)
                                                .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                                .withMemberGrants(List.of(
                                                	AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Customers].[All Customers]")
                                                        .withAccess(AccessMember.NONE)
                                                        .build(),
                                                    AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Customers].[USA].[WA]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build(),
                                                    AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Customers].[USA].[CA]")
                                                        .withAccess(AccessMember.NONE)
                                                        .build(),
                                                    AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Customers].[USA].[CA].[Los Angeles]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                                    ))
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                );
            return result;
        }

    }

    public static class AccessControlTestModifier19 extends PojoMappingModifier {

        /*
            "<Role name=\"Role1\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"custom\">\n"
            + "      <DimensionGrant dimension=\"[Measures]\" access=\"all\" />\n"
            + "      <DimensionGrant dimension=\"[Education Level]\" access=\"all\" />\n"
            + "      <DimensionGrant dimension=\"[Gender]\" access=\"all\" />\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>\n"
            + "<Role name=\"Role2\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"custom\">\n"
            + "      <DimensionGrant dimension=\"[Measures]\" access=\"all\" />\n"
            + "      <DimensionGrant dimension=\"[Education Level]\" access=\"all\" />\n"
            + "      <DimensionGrant dimension=\"[Customers]\" access=\"none\" />\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>\n"
            + "<Role name=\"Role3\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"custom\">\n"
            + "      <DimensionGrant dimension=\"[Education Level]\" access=\"all\" />\n"
            + "      <DimensionGrant dimension=\"[Measures]\" access=\"custom\" />\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>\n");

        */

        public AccessControlTestModifier19(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            		AccessRoleMappingImpl.builder()
                        .withName("Role1")
                        .withAccessSchemaGrants(List.of(
                        	AccessSchemaGrantMappingImpl.builder()
                                .withAccess(AccessSchema.NONE)
                                .withCubeGrant(List.of(
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                        .withAccess(AccessCube.CUSTOM)
                                        .withDimensionGrants(List.of(
                                       		AccessDimensionGrantMappingImpl.builder()
                                                //.withDimension([Measures])
                                                .withAccess(AccessDimension.ALL)
                                                .build(),
                                       		AccessDimensionGrantMappingImpl.builder()
                                                .withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_EDUCATION_LEVEL))
                                                .withAccess(AccessDimension.ALL)
                                                .build(),
                                       		AccessDimensionGrantMappingImpl.builder()
                                                .withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_GENDER))
                                                .withAccess(AccessDimension.ALL)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                );

            result.add(
            		AccessRoleMappingImpl.builder()
                        .withName("Role2")
                        .withAccessSchemaGrants(List.of(
                        	AccessSchemaGrantMappingImpl.builder()
                                .withAccess(AccessSchema.NONE)
                                .withCubeGrant(List.of(
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                        .withAccess(AccessCube.CUSTOM)
                                        .withDimensionGrants(List.of(
                                       		AccessDimensionGrantMappingImpl.builder()
                                                //.withDimension([Measures])
                                                .withAccess(AccessDimension.ALL)
                                                .build(),
                                       		AccessDimensionGrantMappingImpl.builder()
                                                .withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_EDUCATION_LEVEL))
                                                .withAccess(AccessDimension.ALL)
                                                .build(),
                                       		AccessDimensionGrantMappingImpl.builder()
                                                .withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_GENDER))
                                                .withAccess(AccessDimension.NONE)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                );

            result.add(
            		AccessRoleMappingImpl.builder()
                        .withName("Role3")
                        .withAccessSchemaGrants(List.of(
                        	AccessSchemaGrantMappingImpl.builder()
                                .withAccess(AccessSchema.NONE)
                                .withCubeGrant(List.of(
                                	AccessCubeGrantMappingImpl.builder()
                                    	.withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                        .withAccess(AccessCube.CUSTOM)
                                        .withDimensionGrants(List.of(
                                        	AccessDimensionGrantMappingImpl.builder()
                                                .withDimension((DimensionMappingImpl) look(FoodmartMappingSupplier.DIMENSION_EDUCATION_LEVEL))
                                                .withAccess(AccessDimension.ALL)
                                                .build(),
                                            AccessDimensionGrantMappingImpl.builder()
                                                //.withDimension("[Measures]")
                                                .withAccess(AccessDimension.CUSTOM)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                );





            return result;
        }

    }

    public static class AccessControlTestModifier20 extends PojoMappingModifier {

        /*
                    "  <Role name=\"Role1\">\n"
                    + "    <SchemaGrant access=\"all\">\n"
                    + "      <CubeGrant cube=\"Sales\" access=\"all\">\n"
                    + "        <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" topLevel=\"[Customers].[City]\" bottomLevel=\"[Customers].[City]\" rollupPolicy=\"partial\">\n"
                    + "          <MemberGrant member=\"[City].[Coronado]\" access=\"all\">\n"
                    + "          </MemberGrant>\n"
                    + "        </HierarchyGrant>\n"
                    + "      </CubeGrant>\n"
                    + "    </SchemaGrant>\n"
                    + "  </Role>\n"
                    + "  <Role name=\"Role2\">\n"
                    + "    <SchemaGrant access=\"all\">\n"
                    + "      <CubeGrant cube=\"Sales\" access=\"all\">\n"
                    + "        <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" topLevel=\"[Customers].[City]\" bottomLevel=\"[Customers].[City]\" rollupPolicy=\"partial\">\n"
                    + "          <MemberGrant member=\"[City].[Burbank]\" access=\"all\">\n"
                    + "          </MemberGrant>\n"
                    + "        </HierarchyGrant>\n"
                    + "      </CubeGrant>\n"
                    + "    </SchemaGrant>\n"
                    + "  </Role>\n");

        */

        public AccessControlTestModifier20(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            		AccessRoleMappingImpl.builder()
                        .withName("Role1")
                        .withAccessSchemaGrants(List.of(
                        	AccessSchemaGrantMappingImpl.builder()
                                .withAccess(AccessSchema.ALL)
                                .withCubeGrant(List.of(
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                        .withAccess(AccessCube.ALL)
                                        .withHierarchyGrants(List.of(
                                        		AccessHierarchyGrantMappingImpl.builder()
                                                .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.customersHierarchy))
                                                .withAccess(AccessHierarchy.CUSTOM)
                                                .withTopLevel((LevelMappingImpl) look(FoodmartMappingSupplier.LEVEL_CITY_TABLE_COLUMN_CITY))
                                                .withBottomLevel((LevelMappingImpl) look(FoodmartMappingSupplier.LEVEL_CITY_TABLE_COLUMN_CITY))
                                                .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                                .withMemberGrants(List.of(
                                                	AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[City].[Coronado]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                                ))
                                        		.build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                );

            result.add(
            		AccessRoleMappingImpl.builder()
                        .withName("Role2")
                        .withAccessSchemaGrants(List.of(
                        	AccessSchemaGrantMappingImpl.builder()
                                .withAccess(AccessSchema.ALL)
                                .withCubeGrant(List.of(
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                        .withAccess(AccessCube.ALL)
                                        .withHierarchyGrants(List.of(
                                        		AccessHierarchyGrantMappingImpl.builder()
                                                .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.customersHierarchy))
                                                .withAccess(AccessHierarchy.CUSTOM)
                                                .withTopLevel((LevelMappingImpl) look(FoodmartMappingSupplier.LEVEL_CITY_TABLE_COLUMN_CITY))
                                                .withBottomLevel((LevelMappingImpl) look(FoodmartMappingSupplier.LEVEL_CITY_TABLE_COLUMN_CITY))
                                                .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                                .withMemberGrants(List.of(
                                                	AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[City].[Burbank]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                                ))
                                        		.build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                );

            return result;
        }
    }

    public static class AccessControlTestModifier21 extends PojoMappingModifier {

        /*
            "<Role name=\"Bacon\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\"partial\">\n"
            + "        <MemberGrant member=\"[Customers].[USA].[CA].[Los Angeles]\" access=\"all\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>");

        */

        public AccessControlTestModifier21(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            		AccessRoleMappingImpl.builder()
                        .withName("Bacon")
                        .withAccessSchemaGrants(List.of(
                        	AccessSchemaGrantMappingImpl.builder()
                                .withAccess(AccessSchema.NONE)
                                .withCubeGrant(List.of(
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                        .withAccess(AccessCube.ALL)
                                        .withHierarchyGrants(List.of(
                                        		AccessHierarchyGrantMappingImpl.builder()
                                                .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.customersHierarchy))
                                                .withAccess(AccessHierarchy.CUSTOM)
                                                .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                                .withMemberGrants(List.of(
                                                	AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Customers].[USA].[CA].[Los Angeles]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                                ))
                                        		.build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                );
            return result;
        }

    }

    public static class AccessControlTestModifier22 extends PojoMappingModifier {

        /*
            "<Role name=\"Role1\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"partial\">\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA]\" access=\"all\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>");
        */

        public AccessControlTestModifier22(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            		AccessRoleMappingImpl.builder()
                        .withName("Role1")
                        .withAccessSchemaGrants(List.of(
                        	AccessSchemaGrantMappingImpl.builder()
                                .withAccess(AccessSchema.NONE)
                                .withCubeGrant(List.of(
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                        .withAccess(AccessCube.ALL)
                                        .withHierarchyGrants(List.of(
                                        		AccessHierarchyGrantMappingImpl.builder()
                                                .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.storeHierarchy))
                                                .withAccess(AccessHierarchy.CUSTOM)
                                                .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                                .withMemberGrants(List.of(
                                                	AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[USA].[CA]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                                ))
                                        		.build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                );
            return result;
        }
    }

    public static class AccessControlTestModifier23 extends PojoMappingModifier {

        /*
            "<Role name=\"Role1\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"partial\">\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA]\" access=\"all\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>"
            + "<Role name=\"Role2\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"partial\">\n"
            + "        <MemberGrant member=\"[Store].[USA].[OR]\" access=\"all\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>");
        */

        public AccessControlTestModifier23(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            		AccessRoleMappingImpl.builder()
                        .withName("Role1")
                        .withAccessSchemaGrants(List.of(
                        	AccessSchemaGrantMappingImpl.builder()
                                .withAccess(AccessSchema.NONE)
                                .withCubeGrant(List.of(
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                        .withAccess(AccessCube.ALL)
                                        .withHierarchyGrants(List.of(
                                        		AccessHierarchyGrantMappingImpl.builder()
                                                .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.storeHierarchy))
                                                .withAccess(AccessHierarchy.CUSTOM)
                                                .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                                .withMemberGrants(List.of(
                                                	AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[USA].[CA]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                                ))
                                        		.build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                );

            result.add(
            		AccessRoleMappingImpl.builder()
                        .withName("Role2")
                        .withAccessSchemaGrants(List.of(
                        	AccessSchemaGrantMappingImpl.builder()
                                .withAccess(AccessSchema.NONE)
                                .withCubeGrant(List.of(
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                        .withAccess(AccessCube.ALL)
                                        .withHierarchyGrants(List.of(
                                        		AccessHierarchyGrantMappingImpl.builder()
                                                .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.storeHierarchy))
                                                .withAccess(AccessHierarchy.CUSTOM)
                                                .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                                .withMemberGrants(List.of(
                                                	AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[USA].[OR]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                                ))
                                        		.build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                );

            return result;
        }
    }


    public static class AccessControlTestModifier24 extends PojoMappingModifier {

        /*
                "<Role name=\"Admin\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Store]\" rollupPolicy=\"partial\" access=\"custom\">\n"
                + "        <MemberGrant member=\"[Store].[USA].[CA]\" access=\"all\">\n"
                + "        </MemberGrant>\n"
                + "      </HierarchyGrant>\n"
                + "      <HierarchyGrant hierarchy=\"[Customers]\" rollupPolicy=\"partial\" access=\"custom\">\n"
                + "        <MemberGrant member=\"[Customers].[USA].[CA]\" access=\"all\">\n"
                + "        </MemberGrant>\n"
                + "      </HierarchyGrant>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role> \n");
        */

        public AccessControlTestModifier24(CatalogMapping catalog) {
            super(catalog);
        }


        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            		AccessRoleMappingImpl.builder()
                        .withName("Admin")
                        .withAccessSchemaGrants(List.of(
                        	AccessSchemaGrantMappingImpl.builder()
                                .withAccess(AccessSchema.NONE)
                                .withCubeGrant(List.of(
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                        .withAccess(AccessCube.ALL)
                                        .withHierarchyGrants(List.of(
                                        	AccessHierarchyGrantMappingImpl.builder()
                                                .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.storeHierarchy))
                                                .withAccess(AccessHierarchy.CUSTOM)
                                                .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                                .withMemberGrants(List.of(
                                                	AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[USA].[CA]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                                ))
                                        		.build(),
                                        	AccessHierarchyGrantMappingImpl.builder()
                                                .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.customersHierarchy))
                                                .withAccess(AccessHierarchy.CUSTOM)
                                                .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                                .withMemberGrants(List.of(
                                                	AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Customers].[USA].[CA]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                                ))
                                        		.build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                );
            return result;
        }

    }

    public static class AccessControlTestModifier25 extends PojoMappingModifier {

        /*
            "<Role name=\"test\">\n"
            + " <SchemaGrant access=\"none\">\n"
            + "   <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "     <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\"\n"
            + "         topLevel=\"[Store].[Store Country]\" rollupPolicy=\"partial\">\n"
            + "       <MemberGrant member=\"[Store].[All Stores]\" access=\"none\"/>\n"
            + "       <MemberGrant member=\"[Store].[USA].[CA].[Los Angeles]\" access=\"all\"/>\n"
            + "       <MemberGrant member=\"[Store].[USA].[CA].[Alameda]\" access=\"all\"/>\n"
            + "       <MemberGrant member=\"[Store].[USA].[CA].[Beverly Hills]\"\n"
            + "access=\"all\"/>\n"
            + "       <MemberGrant member=\"[Store].[USA].[CA].[San Francisco]\"\n"
            + "access=\"all\"/>\n"
            + "       <MemberGrant member=\"[Store].[USA].[CA].[San Diego]\" access=\"all\"/>\n"
            + "\n"
            + "       <MemberGrant member=\"[Store].[USA].[OR].[Portland]\" access=\"all\"/>\n"
            + "       <MemberGrant member=\"[Store].[USA].[OR].[Salem]\" access=\"all\"/>\n"
            + "     </HierarchyGrant>\n"
            + "   </CubeGrant>\n"
            + " </SchemaGrant>\n"
            + "</Role>");
        */

        public AccessControlTestModifier25(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            		AccessRoleMappingImpl.builder()
                        .withName("test")
                        .withAccessSchemaGrants(List.of(
                        	AccessSchemaGrantMappingImpl.builder()
                                .withAccess(AccessSchema.NONE)
                                .withCubeGrant(List.of(
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                        .withAccess(AccessCube.ALL)
                                        .withHierarchyGrants(List.of(
                                        	AccessHierarchyGrantMappingImpl.builder()
                                                .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.storeHierarchy))
                                                .withAccess(AccessHierarchy.CUSTOM)
                                                .withTopLevel((LevelMappingImpl) look(FoodmartMappingSupplier.LEVEL_STORE_COUNTRY))
                                                .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                                .withMemberGrants(List.of(
                                                    AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[All Stores]")
                                                        .withAccess(AccessMember.NONE)
                                                        .build(),
                                                    AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[USA].[CA].[Los Angeles]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build(),
                                                    AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[USA].[CA].[Alameda]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build(),
                                                    AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[USA].[CA].[Beverly Hills]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build(),
                                                    AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[USA].[CA].[San Francisco]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build(),
                                                    AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[USA].[CA].[San Diego]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build(),
                                                    AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[USA].[OR].[Portland]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build(),
                                                    AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Store].[USA].[OR].[Salem]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                                ))
                                        		.build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                );
            return result;
        }
    }

    public static class AccessControlTestModifier26 extends PojoMappingModifier {

        /*
            "<Role name=\"dev\">"
            + "    <SchemaGrant access=\"all\">"
            + "      <CubeGrant cube=\"Sales\" access=\"all\">"
            + "      </CubeGrant>"
            + "      <CubeGrant cube=\"HR\" access=\"all\">"
            + "      </CubeGrant>"
            + "      <CubeGrant cube=\"Warehouse and Sales\" access=\"all\">"
            + "         <HierarchyGrant hierarchy=\"Measures\" access=\"custom\">"
            + "            <MemberGrant member=\"[Measures].[Warehouse Sales]\" access=\"all\">"
            + "            </MemberGrant>"
            + "         </HierarchyGrant>"
            + "     </CubeGrant>"
            + "  </SchemaGrant>"
            + "</Role>";
        */

        public AccessControlTestModifier26(CatalogMapping catalog) {
            super(catalog);
        }


        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            		AccessRoleMappingImpl.builder()
                        .withName("dev")
                        .withAccessSchemaGrants(List.of(
                        	AccessSchemaGrantMappingImpl.builder()
                                .withAccess(AccessSchema.ALL)
                                .withCubeGrant(List.of(
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                        .withAccess(AccessCube.ALL)
                                        .build(),
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_HR))
                                        .withAccess(AccessCube.ALL)
                                        .build(),
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_VIRTIAL_WAREHOUSE_AND_SALES))
                                        .withAccess(AccessCube.ALL)
                                        .withHierarchyGrants(List.of(
                                        		AccessHierarchyGrantMappingImpl.builder()
                                                //.withHierarchy("Measures")
                                                .withAccess(AccessHierarchy.CUSTOM)
                                                .withMemberGrants(List.of(
                                                	AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Measures].[Warehouse Sales]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                                ))
                                        		.build()
                                        ))
                                        .build()

                                 ))
                                .build()
                            ))
                        .build()
                   );
            return result;
        }
    }

    public static class AccessControlTestModifier27 extends PojoMappingModifier {

        /*
            "<Role name=\"dev\">"
            + "    <SchemaGrant access=\"all\">"
            + "      <CubeGrant cube=\"Sales\" access=\"all\">"
            + "         <HierarchyGrant hierarchy=\"Measures\" access=\"custom\">"
            + "            <MemberGrant member=\"[Measures].[Unit Sales]\" access=\"all\">"
            + "            </MemberGrant>"
            + "         </HierarchyGrant>"
            + "      </CubeGrant>"
            + "      <CubeGrant cube=\"HR\" access=\"all\">"
            + "      </CubeGrant>"
            + "      <CubeGrant cube=\"Warehouse and Sales\" access=\"all\">"
            + "     </CubeGrant>"
            + "  </SchemaGrant>"
            + "</Role>";
        */

        public AccessControlTestModifier27(CatalogMapping catalog) {
            super(catalog);
        }


        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            		AccessRoleMappingImpl.builder()
                        .withName("dev")
                        .withAccessSchemaGrants(List.of(
                        	AccessSchemaGrantMappingImpl.builder()
                                .withAccess(AccessSchema.ALL)
                                .withCubeGrant(List.of(
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                        .withAccess(AccessCube.ALL)
                                        .withHierarchyGrants(List.of(
                                        		AccessHierarchyGrantMappingImpl.builder()
                                                //.withHierarchy("Measures")
                                                .withAccess(AccessHierarchy.CUSTOM)
                                                .withMemberGrants(List.of(
                                                	AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Measures].[Unit Sales]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                                ))
                                        		.build()
                                        ))
                                        .build(),
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_HR))
                                        .withAccess(AccessCube.ALL)
                                        .build(),
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_VIRTIAL_WAREHOUSE_AND_SALES))
                                        .withAccess(AccessCube.ALL)
                                        .build()

                                 ))
                                .build()
                            ))
                        .build()
                   );
            return result;
        }
    }

    public static class AccessControlTestModifier28 extends PojoMappingModifier {

        /*
                "<Role name=\"Admin\">\n"
                + "    <SchemaGrant access=\"none\">\n"
                + "      <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "        <HierarchyGrant hierarchy=\"[Gender]\" rollupPolicy=\"partial\" access=\"custom\">\n"
                + "          <MemberGrant member=\"[Gender].[F]\" access=\"all\">\n"
                + "          </MemberGrant>\n"
                + "        </HierarchyGrant>\n"
                + "      </CubeGrant>\n"
                + "    </SchemaGrant>\n"
                + "  </Role>\n");
        */

        public AccessControlTestModifier28(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> schemaAccessRoles(SchemaMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.schemaAccessRoles(schema));
            result.add(
            		AccessRoleMappingImpl.builder()
                        .withName("Admin")
                        .withAccessSchemaGrants(List.of(
                        	AccessSchemaGrantMappingImpl.builder()
                                .withAccess(AccessSchema.NONE)
                                .withCubeGrant(List.of(
                                    AccessCubeGrantMappingImpl.builder()
                                        .withCube((CubeMappingImpl) look(FoodmartMappingSupplier.CUBE_SALES))
                                        .withAccess(AccessCube.ALL)
                                        .withHierarchyGrants(List.of(
                                        		AccessHierarchyGrantMappingImpl.builder()
                                                .withHierarchy((HierarchyMappingImpl) look(FoodmartMappingSupplier.genderHierarchy))
                                                .withRollupPolicyType(RollupPolicyType.PARTIAL)
                                                .withAccess(AccessHierarchy.CUSTOM)
                                                .withMemberGrants(List.of(
                                                	AccessMemberGrantMappingImpl.builder()
                                                        .withMember("[Gender].[F]")
                                                        .withAccess(AccessMember.ALL)
                                                        .build()
                                                ))
                                        		.build()
                                        ))
                                        .build()
                                 ))
                                .build()
                            ))
                        .build()
                   );
            return result;
        }
    }

    public static class AccessControlTestModifier39 extends PojoMappingModifier {

        /*
                "<Role name=\"Role1\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\""
                    + rollupPolicy
                    + "\" bottomLevel=\"[Customers].[City]\">\n"
                    + "        <MemberGrant member=\"[Customers].[USA]\" access=\"all\"/>\n"
                    + "        <MemberGrant member=\"[Customers].[USA].[CA]\" access=\"all\"/>\n"
                    + "        <MemberGrant member=\"[Customers].[USA].[CA].[Los Angeles]\" access=\"none\"/>\n"
                    + "      </HierarchyGrant>\n"
                    + "    </CubeGrant>\n"
                    + "  </SchemaGrant>\n"
                    + "</Role>");

        */

        private final RollupPolicy policy;

        public AccessControlTestModifier39(CatalogMapping catalog, RollupPolicy policy) {
            super(catalog);
            this.policy = policy;
        }
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingRole> schemaRoles(CatalogMapping catalogOriginal) {
            List<MappingRole> result = new ArrayList<>();
            result.addAll(super.schemaRoles(mappingSchemaOriginal));
            result.add(
                RoleRBuilder.builder()
                    .name("Role1")
                    .schemaGrants(List.of(
                        SchemaGrantRBuilder.builder()
                            .access(AccessEnum.NONE)
                            .cubeGrants(List.of(
                                CubeGrantRBuilder.builder()
                                    .cube("Sales")
                                    .access("all")
                                    .hierarchyGrants(List.of(
                                        HierarchyGrantRBuilder.builder()
                                            .hierarchy("[Customers]")
                                            .rollupPolicy(policy.name())
                                            .access(AccessEnum.CUSTOM)
                                            .bottomLevel("[Customers].[City]")
                                            .memberGrants(List.of(
                                                MemberGrantRBuilder.builder()
                                                    .member("[Customers].[USA]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Customers].[USA].[CA]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Customers].[USA].[CA].[Los Angeles]")
                                                    .access(MemberGrantAccessEnum.NONE)
                                                    .build()
                                            ))
                                            .build()
                                    ))
                                    .build()
                            ))
                            .build()
                    ))
                    .build()
            );

            return result;
        }
        */
    }

    public static class AccessControlTestModifier40 extends PojoMappingModifier {

        /*
                "<Role name=\"Role1\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\""
                + policy
                + "\">\n"
                + "        <MemberGrant member=\"[Customers].[USA]\" access=\"all\"/>\n"
                + "        <MemberGrant member=\"[Customers].[USA].[CA].[San Francisco].[Gladys Evans]\" access=\"none\"/>\n"
                + "      </HierarchyGrant>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>");
        */

        private final RollupPolicy policy;

        public AccessControlTestModifier40(CatalogMapping catalog, RollupPolicy policy) {
            super(catalog);
            this.policy = policy;
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingRole> schemaRoles(CatalogMapping catalogOriginal) {
            List<MappingRole> result = new ArrayList<>();
            result.addAll(super.schemaRoles(mappingSchemaOriginal));
            result.add(
                RoleRBuilder.builder()
                    .name("Role1")
                    .schemaGrants(List.of(
                        SchemaGrantRBuilder.builder()
                            .access(AccessEnum.NONE)
                            .cubeGrants(List.of(
                                CubeGrantRBuilder.builder()
                                    .cube("Sales")
                                    .access("all")
                                    .hierarchyGrants(List.of(
                                        HierarchyGrantRBuilder.builder()
                                            .hierarchy("[Customers]")
                                            .rollupPolicy(policy.name())
                                            .access(AccessEnum.CUSTOM)
                                            .memberGrants(List.of(
                                                MemberGrantRBuilder.builder()
                                                    .member("[Customers].[USA]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Customers].[USA].[CA].[San Francisco].[Gladys Evans]")
                                                    .access(MemberGrantAccessEnum.NONE)
                                                    .build()
                                            ))
                                            .build()
                                    ))
                                    .build()
                            ))
                            .build()
                    ))
                    .build()
            );

            return result;
        }
        */
    }

    public static class AccessControlTestModifier41 extends PojoMappingModifier {

        /*
                "<Role name=\"Role1\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\""
                + policy
                + "\">\n"
                + "        <MemberGrant member=\"[Customers].[USA]\" access=\"all\"/>\n"
                + "        <MemberGrant member=\"[Customers].[USA].[CA].[San Francisco].[Gladys Evans]\" access=\"none\"/>\n"
                + "      </HierarchyGrant>\n"
                + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\""
                + policy
                + "\">\n"
                + "        <MemberGrant member=\"[Store].[USA].[CA]\" access=\"all\"/>\n"
                + "        <MemberGrant member=\"[Store].[USA].[CA].[San Francisco].[Store 14]\" access=\"none\"/>\n"
                + "      </HierarchyGrant>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>");
        */

        private final RollupPolicy policy;

        public AccessControlTestModifier41(CatalogMapping catalog, RollupPolicy policy) {
            super(catalog);
            this.policy = policy;
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingRole> schemaRoles(CatalogMapping catalogOriginal) {
            List<MappingRole> result = new ArrayList<>();
            result.addAll(super.schemaRoles(mappingSchemaOriginal).stream()
                .filter(r -> !"Role1".equals(r.name())).toList());
            result.add(
                RoleRBuilder.builder()
                    .name("Role1")
                    .schemaGrants(List.of(
                        SchemaGrantRBuilder.builder()
                            .access(AccessEnum.NONE)
                            .cubeGrants(List.of(
                                CubeGrantRBuilder.builder()
                                    .cube("Sales")
                                    .access("all")
                                    .hierarchyGrants(List.of(
                                        HierarchyGrantRBuilder.builder()
                                            .hierarchy("[Customers]")
                                            .rollupPolicy(policy.name())
                                            .access(AccessEnum.CUSTOM)
                                            .memberGrants(List.of(
                                                MemberGrantRBuilder.builder()
                                                    .member("[Customers].[USA]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Customers].[USA].[CA].[San Francisco].[Gladys Evans]")
                                                    .access(MemberGrantAccessEnum.NONE)
                                                    .build()
                                            ))
                                            .build(),
                                        HierarchyGrantRBuilder.builder()
                                            .hierarchy("[Store]")
                                            .rollupPolicy(policy.name())
                                            .access(AccessEnum.CUSTOM)
                                            .memberGrants(List.of(
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA].[CA]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA].[CA].[San Francisco].[Store 14]")
                                                    .access(MemberGrantAccessEnum.NONE)
                                                    .build()
                                            ))
                                            .build()
                                    ))
                                    .build()
                            ))
                            .build()
                    ))
                    .build()
            );

            return result;
        }
        */
    }

    public static class AccessControlTestModifier42 extends PojoMappingModifier {

        /*
                "<Role name=\"California manager\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Store]\" rollupPolicy=\""
                + policy.name().toLowerCase()
                + "\" access=\"custom\">\n"
                + "        <MemberGrant member=\"[Store].[USA].[CA]\" access=\"all\"/>\n"
                + "        <MemberGrant member=\"[Store].[USA].[OR].[Portland]\" access=\"all\"/>\n"
                + "      </HierarchyGrant>"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>");
        */

        private final RollupPolicy policy;

        public AccessControlTestModifier42(CatalogMapping catalog, RollupPolicy policy) {
            super(catalog);
            this.policy = policy;
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingRole> schemaRoles(CatalogMapping catalogOriginal) {
            List<MappingRole> result = new ArrayList<>();
            result.addAll(super.schemaRoles(mappingSchemaOriginal));
            result.add(
                RoleRBuilder.builder()
                    .name("California manager")
                    .schemaGrants(List.of(
                        SchemaGrantRBuilder.builder()
                            .access(AccessEnum.NONE)
                            .cubeGrants(List.of(
                                CubeGrantRBuilder.builder()
                                    .cube("Sales")
                                    .access("all")
                                    .hierarchyGrants(List.of(
                                        HierarchyGrantRBuilder.builder()
                                            .hierarchy("[Store]")
                                            .rollupPolicy(policy.name().toLowerCase())
                                            .access(AccessEnum.CUSTOM)
                                            .memberGrants(List.of(
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA].[CA]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA].[OR].[Portland]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build()
                                            ))
                                            .build()
                                    ))
                                    .build()
                            ))
                            .build()
                    ))
                    .build()
            );

            return result;
        }
        */
    }

    public static class AccessControlTestModifier29 extends PojoMappingModifier {

        /*
                "<Role name=\"Admin\">\n"
                + "    <SchemaGrant access=\"none\">\n"
                + "      <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "        <HierarchyGrant hierarchy=\"[Gender]\" rollupPolicy=\"partial\" access=\"custom\">\n"
                + "          <MemberGrant member=\"[Gender].[F]\" access=\"all\">\n"
                + "          </MemberGrant>\n"
                + "        </HierarchyGrant>\n"
                + "      </CubeGrant>\n"
                + "    </SchemaGrant>\n"
                + "  </Role>\n");
        */
        private final Boolean hasAll;
        private final String defaultMem;
        private final RollupPolicy policy;

        public AccessControlTestModifier29(CatalogMapping catalog,
                                           Boolean hasAll, String defaultMem, RollupPolicy policy) {
            super(catalog);
            this.hasAll = hasAll;
            this.defaultMem = defaultMem;
            this.policy = policy;
        }

        /*
            "<Cube name=\"TinySales\">\n"
            + "  <Table name=\"sales_fact_1997\"/>\n"
            + "  <DimensionUsage name=\"Product\" source=\"Product\" foreignKey=\"product_id\"/>\n"
            + "  <DimensionUsage name=\"Store2\" source=\"Store2\" foreignKey=\"store_id\"/>\n"
            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"/>\n"
            + "</Cube>";
         */
        /* TODO: DENIS MAPPING-MODIFIER
        protected List<MappingCube> schemaCubes(CatalogMapping catalogOriginal) {
            List<MappingCube> result = new ArrayList<>();
            result.addAll(super.schemaCubes(mappingSchemaOriginal).stream()
                .filter(c -> !"TinySales".equals(c.name())).toList());
            result.add(CubeRBuilder.builder()
                .name("TinySales")
                .fact(new TableR("sales_fact_1997"))
                .dimensionUsageOrDimensions(List.of(
                    DimensionUsageRBuilder.builder()
                        .name("Product")
                        .source("Product")
                        .foreignKey("product_id")
                        .build(),
                    DimensionUsageRBuilder.builder()
                        .name("Store2")
                        .source("Store2")
                        .foreignKey("store_id")
                        .build()
                ))
                .measures(List.of(
                    MeasureRBuilder.builder()
                        .name("Unit Sales")
                        .column("unit_sales")
                        .aggregator("sum")
                        .build()
                ))
                .build());
            return result;
        }
        */

        /*
                     "<Dimension name=\"Store2\">\n"
            + "  <Hierarchy hasAll=\"%s\" primaryKey=\"store_id\" %s >\n"
            + "    <Table name=\"store\"/>\n"
            + "    <Level name=\"Store Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
            + "    <Level name=\"Store State\" column=\"store_state\" uniqueMembers=\"true\"/>\n"
            + "  </Hierarchy>\n"
            + "</Dimension>\n";

         */
        /* TODO: DENIS MAPPING-MODIFIER
        protected List<MappingPrivateDimension> schemaDimensions(CatalogMapping catalogOriginal) {
            List<MappingPrivateDimension> result = new ArrayList<>();
            result.addAll(super.schemaDimensions(mappingSchemaOriginal).stream()
                .filter(d -> !"Store2".equals(d.name())).toList());
            result.add(PrivateDimensionRBuilder.builder()
                .name("Store2")
                .hierarchies(List.of(
                    HierarchyRBuilder.builder()
                        .hasAll(hasAll)
                        .defaultMember(defaultMem)
                        .primaryKey("store_id")
                        .relation(new TableR("store"))
                        .levels(List.of(
                            LevelRBuilder.builder()
                                .name("Store Country")
                                .column("store_country")
                                .uniqueMembers(true)
                                .build(),
                            LevelRBuilder.builder()
                                .name("Store State")
                                .column("store_state")
                                .uniqueMembers(true)
                                .build()
                        ))
                        .build()
                ))
                .build());
            return result;
        }
        */

        /*
                    "<Role name=\"test\">\n"
            + "        <SchemaGrant access=\"none\">\n"
            + "            <CubeGrant cube=\"TinySales\" access=\"all\">\n"
            + "                <HierarchyGrant hierarchy=\"[Store2]\" access=\"custom\"\n"
            + "                                 rollupPolicy=\"%s\">\n"
            + "                    <MemberGrant member=\"[Store2].[USA].[CA]\" access=\"all\"/>\n"
            + "                    <MemberGrant member=\"[Store2].[USA].[OR]\" access=\"all\"/>\n"
            + "                    <MemberGrant member=\"[Store2].[Canada]\" access=\"all\"/>\n"
            + "                </HierarchyGrant>\n"
            + "            </CubeGrant>\n"
            + "        </SchemaGrant>\n"
            + "    </Role> ";

         */
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingRole> schemaRoles(CatalogMapping catalogOriginal) {
            List<MappingRole> result = new ArrayList<>();
            result.addAll(super.schemaRoles(mappingSchemaOriginal)
                .stream().filter(r -> !"test".equals(r.name())).toList());
            result.add(
                RoleRBuilder.builder()
                    .name("test")
                    .schemaGrants(List.of(
                        SchemaGrantRBuilder.builder()
                            .access(AccessEnum.NONE)
                            .cubeGrants(List.of(
                                CubeGrantRBuilder.builder()
                                    .cube("TinySales")
                                    .access("all")
                                    .hierarchyGrants(List.of(
                                        HierarchyGrantRBuilder.builder()
                                            .hierarchy("[Store2]")
                                            .rollupPolicy(policy.name())
                                            .access(AccessEnum.CUSTOM)
                                            .memberGrants(List.of(
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store2].[USA].[CA]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store2].[USA].[OR]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store2].[Canada]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build()
                                            ))
                                            .build()
                                    ))
                                    .build()
                            ))
                            .build()
                    ))
                    .build()
            );

            return result;
        }
        */
    }

    public static class AccessControlTestModifier30 extends PojoMappingModifier {

        /*
            "<Role name=\"noBaseCubes\">\n"
            + " <SchemaGrant access=\"all\">\n"
            + "  <CubeGrant cube=\"Sales\" access=\"none\" />\n"
            + "  <CubeGrant cube=\"Sales Ragged\" access=\"none\" />\n"
            + "  <CubeGrant cube=\"Sales 2\" access=\"none\" />\n"
            + "  <CubeGrant cube=\"Warehouse\" access=\"none\" />\n"
            + " </SchemaGrant>\n"
            + "</Role> ";
        */

        public AccessControlTestModifier30(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingRole> schemaRoles(CatalogMapping catalogOriginal) {
            List<MappingRole> result = new ArrayList<>();
            result.addAll(super.schemaRoles(mappingSchemaOriginal));
            result.add(
                RoleRBuilder.builder()
                    .name("noBaseCubes")
                    .schemaGrants(List.of(
                        SchemaGrantRBuilder.builder()
                            .access(AccessEnum.ALL)
                            .cubeGrants(List.of(
                                CubeGrantRBuilder.builder()
                                    .cube("Sales")
                                    .access("none")
                                    .build(),
                                CubeGrantRBuilder.builder()
                                    .cube("Sales Ragged")
                                    .access("none")
                                    .build(),
                                CubeGrantRBuilder.builder()
                                    .cube("Sales 2")
                                    .access("none")
                                    .build(),
                                CubeGrantRBuilder.builder()
                                    .cube("Warehouse")
                                    .access("none")
                                    .build()
                            ))
                            .build()
                    ))
                    .build()
            );

            return result;
        }
        */
    }

    public static class AccessControlTestModifier31 extends PojoMappingModifier {

        /*
            "<Role name=\"Role1\">\n"
            + "  <SchemaGrant access=\"all\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Measures]\" access=\"all\">\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>"
            + "<Role name=\"Role2\">\n"
            + "  <SchemaGrant access=\"all\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Measures]\" access=\"custom\">\n"
            + "        <MemberGrant member=\"[Measures].[Unit Sales]\" access=\"all\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>");
        */

        public AccessControlTestModifier31(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingRole> schemaRoles(CatalogMapping catalogOriginal) {
            List<MappingRole> result = new ArrayList<>();
            result.addAll(super.schemaRoles(mappingSchemaOriginal));
            result.add(
                RoleRBuilder.builder()
                    .name("Role1")
                    .schemaGrants(List.of(
                        SchemaGrantRBuilder.builder()
                            .access(AccessEnum.ALL)
                            .cubeGrants(List.of(
                                CubeGrantRBuilder.builder()
                                    .cube("Sales")
                                    .access("all")
                                    .hierarchyGrants(List.of(
                                        HierarchyGrantRBuilder.builder()
                                            .hierarchy("[Measures]")
                                            .access(AccessEnum.ALL)
                                            .build()
                                    ))
                                    .build()
                            ))
                            .build()
                    ))
                    .build()
            );

            result.add(
                RoleRBuilder.builder()
                    .name("Role2")
                    .schemaGrants(List.of(
                        SchemaGrantRBuilder.builder()
                            .access(AccessEnum.ALL)
                            .cubeGrants(List.of(
                                CubeGrantRBuilder.builder()
                                    .cube("Sales")
                                    .access("all")
                                    .hierarchyGrants(List.of(
                                        HierarchyGrantRBuilder.builder()
                                            .hierarchy("[Measures]")
                                            .access(AccessEnum.CUSTOM)
                                            .memberGrants(List.of(
                                                MemberGrantRBuilder.builder()
                                                    .member("[Measures].[Unit Sales]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build()
                                            ))
                                            .build()
                                    ))
                                    .build()
                            ))
                            .build()
                    ))
                    .build()
            );

            return result;
        }
        */
    }

    public static class AccessControlTestModifier33 extends PojoMappingModifier {


        public AccessControlTestModifier33(CatalogMapping catalog) {
            super(catalog);
        }

        /*
                String cubeDef = "<Cube name=\"Sales1\">"
          + "  <Table name=\"sales_fact_1997\"/>\n"
            "    <Dimension visible=\"true\" foreignKey=\"customer_id\" highCardinality=\"false\" name=\"Customers\">\n"
            + "      <Hierarchy visible=\"true\" hasAll=\"true\" allMemberName=\"All Customers\" primaryKey=\"customer_id\">\n"
            + "        <Table name=\"customer\">\n"
            + "        </Table>\n"
            + "        <Level name=\"Country\" visible=\"true\" column=\"country\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "        </Level>\n"
            + "        <Level name=\"State Province\" visible=\"true\" column=\"state_province\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "        </Level>\n"
            + "        <Level name=\"City\" visible=\"true\" column=\"city\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "        </Level>\n"
            + "        <Level name=\"Name1\" visible=\"true\" column=\"fname\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "          <Property name=\"Gender\" column=\"gender\" type=\"String\">\n"
            + "          </Property>\n"
            + "          <Property name=\"Marital Status\" column=\"marital_status\" type=\"String\">\n"
            + "          </Property>\n"
            + "          <Property name=\"Education\" column=\"education\" type=\"String\">\n"
            + "          </Property>\n"
            + "          <Property name=\"Yearly Income\" column=\"yearly_income\" type=\"String\">\n"
            + "          </Property>\n"
            + "        </Level>\n"
            + "        <Level name=\"First Name\" visible=\"true\" column=\"fname\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "        </Level>\n"
            + "      </Hierarchy>\n"
            + "      <Hierarchy name=\"Gender\" visible=\"true\" hasAll=\"true\" primaryKey=\"customer_id\">\n"
            + "        <Table name=\"customer\">\n"
            + "        </Table>\n"
            + "        <Level name=\"Gender\" visible=\"true\" column=\"gender\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "          <Annotations>\n"
            + "            <Annotation name=\"AnalyzerBusinessGroup\">\n"
            + "              <![CDATA[Customers]]>\n"
            + "            </Annotation>\n"
            + "          </Annotations>\n"
            + "        </Level>\n"
            + "      </Hierarchy>\n"
            + "      <Hierarchy name=\"Marital Status\" visible=\"true\" hasAll=\"true\" primaryKey=\"customer_id\">\n"
            + "        <Table name=\"customer\">\n"
            + "        </Table>\n"
            + "        <Level name=\"Marital Status\" visible=\"true\" column=\"marital_status\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "          <Annotations>\n"
            + "            <Annotation name=\"AnalyzerBusinessGroup\">\n"
            + "              <![CDATA[Customers]]>\n"
            + "            </Annotation>\n"
            + "          </Annotations>\n"
            + "        </Level>\n"
            + "      </Hierarchy>\n"
            + "    </Dimension>\n"
            + "  <Dimension visible=\"true\" highCardinality=\"false\" name=\"Store\" foreignKey=\"store_id\">\n"
            + "    <Hierarchy visible=\"true\" hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "      <Table name=\"store\">\n"
            + "      </Table>\n"
            + "      <Level name=\"Store ID\" visible=\"true\" column=\"store_id\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "      </Level>\n"
            + "      <Level name=\"Store Country\" visible=\"true\" column=\"store_country\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "      </Level>\n"
            + "      <Level name=\"Store State\" visible=\"true\" column=\"store_state\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "      </Level>\n"
            + "      <Level name=\"Store City\" visible=\"true\" column=\"store_city\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "      </Level>\n"
            + "      <Level name=\"Store Name\" visible=\"true\" column=\"store_name\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "        <Property name=\"Store Type\" column=\"store_type\" type=\"String\">\n"
            + "        </Property>\n"
            + "        <Property name=\"Store Manager\" column=\"store_manager\" type=\"String\">\n"
            + "        </Property>\n"
            + "        <Property name=\"Store Sqft\" column=\"store_sqft\" type=\"Numeric\">\n"
            + "        </Property>\n"
            + "        <Property name=\"Grocery Sqft\" column=\"grocery_sqft\" type=\"Numeric\">\n"
            + "        </Property>\n"
            + "        <Property name=\"Frozen Sqft\" column=\"frozen_sqft\" type=\"Numeric\">\n"
            + "        </Property>\n"
            + "        <Property name=\"Meat Sqft\" column=\"meat_sqft\" type=\"Numeric\">\n"
            + "        </Property>\n"
            + "        <Property name=\"Has coffee bar\" column=\"coffee_bar\" type=\"Boolean\">\n"
            + "        </Property>\n"
            + "        <Property name=\"Street address\" column=\"store_street_address\" type=\"String\">\n"
            + "        </Property>\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n";

          + "</Cube>";

         */

        /*
        protected List<MappingCube> schemaCubes(CatalogMapping catalogOriginal) {
            List<MappingCube> result = new ArrayList<>();
            result.addAll(super.schemaCubes(mappingSchemaOriginal));
            result.add(CubeRBuilder.builder()
                .name("Sales1")
                .fact(new TableR("sales_fact_1997"))
                .dimensionUsageOrDimensions(List.of(
                    PrivateDimensionRBuilder.builder()
                        .visible(true)
                        .foreignKey("customer_id")
                        .name("Customers")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .visible(true)
                                .hasAll(true)
                                .allMemberName("All Customers")
                                .primaryKey("customer_id")
                                .relation(new TableR("customer"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Country")
                                        .visible(true)
                                        .column("country")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("State Province")
                                        .visible(true)
                                        .column("state_province")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("City")
                                        .visible(true)
                                        .column("city")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(false)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Name1")
                                        .visible(true)
                                        .column("fname")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(false)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .properties(List.of(
                                            PropertyRBuilder.builder()
                                                .name("Gender")
                                                .column("gender")
                                                .type(PropertyTypeEnum.STRING)
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Marital Status")
                                                .column("marital_status")
                                                .type(PropertyTypeEnum.STRING)
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Education")
                                                .column("education")
                                                .type(PropertyTypeEnum.STRING)
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Yearly Income")
                                                .column("yearly_income")
                                                .type(PropertyTypeEnum.STRING)
                                                .build()
                                        ))
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("First Name")
                                        .visible(true)
                                        .column("fname")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(false)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build()
                                ))
                                .build(),
                            HierarchyRBuilder.builder()
                                .name("Gender")
                                .visible(true)
                                .hasAll(true)
                                .primaryKey("customer_id")
                                .relation(new TableR("customer"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Gender")
                                        .visible(true)
                                        .column("gender")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .annotations(List.of(
                                            AnnotationRBuilder.builder()
                                                .name("AnalyzerBusinessGroup")
                                                .content("Customers")
                                                .build()
                                        ))
                                        .build()

                                ))
                                .build(),
                            HierarchyRBuilder.builder()
                                .name("Marital Status")
                                .visible(true)
                                .hasAll(true)
                                .primaryKey("customer_id")
                                .relation(new TableR("customer"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Marital Status")
                                        .visible(true)
                                        .column("marital_status")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .annotations(List.of(
                                            AnnotationRBuilder.builder()
                                                .name("AnalyzerBusinessGroup")
                                                .content("Customers")
                                                .build()
                                        ))
                                        .build()

                                ))
                                .build()
                        ))
                        .build(),
                    PrivateDimensionRBuilder.builder()
                        .visible(true)
                        .name("Store")
                        .foreignKey("store_id")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .visible(true)
                                .hasAll(true)
                                .primaryKey("store_id")
                                .relation(new TableR("store"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Store ID")
                                        .visible(true)
                                        .column("store_id")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Store Country")
                                        .visible(true)
                                        .column("store_country")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Store State")
                                        .visible(true)
                                        .column("store_state")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Store City")
                                        .visible(true)
                                        .column("store_city")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(false)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Store Name")
                                        .visible(true)
                                        .column("store_name")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .properties(List.of(
                                            PropertyRBuilder.builder()
                                                .name("Store Type")
                                                .column("store_type")
                                                .type(PropertyTypeEnum.STRING)
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Store Manager")
                                                .column("store_manager")
                                                .type(PropertyTypeEnum.STRING)
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Store Sqft")
                                                .column("store_sqft")
                                                .type(PropertyTypeEnum.NUMERIC)
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Grocery Sqft")
                                                .column("grocery_sqft")
                                                .type(PropertyTypeEnum.NUMERIC)
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Frozen Sqft")
                                                .column("frozen_sqft")
                                                .type(PropertyTypeEnum.NUMERIC)
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Meat Sqft")
                                                .column("meat_sqft")
                                                .type(PropertyTypeEnum.NUMERIC)
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Has coffee bar")
                                                .column("coffee_bar")
                                                .type(PropertyTypeEnum.BOOLEAN)
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Street address")
                                                .column("store_street_address")
                                                .type(PropertyTypeEnum.STRING)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                )).build());
            return result;
        }

        */
        /*
            "<Role name=\"MR\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales1\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"all\">\n"
            + "      </HierarchyGrant>\n"
            + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" topLevel=\"[Customers].[State Province]\" bottomLevel=\"[Customers].[City]\">\n"
            + "\t  </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>\n"
            + "<Role name=\"DBPentUsers\">\n"
            + "   <SchemaGrant access=\"none\">\n"
            + "   </SchemaGrant>\n"
            + "</Role>");
        */
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingRole> schemaRoles(CatalogMapping catalogOriginal) {
            List<MappingRole> result = new ArrayList<>();
            result.addAll(super.schemaRoles(mappingSchemaOriginal));
            result.add(
                RoleRBuilder.builder()
                    .name("MR")
                    .schemaGrants(List.of(
                        SchemaGrantRBuilder.builder()
                            .access(AccessEnum.NONE)
                            .cubeGrants(List.of(
                                CubeGrantRBuilder.builder()
                                    .cube("Sales1")
                                    .access("all")
                                    .hierarchyGrants(List.of(
                                        HierarchyGrantRBuilder.builder()
                                            .hierarchy("[Store]")
                                            .access(AccessEnum.ALL)
                                            .build(),
                                        HierarchyGrantRBuilder.builder()
                                            .hierarchy("[Customers]")
                                            .access(AccessEnum.CUSTOM)
                                            .topLevel("[Customers].[State Province]")
                                            .bottomLevel("[Customers].[City]")
                                            .build()

                                    ))
                                    .build()
                            ))
                            .build()
                    ))
                    .build()
            );

            result.add(
                RoleRBuilder.builder()
                    .name("DBPentUsers")
                    .schemaGrants(List.of(
                        SchemaGrantRBuilder.builder()
                            .access(AccessEnum.NONE)
                            .build()
                    ))
                    .build()
            );

            return result;
        }
        */
    }

    public static class AccessControlTestModifier34 extends PojoMappingModifier {

        /*
            "<Role name=\"Role1\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"partial\">\n"
            + "        <MemberGrant member=\"[Store].[USA].[Non Existent]\" access=\"all\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>");
        */

        public AccessControlTestModifier34(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingRole> schemaRoles(CatalogMapping catalogOriginal) {
            List<MappingRole> result = new ArrayList<>();
            result.addAll(super.schemaRoles(mappingSchemaOriginal));
            result.add(
                RoleRBuilder.builder()
                    .name("Role1")
                    .schemaGrants(List.of(
                        SchemaGrantRBuilder.builder()
                            .access(AccessEnum.NONE)
                            .cubeGrants(List.of(
                                CubeGrantRBuilder.builder()
                                    .cube("Sales")
                                    .access("all")
                                    .hierarchyGrants(List.of(
                                        HierarchyGrantRBuilder.builder()
                                            .hierarchy("[Store]")
                                            .access(AccessEnum.CUSTOM)
                                            .rollupPolicy("partial")
                                            .memberGrants(List.of(
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA].[Non Existent]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build()
                                            ))
                                            .build()
                                    ))
                                    .build()
                            ))
                            .build()
                    ))
                    .build()
            );

            return result;
        }
        */
    }

    public static class AccessControlTestModifier35 extends PojoMappingModifier {

        /*
            "<Role name=\"Role1\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"partial\">\n"
            + "        <MemberGrant member=\"[Store].[USA].[WA]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[OR]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA].[San Francisco]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA].[Los Angeles]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[Mexico]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[Mexico].[DF]\" access=\"none\"/>\n"
            + "        <MemberGrant member=\"[Store].[Canada]\" access=\"none\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>\n"
            + "<Role name=\"Role2\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"full\">\n"
            + "        <MemberGrant member=\"[Store].[USA].[WA]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[OR]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA].[San Francisco]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA].[Los Angeles]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[Mexico]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[Mexico].[DF]\" access=\"none\"/>\n"
            + "        <MemberGrant member=\"[Store].[Canada]\" access=\"none\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>";

        */

        public AccessControlTestModifier35(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingRole> schemaRoles(CatalogMapping catalogOriginal) {
            List<MappingRole> result = new ArrayList<>();
            result.addAll(super.schemaRoles(mappingSchemaOriginal));
            result.add(
                RoleRBuilder.builder()
                    .name("Role1")
                    .schemaGrants(List.of(
                        SchemaGrantRBuilder.builder()
                            .access(AccessEnum.NONE)
                            .cubeGrants(List.of(
                                CubeGrantRBuilder.builder()
                                    .cube("Sales")
                                    .access("all")
                                    .hierarchyGrants(List.of(
                                        HierarchyGrantRBuilder.builder()
                                            .hierarchy("[Store]")
                                            .access(AccessEnum.CUSTOM)
                                            .rollupPolicy("partial")
                                            .memberGrants(List.of(
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA].[WA]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA].[OR]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA].[CA].[San Francisco]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA].[CA].[Los Angeles]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[Mexico]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[Mexico].[DF]")
                                                    .access(MemberGrantAccessEnum.NONE)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[Canada]")
                                                    .access(MemberGrantAccessEnum.NONE)
                                                    .build()
                                            ))
                                            .build()
                                    ))
                                    .build()
                            ))
                            .build()
                    ))
                    .build()
            );

            result.add(
                RoleRBuilder.builder()
                    .name("Role2")
                    .schemaGrants(List.of(
                        SchemaGrantRBuilder.builder()
                            .access(AccessEnum.NONE)
                            .cubeGrants(List.of(
                                CubeGrantRBuilder.builder()
                                    .cube("Sales")
                                    .access("all")
                                    .hierarchyGrants(List.of(
                                        HierarchyGrantRBuilder.builder()
                                            .hierarchy("[Store]")
                                            .access(AccessEnum.CUSTOM)
                                            .rollupPolicy("full")
                                            .memberGrants(List.of(
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA].[WA]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA].[OR]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA].[CA].[San Francisco]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA].[CA].[Los Angeles]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[Mexico]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[Mexico].[DF]")
                                                    .access(MemberGrantAccessEnum.NONE)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[Canada]")
                                                    .access(MemberGrantAccessEnum.NONE)
                                                    .build()
                                            ))
                                            .build()
                                    ))
                                    .build()
                            ))
                            .build()
                    ))
                    .build()
            );

            return result;
        }
        */
    }

    public static class AccessControlTestModifier36 extends PojoMappingModifier {

        /*
            "<Role name=\"Role1\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"partial\">\n"
            + "        <MemberGrant member=\"[Store].[USA].[WA]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[OR]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA].[San Francisco]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA].[Los Angeles]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[Mexico]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[Mexico].[DF]\" access=\"none\"/>\n"
            + "        <MemberGrant member=\"[Store].[Canada]\" access=\"none\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>\n"
            + "<Role name=\"Role2\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"partial\">\n"
            + "        <MemberGrant member=\"[Store].[USA].[WA]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[OR]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA].[San Francisco]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[Mexico]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[Mexico].[DF]\" access=\"none\"/>\n"
            + "        <MemberGrant member=\"[Store].[Canada]\" access=\"none\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>";

        */

        public AccessControlTestModifier36(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingRole> schemaRoles(CatalogMapping catalogOriginal) {
            List<MappingRole> result = new ArrayList<>();
            result.addAll(super.schemaRoles(mappingSchemaOriginal));
            result.add(
                RoleRBuilder.builder()
                    .name("Role1")
                    .schemaGrants(List.of(
                        SchemaGrantRBuilder.builder()
                            .access(AccessEnum.NONE)
                            .cubeGrants(List.of(
                                CubeGrantRBuilder.builder()
                                    .cube("Sales")
                                    .access("all")
                                    .hierarchyGrants(List.of(
                                        HierarchyGrantRBuilder.builder()
                                            .hierarchy("[Store]")
                                            .access(AccessEnum.CUSTOM)
                                            .rollupPolicy("partial")
                                            .memberGrants(List.of(
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA].[WA]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA].[OR]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA].[CA].[San Francisco]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA].[CA].[Los Angeles]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[Mexico]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[Mexico].[DF]")
                                                    .access(MemberGrantAccessEnum.NONE)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[Canada]")
                                                    .access(MemberGrantAccessEnum.NONE)
                                                    .build()
                                            ))
                                            .build()
                                    ))
                                    .build()
                            ))
                            .build()
                    ))
                    .build()
            );

            result.add(
                RoleRBuilder.builder()
                    .name("Role2")
                    .schemaGrants(List.of(
                        SchemaGrantRBuilder.builder()
                            .access(AccessEnum.NONE)
                            .cubeGrants(List.of(
                                CubeGrantRBuilder.builder()
                                    .cube("Sales")
                                    .access("all")
                                    .hierarchyGrants(List.of(
                                        HierarchyGrantRBuilder.builder()
                                            .hierarchy("[Store]")
                                            .access(AccessEnum.CUSTOM)
                                            .rollupPolicy("partial")
                                            .memberGrants(List.of(
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA].[WA]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA].[OR]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA].[CA].[San Francisco]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[Mexico]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[Mexico].[DF]")
                                                    .access(MemberGrantAccessEnum.NONE)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[Canada]")
                                                    .access(MemberGrantAccessEnum.NONE)
                                                    .build()
                                            ))
                                            .build()
                                    ))
                                    .build()
                            ))
                            .build()
                    ))
                    .build()
            );
            return result;
        }
        */
    }

    public static class AccessControlTestModifier37 extends PojoMappingModifier {

        /*
            "<Role name=\"Role1\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"custom\">\n"
            + "      <DimensionGrant dimension=\"[Measures]\" access=\"all\"/>\n"
            + "      <DimensionGrant dimension=\"[Gender]\" access=\"all\"/>\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"partial\">\n"
            + "        <MemberGrant member=\"[Store].[USA]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA]\" access=\"none\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>");
        */

        public AccessControlTestModifier37(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingRole> schemaRoles(CatalogMapping catalogOriginal) {
            List<MappingRole> result = new ArrayList<>();
            result.addAll(super.schemaRoles(mappingSchemaOriginal));
            result.add(
                RoleRBuilder.builder()
                    .name("Role1")
                    .schemaGrants(List.of(
                        SchemaGrantRBuilder.builder()
                            .access(AccessEnum.NONE)
                            .cubeGrants(List.of(
                                CubeGrantRBuilder.builder()
                                    .cube("Sales")
                                    .access("custom")
                                    .dimensionGrants(List.of(
                                        DimensionGrantRBuilder.builder()
                                            .dimension("[Measures]")
                                            .access(AccessEnum.ALL)
                                            .build(),
                                        DimensionGrantRBuilder.builder()
                                            .dimension("[Gender]")
                                            .access(AccessEnum.ALL)
                                            .build()
                                    ))
                                    .hierarchyGrants(List.of(
                                        HierarchyGrantRBuilder.builder()
                                            .hierarchy("[Store]")
                                            .access(AccessEnum.CUSTOM)
                                            .rollupPolicy("partial")
                                            .memberGrants(List.of(
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build(),
                                                MemberGrantRBuilder.builder()
                                                    .member("[Store].[USA].[CA]")
                                                    .access(MemberGrantAccessEnum.NONE)
                                                    .build()
                                            ))
                                            .build()
                                    ))
                                    .build()
                            ))
                            .build()
                    ))
                    .build()
            );
            return result;
        }
        */
    }

    public static class AccessControlTestModifier32 extends PojoMappingModifier {

        /*
      String schema =
          "<Schema name=\"FoodMart.DimAndMeasure.Role\">\n"
          + " <Dimension name=\"WarehouseShared\">\n"
          + "   <Hierarchy hasAll=\"true\" primaryKey=\"warehouse_id\">\n"
          + "     <Table name=\"warehouse\"/>\n"
          + "     <Level name=\"Country\" column=\"warehouse_country\" uniqueMembers=\"true\"/>\n"
          + "     <Level name=\"State Province\" column=\"warehouse_state_province\"\n"
          + "          uniqueMembers=\"true\"/>\n"
          + "     <Level name=\"City\" column=\"warehouse_city\" uniqueMembers=\"false\"/>\n"
          + "     <Level name=\"Warehouse Name\" column=\"warehouse_name\" uniqueMembers=\"true\"/>\n"
          + "   </Hierarchy>\n"
          + " </Dimension>\n"
          + " <Cube name=\"Warehouse1\">\n"
          + "   <Table name=\"inventory_fact_1997\"/>\n"
          + "   <DimensionUsage name=\"WarehouseShared\" source=\"WarehouseShared\" foreignKey=\"warehouse_id\"/>\n"
          + "   <Measure name=\"Measure1_0\" column=\"warehouse_cost\" aggregator=\"sum\"/>\n"
          + "   <Measure name=\"Measure1_1\" column=\"warehouse_sales\" aggregator=\"sum\"/>\n"
          + "   <CalculatedMember name=\"Calculated Measure1\" dimension=\"Measures\">\n"
          + "     <Formula>[Measures].[Measure1_1] / [Measures].[Measure1_0]</Formula>\n"
          + "     <CalculatedMemberProperty name=\"FORMAT_STRING\" value=\"$#,##0.00\"/>\n"
          + "   </CalculatedMember>\n"
          + " </Cube>\n"
          + " <Cube name=\"Warehouse2\">\n"
          + "   <Table name=\"inventory_fact_1997\"/>\n"
          + "   <DimensionUsage name=\"WarehouseShared\" source=\"WarehouseShared\" foreignKey=\"warehouse_id\"/>\n"
          + "   <Measure name=\"Measure2_0\" column=\"warehouse_cost\" aggregator=\"sum\"/>\n"
          + "   <Measure name=\"Measure2_1\" column=\"warehouse_sales\" aggregator=\"sum\"/>\n"
          + "   <CalculatedMember name=\"Calculated Measure2\" dimension=\"Measures\">\n"
          + "     <Formula>[Measures].[Measure2_1] / [Measures].[Measure2_0]</Formula>\n"
          + "     <CalculatedMemberProperty name=\"FORMAT_STRING\" value=\"$#,##0.00\"/>\n"
          + "   </CalculatedMember>\n"
          + " </Cube>\n"
          + " <Role name=\"Administrator\">\n"
          + "   <SchemaGrant access=\"none\">\n"
          + "     <CubeGrant cube=\"Warehouse1\" access=\"custom\">\n"
          + "       <HierarchyGrant hierarchy=\"[WarehouseShared]\" access=\"all\">\n"
          + "       </HierarchyGrant>\n"
          + "       <HierarchyGrant hierarchy=\"[Measures]\" access=\"all\">\n"
          + "       </HierarchyGrant>\n"
          + "     </CubeGrant>\n"
          + "     <CubeGrant cube=\"Warehouse2\" access=\"custom\">\n"
          + "       <HierarchyGrant hierarchy=\"[WarehouseShared]\" access=\"all\">\n"
          + "       </HierarchyGrant>\n"
          + "       <HierarchyGrant hierarchy=\"[Measures]\" access=\"all\">\n"
          + "       </HierarchyGrant>\n"
          + "     </CubeGrant>\n"
          + "   </SchemaGrant>\n"
          + " </Role>\n"
          + "</Schema>";

        */

        public AccessControlTestModifier32(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("FoodMart.DimAndMeasure.Role")
                .dimensions(List.of(
                    PrivateDimensionRBuilder.builder()
                        .name("WarehouseShared")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .primaryKey("warehouse_id")
                                .relation(new TableR("warehouse"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("State Province")
                                        .column("warehouse_state_province")
                                        .uniqueMembers(true)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("City")
                                        .column("warehouse_city")
                                        .uniqueMembers(false)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Warehouse Name")
                                        .column("warehouse_name")
                                        .uniqueMembers(true)
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("Warehouse1")
                        .fact(new TableR("inventory_fact_1997"))
                        .dimensionUsageOrDimensions(List.of(
                            DimensionUsageRBuilder.builder()
                                .name("WarehouseShared")
                                .source("WarehouseShared")
                                .foreignKey("warehouse_id")
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Measure1_0")
                                .column("warehouse_cost")
                                .aggregator("sum")
                                .build(),
                            MeasureRBuilder.builder()
                                .name("Measure1_1")
                                .column("warehouse_sales")
                                .aggregator("sum")
                                .build()
                        ))
                        .calculatedMembers(List.of(
                            CalculatedMemberRBuilder.builder()
                                .name("Calculated Measure1")
                                .dimension("Measures")
                                .formulaElement(FormulaRBuilder.builder()
                                    .cdata("[Measures].[Measure1_1] / [Measures].[Measure1_0]")
                                    .build())
                                .calculatedMemberProperties(List.of(
                                    CalculatedMemberPropertyRBuilder.builder()
                                        .name("FORMAT_STRING")
                                        .value("$#,##0.00")
                                        .build()
                                ))
                                .build()
                        ))
                        .build(),
                    CubeRBuilder.builder()
                        .name("Warehouse2")
                        .fact(new TableR("inventory_fact_1997"))
                        .dimensionUsageOrDimensions(List.of(
                            DimensionUsageRBuilder.builder()
                                .name("WarehouseShared")
                                .source("WarehouseShared")
                                .foreignKey("warehouse_id")
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Measure2_0")
                                .column("warehouse_cost")
                                .aggregator("sum")
                                .build(),
                            MeasureRBuilder.builder()
                                .name("Measure2_1")
                                .column("warehouse_sales")
                                .aggregator("sum")
                                .build()
                        ))
                        .calculatedMembers(List.of(
                            CalculatedMemberRBuilder.builder()
                                .name("Calculated Measure2")
                                .dimension("Measures")
                                .formulaElement(FormulaRBuilder.builder()
                                    .cdata("[Measures].[Measure2_1] / [Measures].[Measure2_0]")
                                    .build())
                                .calculatedMemberProperties(List.of(
                                    CalculatedMemberPropertyRBuilder.builder()
                                        .name("FORMAT_STRING")
                                        .value("$#,##0.00")
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                    ))
                .roles(List.of(
                    RoleRBuilder.builder()
                        .name("Administrator")
                        .schemaGrants(List.of(
                            SchemaGrantRBuilder.builder()
                                .access(AccessEnum.NONE)
                                .cubeGrants(List.of(
                                    CubeGrantRBuilder.builder()
                                        .cube("Warehouse1")
                                        .access("custom")
                                        .hierarchyGrants(List.of(
                                            HierarchyGrantRBuilder.builder()
                                                .hierarchy("[WarehouseShared]")
                                                .access(AccessEnum.ALL)
                                                .build(),
                                            HierarchyGrantRBuilder.builder()
                                                .hierarchy("[Measures]")
                                                .access(AccessEnum.ALL)
                                                .build()
                                        ))
                                        .build(),
                                    CubeGrantRBuilder.builder()
                                        .cube("Warehouse2")
                                        .access("custom")
                                        .hierarchyGrants(List.of(
                                            HierarchyGrantRBuilder.builder()
                                                .hierarchy("[WarehouseShared]")
                                                .access(AccessEnum.ALL)
                                                .build(),
                                            HierarchyGrantRBuilder.builder()
                                                .hierarchy("[Measures]")
                                                .access(AccessEnum.ALL)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .build();
        }
        */
    }

    public static class AccessControlTestModifier38 extends PojoMappingModifier {

        /*
          "<Role name=\"Sales Ragged\">\n"
          + "  <SchemaGrant access=\"none\">\n"
          + "    <CubeGrant cube=\"Sales Ragged\" access=\"all\" />\n"
          + "  </SchemaGrant>\n"
          + "</Role>";
        */

        public AccessControlTestModifier38(CatalogMapping catalog) {
            super(catalog);
        }
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingRole> schemaRoles(CatalogMapping catalogOriginal) {
            List<MappingRole> result = new ArrayList<>();
            result.addAll(super.schemaRoles(mappingSchemaOriginal));
            result.add(
                RoleRBuilder.builder()
                    .name("Sales Ragged")
                    .schemaGrants(List.of(
                        SchemaGrantRBuilder.builder()
                            .access(AccessEnum.NONE)
                            .cubeGrants(List.of(
                                CubeGrantRBuilder.builder()
                                    .cube("Sales Ragged")
                                    .access("all")
                                    .build()
                            ))
                            .build()
                    ))
                    .build()
            );
            return result;
        }
        */
    }

    public static class OrderKeyOneToOneCheckTestModifier extends PojoMappingModifier {

        /*
                    + "<Schema name=\"FoodMart 2358\">\n"
                    + "  <Dimension name=\"Time\" type=\"TimeDimension\">\n"
                    + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n"
                    + "      <Table name=\"time_by_day\"/>\n"
                    + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
                    + "          levelType=\"TimeYears\"/> \n"
                    + "      <Level name=\"Quarter\" column=\"quarter\" ordinalColumn=\"month_of_year\" uniqueMembers=\"false\" levelType=\"TimeQuarters\"/>  \n"
                    + "      <Level name=\"Month\" column=\"month_of_year\" uniqueMembers=\"false\" type=\"Numeric\"\n"
                    + "          levelType=\"TimeMonths\"/>\n"
                    + "    </Hierarchy>\n"
                    + "  </Dimension>\n"
                    + "<Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">\n"
                    + "  <Table name=\"sales_fact_1997\"/>\n"
                    + "  <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
                    + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
                    + "      formatString=\"Standard\"/>\n"
                    + "</Cube>\n"
                    + "</Schema>");
        */

        public OrderKeyOneToOneCheckTestModifier(CatalogMapping catalog) {
            super(catalog);
        }
        /* TODO: DENIS MAPPING-MODIFIER
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("FoodMart 2358")
                .dimensions(List.of(
                    PrivateDimensionRBuilder.builder()
                        .name("Time")
                        .type(DimensionTypeEnum.TIME_DIMENSION)
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .primaryKey("time_id")
                                .relation(new TableR("time_by_day"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Year")
                                        .column("the_year")
                                        .type(TypeEnum.NUMERIC)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.TIME_YEARS)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Quarter")
                                        .column("quarter")
                                        .ordinalColumn("month_of_year")
                                        .uniqueMembers(false)
                                        .levelType(LevelTypeEnum.TIME_QUARTERS)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Month")
                                        .column("month_of_year")
                                        .uniqueMembers(false)
                                        .type(TypeEnum.NUMERIC)
                                        .levelType(LevelTypeEnum.TIME_MONTHS)
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("Sales")
                        .fact(new TableR("sales_fact_1997"))
                        .dimensionUsageOrDimensions(List.of(
                            DimensionUsageRBuilder.builder()
                                .name("Time")
                                .source("Time")
                                .foreignKey("time_id")
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Unit Sales")
                                .column("unit_sales")
                                .aggregator("sum")
                                .formatString("Standard")
                                .build()
                        ))
                        .build()
                ))
                .build();
        }
        */
    }

    public static class DefaultRecognizerTestModifier extends PojoMappingModifier {

        /*
                    + "<Schema name=\"FoodMart\">\n"
        "<Dimension name=\"Time\" type=\"TimeDimension\"> "
        + "  <Hierarchy hasAll=\"false\" primaryKey=\"time_id\"> "
        + "    <Table name=\"time_by_day\"/> "
        + "    <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\" levelType=\"TimeYears\"/> "
        + "    <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\" levelType=\"TimeQuarters\"/> "
        + "    <Level name=\"Month\" column=\"month_of_year\" uniqueMembers=\"false\" type=\"Numeric\" levelType=\"TimeMonths\"/> "
        + "  </Hierarchy> "
        + "</Dimension>";
                    "<Cube name=\"Sales\" defaultMeasure=\"Unit Sales\"> "
            // For this test, we use an alias on the fact table.
            + "  <Table name=\"sales_fact_1997\" alias=\"foobar\"> "
            + "      <AggExclude name=\"agg_c_special_sales_fact_1997\"/>"
            + "      <AggExclude name=\"agg_c_14_sales_fact_1997\"/>"
            + "  </Table>"
            + "  <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/> "
            + "<Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "  <Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n"
            + "  <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>"
            + "  <Measure name=\"Customer Count\" column=\"customer_id\" aggregator=\"distinct-count\" formatString=\"#,###\" />"
            + "</Cube>";

                    + "</Schema>");
        */

        public DefaultRecognizerTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("FoodMart")
                .dimensions(List.of(
                    PrivateDimensionRBuilder.builder()
                        .name("Time")
                        .type(DimensionTypeEnum.TIME_DIMENSION)
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .primaryKey("time_id")
                                .relation(new TableR("time_by_day"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Year")
                                        .column("the_year")
                                        .type(TypeEnum.NUMERIC)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.TIME_YEARS)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Quarter")
                                        .column("quarter")
                                        .uniqueMembers(false)
                                        .levelType(LevelTypeEnum.TIME_QUARTERS)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Month")
                                        .column("month_of_year")
                                        .uniqueMembers(false)
                                        .type(TypeEnum.NUMERIC)
                                        .levelType(LevelTypeEnum.TIME_MONTHS)
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("Sales")
                        .defaultMeasure("Unit Sales")
                        .fact(new TableR("sales_fact_1997",
                            List.of(
                                AggExcludeRBuilder.builder().name("agg_c_special_sales_fact_1997").build(),
                                AggExcludeRBuilder.builder().name("agg_c_14_sales_fact_1997").build()
                            ),
                            List.of())
                        )
                        .dimensionUsageOrDimensions(List.of(
                            DimensionUsageRBuilder.builder()
                                .name("Time")
                                .source("Time")
                                .foreignKey("time_id")
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Unit Sales")
                                .column("unit_sales")
                                .aggregator("sum")
                                .formatString("Standard")
                                .build(),
                            MeasureRBuilder.builder()
                                .name("Store Cost")
                                .column("store_cost")
                                .aggregator("sum")
                                .formatString("#,###.00")
                                .build(),
                            MeasureRBuilder.builder()
                                .name("Store Sales")
                                .column("store_sales")
                                .aggregator("sum")
                                .formatString("#,###.00")
                                .build(),
                            MeasureRBuilder.builder()
                                .name("Customer Count")
                                .column("customer_id")
                                .aggregator("distinct-count")
                                .formatString("#,###")
                                .build()
                        ))
                        .build()
                ))
                .build();
        }
        */
    }

    public static class DialectTestModifier1 extends PojoMappingModifier {

        /*
            "<?xml version=\"1.0\"?>\n"
                    + "<Schema name=\"FoodMart\">\n"
                    + "  <Dimension  name=\"Time\" type=\"TimeDimension\">\n"
                    + "    <Hierarchy hasAll='true' primaryKey=\"time_id\">\n"
                    + "      <Table name=\"time_by_day\"/>\n"
                    + "      <Level name=\"Day\"  type=\"Date\" uniqueMembers=\"true\"\n"
                    + "          levelType=\"TimeYears\">\n"
                    + "        <KeyExpression>\n"
                    + "          <SQL>\n"
                    + "            cast(\"the_date\" as DATE)\n"
                    + "          </SQL>\n"
                    + "        </KeyExpression>\n"
                    + "      </Level>\n"
                    + "    </Hierarchy>\n"
                    + "  </Dimension>\n"
                    + "  <Cube name=\"DateLiteralTest\" defaultMeasure=\"expression\">\n"
                    + "    <Table name=\"sales_fact_1997\" />\n"
                    + "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
                    + "    <Measure name=\"Unit Sales\" column=\"unit_sales\"  aggregator=\"sum\"\n"
                    + "    formatString=\"Standard\" />\n"
                    + "  </Cube>\n"
                    + "</Schema>\n" );
        */

        public DialectTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("FoodMart")
                .dimensions(List.of(
                    PrivateDimensionRBuilder.builder()
                        .name("Time")
                        .type(DimensionTypeEnum.TIME_DIMENSION)
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .primaryKey("time_id")
                                .relation(new TableR("time_by_day"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Day")
                                        .type(TypeEnum.DATE)
                                        .column("the_year")
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.TIME_YEARS)
                                        .keyExpression(ExpressionViewRBuilder.builder()
                                            .sql(SqlSelectQueryRBuilder.builder()
                                            .sqls(List.of(
                                                SQLRBuilder.builder()
                                                    .statement("cast(\"the_date\" as DATE)\n")
                                                    .build()
                                            )).build())
                                            .build())
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("DateLiteralTest")
                        .defaultMeasure("expression")
                        .fact(new TableR("sales_fact_1997"))
                        .dimensionUsageOrDimensions(List.of(
                            DimensionUsageRBuilder.builder()
                                .name("Time")
                                .source("Time")
                                .foreignKey("time_id")
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Unit Sales")
                                .column("unit_sales")
                                .aggregator("sum")
                                .formatString("Standard")
                                .build()
                        ))
                        .build()
                ))
                .build();
        }
        */
    }

    public static class DialectTestModifier2 extends PojoMappingModifier {

        /*
            "<?xml version=\"1.0\"?>\n"
                    + "<Schema name=\"FoodMart\">\n"
                    + "  <Dimension name=\"StoreSqft\">\n"
                    + "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n"
                    + "      <Table name=\"store\"  />\n"
                    + "      <Level name=\"StoreSqft\"  type=\"Numeric\" uniqueMembers=\"true\">\n"
                    + "         <KeyExpression>"
                    + "          <SQL dialect='mysql'>\n"
                    + "            cast(`store_sqft` as UNSIGNED INTEGER) + "
                    + Integer.MAX_VALUE
                    + "          </SQL>\n"
                    + "          <SQL dialect='vertica'>\n"
                    + "            cast(\"store_sqft\" as BIGINT) + "
                    + Integer.MAX_VALUE
                    + "          </SQL>\n"
                    + "          <SQL dialect='oracle'>\n"
                    + "            CAST(\"store_sqft\" + 2147483647 AS NUMBER(22))  "
                    + "          </SQL>\n"
                    + "         </KeyExpression>"
                    + "      </Level>"
                    + "    </Hierarchy>\n"
                    + "  </Dimension>"
                    + "  <Cube name=\"BigIntTest\" defaultMeasure=\"expression\">\n"
                    + "    <Table name=\"sales_fact_1997\" />\n"
                    + "    <DimensionUsage name=\"StoreSqft\" source=\"StoreSqft\" foreignKey=\"store_id\"/>\n"
                    + "    <Measure name=\"Big Unit Sales\"   aggregator=\"sum\"\n"
                    + "    formatString=\"Standard\" >\n"
                    + "           <MeasureExpression>\n"
                    + "      <SQL dialect=\"vertica\">\n"
                    + "   CAST(\"unit_sales\" + 2147483647 AS NUMBER(22)) \n"
                    + "      </SQL>\n"
                    + "      </MeasureExpression>\n"
                    + "      </Measure>\n"
                    + "  <Measure name=\"Pass Agg enabled\" column=\"store_cost\" aggregator=\"sum\"/>\n"
                    + "  </Cube>\n"
                    + "</Schema>\n" );
        */

        public DialectTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("FoodMart")
                .dimensions(List.of(
                    PrivateDimensionRBuilder.builder()
                        .name("StoreSqft")
                        .type(DimensionTypeEnum.TIME_DIMENSION)
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .primaryKey("store_id")
                                .relation(new TableR("store"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("StoreSqft")
                                        .type(TypeEnum.NUMERIC)
                                        .uniqueMembers(true)
                                        .keyExpression(ExpressionViewRBuilder.builder()
                                            .sql(SqlSelectQueryRBuilder.builder()
                                            .sqls(List.of(
                                                SQLRBuilder.builder()
                                                    .dialects(List.of("mysql"))
                                                    .statement("cast(`store_sqft` as UNSIGNED INTEGER) + " + Integer.MAX_VALUE)
                                                    .build(),
                                                SQLRBuilder.builder()
                                                    .dialects(List.of("vertica"))
                                                    .statement("cast(\"store_sqft\" as BIGINT) + " + Integer.MAX_VALUE)
                                                    .build(),
                                                SQLRBuilder.builder()
                                                    .dialects(List.of("oracle"))
                                                    .statement("CAST(\"store_sqft\" + 2147483647 AS NUMBER(22))")
                                                    .build()
                                            ))
                                            .build()).build())
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("BigIntTest")
                        .defaultMeasure("expression")
                        .fact(new TableR("sales_fact_1997"))
                        .dimensionUsageOrDimensions(List.of(
                            DimensionUsageRBuilder.builder()
                                .name("StoreSqft")
                                .source("StoreSqft")
                                .foreignKey("store_id")
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Big Unit Sales")
                                .aggregator("sum")
                                .formatString("Standard")
                                .measureExpression(ExpressionViewRBuilder.builder()
                                    .sql(SqlSelectQueryRBuilder.builder()
                                    .sqls(List.of(
                                        SQLRBuilder.builder()
                                            .dialects(List.of("vertica"))
                                            .statement("CAST(\"unit_sales\" + 2147483647 AS NUMBER(22))")
                                            .build()
                                    )).build())
                                    .build())
                                .build(),
                            MeasureRBuilder.builder()
                                .name("Pass Agg enabled")
                                .column("store_cost")
                                .aggregator("sum")
                                .build()
                        ))
                        .build()
                ))
                .build();
        }
        */
    }

    public static class DrillThroughTestModifier4 extends PojoMappingModifier {

        /*
            "<Schema name=\"dsad\">\n"
            + "  <Dimension name=\"Frozen sqft\">\n"
            + "    <Hierarchy hasAll=\"true\">\n"
            + "      <Table name=\"store\"/>\n"
            + "      <Level name=\"Frozen sqft\" uniqueMembers=\"false\" column=\"frozen_sqft\" type=\"Numeric\">\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension name=\"Grocery sqft\">\n"
            + "    <Hierarchy hasAll=\"true\">\n"
            + "      <Table name=\"store\"/>\n"
            + "      <Level name=\"Grocery sqft\" uniqueMembers=\"false\" column=\"grocery_sqft\" type=\"Numeric\">\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension name=\"Meat sqft\">\n"
            + "    <Hierarchy hasAll=\"true\">\n"
            + "      <Table name=\"store\"/>\n"
            + "      <Level name=\"Meat sqft\" uniqueMembers=\"false\" column=\"meat_sqft\" type=\"Numeric\">\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension name=\"Store sqft\">\n"
            + "    <Hierarchy hasAll=\"true\">\n"
            + "      <Table name=\"store\"/>\n"
            + "      <Level name=\"Store sqft\" uniqueMembers=\"false\" column=\"store_sqft\" type=\"Numeric\">\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Cube name=\"dsad\">\n"
            + "    <Table name=\"store\"/>\n"
            + "    <DimensionUsage name=\"Frozen sqft\" source=\"Frozen sqft\"/>\n"
            + "    <DimensionUsage name=\"Grocery sqft\" source=\"Grocery sqft\"/>\n"
            + "    <DimensionUsage name=\"Meat sqft\" source=\"Meat sqft\"/>\n"
            + "    <DimensionUsage name=\"Store sqft\" source=\"Store sqft\"/>\n"
            + "    <Measure name=\"Frozen sqft\" column=\"frozen_sqft\" aggregator=\"sum\"/>\n"
            + "    <Measure name=\"Grocery sqft\" column=\"grocery_sqft\" aggregator=\"sum\"/>\n"
            + "    <Measure name=\"Meat sqft\" column=\"meat_sqft\" aggregator=\"sum\"/>\n"
            + "    <Measure name=\"Store sqft\" column=\"store_sqft\" aggregator=\"sum\"/>\n"
            + "  </Cube>\n"
            + "</Schema>\n");
        */

        public DrillThroughTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("dsad")
                .dimensions(List.of(
                    PrivateDimensionRBuilder.builder()
                        .name("Frozen sqft")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .relation(new TableR("store"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Frozen sqft")
                                        .uniqueMembers(false)
                                        .column("frozen_sqft")
                                        .type(TypeEnum.NUMERIC)
                                        .build()
                                ))
                                .build()
                        ))
                        .build(),
                    PrivateDimensionRBuilder.builder()
                        .name("Grocery sqft")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .relation(new TableR("store"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Grocery sqft")
                                        .uniqueMembers(false)
                                        .column("grocery_sqft")
                                        .type(TypeEnum.NUMERIC)
                                        .build()
                                ))
                                .build()
                        ))
                        .build(),
                    PrivateDimensionRBuilder.builder()
                        .name("Meat sqft")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .relation(new TableR("store"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Meat sqft")
                                        .uniqueMembers(false)
                                        .column("meat_sqft")
                                        .type(TypeEnum.NUMERIC)
                                        .build()
                                ))
                                .build()
                        ))
                        .build(),
                    PrivateDimensionRBuilder.builder()
                        .name("Store sqft")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .relation(new TableR("store"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Store sqft")
                                        .uniqueMembers(false)
                                        .column("store_sqft")
                                        .type(TypeEnum.NUMERIC)
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("dsad")
                        .fact(new TableR("store"))
                        .dimensionUsageOrDimensions(List.of(
                            DimensionUsageRBuilder.builder()
                                .name("Frozen sqft")
                                .source("Frozen sqft")
                                .build(),
                            DimensionUsageRBuilder.builder()
                                .name("Grocery sqft")
                                .source("Grocery sqft")
                                .build(),
                            DimensionUsageRBuilder.builder()
                                .name("Meat sqft")
                                .source("Meat sqft")
                                .build(),
                            DimensionUsageRBuilder.builder()
                                .name("Store sqft")
                                .source("Store sqft")
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Frozen sqft")
                                .column("frozen_sqft")
                                .aggregator("sum")
                                .build(),
                            MeasureRBuilder.builder()
                                .name("Grocery sqft")
                                .column("grocery_sqft")
                                .aggregator("sum")
                                .build(),
                            MeasureRBuilder.builder()
                                .name("Meat sqft")
                                .column("meat_sqft")
                                .aggregator("sum")
                                .build(),
                            MeasureRBuilder.builder()
                                .name("Store sqft")
                                .column("store_sqft")
                                .aggregator("sum")
                                .build()
                        ))
                        .build()
                ))
                .build();
        }
        */
    }

    public static class DrillThroughTestModifier5 extends PojoMappingModifier {

        /*
        "<Schema name=\"FoodMartSalesOnly\">\n"
        + " <Cube name=\"SalesShort\">\n"
        + "   <Table name=\"sales_fact_1997\"/>\n"
        + "   <Dimension name=\"Customers Dimension\" foreignKey=\"customer_id\">\n"
        + "     <Hierarchy hasAll=\"true\" allMemberName=\"All Customers hierarchy name\" primaryKey=\"customer_id\">\n"
        + "       <Table name=\"customer\"/>\n"
        + "       <Level name=\"Customer Level Name\" caption=\"Customer Level Caption\" description=\"Customer Level Description\" column=\"customer_id\" nameColumn=\"fullname\" type=\"String\" uniqueMembers=\"true\" />\n"
        + "     </Hierarchy>\n"
        + "   </Dimension>\n"
        + "   <Dimension name=\"Product Dimension\" foreignKey=\"product_id\">\n"
        + "     <Hierarchy hasAll=\"true\" allMemberName=\"All products hierarchy name\" primaryKey=\"product_id\">\n"
        + "       <Table name=\"product\"/>\n"
        + "       <Level name=\"Product Level Name\" caption=\"Product Level Caption\" description=\"Product Level Description\" column=\"product_id\" nameColumn=\"product_name\" type=\"String\" uniqueMembers=\"true\" />\n"
        + "     </Hierarchy>\n"
        + "   </Dimension>\n"
        + "   <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\" formatString=\"#,###.00\"/>\n"
        + " </Cube>\n"
        + "</Schema>\n";
        */

        public DrillThroughTestModifier5(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("FoodMartSalesOnly")
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("SalesShort")
                        .fact(new TableR("sales_fact_1997"))
                        .dimensionUsageOrDimensions(List.of(
                            PrivateDimensionRBuilder.builder()
                                .name("Customers Dimension")
                                .foreignKey("customer_id")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true).allMemberName("All Customers hierarchy name").primaryKey("customer_id")
                                        .relation(new TableR("customer"))
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Customer Level Name")
                                                .caption("Customer Level Caption")
                                                .description("Customer Level Description")
                                                .column("customer_id")
                                                .nameColumn("fullname")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(true)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build(),
                            PrivateDimensionRBuilder.builder()
                                .name("Product Dimension")
                                .foreignKey("product_id")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true).allMemberName("All products hierarchy name").primaryKey("product_id")
                                        .relation(new TableR("product"))
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Product Level Name")
                                                .caption("Product Level Caption")
                                                .description("Product Level Description")
                                                .column("product_id")
                                                .nameColumn("product_name")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(true)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Store Sales")
                                .column("store_sales")
                                .aggregator("sum")
                                .formatString("#,###.00")
                                .build()
                        ))
                        .build()
                ))
                .build();
        }
        */
    }

    public static class DrillThroughTestModifier6 extends PojoMappingModifier {

        /*
        "<Schema name=\"FoodMartSalesOnly\">\n"
        + " <Cube name=\"SalesShort\">\n"
        + "   <Table name=\"sales_fact_1997\"/>\n"
        + "   <Dimension name=\"Customers Dimension\" foreignKey=\"customer_id\">\n"
        + "     <Hierarchy hasAll=\"true\" allMemberName=\"All Customers hierarchy name\" primaryKey=\"customer_id\">\n"
        + "       <Table name=\"customer\"/>\n"
        + "       <Level name=\"Customer Level Name\" caption=\"Customer Level Caption\" description=\"Customer Level Description\" column=\"customer_id\" type=\"String\" uniqueMembers=\"true\" />\n"
        + "     </Hierarchy>\n"
        + "   </Dimension>\n"
        + "   <Dimension name=\"Product Dimension\" foreignKey=\"product_id\">\n"
        + "     <Hierarchy hasAll=\"true\" allMemberName=\"All products hierarchy name\" primaryKey=\"product_id\">\n"
        + "       <Table name=\"product\"/>\n"
        + "       <Level name=\"Product Level Name\" caption=\"Product Level Caption\" description=\"Product Level Description\" column=\"product_id\" type=\"String\" uniqueMembers=\"true\" />\n"
        + "     </Hierarchy>\n"
        + "   </Dimension>\n"
        + "   <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\" formatString=\"#,###.00\"/>\n"
        + " </Cube>\n"
        + "</Schema>\n";
        */

        public DrillThroughTestModifier6(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: DENIS MAPPING-MODIFIER
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("FoodMartSalesOnly")
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("SalesShort")
                        .fact(new TableR("sales_fact_1997"))
                        .dimensionUsageOrDimensions(List.of(
                            PrivateDimensionRBuilder.builder()
                                .name("Customers Dimension")
                                .foreignKey("customer_id")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true).allMemberName("All Customers hierarchy name").primaryKey("customer_id")
                                        .relation(new TableR("customer"))
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Customer Level Name")
                                                .caption("Customer Level Caption")
                                                .description("Customer Level Description")
                                                .column("customer_id")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(true)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build(),
                            PrivateDimensionRBuilder.builder()
                                .name("Product Dimension")
                                .foreignKey("product_id")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true).allMemberName("All products hierarchy name").primaryKey("product_id")
                                        .relation(new TableR("product"))
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Product Level Name")
                                                .caption("Product Level Caption")
                                                .description("Product Level Description")
                                                .column("product_id")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(true)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Store Sales")
                                .column("store_sales")
                                .aggregator("sum")
                                .formatString("#,###.00")
                                .build()
                        ))
                        .build()
                ))
                .build();
        }
        */
    }


    public static class PropertiesTestModifier extends PojoMappingModifier {

        /*
            "<Cube name=\"Foo\" defaultMeasure=\"Unit Sales\">\n"
            + "  <Table name=\"sales_fact_1997\"/>\n"
            + "  <Dimension name=\"Promotions\" foreignKey=\"promotion_id\">\n"
            + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
            + "      <Table name=\"promotion\"/>\n"
            + "      <Level name=\"Promotion Name\" column=\"promotion_name\" uniqueMembers=\"true\">\n"
            + "   <Property name=\"BarProp\" column=\"promotion_name\" description=\"BaconDesc\"/>\n"
            + "   </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\" formatString=\"Standard\"/>\n"
            + "</Cube>\n",
        */

        public PropertiesTestModifier(CatalogMapping catalog) {
            super(catalog);
        }
        /* TODO: DENIS MAPPING-MODIFIER
        protected List<MappingCube> schemaCubes(CatalogMapping catalogOriginal) {
            List<MappingCube> result = new ArrayList<>();
            result.addAll(super.schemaCubes(mappingSchemaOriginal));
            result.add(CubeRBuilder.builder()
                .name("Foo")
                .defaultMeasure("Unit Sales")
                .fact(new TableR("sales_fact_1997"))
                .dimensionUsageOrDimensions(List.of(
                    PrivateDimensionRBuilder.builder()
                        .name("Promotions")
                        .foreignKey("promotion_id")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .allMemberName("All Promotions")
                                .primaryKey("promotion_id")
                                .defaultMember("[All Promotions]")
                                .relation(new TableR("promotion"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Promotion Name")
                                        .column("promotion_name")
                                        .uniqueMembers(true)
                                        .properties(List.of(
                                            PropertyRBuilder.builder()
                                                .name("BarProp")
                                                .column("promotion_name")
                                                .description("BaconDesc")
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .measures(List.of(
                    MeasureRBuilder.builder()
                        .name("Unit Sales")
                        .column("unit_sales")
                        .aggregator("sum")
                        .formatString("Standard")
                        .build()
                ))
                .build());
            return result;
        }
        */

    }

    public static class Ssas2005CompatibilityTestModifier5 extends PojoMappingModifier {


        public Ssas2005CompatibilityTestModifier5(CatalogMapping catalog) {
            super(catalog);
        }

        /*
            "<Schema name=\"FoodMart\">\n"
            + "<Cube name=\"Warehouse and Sales\" defaultMeasure=\"Unit Sales\">\n"
            + "  <Table name=\"sales_fact_1997\" />\n"
            + "  <Dimension name=\"Store\" foreignKey=\"store_id\">\n"
            + "    <Hierarchy name=\"Stores\" hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "      <Table name=\"store\"/>\n"
            + "      <Level name=\"Store Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"Store State\" column=\"store_state\" uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"Store City\" column=\"store_city\" uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Store Name\" column=\"store_name\" uniqueMembers=\"true\">\n"
            + "        <Property name=\"Store Type\" column=\"store_type\"/>\n"
            + "        <Property name=\"Store Sqft\" column=\"store_sqft\" type=\"Numeric\"/>\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension name=\"Time\" type=\"TimeDimension\" foreignKey=\"time_id\">\n"
            + "    <Hierarchy hasAll=\"true\" name=\"Time By Week\" primaryKey=\"time_id\" >\n"
            + "      <Table name=\"time_by_day\"/>\n"
            + "      <Level name=\"Year2\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
            + "          levelType=\"TimeYears\"/>\n"
            + "      <Level name=\"Week\" column=\"week_of_year\" type=\"Numeric\" uniqueMembers=\"false\"\n"
            + "          levelType=\"TimeWeeks\"/>\n"
            + "      <Level name=\"Date2\" column=\"day_of_month\" uniqueMembers=\"false\" type=\"Numeric\"\n"
            + "          levelType=\"TimeDays\"/>\n"
            + "    </Hierarchy>\n"
            + "    <Hierarchy name=\"Time2\" hasAll=\"false\" primaryKey=\"time_id\">\n"
            + "      <Table name=\"time_by_day\"/>\n"
            + "      <Level name=\"Year2\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
            + "          levelType=\"TimeYears\"/>\n"
            + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
            + "          levelType=\"TimeQuarters\"/>\n"
            + "      <Level name=\"Month\" column=\"month_of_year\" nameColumn=\"the_month\" uniqueMembers=\"false\" type=\"Numeric\"\n"
            + "          levelType=\"TimeMonths\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension name=\"Product\" foreignKey=\"product_id\">\n"
            + "    <Hierarchy name=\"Products\" hasAll=\"true\" primaryKey=\"product_id\" primaryKeyTable=\"product\">\n"
            + "      <Join leftKey=\"product_class_id\" rightKey=\"product_class_id\">\n"
            + "        <Table name=\"product\"/>\n"
            + "        <Table name=\"product_class\"/>\n"
            + "      </Join>\n"
            + "      <Level name=\"Product Family\" table=\"product_class\" column=\"product_family\"\n"
            + "          uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"Product Department\" table=\"product_class\" column=\"product_department\"\n"
            + "          uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Product Category\" table=\"product_class\" column=\"product_category\"\n"
            + "          uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Product Subcategory\" table=\"product_class\" column=\"product_subcategory\"\n"
            + "          uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Brand Name\" table=\"product\" column=\"brand_name\" uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Product Name\" table=\"product\" nameColumn=\"product_name\" column=\"product_id\" \n"
            + "          uniqueMembers=\"true\"/>\n"
            + "    </Hierarchy>\n"
            + "    <Hierarchy name=\"Product Name\" hasAll=\"true\" primaryKey=\"product_id\" primaryKeyTable=\"product\">\n"
            + "      <Join leftKey=\"product_class_id\" rightKey=\"product_class_id\">\n"
            + "        <Table name=\"product\"/>\n"
            + "        <Table name=\"product_class\"/>\n"
            + "      </Join>\n"
            + "      <Level name=\"Product Name\" table=\"product\" column=\"product_name\"\n"
            + "          uniqueMembers=\"true\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension name=\"Promotion\" foreignKey=\"promotion_id\">\n"
            + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
            + "      <Table name=\"promotion\"/>\n"
            + "      <Level name=\"Promotion Name\" column=\"promotion_name\" uniqueMembers=\"true\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension name=\"Currency\" foreignKey=\"promotion_id\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"promotion_id\">\n"
            + "      <Table name=\"promotion\"/>\n"
            + "      <Level name=\"Currency\" column=\"media_type\" uniqueMembers=\"true\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>"
            + "  <Dimension name=\"Customer\" foreignKey=\"customer_id\">\n"
                + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Customers\" primaryKey=\"customer_id\">\n"
                + "      <Table name=\"customer\"/>\n"
                + "      <Level name=\"Country\" column=\"country\" uniqueMembers=\"true\"/>\n"
                + "      <Level name=\"State Province\" column=\"state_province\" uniqueMembers=\"true\"/>\n"
                + "      <Level name=\"City\" column=\"city\" uniqueMembers=\"false\"/>\n"
                + "      <Level name=\"Name\" column=\"customer_id\" type=\"Numeric\" uniqueMembers=\"true\"/>\n"
                + "    </Hierarchy>\n"
                + "  </Dimension>\n"
                + "  <Dimension name='Store Size in SQFT' foreignKey='store_id'>\n"
                + "    <Hierarchy hasAll='true' primaryKey='store_id'>\n"
                + "      <Table name='store'/>\n"
                + "      <Level name='Store Sqft' column='store_sqft' type='Numeric' uniqueMembers='true'/>\n"
                + "    </Hierarchy>\n"
                + "  </Dimension>\n"
                + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
                + "      formatString=\"Standard\"/>\n"
                + "</Cube>\n"
                + "</Schema>");
         */
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("FoodMart")
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("Warehouse and Sales")
                        .defaultMeasure("Unit Sales")
                        .fact(new TableR("sales_fact_1997"))
                        .dimensionUsageOrDimensions(List.of(
                            PrivateDimensionRBuilder.builder()
                                .name("Store")
                                .foreignKey("store_id")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .name("Stores")
                                        .hasAll(true).primaryKey("store_id")
                                        .relation(new TableR("store"))
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Store Country")
                                                .column("store_country")
                                                .uniqueMembers(true)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Store State")
                                                .column("store_state")
                                                .uniqueMembers(true)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Store City")
                                                .column("store_city")
                                                .uniqueMembers(false)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Store Name")
                                                .column("store_name")
                                                .uniqueMembers(true)
                                                .properties(List.of(
                                                    PropertyRBuilder.builder()
                                                        .name("Store Type")
                                                        .column("store_type")
                                                        .build(),
                                                    PropertyRBuilder.builder()
                                                        .name("Store Sqft")
                                                        .column("store_sqft")
                                                        .type(PropertyTypeEnum.NUMERIC)
                                                        .build()
                                                ))
                                                .build()

                                        ))
                                        .build()
                                ))
                                .build(),
                            PrivateDimensionRBuilder.builder()
                                .name("Time")
                                .type(DimensionTypeEnum.TIME_DIMENSION)
                                .foreignKey("time_id")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true).name("Time By Week").primaryKey("time_id")
                                        .relation(new TableR("time_by_day"))
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Year2")
                                                .column("the_year")
                                                .type(TypeEnum.NUMERIC)
                                                .uniqueMembers(true)
                                                .levelType(LevelTypeEnum.TIME_YEARS)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Week")
                                                .column("week_of_year")
                                                .type(TypeEnum.NUMERIC)
                                                .uniqueMembers(false)
                                                .levelType(LevelTypeEnum.TIME_WEEKS)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Date2")
                                                .column("day_of_month")
                                                .type(TypeEnum.NUMERIC)
                                                .uniqueMembers(false)
                                                .levelType(LevelTypeEnum.TIME_DAYS)
                                                .build()
                                        ))
                                        .build(),
                                    HierarchyRBuilder.builder()
                                        .hasAll(false).name("Time2").primaryKey("time_id")
                                        .relation(new TableR("time_by_day"))
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Year2")
                                                .column("the_year")
                                                .type(TypeEnum.NUMERIC)
                                                .uniqueMembers(true)
                                                .levelType(LevelTypeEnum.TIME_YEARS)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Quarter")
                                                .column("quarter")
                                                .uniqueMembers(false)
                                                .levelType(LevelTypeEnum.TIME_QUARTERS)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Month")
                                                .column("month_of_year")
                                                .nameColumn("the_month")
                                                .type(TypeEnum.NUMERIC)
                                                .uniqueMembers(false)
                                                .levelType(LevelTypeEnum.TIME_MONTHS)
                                                .build()

                                        ))
                                        .build()

                                ))
                                .build(),
                            PrivateDimensionRBuilder.builder()
                                .name("Product")
                                .foreignKey("product_id")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true).name("Products").primaryKey("product_id").primaryKeyTable("product")
                                        .relation(
                                            new JoinR(
                                                new JoinedQueryElementR(null, "product_class_id", new TableR("product")),
                                                new JoinedQueryElementR(null, "product_class_id", new TableR("product_class"))
                                            )
                                        )
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Product Family")
                                                .table("product_class")
                                                .column("product_family")
                                                .uniqueMembers(true)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Product Department")
                                                .table("product_class")
                                                .column("product_department")
                                                .uniqueMembers(false)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Product Category")
                                                .table("product_class")
                                                .column("product_category")
                                                .uniqueMembers(false)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Product Subcategory")
                                                .table("product_class")
                                                .column("product_subcategory")
                                                .uniqueMembers(false)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Brand Name")
                                                .table("product")
                                                .column("brand_name")
                                                .uniqueMembers(false)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Product Name")
                                                .table("product")
                                                .nameColumn("product_name")
                                                .column("product_id")
                                                .uniqueMembers(true)
                                                .build()
                                        ))
                                        .build(),
                                    HierarchyRBuilder.builder()
                                        .name("Product Name")
                                        .hasAll(true)
                                        .primaryKey("product_id")
                                        .primaryKeyTable("product")
                                        .relation(
                                            new JoinR(
                                                new JoinedQueryElementR(null, "product_class_id", new TableR("product")),
                                                new JoinedQueryElementR(null, "product_class_id", new TableR("product_class"))
                                            )
                                        )
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Product Name")
                                                .table("product")
                                                .column("product_name")
                                                .uniqueMembers(true)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build(),
                                PrivateDimensionRBuilder.builder()
                                    .name("Promotion")
                                    .foreignKey("promotion_id")
                                    .hierarchies(List.of(
                                        HierarchyRBuilder.builder()
                                            .hasAll(true)
                                            .allMemberName("All Promotions")
                                            .primaryKey("promotion_id")
                                            .defaultMember("[All Promotions]")
                                            .relation(new TableR("promotion"))
                                            .levels(List.of(
                                                LevelRBuilder.builder()
                                                    .name("Promotion Name")
                                                    .column("promotion_name")
                                                    .uniqueMembers(true)
                                                    .build()
                                            ))
                                            .build()
                                    ))
                                    .build(),
                            PrivateDimensionRBuilder.builder()
                                .name("Currency")
                                .foreignKey("promotion_id")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true)
                                        .primaryKey("promotion_id")
                                        .relation(new TableR("promotion"))
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Currency")
                                                .column("media_type")
                                                .uniqueMembers(true)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build(),
                            PrivateDimensionRBuilder.builder()
                                .name("Customer")
                                .foreignKey("customer_id")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true)
                                        .allMemberName("All Customers")
                                        .primaryKey("customer_id")
                                        .relation(new TableR("customer"))
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Country")
                                                .column("country")
                                                .uniqueMembers(true)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("State Province")
                                                .column("state_province")
                                                .uniqueMembers(true)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("City")
                                                .column("city")
                                                .uniqueMembers(false)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Name")
                                                .column("customer_id")
                                                .type(TypeEnum.NUMERIC)
                                                .uniqueMembers(true)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build(),
                            PrivateDimensionRBuilder.builder()
                                .name("Store Size in SQFT")
                                .foreignKey("store_id")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true)
                                        .primaryKey("store_id")
                                        .relation(new TableR("store"))
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Store Sqft")
                                                .column("store_sqft")
                                                .type(TypeEnum.NUMERIC)
                                                .uniqueMembers(true)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Unit Sales")
                                .column("unit_sales")
                                .aggregator("sum")
                                .formatString("Standard")
                                .build()
                        ))
                        .build()
                ))
                .build();
        }
        */
    }

    public static class SteelWheelsSchemaTestModifier1 extends PojoMappingModifier {


        public SteelWheelsSchemaTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        /*
                    "<Schema name=\"SteelWheels\">\n"
            + "  <Cube name=\"SteelWheelsSales\" cache=\"true\" enabled=\"true\">\n"
            + "    <Table name=\"orderfact\">\n"
            + "    </Table>\n"
            + "    <Dimension foreignKey=\"CUSTOMERNUMBER\" name=\"Markets\">\n"
            + "      <Hierarchy hasAll=\"true\" allMemberName=\"All Markets\" primaryKey=\"CUSTOMERNUMBER\">\n"
            + "        <Table name=\"customer_w_ter\">\n"
            + "        </Table>\n"
            + "        <Level name=\"Territory\" column=\"TERRITORY\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\"\n"
            + "               hideMemberIf=\"Never\">\n"
            + "        </Level>\n"
            + "        <Level name=\"Country\" column=\"COUNTRY\" levelType=\"Regular\"\n"
            + "               hideMemberIf=\"Never\">\n"
            + "          <Annotations>\n"
            + "            <Annotation name=\"Data.Role\">Geography</Annotation>\n"
            + "            <Annotation name=\"Geo.Role\">country</Annotation>\n"
            + "          </Annotations>\n"
            + "        </Level>\n"
            + "        <Level name=\"State Province\" column=\"STATE\" type=\"String\" levelType=\"Regular\"\n"
            + "               hideMemberIf=\"Never\">\n"
            + "          <Annotations>\n"
            + "            <Annotation name=\"Data.Role\">Geography</Annotation>\n"
            + "            <Annotation name=\"Geo.Role\">state</Annotation>\n"
            + "            <Annotation name=\"Geo.RequiredParents\">country</Annotation>\n"
            + "          </Annotations>\n"
            + "        </Level>\n"
            + "        <Level name=\"City\" column=\"CITY\" type=\"String\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "          <Annotations>\n"
            + "            <Annotation name=\"Data.Role\">Geography</Annotation>\n"
            + "            <Annotation name=\"Geo.Role\">city</Annotation>\n"
            + "            <Annotation name=\"Geo.RequiredParents\">country,state</Annotation>\n"
            + "          </Annotations>\n"
            + "        </Level>\n"
            + "      </Hierarchy>\n"
            + "    </Dimension>\n"
            + "    <Dimension foreignKey=\"CUSTOMERNUMBER\" name=\"Customers\">\n"
            + "      <Hierarchy hasAll=\"true\" allMemberName=\"All Customers\" primaryKey=\"CUSTOMERNUMBER\">\n"
            + "        <Table name=\"CUSTOMER_W_TER\">\n"
            + "        </Table>\n"
            + "        <Level name=\"Customer\" column=\"CUSTOMERNAME\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\"\n"
            + "               hideMemberIf=\"Never\">\n"
            + "          <Property name=\"Customer Number\" column=\"CUSTOMERNUMBER\" type=\"Numeric\"/>\n"
            + "          <Property name=\"Contact First Name\" column=\"CONTACTFIRSTNAME\" type=\"String\"/>\n"
            + "          <Property name=\"Contact Last Name\" column=\"CONTACTLASTNAME\" type=\"String\"/>\n"
            + "          <Property name=\"Phone\" column=\"PHONE\" type=\"String\"/>\n"
            + "          <Property name=\"Address\" column=\"ADDRESSLINE1\" type=\"String\"/>\n"
            + "          <Property name=\"Credit Limit\" column=\"CREDITLIMIT\" type=\"Numeric\"/>\n"
            + "        </Level>\n"
            + "      </Hierarchy>\n"
            + "    </Dimension>\n"
            + "    <Dimension foreignKey=\"PRODUCTCODE\" name=\"Product\">\n"
            + "      <Hierarchy name=\"\" hasAll=\"true\" allMemberName=\"All Products\" primaryKey=\"PRODUCTCODE\" primaryKeyTable=\"PRODUCTS\"\n"
            + "                 caption=\"\">\n"
            + "        <Table name=\"PRODUCTS\">\n"
            + "        </Table>\n"
            + "        <Level name=\"Line\" table=\"PRODUCTS\" column=\"PRODUCTLINE\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\"\n"
            + "               hideMemberIf=\"Never\">\n"
            + "        </Level>\n"
            + "        <Level name=\"Vendor\" table=\"PRODUCTS\" column=\"PRODUCTVENDOR\" type=\"String\" uniqueMembers=\"false\"\n"
            + "               levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "        </Level>\n"
            + "        <Level name=\"Product\" table=\"PRODUCTS\" column=\"PRODUCTNAME\" type=\"String\" uniqueMembers=\"true\"\n"
            + "               levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "          <Property name=\"Code\" column=\"PRODUCTCODE\" type=\"String\"/>\n"
            + "          <Property name=\"Vendor\" column=\"PRODUCTVENDOR\" type=\"String\"/>\n"
            + "          <Property name=\"Description\" column=\"PRODUCTDESCRIPTION\" type=\"String\"/>\n"
            + "        </Level>\n"
            + "      </Hierarchy>\n"
            + "    </Dimension>\n"
            + "    <Dimension type=\"TimeDimension\" foreignKey=\"TIME_ID\" name=\"Time\">\n"
            + "      <Hierarchy hasAll=\"true\" allMemberName=\"All Years\" primaryKey=\"TIME_ID\">\n"
            + "        <Table name=\"DIM_TIME\">\n"
            + "        </Table>\n"
            + "        <Level name=\"Years\" column=\"YEAR_ID\" type=\"String\" uniqueMembers=\"true\" levelType=\"TimeYears\"\n"
            + "               hideMemberIf=\"Never\">\n"
            + "          <Annotations>\n"
            + "            <Annotation name=\"AnalyzerDateFormat\">[yyyy]</Annotation>\n"
            + "          </Annotations>\n"
            + "        </Level>\n"
            + "        <Level name=\"Quarters\" column=\"QTR_NAME\" ordinalColumn=\"QTR_ID\" type=\"String\" uniqueMembers=\"false\"\n"
            + "               levelType=\"TimeQuarters\" hideMemberIf=\"Never\">\n"
            + "          <Annotations>\n"
            + "            <Annotation name=\"AnalyzerDateFormat\">[yyyy].['QTR'q]</Annotation>\n"
            + "          </Annotations>\n"
            + "        </Level>\n"
            + "        <Level name=\"Months\" column=\"MONTH_NAME\" ordinalColumn=\"MONTH_ID\" type=\"String\" uniqueMembers=\"false\"\n"
            + "               levelType=\"TimeMonths\" hideMemberIf=\"Never\">\n"
            + "          <Annotations>\n"
            + "            <Annotation name=\"AnalyzerDateFormat\">[yyyy].['QTR'q].[MMM]</Annotation>\n"
            + "          </Annotations>\n"
            + "        </Level>\n"
            + "      </Hierarchy>\n"
            + "    </Dimension>\n"
            + "    <Dimension foreignKey=\"STATUS\" name=\"Order Status\">\n"
            + "      <Hierarchy hasAll=\"true\" allMemberName=\"All Status Types\" primaryKey=\"STATUS\">\n"
            + "        <Level name=\"Type\" column=\"STATUS\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "        </Level>\n"
            + "      </Hierarchy>\n"
            + "    </Dimension>\n"
            + "    <Measure name=\"Quantity\" column=\"QUANTITYORDERED\" formatString=\"#,###\" aggregator=\"sum\">\n"
            + "      <Annotations>\n"
            + "        <Annotation name=\"AnalyzerBusinessGroup\">Measures</Annotation>\n"
            + "      </Annotations>\n"
            + "    </Measure>\n"
            + "    <Measure name=\"Sales\" column=\"TOTALPRICE\" formatString=\"#,###\" aggregator=\"sum\">\n"
            + "      <Annotations>\n"
            + "        <Annotation name=\"AnalyzerBusinessGroup\">Measures</Annotation>\n"
            + "      </Annotations>\n"
            + "    </Measure>\n"
            + "  </Cube>\n"
            + "  <Role name=\"dev\">\n"
            + "    <SchemaGrant access=\"all\">\n"
            + "      <CubeGrant cube=\"SteelWheelsSales\" access=\"all\">\n"
            + "        <HierarchyGrant hierarchy=\"[Markets]\" topLevel=\"[Markets].[Territory]\" bottomLevel=\"[Markets].[Country]\" rollupPolicy=\"Partial\" access=\"custom\">\n"
            + "          <MemberGrant member=\"[Markets].[APAC]\" access=\"all\"> </MemberGrant>\n"
            + "          <MemberGrant member=\"[Markets].[APAC].[Australia]\" access=\"none\"> </MemberGrant>\n"
            + "        </HierarchyGrant> \n"
            + "      </CubeGrant>\n"
            + "    </SchemaGrant>\n"
            + "    <SchemaGrant access=\"all\">\n"
            + "      <CubeGrant cube=\"SteelWheelsSales\" access=\"all\">\n"
            + "        <HierarchyGrant hierarchy=\"Measures\" access=\"custom\">\n"
            + "          <MemberGrant member=\"[Measures].[Quantity]\" access=\"none\"> </MemberGrant>\n"
            + "          <MemberGrant member=\"[Measures].[Sales]\" access=\"all\"> </MemberGrant>\n"
            + "        </HierarchyGrant>\n"
            + "      </CubeGrant>\n"
            + "    </SchemaGrant>\n"
            + "  </Role> \n"
            + "  <Role name=\"cto\">\n"
            + "    <SchemaGrant access=\"all\">\n"
            + "      <CubeGrant cube=\"SteelWheelsSales\" access=\"all\">\n"
            + "        <HierarchyGrant hierarchy=\"Measures\" access=\"custom\">\n"
            + "          <MemberGrant member=\"[Measures].[Quantity]\" access=\"none\"> </MemberGrant>\n"
            + "          <MemberGrant member=\"[Measures].[Sales]\" access=\"all\"> </MemberGrant>\n"
            + "        </HierarchyGrant>\n"
            + "      </CubeGrant>\n"
            + "    </SchemaGrant>\n"
            + "  </Role> \n"
            + "  <Role name=\"Admin\">\n"
            + "    <SchemaGrant access=\"all\">\n"
            + "      <CubeGrant cube=\"SteelWheelsSales\" access=\"all\"/>\n"
            + "    </SchemaGrant>\n"
            + "  </Role>\n"
            + "</Schema>\n";
         */
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("SteelWheels")
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("SteelWheelsSales")
                        .cache(true)
                        .enabled(true)
                        .fact(new TableR("orderfact"))
                        .dimensionUsageOrDimensions(List.of(
                            PrivateDimensionRBuilder.builder()
                                .name("Markets")
                                .foreignKey("CUSTOMERNUMBER")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true)
                                        .allMemberName("All Markets")
                                        .primaryKey("CUSTOMERNUMBER")
                                        .relation(new TableR("customer_w_ter"))
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Territory")
                                                .column("TERRITORY")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(true)
                                                .levelType(LevelTypeEnum.REGULAR)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Country")
                                                .column("COUNTRY")
                                                .levelType(LevelTypeEnum.REGULAR)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .annotations(List.of(
                                                    AnnotationRBuilder.builder()
                                                        .name("Data.Role")
                                                        .content("Geography")
                                                        .build(),
                                                    AnnotationRBuilder.builder()
                                                        .name("Geo.Role")
                                                        .content("country")
                                                        .build()
                                                ))
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("State Province")
                                                .column("STATE")
                                                .type(TypeEnum.STRING)
                                                .levelType(LevelTypeEnum.REGULAR)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .annotations(List.of(
                                                    AnnotationRBuilder.builder()
                                                        .name("Data.Role")
                                                        .content("Geography")
                                                        .build(),
                                                    AnnotationRBuilder.builder()
                                                        .name("Geo.Role")
                                                        .content("state")
                                                        .build(),
                                                    AnnotationRBuilder.builder()
                                                        .name("Geo.Role")
                                                        .content("country")
                                                        .build()
                                                ))
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("City")
                                                .column("CITY")
                                                .type(TypeEnum.STRING)
                                                .levelType(LevelTypeEnum.REGULAR)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .annotations(List.of(
                                                    AnnotationRBuilder.builder()
                                                        .name("Data.Role")
                                                        .content("Geography")
                                                        .build(),
                                                    AnnotationRBuilder.builder()
                                                        .name("Geo.Role")
                                                        .content("city")
                                                        .build(),
                                                    AnnotationRBuilder.builder()
                                                        .name("Geo.RequiredParents")
                                                        .content("country,state")
                                                        .build()
                                                ))
                                                .build()

                                        ))
                                        .build()
                                ))
                                .build(),
                            PrivateDimensionRBuilder.builder()
                                .name("Customers")
                                .foreignKey("CUSTOMERNUMBER")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true)
                                        .allMemberName("All Customers")
                                        .primaryKey("CUSTOMERNUMBER")
                                        .relation(new TableR("CUSTOMER_W_TER"))
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Customer")
                                                .column("CUSTOMERNAME")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(true)
                                                .levelType(LevelTypeEnum.REGULAR)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .properties(List.of(
                                                    PropertyRBuilder.builder()
                                                        .name("Customer Number")
                                                        .column("CUSTOMERNUMBER")
                                                        .type(PropertyTypeEnum.NUMERIC)
                                                        .build(),
                                                    PropertyRBuilder.builder()
                                                        .name("Contact First Name")
                                                        .column("CONTACTFIRSTNAME")
                                                        .type(PropertyTypeEnum.STRING)
                                                        .build(),
                                                    PropertyRBuilder.builder()
                                                        .name("Contact Last Name")
                                                        .column("CONTACTLASTNAME")
                                                        .type(PropertyTypeEnum.STRING)
                                                        .build(),
                                                    PropertyRBuilder.builder()
                                                        .name("Phone")
                                                        .column("PHONE")
                                                        .type(PropertyTypeEnum.STRING)
                                                        .build(),
                                                    PropertyRBuilder.builder()
                                                        .name("Address")
                                                        .column("ADDRESSLINE1")
                                                        .type(PropertyTypeEnum.STRING)
                                                        .build(),
                                                    PropertyRBuilder.builder()
                                                        .name("Credit Limit")
                                                        .column("CREDITLIMIT")
                                                        .type(PropertyTypeEnum.NUMERIC)
                                                        .build()

                                                ))
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build(),
                            PrivateDimensionRBuilder.builder()
                                .name("Product")
                                .foreignKey("PRODUCTCODE")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true).name("")
                                        .allMemberName("All Products")
                                        .primaryKey("PRODUCTCODE").primaryKeyTable("PRODUCTS")
                                        .caption("")
                                        .relation(new TableR("PRODUCTS"))
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Line")
                                                .table("PRODUCTS")
                                                .column("PRODUCTLINE")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(false)
                                                .levelType(LevelTypeEnum.REGULAR)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Vendor")
                                                .table("PRODUCTS")
                                                .column("PRODUCTVENDOR")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(false)
                                                .levelType(LevelTypeEnum.REGULAR)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Product")
                                                .table("PRODUCTS")
                                                .column("PRODUCTNAME")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(true)
                                                .levelType(LevelTypeEnum.REGULAR)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .properties(List.of(
                                                    PropertyRBuilder.builder()
                                                        .name("Code")
                                                        .column("PRODUCTCODE")
                                                        .type(PropertyTypeEnum.STRING)
                                                        .build(),
                                                    PropertyRBuilder.builder()
                                                        .name("Vendor")
                                                        .column("PRODUCTVENDOR")
                                                        .type(PropertyTypeEnum.STRING)
                                                        .build(),
                                                    PropertyRBuilder.builder()
                                                        .name("Description")
                                                        .column("PRODUCTDESCRIPTION")
                                                        .type(PropertyTypeEnum.STRING)
                                                        .build()

                                                ))
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build(),
                            PrivateDimensionRBuilder.builder()
                                .type(DimensionTypeEnum.TIME_DIMENSION)
                                .name("Time")
                                .foreignKey("TIME_ID")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true)
                                        .allMemberName("All Years")
                                        .primaryKey("TIME_ID")
                                        .relation(new TableR("DIM_TIME"))
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Years")
                                                .column("YEAR_ID")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(true)
                                                .levelType(LevelTypeEnum.TIME_YEARS)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .annotations(List.of(
                                                    AnnotationRBuilder.builder()
                                                        .name("AnalyzerDateFormat")
                                                        .content("[yyyy]")
                                                        .build()
                                                ))
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Quarters")
                                                .column("QTR_NAME")
                                                .ordinalColumn("QTR_ID")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(false)
                                                .levelType(LevelTypeEnum.TIME_QUARTERS)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .annotations(List.of(
                                                    AnnotationRBuilder.builder()
                                                        .name("AnalyzerDateFormat")
                                                        .content("[yyyy].['QTR'q]")
                                                        .build()
                                                ))
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Months")
                                                .column("MONTH_NAME")
                                                .ordinalColumn("MONTH_ID")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(false)
                                                .levelType(LevelTypeEnum.TIME_MONTHS)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .annotations(List.of(
                                                    AnnotationRBuilder.builder()
                                                        .name("AnalyzerDateFormat")
                                                        .content("[yyyy].['QTR'q].[MMM]")
                                                        .build()
                                                ))
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build(),
                            PrivateDimensionRBuilder.builder()
                                .name("Order Status")
                                .foreignKey("STATUS")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true)
                                        .allMemberName("All Status Types")
                                        .primaryKey("STATUS")
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Type")
                                                .column("STATUS")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(true)
                                                .levelType(LevelTypeEnum.REGULAR)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Quantity")
                                .column("QUANTITYORDERED")
                                .aggregator("sum")
                                .formatString("#,###")
                                .annotations(List.of(
                                    AnnotationRBuilder.builder()
                                        .name("AnalyzerBusinessGroup")
                                        .content("Measures")
                                        .build()
                                ))
                                .build(),
                            MeasureRBuilder.builder()
                                .name("Sales")
                                .column("TOTALPRICE")
                                .aggregator("sum")
                                .formatString("#,###")
                                .annotations(List.of(
                                    AnnotationRBuilder.builder()
                                        .name("AnalyzerBusinessGroup")
                                        .content("Measures")
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .roles(List.of(
                    RoleRBuilder.builder()
                        .name("dev")
                        .schemaGrants(List.of(
                            SchemaGrantRBuilder.builder()
                                .access(AccessEnum.ALL)
                                .cubeGrants(List.of(
                                    CubeGrantRBuilder.builder()
                                        .cube("SteelWheelsSales")
                                        .access("all")
                                        .hierarchyGrants(List.of(
                                            HierarchyGrantRBuilder.builder()
                                                .hierarchy("[Markets]")
                                                .topLevel("[Markets].[Territory]")
                                                .bottomLevel("[Markets].[Country]")
                                                .rollupPolicy("Partial")
                                                .access(AccessEnum.CUSTOM)
                                                .memberGrants(List.of(
                                                    MemberGrantRBuilder.builder()
                                                        .member("[Markets].[APAC]")
                                                        .access(MemberGrantAccessEnum.ALL)
                                                        .build(),
                                                    MemberGrantRBuilder.builder()
                                                        .member("[Markets].[APAC].[Australia]")
                                                        .access(MemberGrantAccessEnum.NONE)
                                                        .build()

                                                ))
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build(),
                            SchemaGrantRBuilder.builder()
                                .access(AccessEnum.ALL)
                                .cubeGrants(List.of(
                                    CubeGrantRBuilder.builder()
                                        .cube("SteelWheelsSales")
                                        .access("all")
                                        .hierarchyGrants(List.of(
                                            HierarchyGrantRBuilder.builder()
                                                .hierarchy("Measures")
                                                .access(AccessEnum.CUSTOM)
                                                .memberGrants(List.of(
                                                    MemberGrantRBuilder.builder()
                                                        .member("[Measures].[Quantity]")
                                                        .access(MemberGrantAccessEnum.NONE)
                                                        .build(),
                                                    MemberGrantRBuilder.builder()
                                                        .member("[Measures].[Sales]")
                                                        .access(MemberGrantAccessEnum.ALL)
                                                        .build()
                                                ))
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build(),
                    RoleRBuilder.builder()
                        .name("cto")
                        .schemaGrants(List.of(
                            SchemaGrantRBuilder.builder()
                                .access(AccessEnum.ALL)
                                .cubeGrants(List.of(
                                    CubeGrantRBuilder.builder()
                                        .cube("SteelWheelsSales")
                                        .access("all")
                                        .hierarchyGrants(List.of(
                                            HierarchyGrantRBuilder.builder()
                                                .hierarchy("Measures")
                                                .access(AccessEnum.CUSTOM)
                                                .memberGrants(List.of(
                                                    MemberGrantRBuilder.builder()
                                                        .member("[Measures].[Quantity]")
                                                        .access(MemberGrantAccessEnum.NONE)
                                                        .build(),
                                                    MemberGrantRBuilder.builder()
                                                        .member("[Measures].[Sales]")
                                                        .access(MemberGrantAccessEnum.ALL)
                                                        .build()

                                                ))
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()

                        ))
                        .build(),
                        RoleRBuilder.builder()
                            .name("Admin")
                            .schemaGrants(List.of(
                                SchemaGrantRBuilder.builder()
                                    .access(AccessEnum.ALL)
                                    .cubeGrants(List.of(
                                        CubeGrantRBuilder.builder()
                                            .cube("SteelWheelsSales")
                                            .access("all")
                                            .build()
                                    ))
                                    .build()
                                ))
                            .build()
                ))
                .build();
        }
        */
    }

    public static class SteelWheelsSchemaTestModifier2 extends PojoMappingModifier {

        public SteelWheelsSchemaTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected boolean hierarchyHasAll(HierarchyMapping hierarchy) {
            return false;
        }

    }

    public static class SteelWheelsSchemaTestModifier3 extends PojoMappingModifier {

        public SteelWheelsSchemaTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected boolean hierarchyHasAll(HierarchyMapping hierarchy) {

            if ("All Markets".equals(hierarchy.getAllMemberName()) && hierarchy.isHasAll()) {
                return false;
            }
            if ("All Status Types".equals(hierarchy.getAllMemberName()) && hierarchy.isHasAll()) {
                return false;
            }
            return hierarchy.isHasAll();
        }
    }

    public static class SteelWheelsSchemaTestModifier4 extends PojoMappingModifier {

        public SteelWheelsSchemaTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        /*
                        "<Schema name=\"test_namecolumn\">"
                + "<Dimension type=\"StandardDimension\" highCardinality=\"false\" name=\"Markets\">"
                + "<Hierarchy hasAll=\"true\" allMemberName=\"All Markets\" primaryKey=\"CUSTOMERNUMBER\">"
                + "<Table name=\"CUSTOMER_W_TER\">\n"
                + "</Table>"
                + "<Level name=\"Territory\" column=\"TERRITORY\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "</Level>"
                + "<Level name=\"Country\" column=\"COUNTRY\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "</Level>"
                + "<Level name=\"State Province\" column=\"STATE\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "</Level>"
                + "<Level name=\"City\" column=\"CITY\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "</Level>"
                + "</Hierarchy>"
                + "</Dimension>"
                + "<Dimension type=\"StandardDimension\" highCardinality=\"false\" name=\"Customers\">"
                + "<Hierarchy hasAll=\"true\" allMemberName=\"All Customers\" primaryKey=\"CUSTOMERNUMBER\">"
                + "<Table name=\"CUSTOMER_W_TER\">\n"
                + "</Table>"
                + "<Level name=\"Customer\" column=\"CUSTOMERNAME\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">"
                + "<Property name=\"Customer Number\" column=\"CUSTOMERNUMBER\" type=\"Numeric\">\n"
                + "</Property>"
                + "<Property name=\"Contact First Name\" column=\"CONTACTFIRSTNAME\" type=\"String\">\n"
                + "</Property>"
                + "<Property name=\"Contact Last Name\" column=\"CONTACTLASTNAME\" type=\"String\">\n"
                + "</Property>"
                + "<Property name=\"Phone\" column=\"PHONE\" type=\"String\">\n"
                + "</Property>"
                + "<Property name=\"Address\" column=\"ADDRESSLINE1\" type=\"String\">\n"
                + "</Property>"
                + "<Property name=\"Credit Limit\" column=\"CREDITLIMIT\" type=\"Numeric\">\n"
                + "</Property>"
                + "</Level>"
                + "</Hierarchy>"
                + "</Dimension>"
                + "<Dimension type=\"StandardDimension\" highCardinality=\"false\" name=\"Product\">"
                + "<Hierarchy hasAll=\"true\" allMemberName=\"All Products\" primaryKey=\"PRODUCTCODE\">"
                + "<Table name=\"PRODUCTS\">\n"
                + "</Table>"
                + "<Level name=\"Line\" table=\"PRODUCTS\" column=\"PRODUCTLINE\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "</Level>"
                + "<Level name=\"Vendor\" table=\"PRODUCTS\" column=\"PRODUCTVENDOR\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "</Level>"
                + "<Level name=\"Product\" table=\"PRODUCTS\" column=\"PRODUCTNAME\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">"
                + "<Property name=\"Code\" column=\"PRODUCTCODE\" type=\"String\">\n"
                + "</Property>"
                + "<Property name=\"Vendor\" column=\"PRODUCTVENDOR\" type=\"String\">\n"
                + "</Property>"
                + "<Property name=\"Description\" column=\"PRODUCTDESCRIPTION\" type=\"String\">\n"
                + "</Property>"
                + "</Level>"
                + "</Hierarchy>"
                + "</Dimension>"
                + "<Dimension type=\"TimeDimension\" highCardinality=\"false\" name=\"Time\">"
                + "<Hierarchy hasAll=\"true\" allMemberName=\"All Years\" primaryKey=\"TIME_ID\">"
                + "<Table name=\"time\">\n"
                + "</Table>"
                + "<Level name=\"Years\" column=\"YEAR_ID\" type=\"String\" uniqueMembers=\"true\" levelType=\"TimeYears\" hideMemberIf=\"Never\">\n"
                + "</Level>"
                + "<Level name=\"Quarters\" column=\"QTR_ID\" nameColumn=\"QTR_NAME\" ordinalColumn=\"QTR_ID\" type=\"String\" uniqueMembers=\"false\" levelType=\"TimeQuarters\" hideMemberIf=\"Never\">\n"
                + "</Level>"
                + "<Level name=\"Months\" column=\"MONTH_ID\" nameColumn=\"MONTH_NAME\" ordinalColumn=\"MONTH_ID\" type=\"String\" uniqueMembers=\"false\" levelType=\"TimeMonths\" hideMemberIf=\"Never\">\n"
                + "</Level>"
                + "</Hierarchy>"
                + "</Dimension>"
                + "<Dimension type=\"StandardDimension\" highCardinality=\"false\" name=\"Order Status\">"
                + "<Hierarchy hasAll=\"true\" allMemberName=\"All Status Types\" primaryKey=\"STATUS\">"
                + "<Level name=\"Type\" column=\"STATUS\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "</Level>"
                + "</Hierarchy>"
                + "</Dimension>"
                + "<Cube name=\"SteelWheelsSales1\" cache=\"true\" enabled=\"true\">"
                + "<Table name=\"orderfact\">\n"
                + "</Table>"
                + "<DimensionUsage source=\"Markets\" name=\"Markets\" foreignKey=\"CUSTOMERNUMBER\" highCardinality=\"false\">\n</DimensionUsage>"
                + "<DimensionUsage source=\"Customers\" name=\"Customers\" foreignKey=\"CUSTOMERNUMBER\" highCardinality=\"false\">\n</DimensionUsage>"
                + "<DimensionUsage source=\"Product\" name=\"Product\" foreignKey=\"PRODUCTCODE\" highCardinality=\"false\">\n</DimensionUsage>"
                + "<DimensionUsage source=\"Time\" usagePrefix=\"TR_\" name=\"Time\" foreignKey=\"ORDERDATE\" highCardinality=\"false\">\n</DimensionUsage>"
                + "<Measure name=\"Price Each\" column=\"PRICEEACH\" formatString=\"#,###.0\" aggregator=\"sum\">\n</Measure>"
                + "<Measure name=\"Total Price\" column=\"TOTALPRICE\" formatString=\"#,###.00\" aggregator=\"sum\">\n</Measure>"
                + "</Cube>"
                + "<Cube name=\"SteelWheelsSales2\" cache=\"true\" enabled=\"true\">"
                + "<Table name=\"orderfact\">\n"
                + "</Table>"
                + "<DimensionUsage source=\"Markets\" name=\"Markets\" foreignKey=\"CUSTOMERNUMBER\" highCardinality=\"false\">\n"
                + "</DimensionUsage>"
                + "<DimensionUsage source=\"Customers\" name=\"Customers\" foreignKey=\"CUSTOMERNUMBER\" highCardinality=\"false\">\n"
                + "</DimensionUsage>"
                + "<DimensionUsage source=\"Product\" name=\"Product\" foreignKey=\"PRODUCTCODE\" highCardinality=\"false\">\n"
                + "</DimensionUsage>"
                + "<DimensionUsage source=\"Time\" usagePrefix=\"TC_\" name=\"Time\" foreignKey=\"REQUIREDDATE\" highCardinality=\"false\">\n"
                + "</DimensionUsage>"
                + "<Measure name=\"Price Each\" column=\"PRICEEACH\" formatString=\"#,###.0\" aggregator=\"sum\">\n"
                + "</Measure>"
                + "<Measure name=\"Total Price\" column=\"TOTALPRICE\" formatString=\"#,###.00\" aggregator=\"sum\">\n"
                + "</Measure>"
                + "</Cube>"
                + "<Cube name=\"SteelWheelsSales3\" cache=\"true\" enabled=\"true\">"
                + "<Table name=\"orderfact\">\n"
                + "</Table>"
                + "<DimensionUsage source=\"Markets\" name=\"Markets\" foreignKey=\"CUSTOMERNUMBER\" highCardinality=\"false\">\n"
                + "</DimensionUsage>"
                + "<DimensionUsage source=\"Customers\" name=\"Customers\" foreignKey=\"CUSTOMERNUMBER\" highCardinality=\"false\">\n"
                + "</DimensionUsage>"
                + "<DimensionUsage source=\"Product\" name=\"Product\" foreignKey=\"PRODUCTCODE\" highCardinality=\"false\">\n"
                + "</DimensionUsage>"
                + "<DimensionUsage source=\"Time\" usagePrefix=\"TW_\" name=\"Time\" foreignKey=\"SHIPPEDDATE\" highCardinality=\"false\">\n"
                + "</DimensionUsage>"
                + "<Measure name=\"Price Each\" column=\"PRICEEACH\" formatString=\"#,###.0\" aggregator=\"sum\">\n"
                + "</Measure>"
                + "<Measure name=\"Total Price\" column=\"TOTALPRICE\" formatString=\"#,###.00\" aggregator=\"sum\">\n"
                + "</Measure>"
                + "</Cube>"
                + "</Schema>\n");

         */

        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("test_namecolumn")
                .dimensions(List.of(
                    PrivateDimensionRBuilder.builder()
                        .type(DimensionTypeEnum.STANDARD_DIMENSION)
                        .name("Markets")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .allMemberName("All Markets")
                                .primaryKey("CUSTOMERNUMBER")
                                .relation(new TableR("CUSTOMER_W_TER"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Territory")
                                        .column("TERRITORY")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Country")
                                        .column("COUNTRY")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("State Province")
                                        .column("STATE")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("City")
                                        .column("CITY")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build()
                                ))
                                .build()
                        ))
                        .build(),
                    PrivateDimensionRBuilder.builder()
                        .type(DimensionTypeEnum.STANDARD_DIMENSION)
                        .name("Customers")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .allMemberName("All Customers")
                                .primaryKey("CUSTOMERNUMBER")
                                .relation(new TableR("CUSTOMER_W_TER"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Customer")
                                        .column("CUSTOMERNAME")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .properties(List.of(
                                            PropertyRBuilder.builder()
                                                .name("Customer Number")
                                                .column("CUSTOMERNUMBER")
                                                .type(PropertyTypeEnum.NUMERIC)
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Contact First Name")
                                                .column("CONTACTFIRSTNAME")
                                                .type(PropertyTypeEnum.NUMERIC)
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Contact Last Name")
                                                .column("CONTACTLASTNAME")
                                                .type(PropertyTypeEnum.STRING)
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Phone")
                                                .column("PHONE")
                                                .type(PropertyTypeEnum.STRING)
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Address")
                                                .column("ADDRESSLINE1")
                                                .type(PropertyTypeEnum.STRING)
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Credit Limit")
                                                .column("CREDITLIMIT")
                                                .type(PropertyTypeEnum.NUMERIC)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build(),
                    PrivateDimensionRBuilder.builder()
                        .type(DimensionTypeEnum.STANDARD_DIMENSION)
                        .name("Product")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .allMemberName("All Products")
                                .primaryKey("PRODUCTCODE")
                                .relation(new TableR("PRODUCTS"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Line")
                                        .table("PRODUCTS")
                                        .column("PRODUCTLINE")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(false)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Vendor")
                                        .table("PRODUCTS")
                                        .column("PRODUCTVENDOR")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(false)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Product")
                                        .table("PRODUCTS")
                                        .column("PRODUCTNAME")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .properties(List.of(
                                            PropertyRBuilder.builder()
                                                .name("Code")
                                                .column("PRODUCTCODE")
                                                .type(PropertyTypeEnum.STRING)
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Vendor")
                                                .column("PRODUCTVENDOR")
                                                .type(PropertyTypeEnum.STRING)
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Description")
                                                .column("PRODUCTDESCRIPTION")
                                                .type(PropertyTypeEnum.STRING)
                                                .build()
                                        ))
                                        .build()

                                ))
                                .build()
                        ))
                        .build(),
                    PrivateDimensionRBuilder.builder()
                        .type(DimensionTypeEnum.TIME_DIMENSION)
                        .name("Time")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .allMemberName("All Years")
                                .primaryKey("TIME_ID")
                                .relation(new TableR("time"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Years")
                                        .column("YEAR_ID")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.TIME_YEARS)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Quarters")
                                        .column("QTR_ID")
                                        .nameColumn("QTR_NAME")
                                        .ordinalColumn("QTR_ID")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(false)
                                        .levelType(LevelTypeEnum.TIME_QUARTERS)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Months")
                                        .column("MONTH_ID")
                                        .nameColumn("MONTH_NAME")
                                        .ordinalColumn("MONTH_ID")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(false)
                                        .levelType(LevelTypeEnum.TIME_MONTHS)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build()
                                ))
                                .build()
                        ))
                        .build(),
                    PrivateDimensionRBuilder.builder()
                        .type(DimensionTypeEnum.STANDARD_DIMENSION)
                        .name("Order Status")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .allMemberName("All Status Types")
                                .primaryKey("STATUS")
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Type")
                                        .column("STATUS")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("SteelWheelsSales1")
                        .cache(true)
                        .enabled(true)
                        .fact(new TableR("orderfact"))
                        .dimensionUsageOrDimensions(List.of(
                            DimensionUsageRBuilder.builder()
                                .source("Markets")
                                .name("Markets")
                                .foreignKey("CUSTOMERNUMBER")
                                .build(),
                            DimensionUsageRBuilder.builder()
                                .source("Customers")
                                .name("Customers")
                                .foreignKey("CUSTOMERNUMBER")
                                .build(),
                            DimensionUsageRBuilder.builder()
                                .source("Product")
                                .name("Product")
                                .foreignKey("PRODUCTCODE")
                                .build(),
                            DimensionUsageRBuilder.builder()
                                .source("Time")
                                .usagePrefix("TR_")
                                .name("Time")
                                .foreignKey("ORDERDATE")
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Price Each")
                                .column("PRICEEACH")
                                .formatString("#,###.0")
                                .aggregator("sum")
                                .build(),
                            MeasureRBuilder.builder()
                                .name("Total Price")
                                .column("TOTALPRICE")
                                .formatString("#,###.00")
                                .aggregator("sum")
                                .build()
                        ))
                        .build(),
                    CubeRBuilder.builder()
                        .name("SteelWheelsSales2")
                        .cache(true)
                        .enabled(true)
                        .fact(new TableR("orderfact"))
                        .dimensionUsageOrDimensions(List.of(
                            DimensionUsageRBuilder.builder()
                                .source("Markets")
                                .name("Markets")
                                .foreignKey("CUSTOMERNUMBER")
                                .build(),
                            DimensionUsageRBuilder.builder()
                                .source("Customers")
                                .name("Customers")
                                .foreignKey("CUSTOMERNUMBER")
                                .build(),
                            DimensionUsageRBuilder.builder()
                                .source("Product")
                                .name("Product")
                                .foreignKey("PRODUCTCODE")
                                .build(),
                            DimensionUsageRBuilder.builder()
                                .source("Time")
                                .usagePrefix("TC_")
                                .name("Time")
                                .foreignKey("REQUIREDDATE")
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Price Each")
                                .column("PRICEEACH")
                                .formatString("#,###.0")
                                .aggregator("sum")
                                .build(),
                            MeasureRBuilder.builder()
                                .name("Total Price")
                                .column("TOTALPRICE")
                                .formatString("#,###.00")
                                .aggregator("sum")
                                .build()

                        ))
                        .build(),
                    CubeRBuilder.builder()
                        .name("SteelWheelsSales3")
                        .cache(true)
                        .enabled(true)
                        .fact(new TableR("orderfact"))
                        .dimensionUsageOrDimensions(List.of(
                            DimensionUsageRBuilder.builder()
                                .source("Markets")
                                .name("Markets")
                                .foreignKey("CUSTOMERNUMBER")
                                .build(),
                            DimensionUsageRBuilder.builder()
                                .source("Customers")
                                .name("Customers")
                                .foreignKey("CUSTOMERNUMBER")
                                .build(),
                            DimensionUsageRBuilder.builder()
                                .source("Product")
                                .name("Product")
                                .foreignKey("PRODUCTCODE")
                                .build(),
                            DimensionUsageRBuilder.builder()
                                .source("Time")
                                .usagePrefix("TW_")
                                .name("Time")
                                .foreignKey("SHIPPEDDATE")
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Price Each")
                                .column("PRICEEACH")
                                .formatString("#,###.0")
                                .aggregator("sum")
                                .build(),
                            MeasureRBuilder.builder()
                                .name("Total Price")
                                .column("TOTALPRICE")
                                .formatString("#,###.00")
                                .aggregator("sum")
                                .build()
                        ))
                        .build()
                ))
                .build();
        }
        */

    }

    public static class SteelWheelsSchemaTestModifier5 extends PojoMappingModifier {

        public SteelWheelsSchemaTestModifier5(CatalogMapping catalog) {
            super(catalog);
        }

        /*
                "<Schema name=\"FooBar\">\n"
                + "    <Cube name=\"Foo\">\n"
                + "        <Table name=\"orderfact\"></Table>\n"
                + "        <Dimension foreignKey=\"ORDERNUMBER\" name=\"Orders\">\n"
                + "            <Hierarchy hasAll=\"true\" allMemberName=\"All Orders\" primaryKey=\"ORDERNUMBER\">\n"
                + "                <Table name=\"orders\">\n"
                + "                </Table>\n"
                + "                <Level name=\"Order\" column=\"ORDERNUMBER\" type=\"Integer\" uniqueMembers=\"true\">\n"
                + "                    <Property name=\"OrderDate\" column=\"ORDERDATE\" type=\"Timestamp\"/>\n"
                + "                </Level>\n"
                + "            </Hierarchy>\n"
                + "        </Dimension>\n"
                + "        <Dimension foreignKey=\"CUSTOMERNUMBER\" name=\"Customers\">\n"
                + "            <Hierarchy hasAll=\"true\" allMemberName=\"All Customers\" primaryKey=\"CUSTOMERNUMBER\">\n"
                + "                <Table name=\"customer_w_ter\">\n"
                + "                </Table>\n"
                + "                <Level name=\"Customer\" column=\"CUSTOMERNAME\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "                </Level>\n"
                + "            </Hierarchy>\n"
                + "        </Dimension>\n"
                + "        <Measure name=\"Quantity\" column=\"QUANTITYORDERED\" formatString=\"#,###\" aggregator=\"sum\">\n"
                + "        </Measure>\n"
                + "        <Measure name=\"Sales\" column=\"TOTALPRICE\" formatString=\"#,###\" aggregator=\"sum\">\n"
                + "        </Measure>\n"
                + "    </Cube>\n"
                + "</Schema>\n");

         */
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("FooBar")
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("Foo")
                        .fact(new TableR("orderfact"))
                        .dimensionUsageOrDimensions(List.of(
                            PrivateDimensionRBuilder.builder()
                                .foreignKey("ORDERNUMBER")
                                .name("Orders")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true)
                                        .allMemberName("All Orders")
                                        .primaryKey("ORDERNUMBER")
                                        .relation(new TableR("orders"))
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Order")
                                                .column("ORDERNUMBER")
                                                .type(TypeEnum.INTEGER)
                                                .uniqueMembers(true)
                                                .properties(List.of(
                                                    PropertyRBuilder.builder()
                                                        .name("OrderDate")
                                                        .column("ORDERDATE")
                                                        .type(PropertyTypeEnum.TIMESTAMP)
                                                        .build()
                                                ))
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build(),
                            PrivateDimensionRBuilder.builder()
                                .foreignKey("CUSTOMERNUMBER")
                                .name("Customers")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true)
                                        .allMemberName("All Customers")
                                        .primaryKey("CUSTOMERNUMBER")
                                        .relation(new TableR("customer_w_ter"))
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Customer")
                                                .column("CUSTOMERNAME")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(true)
                                                .levelType(LevelTypeEnum.REGULAR)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Quantity")
                                .column("QUANTITYORDERED")
                                .formatString("#,###")
                                .aggregator("sum")
                                .build(),
                            MeasureRBuilder.builder()
                                .name("Sales")
                                .column("TOTALPRICE")
                                .formatString("#,###")
                                .aggregator("sum")
                                .build()
                        ))
                        .build()
                ))
                .build();
        }
		*/
    }

    public static class SteelWheelsSchemaTestModifier6 extends PojoMappingModifier {

        public SteelWheelsSchemaTestModifier6(CatalogMapping catalog) {
            super(catalog);
        }

        /*
            "<Schema name=\"SteelWheels\">\n"
            + "    <Dimension type=\"StandardDimension\" highCardinality=\"false\" name=\"Product\">\n"
            + "        <Hierarchy hasAll=\"true\" allMemberName=\"All Products\" primaryKey=\"PRODUCTCODE\">\n"
            + "            <Table name=\"products\">\n"
            + "            </Table>\n"
            + "            <Level name=\"Line\" table=\"products\" column=\"PRODUCTLINE\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "            </Level>\n"
            + "            <Level name=\"Vendor\" table=\"products\" column=\"PRODUCTVENDOR\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "            </Level>\n"
            + "            <Level name=\"Product\" table=\"products\" column=\"PRODUCTNAME\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "                <Property name=\"Code\" column=\"PRODUCTCODE\" type=\"String\">\n"
            + "                </Property>\n"
            + "                <Property name=\"Vendor\" column=\"PRODUCTVENDOR\" type=\"String\">\n"
            + "                </Property>\n"
            + "                <Property name=\"Description\" column=\"PRODUCTDESCRIPTION\" type=\"String\">\n"
            + "                </Property>\n"
            + "            </Level>\n"
            + "        </Hierarchy>\n"
            + "    </Dimension>\n"
            + "    <Cube name=\"SteelWheelsSales\" cache=\"true\" enabled=\"true\">\n"
            + "  <Table name=\"orderfact\">\n"
            + "  </Table>\n"
            + "  <Dimension foreignKey=\"CUSTOMERNUMBER\" name=\"Markets\">\n"
            + "   <Hierarchy hasAll=\"true\" allMemberName=\"All Markets\" primaryKey=\"CUSTOMERNUMBER\">\n"
            + "    <Table name=\"customer_w_ter\">\n"
            + "    </Table>\n"
            + "    <Level name=\"Territory\" column=\"TERRITORY\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "    </Level>\n"
            + "    <Level name=\"Country\" column=\"COUNTRY\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "    </Level>\n"
            + "    <Level name=\"State Province\" column=\"STATE\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "    </Level>\n"
            + "    <Level name=\"City\" column=\"CITY\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "    </Level>\n"
            + "   </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension foreignKey=\"CUSTOMERNUMBER\" name=\"Customers\">\n"
            + "   <Hierarchy hasAll=\"true\" allMemberName=\"All Customers\" primaryKey=\"CUSTOMERNUMBER\">\n"
            + "    <Table name=\"customer_w_ter\">\n"
            + "    </Table>\n"
            + "    <Level name=\"Customer\" column=\"CUSTOMERNAME\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "    </Level>\n"
            + "   </Hierarchy>\n"
            + "  </Dimension>\n"
            + "        <DimensionUsage source=\"Product\" name=\"MyProduct\" foreignKey=\"PRODUCTCODE\">\n"
            + "        </DimensionUsage>\n"
            + "        <Dimension type=\"TimeDimension\" foreignKey=\"TIME_ID\" name=\"Time\">\n"
            + "   <Hierarchy hasAll=\"true\" allMemberName=\"All Years\" primaryKey=\"TIME_ID\">\n"
            + "    <Table name=\"time\">\n"
            + "    </Table>\n"
            + "    <Level name=\"Years\" column=\"YEAR_ID\" type=\"String\" uniqueMembers=\"true\" levelType=\"TimeYears\" hideMemberIf=\"Never\">\n"
            + "    </Level>\n"
            + "    <Level name=\"Quarters\" column=\"QTR_NAME\" ordinalColumn=\"QTR_ID\" type=\"String\" uniqueMembers=\"false\" levelType=\"TimeQuarters\" hideMemberIf=\"Never\">\n"
            + "    </Level>\n"
            + "    <Level name=\"Months\" column=\"MONTH_NAME\" ordinalColumn=\"MONTH_ID\" type=\"String\" uniqueMembers=\"false\" levelType=\"TimeMonths\" hideMemberIf=\"Never\">\n"
            + "    </Level>\n"
            + "   </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension foreignKey=\"STATUS\" name=\"Order Status\">\n"
            + "   <Hierarchy hasAll=\"true\" allMemberName=\"All Status Types\" primaryKey=\"STATUS\">\n"
            + "    <Level name=\"Type\" column=\"STATUS\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "    </Level>\n"
            + "   </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Measure name=\"Quantity\" column=\"QUANTITYORDERED\" formatString=\"#,###\" aggregator=\"sum\">\n"
            + "  </Measure>\n"
            + "  <Measure name=\"Sales\" column=\"TOTALPRICE\" formatString=\"#,###\" aggregator=\"sum\">\n"
            + "  </Measure>\n"
            + " </Cube>\n"
            + "</Schema>\n");

         */
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("SteelWheels")
                .dimensions(List.of(
                    PrivateDimensionRBuilder.builder()
                        .type(DimensionTypeEnum.STANDARD_DIMENSION)
                        .name("Product")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .allMemberName("All Products")
                                .primaryKey("PRODUCTCODE")
                                .relation(new TableR("products"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Line")
                                        .table("products")
                                        .column("PRODUCTLINE")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(false)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Vendor")
                                        .table("products")
                                        .column("PRODUCTVENDOR")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(false)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Product")
                                        .table("products")
                                        .column("PRODUCTNAME")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .properties(List.of(
                                            PropertyRBuilder.builder()
                                                .name("Code")
                                                .column("PRODUCTCODE")
                                                .type(PropertyTypeEnum.STRING)
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Vendor")
                                                .column("PRODUCTVENDOR")
                                                .type(PropertyTypeEnum.STRING)
                                                .build(),
                                            PropertyRBuilder.builder()
                                                .name("Description")
                                                .column("PRODUCTDESCRIPTION")
                                                .type(PropertyTypeEnum.STRING)
                                                .build()
                                        ))
                                        .build()

                                ))
                                .build()
                        ))
                        .build()
                ))
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("SteelWheelsSales")
                        .cache(true)
                        .enabled(true)
                        .fact(new TableR("orderfact"))
                        .dimensionUsageOrDimensions(List.of(
                            PrivateDimensionRBuilder.builder()
                                .foreignKey("CUSTOMERNUMBER")
                                .name("Markets")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true)
                                        .allMemberName("All Markets")
                                        .primaryKey("CUSTOMERNUMBER")
                                        .relation(new TableR("customer_w_ter"))
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Territory")
                                                .column("TERRITORY")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(true)
                                                .levelType(LevelTypeEnum.REGULAR)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Country")
                                                .column("COUNTRY")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(true)
                                                .levelType(LevelTypeEnum.REGULAR)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("State Province")
                                                .column("STATE")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(true)
                                                .levelType(LevelTypeEnum.REGULAR)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("City")
                                                .column("CITY")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(true)
                                                .levelType(LevelTypeEnum.REGULAR)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build(),
                            PrivateDimensionRBuilder.builder()
                                .foreignKey("CUSTOMERNUMBER")
                                .name("Customers")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true)
                                        .allMemberName("All Customers")
                                        .primaryKey("CUSTOMERNUMBER")
                                        .relation(new TableR("customer_w_ter"))
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Customer")
                                                .column("CUSTOMERNAME")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(true)
                                                .levelType(LevelTypeEnum.REGULAR)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build(),
                            DimensionUsageRBuilder.builder()
                                .source("Product")
                                .name("MyProduct")
                                .foreignKey("PRODUCTCODE")
                                .build(),
                            PrivateDimensionRBuilder.builder()
                                .type(DimensionTypeEnum.TIME_DIMENSION)
                                .foreignKey("TIME_ID")
                                .name("Time")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true)
                                        .allMemberName("All Years")
                                        .primaryKey("TIME_ID")
                                        .relation(new TableR("time"))
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Years")
                                                .column("YEAR_ID")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(true)
                                                .levelType(LevelTypeEnum.TIME_YEARS)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Quarters")
                                                .column("QTR_NAME")
                                                .ordinalColumn("QTR_ID")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(false)
                                                .levelType(LevelTypeEnum.TIME_QUARTERS)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .build(),
                                            LevelRBuilder.builder()
                                                .name("Months")
                                                .column("MONTH_NAME")
                                                .ordinalColumn("MONTH_ID")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(false)
                                                .levelType(LevelTypeEnum.TIME_MONTHS)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build(),
                            PrivateDimensionRBuilder.builder()
                                .foreignKey("STATUS")
                                .name("Order Status")
                                .hierarchies(List.of(
                                    HierarchyRBuilder.builder()
                                        .hasAll(true)
                                        .allMemberName("All Status Types")
                                        .primaryKey("STATUS")
                                        .levels(List.of(
                                            LevelRBuilder.builder()
                                                .name("Type")
                                                .column("STATUS")
                                                .type(TypeEnum.STRING)
                                                .uniqueMembers(true)
                                                .levelType(LevelTypeEnum.REGULAR)
                                                .hideMemberIf(HideMemberIfEnum.NEVER)
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Quantity")
                                .column("QUANTITYORDERED")
                                .formatString("#,###")
                                .aggregator("sum")
                                .build(),
                            MeasureRBuilder.builder()
                                .name("Sales")
                                .column("TOTALPRICE")
                                .formatString("#,###")
                                .aggregator("sum")
                                .build()
                        ))
                        .build()
                ))
                .build();
        }
        */

    }

    public static class SteelWheelsSchemaTestModifier7 extends PojoMappingModifier {

        public SteelWheelsSchemaTestModifier7(CatalogMapping catalog) {
            super(catalog);
        }

        /*
                    "  <Role name=\"CUBE_SCHEMA_ALL\">\n "
            + "          <SchemaGrant access=\"all\" />\n "
            + "  </Role>\n "
            + "\n "
            + "  <Role name=\"CUBE_SALES_MINIMAL\">\n "
            + "          <SchemaGrant access=\"none\">\n "
            + "                  <CubeGrant cube=\"SteelWheelsSales\" access=\"all\">\n "
            + "                          <HierarchyGrant hierarchy=\"[Markets]\" access=\"none\"  />\n "
            + "                  </CubeGrant>\n "
            + "          </SchemaGrant>\n "
            + "  </Role>\n "
            + "  <Role name='DIM_MARKETAREA_MARKET_800'>\n "
            + "    <SchemaGrant access='none'>\n "
            + "        <CubeGrant cube='SteelWheelsSales' access='none'>\n "
            + "            <HierarchyGrant hierarchy='[Markets]'\n "
            + "                            access='custom' rollupPolicy=\"partial\"\n "
            + "                            topLevel='[Markets].[Territory]'>\n "
            + "                <MemberGrant member='[Markets].[Territory].[APAC]' access='all' />\n "
            + "            </HierarchyGrant>\n "
            + "        </CubeGrant>\n "
            + "    </SchemaGrant>\n "
            + "  </Role>\n "
            + "  <Role name='DIM_MARKETAREA_MARKET_850'>\n "
            + "    <SchemaGrant access='none'>\n "
            + "        <CubeGrant cube='SteelWheelsSales' access='none'>\n "
            + "            <HierarchyGrant hierarchy='[Markets]'\n "
            + "                            access='custom' rollupPolicy=\"partial\"\n "
            + "                            topLevel='[Markets].[Territory]'>\n "
            + "                <MemberGrant member='[Markets].[Territory].[EMEA]' access='all' />\n "
            + "            </HierarchyGrant>\n "
            + "        </CubeGrant>\n "
            + "    </SchemaGrant>\n "
            + "  </Role>\n ";

         */
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected List<MappingRole> schemaRoles(CatalogMapping catalogOriginal) {
            List<MappingRole> result = new ArrayList<>();
            result.addAll(super.schemaRoles(mappingSchemaOriginal));
            result.add(
                RoleRBuilder.builder()
                    .name("CUBE_SCHEMA_ALL")
                    .schemaGrants(List.of(
                        SchemaGrantRBuilder.builder()
                            .access(AccessEnum.ALL)
                            .build()
                    ))
                    .build());
            result.add(
                RoleRBuilder.builder()
                    .name("CUBE_SALES_MINIMAL")
                    .schemaGrants(List.of(
                        SchemaGrantRBuilder.builder()
                            .access(AccessEnum.NONE)
                            .cubeGrants(List.of(
                                CubeGrantRBuilder.builder()
                                    .cube("SteelWheelsSales")
                                    .access("all")
                                    .hierarchyGrants(List.of(
                                        HierarchyGrantRBuilder.builder()
                                            .hierarchy("[Markets]")
                                            .access(AccessEnum.NONE)
                                            .build()
                                    ))
                                    .build()
                            ))
                            .build()
                    ))
                    .build());
            result.add(
                RoleRBuilder.builder()
                    .name("DIM_MARKETAREA_MARKET_800")
                    .schemaGrants(List.of(
                        SchemaGrantRBuilder.builder()
                            .access(AccessEnum.NONE)
                            .cubeGrants(List.of(
                                CubeGrantRBuilder.builder()
                                    .cube("SteelWheelsSales")
                                    .access("none")
                                    .hierarchyGrants(List.of(
                                        HierarchyGrantRBuilder.builder()
                                            .hierarchy("[Markets]")
                                            .access(AccessEnum.CUSTOM)
                                            .rollupPolicy("partial")
                                            .topLevel("[Markets].[Territory]")
                                            .memberGrants(List.of(
                                                MemberGrantRBuilder.builder()
                                                    .member("[Markets].[Territory].[APAC]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build()
                                            ))
                                            .build()
                                    ))
                                    .build()
                            ))
                            .build()
                    ))
                    .build());

            result.add(
                RoleRBuilder.builder()
                    .name("DIM_MARKETAREA_MARKET_850")
                    .schemaGrants(List.of(
                        SchemaGrantRBuilder.builder()
                            .access(AccessEnum.NONE)
                            .cubeGrants(List.of(
                                CubeGrantRBuilder.builder()
                                    .cube("SteelWheelsSales")
                                    .access("none")
                                    .hierarchyGrants(List.of(
                                        HierarchyGrantRBuilder.builder()
                                            .hierarchy("[Markets]")
                                            .access(AccessEnum.CUSTOM)
                                            .rollupPolicy("partial")
                                            .topLevel("[Markets].[Territory]")
                                            .memberGrants(List.of(
                                                MemberGrantRBuilder.builder()
                                                    .member("[Markets].[Territory].[EMEA]")
                                                    .access(MemberGrantAccessEnum.ALL)
                                                    .build()
                                            ))
                                            .build()
                                    ))
                                    .build()
                            ))
                            .build()
                    ))
                    .build());
            return result;
        }
        */
    }

    public static class SteelWheelsSchemaTestModifier8 extends PojoMappingModifier {

        public SteelWheelsSchemaTestModifier8(CatalogMapping catalog) {
            super(catalog);
        }

        /*
            "<Schema name=\"SteelWheels\" description=\"1 admin role, 1 user role. For testing MemberGrant with caching in 5.1.2\"> \n"
            + "  <Dimension type=\"StandardDimension\" visible=\"true\" highCardinality=\"false\" name=\"Customers Dimension\">\n"
            + "    <Hierarchy name=\"Customers Hierarchy\" visible=\"true\" hasAll=\"true\" primaryKey=\"CUSTOMERNUMBER\" caption=\"Customer Hierarchy\">\n"
            + "      <Table name=\"customer_w_ter\">\n"
            + "      </Table>\n"
            + "      <Level name=\"Address\" visible=\"true\" column=\"ADDRESSLINE1\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\" caption=\"Address Line 1\">\n"
            + "      </Level>\n"
            + "      <Level name=\"Name\" visible=\"true\" column=\"CONTACTLASTNAME\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\" caption=\"Contact Last Name\">\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + " <Cube name=\"Customers Cube\" visible=\"true\" cache=\"true\" enabled=\"true\"> \n"
            + "     <Table name=\"orderfact\"> \n"
            + "     </Table> \n"
            + "     <DimensionUsage source=\"Customers Dimension\" name=\"Customer_DimUsage\" visible=\"true\" foreignKey=\"CUSTOMERNUMBER\" highCardinality=\"false\"> \n"
            + "     </DimensionUsage> \n"
            + "     <Measure name=\"Price Each\" column=\"PRICEEACH\" aggregator=\"sum\" visible=\"true\"> \n"
            + "     </Measure> \n"
            + "     <Measure name=\"Total Price\" column=\"TOTALPRICE\" aggregator=\"sum\" visible=\"true\"> \n"
            + "     </Measure> \n"
            + " </Cube> \n"
            + " <Role name=\"Administrator\"> \n"
            + "     <SchemaGrant access=\"all\"> \n"
            + "         <CubeGrant cube=\"Customers Cube\" access=\"all\"> \n"
            + "         </CubeGrant> \n"
            + "     </SchemaGrant> \n"
            + " </Role> \n"
            + " <Role name=\"Power User\"> \n"
            + "     <SchemaGrant access=\"none\"> \n"
            + "         <CubeGrant cube=\"Customers Cube\" access=\"all\"> \n"
            + "             <DimensionGrant dimension=\"Measures\" access=\"all\"> \n"
            + "             </DimensionGrant>\n"
            + "             <HierarchyGrant hierarchy=\"[Customer_DimUsage.Customers Hierarchy]\" topLevel=\"[Customer_DimUsage.Customers Hierarchy].[Name]\" rollupPolicy=\"partial\" access=\"custom\"> \n"
            + "                 <MemberGrant member=\"[Customer_DimUsage.Customers Hierarchy].[1 rue Alsace-Lorraine].[Roulet]\" access=\"all\"> \n"
            + "                 </MemberGrant> \n"
            + "             </HierarchyGrant> \n"
            + "         </CubeGrant> \n"
            + "     </SchemaGrant> \n"
            + " </Role>     \n"
            + "</Schema>\n";

         */
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("SteelWheels")
                .description("1 admin role, 1 user role. For testing MemberGrant with caching in 5.1.2")
                .dimensions(List.of(
                    PrivateDimensionRBuilder.builder()
                        .type(DimensionTypeEnum.STANDARD_DIMENSION)
                        .visible(true)
                        .name("Customers Dimension")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .name("Customers Hierarchy")
                                .visible(true)
                                .hasAll(true)
                                .primaryKey("CUSTOMERNUMBER")
                                .caption("Customer Hierarchy")
                                .relation(new TableR("customer_w_ter"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Address")
                                        .visible(true)
                                        .column("ADDRESSLINE1")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(false)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .caption("Address Line 1")
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Name")
                                        .visible(true)
                                        .column("CONTACTLASTNAME")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(false)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .caption("Contact Last Name")
                                        .build()
                                ))
                                .build()
                        ))
                    .build()
                ))
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("Customers Cube")
                        .visible(true)
                        .cache(true)
                        .enabled(true)
                        .fact(new TableR("orderfact"))
                        .dimensionUsageOrDimensions(List.of(
                            DimensionUsageRBuilder.builder()
                                .source("Customers Dimension")
                                .name("Customer_DimUsage")
                                .visible(true)
                                .foreignKey("CUSTOMERNUMBER")
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Price Each")
                                .column("PRICEEACH")
                                .aggregator("sum")
                                .visible(true)
                                .build(),
                            MeasureRBuilder.builder()
                                .name("Total Price")
                                .column("TOTALPRICE")
                                .visible(true)
                                .aggregator("sum")
                                .build()
                        ))
                        .build()
                ))
                .roles(List.of(
                    RoleRBuilder.builder()
                        .name("Administrator")
                        .schemaGrants(List.of(
                            SchemaGrantRBuilder.builder()
                                .access(AccessEnum.ALL)
                                .cubeGrants(List.of(
                                    CubeGrantRBuilder.builder()
                                        .cube("Customers Cube")
                                        .access("all")
                                        .build()
                                ))
                                .build()
                        ))
                        .build(),
                    RoleRBuilder.builder()
                        .name("Power User")
                        .schemaGrants(List.of(
                            SchemaGrantRBuilder.builder()
                                .access(AccessEnum.NONE)
                                .cubeGrants(List.of(
                                    CubeGrantRBuilder.builder()
                                        .cube("Customers Cube")
                                        .access("all")
                                        .dimensionGrants(List.of(
                                            DimensionGrantRBuilder.builder()
                                                .dimension("Measures")
                                                .access(AccessEnum.ALL)
                                                .build()
                                        ))
                                        .hierarchyGrants(List.of(
                                            HierarchyGrantRBuilder.builder()
                                                .hierarchy("[Customer_DimUsage.Customers Hierarchy]")
                                                .topLevel("[Customer_DimUsage.Customers Hierarchy].[Name]")
                                                .rollupPolicy("partial")
                                                .access(AccessEnum.CUSTOM)
                                                .memberGrants(List.of(
                                                    MemberGrantRBuilder.builder()
                                                        .member("[Customer_DimUsage.Customers Hierarchy].[1 rue Alsace-Lorraine].[Roulet]")
                                                        .access(MemberGrantAccessEnum.ALL)
                                                        .build()
                                                ))
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()

                ))
                .build();
        }
        */

    }

    public static class SteelWheelsSchemaTestModifier9 extends PojoMappingModifier {

        public SteelWheelsSchemaTestModifier9(CatalogMapping catalog) {
            super(catalog);
        }

        /*
            "<Schema name=\"SteelWheels\" description=\"1 admin role, 1 user role. For testing MemberGrant with caching in 5.1.2\"> \n"
            + "  <Dimension type=\"StandardDimension\" visible=\"true\" highCardinality=\"false\" name=\"Customers Dimension\">\n"
            + "    <Hierarchy name=\"Customers Hierarchy\" visible=\"true\" hasAll=\"true\" primaryKey=\"CUSTOMERNUMBER\" caption=\"Customer Hierarchy\">\n"
            + "      <Table name=\"customer_w_ter\">\n"
            + "      </Table>\n"
            + "      <Level name=\"Address\" visible=\"true\" column=\"ADDRESSLINE1\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\" caption=\"Address Line 1\">\n"
            + "      </Level>\n"
            + "      <Level name=\"Name\" visible=\"true\" column=\"CONTACTLASTNAME\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\" caption=\"Contact Last Name\">\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + " <Cube name=\"Customers Cube\" visible=\"true\" cache=\"true\" enabled=\"true\"> \n"
            + "     <Table name=\"orderfact\"> \n"
            + "     </Table> \n"
            + "     <DimensionUsage source=\"Customers Dimension\" name=\"Customer_DimUsage\" visible=\"true\" foreignKey=\"CUSTOMERNUMBER\" highCardinality=\"false\"> \n"
            + "     </DimensionUsage> \n"
            + "     <Measure name=\"Price Each\" column=\"PRICEEACH\" aggregator=\"sum\" visible=\"true\"> \n"
            + "     </Measure> \n"
            + "     <Measure name=\"Total Price\" column=\"TOTALPRICE\" aggregator=\"sum\" visible=\"true\"> \n"
            + "     </Measure> \n"
            + " </Cube> \n"
            + " <Role name=\"Administrator\"> \n"
            + "     <SchemaGrant access=\"all\"> \n"
            + "         <CubeGrant cube=\"Customers Cube\" access=\"all\"> \n"
            + "         </CubeGrant> \n"
            + "     </SchemaGrant> \n"
            + " </Role> \n"
            + " <Role name=\"Foo\"> \n"
            + "     <SchemaGrant access=\"none\"> \n"
            + "     </SchemaGrant> \n"
            + " </Role>\n"
            + " <Role name=\"Power User\"> \n"
            + "     <SchemaGrant access=\"none\"> \n"
            + "         <CubeGrant cube=\"Customers Cube\" access=\"all\"> \n"
            + "             <DimensionGrant dimension=\"Measures\" access=\"all\"> \n"
            + "             </DimensionGrant>\n"
            + "             <HierarchyGrant hierarchy=\"[Customer_DimUsage.Customers Hierarchy]\" topLevel=\"[Customer_DimUsage.Customers Hierarchy].[Name]\" rollupPolicy=\"partial\" access=\"custom\"> \n"
            + "                 <MemberGrant member=\"[Customer_DimUsage.Customers Hierarchy].[1 rue Alsace-Lorraine].[Roulet]\" access=\"all\"> \n"
            + "                 </MemberGrant> \n"
            + "             </HierarchyGrant> \n"
            + "         </CubeGrant> \n"
            + "     </SchemaGrant> \n"
            + " </Role>\n"
            + " <Role name=\"Administrator Union\"> \n"
            + "     <Union> \n"
            + "         <RoleUsage roleName=\"Administrator\"/> \n"
            + "         <RoleUsage roleName=\"Foo\"/> \n"
            + "     </Union> \n"
            + " </Role>\n"
            + " <Role name=\"Power User Union\"> \n"
            + "     <Union> \n"
            + "         <RoleUsage roleName=\"Power User\"/> \n"
            + "         <RoleUsage roleName=\"Foo\"/> \n"
            + "     </Union> \n"
            + " </Role>\n"
            + "</Schema>\n";

         */
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("SteelWheels")
                .description("1 admin role, 1 user role. For testing MemberGrant with caching in 5.1.2")
                .dimensions(List.of(
                    PrivateDimensionRBuilder.builder()
                        .type(DimensionTypeEnum.STANDARD_DIMENSION)
                        .visible(true)
                        .name("Customers Dimension")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .name("Customers Hierarchy")
                                .visible(true)
                                .hasAll(true)
                                .primaryKey("CUSTOMERNUMBER")
                                .caption("Customer Hierarchy")
                                .relation(new TableR("customer_w_ter"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Address")
                                        .visible(true)
                                        .column("ADDRESSLINE1")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(false)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .caption("Address Line 1")
                                        .build(),
                                    LevelRBuilder.builder()
                                        .name("Name")
                                        .visible(true)
                                        .column("CONTACTLASTNAME")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(false)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .caption("Contact Last Name")
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("Customers Cube")
                        .visible(true)
                        .cache(true)
                        .enabled(true)
                        .fact(new TableR("orderfact"))
                        .dimensionUsageOrDimensions(List.of(
                            DimensionUsageRBuilder.builder()
                                .source("Customers Dimension")
                                .name("Customer_DimUsage")
                                .visible(true)
                                .foreignKey("CUSTOMERNUMBER")
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Price Each")
                                .column("PRICEEACH")
                                .aggregator("sum")
                                .visible(true)
                                .build(),
                            MeasureRBuilder.builder()
                                .name("Total Price")
                                .column("TOTALPRICE")
                                .visible(true)
                                .aggregator("sum")
                                .build()
                        ))
                        .build()
                ))
                .roles(List.of(
                    RoleRBuilder.builder()
                        .name("Administrator")
                        .schemaGrants(List.of(
                            SchemaGrantRBuilder.builder()
                                .access(AccessEnum.ALL)
                                .cubeGrants(List.of(
                                    CubeGrantRBuilder.builder()
                                        .cube("Customers Cube")
                                        .access("all")
                                        .build()
                                ))
                                .build()
                        ))
                        .build(),
                    RoleRBuilder.builder()
                        .name("Foo")
                        .schemaGrants(List.of(
                            SchemaGrantRBuilder.builder()
                                .access(AccessEnum.NONE)
                                .build()
                        ))
                        .build(),
                    RoleRBuilder.builder()
                        .name("Power User")
                        .schemaGrants(List.of(
                            SchemaGrantRBuilder.builder()
                                .access(AccessEnum.NONE)
                                .cubeGrants(List.of(
                                    CubeGrantRBuilder.builder()
                                        .cube("Customers Cube")
                                        .access("all")
                                        .dimensionGrants(List.of(
                                            DimensionGrantRBuilder.builder()
                                                .dimension("Measures")
                                                .access(AccessEnum.ALL)
                                                .build()
                                        ))
                                        .hierarchyGrants(List.of(
                                            HierarchyGrantRBuilder.builder()
                                                .hierarchy("[Customer_DimUsage.Customers Hierarchy]")
                                                .topLevel("[Customer_DimUsage.Customers Hierarchy].[Name]")
                                                .rollupPolicy("partial")
                                                .access(AccessEnum.CUSTOM)
                                                .memberGrants(List.of(
                                                    MemberGrantRBuilder.builder()
                                                        .member("[Customer_DimUsage.Customers Hierarchy].[1 rue Alsace-Lorraine].[Roulet]")
                                                        .access(MemberGrantAccessEnum.ALL)
                                                        .build()
                                                ))
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build(),
                    RoleRBuilder.builder()
                        .name("Administrator Union")
                        .union(UnionRBuilder.builder()
                            .roleUsages(List.of(
                                RoleUsageRBuilder.builder()
                                    .roleName("Administrator")
                                    .build(),
                                RoleUsageRBuilder.builder()
                                    .roleName("Foo")
                                    .build()
                            ))
                            .build())
                        .build(),
                    RoleRBuilder.builder()
                        .name("Power User Union")
                        .union(UnionRBuilder.builder()
                            .roleUsages(List.of(
                                RoleUsageRBuilder.builder()
                                    .roleName("Power User")
                                    .build(),
                                RoleUsageRBuilder.builder()
                                    .roleName("Foo")
                                    .build()
                            ))
                            .build())
                        .build()
                ))
                .build();
        }
        */

    }

    public static class SteelWheelsSchemaTestModifier10 extends PojoMappingModifier {

        public SteelWheelsSchemaTestModifier10(CatalogMapping catalog) {
            super(catalog);
        }

        /*
            "<Schema name=\"rolesTest\">\n"
            + "  <Dimension visible=\"true\" highCardinality=\"false\" name=\"Dimension1\">\n"
            + "    <Hierarchy visible=\"true\" hasAll=\"true\" allMemberName=\"All Products\" primaryKey=\"PRODUCTCODE\">\n"
            + "      <Table name=\"products\">\n"
            + "      </Table>\n"
            + "      <Level name=\"Level1\" visible=\"true\" column=\"PRODUCTLINE\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension visible=\"true\" highCardinality=\"false\" name=\"Dimension2\">\n"
            + "    <Hierarchy visible=\"true\" hasAll=\"true\" allMemberName=\"All Customers\" primaryKey=\"CUSTOMERNUMBER\">\n"
            + "      <Table name=\"customer_w_ter\">\n"
            + "      </Table>\n"
            + "      <Level name=\"Level2\" visible=\"true\" column=\"CUSTOMERNAME\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Cube name=\"rolesTest1\" visible=\"true\" cache=\"true\" enabled=\"true\">\n"
            + "    <Table name=\"orderfact\" alias=\"rolesTest1\">\n"
            + "    </Table>\n"
            + "    <DimensionUsage source=\"Dimension1\" name=\"Dimension1\" visible=\"true\" foreignKey=\"PRODUCTCODE\" highCardinality=\"false\">\n"
            + "    </DimensionUsage>\n"
            + "    <DimensionUsage source=\"Dimension2\" name=\"Dimension2\" visible=\"true\" foreignKey=\"CUSTOMERNUMBER\" highCardinality=\"false\">\n"
            + "    </DimensionUsage>\n"
            + "    <Measure name=\"Measure1\" column=\"QUANTITYORDERED\" aggregator=\"sum\">\n"
            + "    </Measure>\n"
            + "  </Cube>\n"
            + "  <Cube name=\"rolesTest2\" visible=\"true\" cache=\"true\" enabled=\"true\">\n"
            + "    <Table name=\"orderfact\" alias=\"rolesTest2\">\n"
            + "    </Table>\n"
            + "    <DimensionUsage source=\"Dimension2\" name=\"Dimension2\" visible=\"true\" foreignKey=\"CUSTOMERNUMBER\" highCardinality=\"false\">\n"
            + "    </DimensionUsage>\n"
            + "    <Measure name=\"Measure2:Internal\" column=\"TOTALPRICE\" aggregator=\"sum\">\n"
            + "    </Measure>\n"
            + "  </Cube>\n"
            + "  <VirtualCube enabled=\"true\" name=\"rolesTest\" defaultMeasure=\"Quantity\" caption=\"Test\" visible=\"true\">\n"
            + "    <CubeUsages>\n"
            + "      <CubeUsage cubeName=\"rolesTest1\" ignoreUnrelatedDimensions=\"true\">\n"
            + "      </CubeUsage>\n"
            + "      <CubeUsage cubeName=\"rolesTest2\" ignoreUnrelatedDimensions=\"true\">\n"
            + "      </CubeUsage>\n"
            + "    </CubeUsages>\n"
            + "    <VirtualCubeDimension cubeName=\"rolesTest1\" visible=\"true\" highCardinality=\"false\" name=\"Dimension1\">\n"
            + "    </VirtualCubeDimension>\n"
            + "    <VirtualCubeDimension cubeName=\"rolesTest1\" visible=\"true\" highCardinality=\"false\" name=\"Dimension2\">\n"
            + "    </VirtualCubeDimension>\n"
            + "    <VirtualCubeMeasure cubeName=\"rolesTest1\" name=\"[Measures].[Measure1]\" visible=\"true\">\n"
            + "    </VirtualCubeMeasure>\n"
            + "    <VirtualCubeMeasure cubeName=\"rolesTest2\" name=\"[Measures].[Measure2:Internal]\" visible=\"true\">\n"
            + "    </VirtualCubeMeasure>\n"
            + "    <CalculatedMember name=\"Measure2\" formula=\"ValidMeasure([Measures].[Measure2:Internal])\" dimension=\"Measures\">\n"
            + "    </CalculatedMember>\n"
            + "  </VirtualCube>\n"
            + "  <Role name=\"Administrator\">\n"
            + "    <SchemaGrant access=\"all\">\n"
            + "    </SchemaGrant>\n"
            + "  </Role>\n"
            + "  <Role name=\"Report Author\">\n"
            + "    <SchemaGrant access=\"custom\">\n"
            + "      <CubeGrant cube=\"rolesTest\" access=\"all\">\n"
            + "        <HierarchyGrant hierarchy=\"[Dimension2]\" topLevel=\"[Dimension2].[Level2]\" access=\"custom\">\n"
            + "          <MemberGrant member=\"[Dimension2].[BG&#38;E Collectables]\" access=\"all\">\n"
            + "          </MemberGrant>\n"
            + "          <MemberGrant member=\"[Dimension2].[Baane Mini Imports]\" access=\"all\">\n"
            + "          </MemberGrant>\n"
            + "          <MemberGrant member=\"[Dimension2].[Blauer See Auto, Co.]\" access=\"all\">\n"
            + "          </MemberGrant>\n"
            + "          <MemberGrant member=\"[Dimension2].[Boards &#38; Toys Co.]\" access=\"all\">\n"
            + "          </MemberGrant>\n"
            + "        </HierarchyGrant>\n"
            + "      </CubeGrant>\n"
            + "    </SchemaGrant>\n"
            + "  </Role>\n"
            + "</Schema>\n";

         */
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("rolesTest")
                .dimensions(List.of(
                    PrivateDimensionRBuilder.builder()
                        .visible(true)
                        .name("Dimension1")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .name("Customers Hierarchy")
                                .visible(true)
                                .hasAll(true)
                                .allMemberName("All Products")
                                .primaryKey("PRODUCTCODE")
                                .relation(new TableR("products"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Level1")
                                        .visible(true)
                                        .column("PRODUCTLINE")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(false)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build()
                                ))
                                .build()
                        ))
                        .build(),
                    PrivateDimensionRBuilder.builder()
                        .visible(true)
                        .name("Dimension2")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .visible(true)
                                .hasAll(true)
                                .allMemberName("All Customers")
                                .primaryKey("CUSTOMERNUMBER")
                                .relation(new TableR("customer_w_ter"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Level2")
                                        .visible(true)
                                        .column("CUSTOMERNAME")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(false)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("rolesTest1")
                        .visible(true)
                        .cache(true)
                        .enabled(true)
                        .fact(new TableR(null,"orderfact", "rolesTest1", List.of()))
                        .dimensionUsageOrDimensions(List.of(
                            DimensionUsageRBuilder.builder()
                                .source("Dimension1")
                                .name("Dimension1")
                                .visible(true)
                                .foreignKey("PRODUCTCODE")
                                .build(),
                            DimensionUsageRBuilder.builder()
                                .source("Dimension2")
                                .name("Dimension2")
                                .visible(true)
                                .foreignKey("CUSTOMERNUMBER")
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Measure1")
                                .column("QUANTITYORDERED")
                                .aggregator("sum")
                                .build()
                        ))
                        .build(),
                    CubeRBuilder.builder()
                        .name("rolesTest2")
                        .visible(true)
                        .cache(true)
                        .enabled(true)
                        .fact(new TableR(null,"orderfact", "rolesTest2", List.of()))
                        .dimensionUsageOrDimensions(List.of(
                            DimensionUsageRBuilder.builder()
                                .source("Dimension2")
                                .name("Dimension2")
                                .visible(true)
                                .foreignKey("CUSTOMERNUMBER")
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Measure2:Internal")
                                .column("TOTALPRICE")
                                .aggregator("sum")
                                .build()
                        ))
                        .build()
                ))
                .virtualCubes(List.of(
                    VirtualCubeRBuilder.builder()
                        .enabled(true)
                        .name("rolesTest")
                        .defaultMeasure("Quantity")
                        .caption("Test")
                        .visible(true)
                        .cubeUsages(List.of(
                            CubeUsageRBuilder.builder()
                                .cubeName("rolesTest1")
                                .ignoreUnrelatedDimensions(true)
                                .build(),
                            CubeUsageRBuilder.builder()
                                .cubeName("rolesTest2")
                                .ignoreUnrelatedDimensions(true)
                                .build()
                        ))
                        .virtualCubeDimensions(List.of(
                            VirtualCubeDimensionRBuilder.builder()
                                .cubeName("rolesTest1").visible(true).name("Dimension1")
                                .build(),
                            VirtualCubeDimensionRBuilder.builder()
                                .cubeName("rolesTest1").visible(true).name("Dimension2").build()
                        ))
                        .virtualCubeMeasures(List.of(
                            VirtualCubeMeasureRBuilder.builder()
                                .cubeName("rolesTest1")
                                .name("[Measures].[Measure1]")
                                .visible(true)
                                .build(),
                            VirtualCubeMeasureRBuilder.builder()
                                .cubeName("rolesTest2")
                                .name("[Measures].[Measure2:Internal]")
                                .visible(true)
                                .build()
                        ))
                        .calculatedMembers(List.of(
                            CalculatedMemberRBuilder.builder()
                                .name("Measure2")
                                .formula("ValidMeasure([Measures].[Measure2:Internal])")
                                .dimension("Measures")
                                .build()
                        ))
                        .build()
                ))
                .roles(List.of(
                    RoleRBuilder.builder()
                        .name("Administrator")
                        .schemaGrants(List.of(
                            SchemaGrantRBuilder.builder()
                                .access(AccessEnum.ALL)
                                .build()
                        ))
                        .build(),
                    RoleRBuilder.builder()
                        .name("Report Author")
                        .schemaGrants(List.of(
                            SchemaGrantRBuilder.builder()
                                .access(AccessEnum.CUSTOM)
                                .cubeGrants(List.of(
                                    CubeGrantRBuilder.builder()
                                        .cube("rolesTest")
                                        .access("all")
                                        .hierarchyGrants(List.of(
                                            HierarchyGrantRBuilder.builder()
                                                .hierarchy("[Dimension2]")
                                                .topLevel("[Dimension2].[Level2]")
                                                .rollupPolicy("partial")
                                                .access(AccessEnum.CUSTOM)
                                                .memberGrants(List.of(
                                                    MemberGrantRBuilder.builder()
                                                        .member("[Dimension2].[BG&E Collectables]")
                                                        .access(MemberGrantAccessEnum.ALL)
                                                        .build(),
                                                    MemberGrantRBuilder.builder()
                                                        .member("[Dimension2].[Baane Mini Imports]")
                                                        .access(MemberGrantAccessEnum.ALL)
                                                        .build(),
                                                    MemberGrantRBuilder.builder()
                                                        .member("[Dimension2].[Blauer See Auto, Co.]")
                                                        .access(MemberGrantAccessEnum.ALL)
                                                        .build(),
                                                    MemberGrantRBuilder.builder()
                                                        .member("[Dimension2].[Boards & Toys Co.]")
                                                        .access(MemberGrantAccessEnum.ALL)
                                                        .build()
                                                ))
                                                .build()
                                        ))
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .build();
        }
		*/
    }

    public static class XmlaBasicTestModifier extends PojoMappingModifier {

        public XmlaBasicTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        /*
            + "<?xml version=\"1.0\"?>\n"
            + "<Schema name=\"foodmart-xmla-alias-bug\">\n"
            + "  <Dimension name=\"Customers\">\n"
            + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Customers\" primaryKey=\"customer_id\">\n"
            + "      <Table name=\"customer\"/>\n"
            + "      <Level name=\"Country\" column=\"country\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\"\n"
            + "             hideMemberIf=\"Never\"/>\n"
            + "    </Hierarchy>\n" + "  </Dimension>\n" + "\n"
            + "<Cube name=\"Sales\" defaultMeasure=\"Unit Sales\" cache=\"true\" enabled=\"true\">\n"
            + "  <Table name=\"sales_fact_1998\" />\n"
            + "  <DimensionUsage source=\"Customers\" caption=\"Customers\" name=\"Customers-Alias\" visible=\"true\"\n"
            + "                  foreignKey=\"customer_id\" />\n"
            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "</Cube>\n" + "\n" + "</Schema>";

         */
        /* TODO: DENIS MAPPING-MODIFIER
        @Override
        protected MappingSchema modifyMappingSchema(CatalogMapping catalogOriginal) {
            return SchemaRBuilder.builder()
                .name("foodmart-xmla-alias-bug")
                .dimensions(List.of(
                    PrivateDimensionRBuilder.builder()
                        .name("Customers")
                        .hierarchies(List.of(
                            HierarchyRBuilder.builder()
                                .hasAll(true)
                                .allMemberName("All Customers")
                                .primaryKey("customer_id")
                                .relation(new TableR("customer"))
                                .levels(List.of(
                                    LevelRBuilder.builder()
                                        .name("Country")
                                        .column("country")
                                        .type(TypeEnum.STRING)
                                        .uniqueMembers(true)
                                        .levelType(LevelTypeEnum.REGULAR)
                                        .hideMemberIf(HideMemberIfEnum.NEVER)
                                        .build()
                                ))
                                .build()
                        ))
                        .build()
                ))
                .cubes(List.of(
                    CubeRBuilder.builder()
                        .name("Sales")
                        .defaultMeasure("Unit Sales")
                        .cache(true)
                        .enabled(true)
                        .fact(new TableR("sales_fact_1998"))
                        .dimensionUsageOrDimensions(List.of(
                            DimensionUsageRBuilder.builder()
                                .source("Customers")
                                .caption("Customers")
                                .name("Customers-Alias")
                                .visible(true)
                                .foreignKey("customer_id")
                                .build()
                        ))
                        .measures(List.of(
                            MeasureRBuilder.builder()
                                .name("Unit Sales")
                                .column("unit_sales")
                                .aggregator("sum")
                                .formatString("Standard")
                                .build()
                        ))
                        .build()
                ))
                .build();
        }
		*/
    }

}
