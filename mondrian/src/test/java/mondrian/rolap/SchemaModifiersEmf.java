/*
 * Copyright (c) 2025 Contributors to the Eclipse Foundation.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *   SmartCity Jena - initial
 *   Stefan Bischof (bipolis.org) - initial
 */
package mondrian.rolap;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Optional;

import org.eclipse.daanse.jdbc.db.dialect.api.Dialect;
import org.eclipse.daanse.olap.api.element.Member;
import org.eclipse.daanse.olap.api.result.Position;
import org.eclipse.daanse.olap.api.result.Result;
import org.eclipse.daanse.rolap.mapping.api.model.AccessRoleMapping;
import org.eclipse.daanse.rolap.mapping.api.model.CalculatedMemberMapping;
import org.eclipse.daanse.rolap.mapping.api.model.CatalogMapping;
import org.eclipse.daanse.rolap.mapping.api.model.CubeMapping;
import org.eclipse.daanse.rolap.mapping.api.model.DatabaseSchemaMapping;
import org.eclipse.daanse.rolap.mapping.api.model.DimensionConnectorMapping;
import org.eclipse.daanse.rolap.mapping.api.model.HierarchyMapping;
import org.eclipse.daanse.rolap.mapping.api.model.MeasureGroupMapping;
import org.eclipse.daanse.rolap.mapping.api.model.MeasureMapping;
import org.eclipse.daanse.rolap.mapping.api.model.MemberMapping;
import org.eclipse.daanse.rolap.mapping.api.model.PhysicalCubeMapping;
import org.eclipse.daanse.rolap.mapping.api.model.VirtualCubeMapping;
import org.eclipse.daanse.rolap.mapping.api.model.enums.AccessCatalog;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.AccessCatalogGrant;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.AccessCubeGrant;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.AccessDimensionGrant;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.AccessHierarchyGrant;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.AccessMemberGrant;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.AccessRole;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.AggregationColumnName;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.AggregationExclude;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.AggregationForeignKey;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.AggregationLevel;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.AggregationMeasure;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.AggregationName;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Annotation;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.AvgMeasure;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.CalculatedMember;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.CalculatedMemberProperty;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Catalog;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.CatalogAccess;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.CellFormatter;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Column;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.ColumnInternalDataType;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.ColumnType;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.CountMeasure;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Cube;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.CubeAccess;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.CubeConnector;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.DatabaseSchema;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.DimensionAccess;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.DimensionConnector;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.ExplicitHierarchy;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.HideMemberIf;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Hierarchy;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.HierarchyAccess;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.InlineTable;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.InlineTableQuery;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.JoinQuery;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.JoinedQueryElement;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Level;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.LevelDefinition;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.MeasureGroup;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.MemberAccess;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.MemberFormatter;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.MemberProperty;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.MemberPropertyFormatter;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.PhysicalColumn;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.PhysicalCube;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.PhysicalTable;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RolapMappingFactory;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RollupPolicy;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Row;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RowValue;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.SQLExpressionColumn;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.SqlSelectQuery;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.SqlStatement;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.SqlView;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.StandardDimension;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.SumMeasure;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.TableQuery;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.TimeDimension;
import org.eclipse.daanse.rolap.mapping.emf.rolapmapping.VirtualCube;
import org.eclipse.daanse.rolap.mapping.instance.emf.complex.foodmart.CatalogSupplier;
import org.eclipse.daanse.rolap.mapping.modifier.emf.EmfMappingModifier;

import mondrian.test.FormatterUtil;

public class SchemaModifiersEmf {

    public static class NonEmptyTestModifier6 extends EmfMappingModifier {

        /*
         * "<?xml version=\"1.0\"?>\n" + "<Schema name=\"custom\">\n" +
         * "  <Dimension name=\"Store\">\n" +
         * "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n" +
         * "      <Table name=\"store\"/>\n" +
         * "      <Level name=\"Store Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
         * +
         * "      <Level name=\"Store State\" column=\"store_state\" uniqueMembers=\"true\"/>\n"
         * +
         * "      <Level name=\"Store City\" column=\"store_city\" uniqueMembers=\"false\"/>\n"
         * +
         * "      <Level name=\"Store Name\" column=\"store_name\" uniqueMembers=\"true\">\n"
         * + "      </Level>\n" + "    </Hierarchy>\n" + "  </Dimension>\n" +
         * "  <Dimension name=\"Time\" type=\"TimeDimension\">\n" +
         * "    <Hierarchy hasAll=\"true\" primaryKey=\"time_id\">\n" +
         * "      <Table name=\"time_by_day\"/>\n" +
         * "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
         * + "          levelType=\"TimeYears\"/>\n" +
         * "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
         * + "          levelType=\"TimeQuarters\"/>\n" +
         * "      <Level name=\"Month\" column=\"month_of_year\" uniqueMembers=\"false\" type=\"Numeric\"\n"
         * + "          levelType=\"TimeMonths\"/>\n" + "    </Hierarchy>\n" +
         * "  </Dimension>\n" +
         * "  <Cube name=\"Sales1\" defaultMeasure=\"Unit Sales\">\n" +
         * "    <Table name=\"sales_fact_1997\">\n" +
         * "        <AggExclude name=\"agg_c_special_sales_fact_1997\" />" +
         * "    </Table>\n" +
         * "    <DimensionUsage name=\"Store\" source=\"Store\" foreignKey=\"store_id\"/>\n"
         * +
         * "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
         * +
         * "    <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
         * + "      formatString=\"Standard\"/>\n" +
         * "    <Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\"\n"
         * + "      formatString=\"#,###.00\"/>\n" +
         * "    <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
         * + "      formatString=\"#,###.00\"/>\n" + "  </Cube>\n" +
         * "<Role name=\"Role1\">\n" + "  <SchemaGrant access=\"none\">\n" +
         * "    <CubeGrant cube=\"Sales1\" access=\"all\">\n" +
         * "      <HierarchyGrant hierarchy=\"[Time]\" access=\"custom\" rollupPolicy=\"partial\">\n"
         * + "        <MemberGrant member=\"[Time].[Year].[1997]\" access=\"all\"/>\n" +
         * "      </HierarchyGrant>\n" + "    </CubeGrant>\n" + "  </SchemaGrant>\n" +
         * "</Role> \n" + "</Schema>\n";
         */

        private static final StandardDimension storeDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy storyHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final ExplicitHierarchy timeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final TimeDimension timeDimension = RolapMappingFactory.eINSTANCE.createTimeDimension();

        private static final SumMeasure m = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final SumMeasure measureStoreCost = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final SumMeasure measureStoreSales = RolapMappingFactory.eINSTANCE.createSumMeasure();

        private static final AggregationExclude aggregationExclude = RolapMappingFactory.eINSTANCE
                .createAggregationExclude();
        private static final TableQuery querySales1Cube = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final PhysicalCube sales1Cube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final DimensionConnector dimensionConnectorStore = RolapMappingFactory.eINSTANCE
                .createDimensionConnector();
        private static final DimensionConnector dimensionConnectorTime = RolapMappingFactory.eINSTANCE
                .createDimensionConnector();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        private static final AccessMemberGrant memberGrant = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessHierarchyGrant hierarchyGrant = RolapMappingFactory.eINSTANCE
                .createAccessHierarchyGrant();
        private static final AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
        private static final AccessCatalogGrant accessCatalogGrant = RolapMappingFactory.eINSTANCE
                .createAccessCatalogGrant();
        private static final AccessRole role1 = RolapMappingFactory.eINSTANCE.createAccessRole();

        static {
            storyHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);
            storyHierarchy.setQuery(CatalogSupplier.QUERY_STORE);
            storyHierarchy.getLevels()
                    .addAll(List.of(CatalogSupplier.LEVEL_STORE_COUNTRY, CatalogSupplier.LEVEL_STORE_STATE,
                            CatalogSupplier.LEVEL_STORE_CITY, CatalogSupplier.LEVEL_STORE_NAME));

            timeHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);
            timeHierarchy.setQuery(CatalogSupplier.QUERY_TIME_BY_DAY);
            timeHierarchy.getLevels().addAll(
                    List.of(CatalogSupplier.LEVEL_YEAR, CatalogSupplier.LEVEL_QUARTER, CatalogSupplier.LEVEL_MONTH));

            storeDimension.setName("Store");
            storeDimension.getHierarchies().add(storyHierarchy);

            timeDimension.setName("Time");
            timeDimension.getHierarchies().add(timeHierarchy);

            m.setName("Unit Sales");
            m.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            m.setFormatString("Standard");

            measureStoreCost.setName("Store Cost");
            measureStoreCost.setColumn(CatalogSupplier.COLUMN_STORE_COST_SALESFACT);
            measureStoreCost.setFormatString("#,###.00");

            measureStoreSales.setName("Store Sales");
            measureStoreSales.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);
            measureStoreSales.setFormatString("#,###.00");

            aggregationExclude.setName("agg_c_special_sales_fact_1997");

            querySales1Cube.setTable(CatalogSupplier.TABLE_SALES_FACT);
            querySales1Cube.getAggregationExcludes().add(aggregationExclude);

            dimensionConnectorStore.setOverrideDimensionName("Store");
            dimensionConnectorStore.setDimension(storeDimension);
            dimensionConnectorStore.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);

            dimensionConnectorStore.setOverrideDimensionName("Time");
            dimensionConnectorStore.setDimension(timeDimension);
            dimensionConnectorStore.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);

            measureGroup.getMeasures().addAll(List.of(m, measureStoreCost, measureStoreSales));

            sales1Cube.setName("Sales1");
            sales1Cube.setDefaultMeasure(m);
            sales1Cube.setQuery(querySales1Cube);
            sales1Cube.getDimensionConnectors().add(dimensionConnectorStore);
            sales1Cube.getDimensionConnectors().add(dimensionConnectorTime);
            sales1Cube.getMeasureGroups().add(measureGroup);

            memberGrant.setMember("[Time].[Year].[1997]");
            memberGrant.setMemberAccess(MemberAccess.ALL);

            hierarchyGrant.setHierarchy(timeHierarchy);
            hierarchyGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrant.setRollupPolicy(RollupPolicy.PARTIAL);
            hierarchyGrant.getMemberGrants().add(memberGrant);

            cubeGrant.setCube(sales1Cube);
            cubeGrant.setCubeAccess(CubeAccess.ALL);
            cubeGrant.getHierarchyGrants().add(hierarchyGrant);

            accessCatalogGrant.setCatalogAccess(CatalogAccess.NONE);
            accessCatalogGrant.getCubeGrants().add(cubeGrant);

            role1.setName("Role1");
            role1.getAccessCatalogGrants().add(accessCatalogGrant);

        }

        public NonEmptyTestModifier6(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName("custom");
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().add(sales1Cube);
            catalog.getAccessRoles().add(role1);
            return catalog;
        }
    }

    /*
    + "<Role name=\"No_WA_State\">\n"
        + "  <SchemaGrant access=\"none\">\n"
        + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
        + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\"partial\">\n"
        + "        <MemberGrant member=\"[Customers].[USA].[WA]\" access=\"none\"/>\n"
        + "        <MemberGrant member=\"[Customers].[USA].[OR]\" access=\"all\"/>\n"
        + "        <MemberGrant member=\"[Customers].[USA].[CA]\" access=\"all\"/>\n"
        + "        <MemberGrant member=\"[Customers].[Canada]\" access=\"all\"/>\n"
        + "        <MemberGrant member=\"[Customers].[Mexico]\" access=\"all\"/>\n"
        + "      </HierarchyGrant>\n"
        + "    </CubeGrant>\n"
        + "  </SchemaGrant>\n"
        + "</Role>\n";
     */
    public static class RoleRestrictionWorksWaRoleDef extends EmfMappingModifier {

        private static final AccessMemberGrant memberGrantWA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessMemberGrant memberGrantOR = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessMemberGrant memberGrantCA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessMemberGrant memberGrantCanada = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessMemberGrant memberGrantMexico = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessHierarchyGrant hierarchyGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
        private static final AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
        private static final AccessCatalogGrant accessCatalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
        private static final AccessRole roleNoWAState = RolapMappingFactory.eINSTANCE.createAccessRole();

        static {
            memberGrantWA.setMember("[Customers].[USA].[WA]");
            memberGrantWA.setMemberAccess(MemberAccess.NONE);

            memberGrantOR.setMember("[Customers].[USA].[OR]");
            memberGrantOR.setMemberAccess(MemberAccess.ALL);

            memberGrantCA.setMember("[Customers].[USA].[CA]");
            memberGrantCA.setMemberAccess(MemberAccess.ALL);

            memberGrantCanada.setMember("[Customers].[Canada]");
            memberGrantCanada.setMemberAccess(MemberAccess.ALL);

            memberGrantMexico.setMember("[Customers].[Mexico]");
            memberGrantMexico.setMemberAccess(MemberAccess.ALL);

            hierarchyGrant.setHierarchy(CatalogSupplier.HIERARCHY_CUSTOMER);
            hierarchyGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrant.setRollupPolicy(RollupPolicy.PARTIAL);
            hierarchyGrant.getMemberGrants().addAll(List.of(
                memberGrantWA, memberGrantOR, memberGrantCA, memberGrantCanada, memberGrantMexico));

            cubeGrant.setCube(CatalogSupplier.CUBE_SALES);
            cubeGrant.setCubeAccess(CubeAccess.ALL);
            cubeGrant.getHierarchyGrants().add(hierarchyGrant);

            accessCatalogGrant.setCatalogAccess(CatalogAccess.NONE);
            accessCatalogGrant.getCubeGrants().add(cubeGrant);

            roleNoWAState.setName("No_WA_State");
            roleNoWAState.getAccessCatalogGrants().add(accessCatalogGrant);
        }

        public RoleRestrictionWorksWaRoleDef(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getAccessRoles().addAll((Collection<? extends AccessRole>) catalogAccessRoles(catalog2));
            catalog.getAccessRoles().add(roleNoWAState);
            return catalog;
        }
    }

    /*
    + "<Role name=\"Only_DF_State\">\n"
        + "  <SchemaGrant access=\"none\">\n"
        + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
        + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\"partial\">\n"
        + "        <MemberGrant member=\"[Customers].[USA].[WA]\" access=\"all\"/>\n"
        + "        <MemberGrant member=\"[Customers].[USA].[OR]\" access=\"all\"/>\n"
        + "        <MemberGrant member=\"[Customers].[USA].[CA]\" access=\"all\"/>\n"
        + "        <MemberGrant member=\"[Customers].[Canada]\" access=\"all\"/>\n"
        + "        <MemberGrant member=\"[Customers].[Mexico].[DF]\" access=\"all\"/>\n"
        + "      </HierarchyGrant>\n"
        + "    </CubeGrant>\n"
        + "  </SchemaGrant>\n"
        + "</Role>\n";
     */
    public static class RoleRestrictionWorksDfRoleDef extends EmfMappingModifier {

        private static final AccessMemberGrant memberGrantWA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessMemberGrant memberGrantOR = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessMemberGrant memberGrantCA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessMemberGrant memberGrantCanada = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessMemberGrant memberGrantMexicoDF = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessHierarchyGrant hierarchyGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
        private static final AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
        private static final AccessCatalogGrant accessCatalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
        private static final AccessRole roleOnlyDFState = RolapMappingFactory.eINSTANCE.createAccessRole();

        static {
            memberGrantWA.setMember("[Customers].[USA].[WA]");
            memberGrantWA.setMemberAccess(MemberAccess.ALL);

            memberGrantOR.setMember("[Customers].[USA].[OR]");
            memberGrantOR.setMemberAccess(MemberAccess.ALL);

            memberGrantCA.setMember("[Customers].[USA].[CA]");
            memberGrantCA.setMemberAccess(MemberAccess.ALL);

            memberGrantCanada.setMember("[Customers].[Canada]");
            memberGrantCanada.setMemberAccess(MemberAccess.ALL);

            memberGrantMexicoDF.setMember("[Customers].[Mexico].[DF]");
            memberGrantMexicoDF.setMemberAccess(MemberAccess.ALL);

            hierarchyGrant.setHierarchy(CatalogSupplier.HIERARCHY_CUSTOMER);
            hierarchyGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrant.setRollupPolicy(RollupPolicy.PARTIAL);
            hierarchyGrant.getMemberGrants().addAll(List.of(
                memberGrantWA, memberGrantOR, memberGrantCA, memberGrantCanada, memberGrantMexicoDF));

            cubeGrant.setCube(CatalogSupplier.CUBE_SALES);
            cubeGrant.setCubeAccess(CubeAccess.ALL);
            cubeGrant.getHierarchyGrants().add(hierarchyGrant);

            accessCatalogGrant.setCatalogAccess(CatalogAccess.NONE);
            accessCatalogGrant.getCubeGrants().add(cubeGrant);

            roleOnlyDFState.setName("Only_DF_State");
            roleOnlyDFState.getAccessCatalogGrants().add(accessCatalogGrant);
        }

        public RoleRestrictionWorksDfRoleDef(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getAccessRoles().addAll((Collection<? extends AccessRole>) catalogAccessRoles(catalog2));
            catalog.getAccessRoles().add(roleOnlyDFState);
            return catalog;
        }
    }

    public static class CustomCountMeasureCubeName extends EmfMappingModifier {

        private static final StandardDimension storeTypeDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy storeTypeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level storeTypeLevel = RolapMappingFactory.eINSTANCE.createLevel();

        private static final StandardDimension hasCoffeeBarDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy hasCoffeeBarHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level hasCoffeeBarLevel = RolapMappingFactory.eINSTANCE.createLevel();

        private static final SumMeasure storeSqftMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final SumMeasure grocerySqftMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final CountMeasure countMeasure = RolapMappingFactory.eINSTANCE.createCountMeasure();

        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
        private static final TableQuery storeQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final DimensionConnector storeTypeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector storeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector hasCoffeeBarConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        private static final PhysicalCube storeWithCountMCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();

        static {
            // Store Type Level
            storeTypeLevel.setName("Store Type");
            storeTypeLevel.setVisible(true);
            storeTypeLevel.setColumn(CatalogSupplier.COLUMN_STORE_TYPE_STORE);
            storeTypeLevel.setColumnType(ColumnInternalDataType.STRING);
            storeTypeLevel.setUniqueMembers(true);
            storeTypeLevel.setType(LevelDefinition.REGULAR);
            storeTypeLevel.setHideMemberIf(HideMemberIf.NEVER);

            // Store Type Hierarchy
            storeTypeHierarchy.setVisible(true);
            storeTypeHierarchy.setHasAll(true);
            storeTypeHierarchy.getLevels().add(storeTypeLevel);

            // Store Type Dimension
            storeTypeDimension.setName("Store Type");
            storeTypeDimension.getHierarchies().add(storeTypeHierarchy);

            // Has Coffee Bar Level
            hasCoffeeBarLevel.setName("Has coffee bar");
            hasCoffeeBarLevel.setVisible(true);
            hasCoffeeBarLevel.setColumn(CatalogSupplier.COLUMN_COFFEE_BAR_STORE);
            hasCoffeeBarLevel.setColumnType(ColumnInternalDataType.BOOLEAN);
            hasCoffeeBarLevel.setUniqueMembers(true);
            hasCoffeeBarLevel.setType(LevelDefinition.REGULAR);
            hasCoffeeBarLevel.setHideMemberIf(HideMemberIf.NEVER);

            // Has Coffee Bar Hierarchy
            hasCoffeeBarHierarchy.setVisible(true);
            hasCoffeeBarHierarchy.setHasAll(true);
            hasCoffeeBarHierarchy.getLevels().add(hasCoffeeBarLevel);

            // Has Coffee Bar Dimension
            hasCoffeeBarDimension.setName("Has coffee bar");
            hasCoffeeBarDimension.getHierarchies().add(hasCoffeeBarHierarchy);

            // Measures
            storeSqftMeasure.setName("Store Sqft");
            storeSqftMeasure.setColumn(CatalogSupplier.COLUMN_STORE_SQFT_STORE);
            storeSqftMeasure.setFormatString("#,###");

            grocerySqftMeasure.setName("Grocery Sqft");
            grocerySqftMeasure.setColumn(CatalogSupplier.COLUMN_GROCERY_SQFT_STORE);
            grocerySqftMeasure.setFormatString("#,###");

            countMeasure.setName("CountM");
            countMeasure.setColumn(CatalogSupplier.COLUMN_STORE_ID_STORE);
            countMeasure.setFormatString("Standard");
            countMeasure.setVisible(true);

            // Measure Group
            measureGroup.getMeasures().addAll(List.of(storeSqftMeasure, grocerySqftMeasure, countMeasure));

            // Store Query
            storeQuery.setTable(CatalogSupplier.TABLE_STORE);

            // Dimension Connectors
            storeTypeConnector.setOverrideDimensionName("Store Type");
            storeTypeConnector.setDimension(storeTypeDimension);
            storeTypeConnector.setVisible(true);

            storeConnector.setOverrideDimensionName("Store");
            storeConnector.setDimension(CatalogSupplier.DIMENSION_STORE);
            storeConnector.setVisible(true);

            hasCoffeeBarConnector.setOverrideDimensionName("Has coffee bar");
            hasCoffeeBarConnector.setDimension(hasCoffeeBarDimension);
            hasCoffeeBarConnector.setVisible(true);

            // Cube
            storeWithCountMCube.setName("StoreWithCountM");
            storeWithCountMCube.setQuery(storeQuery);
            storeWithCountMCube.getDimensionConnectors().addAll(List.of(
                storeTypeConnector, storeConnector, hasCoffeeBarConnector));
            storeWithCountMCube.getMeasureGroups().add(measureGroup);
        }

        public CustomCountMeasureCubeName(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getCubes().add(storeWithCountMCube);
            catalog.getAccessRoles().addAll((Collection<? extends AccessRole>) catalogAccessRoles(catalog2));
            return catalog;
        }
    }

    /*
    + "<Cube name=\"Employee Store Analysis A\">\n"
    + "  <Table name=\"inventory_fact_1997\" alias=\"inventory\" />\n"
    + "  <DimensionUsage name=\"Employee\" source=\"Employee\" foreignKey=\"product_id\" />\n"
    + "  <DimensionUsage name=\"Store Type\" source=\"Store Type\" foreignKey=\"warehouse_id\" />\n"
    + "  <Measure name=\"Employee Store Sales\" aggregator=\"sum\" formatString=\"$#,##0\" column=\"warehouse_sales\" />\n"
    + "  <Measure name=\"Employee Store Cost\" aggregator=\"sum\" formatString=\"$#,##0\" column=\"warehouse_cost\" />\n"
    + "</Cube>";
    + "<Cube name=\"Employee Store Analysis B\">\n"
    + "  <Table name=\"inventory_fact_1997\" alias=\"inventory\" />\n"
    + "  <DimensionUsage name=\"Employee\" source=\"Employee\" foreignKey=\"time_id\" />\n"
    + "  <DimensionUsage name=\"Store Type\" source=\"Store Type\" foreignKey=\"store_id\" />\n"
    + "  <Measure name=\"Employee Store Sales\" aggregator=\"sum\" formatString=\"$#,##0\" column=\"warehouse_sales\" />\n"
    + "  <Measure name=\"Employee Store Cost\" aggregator=\"sum\" formatString=\"$#,##0\" column=\"warehouse_cost\" />\n"
    + "</Cube>";
    + "<VirtualCube name=\"Employee Store Analysis\">\n"
    + "  <VirtualCubeDimension name=\"Employee\"/>\n"
    + "  <VirtualCubeDimension name=\"Store Type\"/>\n"
    + "  <VirtualCubeMeasure cubeName=\"Employee Store Analysis A\" name=\"[Measures].[Employee Store Sales]\"/>\n"
    + "  <VirtualCubeMeasure cubeName=\"Employee Store Analysis B\" name=\"[Measures].[Employee Store Cost]\"/>\n"
    + "</VirtualCube>";
    + "<Dimension name=\"Employee\">\n"
    + "  <Hierarchy hasAll=\"true\" primaryKey=\"employee_id\" primaryKeyTable=\"employee\">\n"
    + "    <Join leftKey=\"supervisor_id\" rightKey=\"employee_id\">\n"
    + "      <Table name=\"employee\" alias=\"employee\" />\n"
    + "      <Table name=\"employee\" alias=\"employee_manager\" />\n"
    + "    </Join>\n"
    + "    <Level name=\"Role\" table=\"employee_manager\" column=\"management_role\" uniqueMembers=\"true\"/>\n"
    + "    <Level name=\"Title\" table=\"employee_manager\" column=\"position_title\" uniqueMembers=\"false\"/>\n"
    + "  </Hierarchy>\n"
    + "</Dimension>";
     */
    public static class SharedDimensionTestModifier extends EmfMappingModifier {

        private static final SumMeasure measureEmployeeStoreSalesA = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final SumMeasure measureEmployeeStoreCostA = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final SumMeasure measureEmployeeStoreSalesB = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final SumMeasure measureEmployeeStoreCostB = RolapMappingFactory.eINSTANCE.createSumMeasure();

        private static final MeasureGroup measureGroupA = RolapMappingFactory.eINSTANCE.createMeasureGroup();
        private static final MeasureGroup measureGroupB = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        private static final TableQuery inventoryQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final DimensionConnector employeeConnectorA = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector storeTypeConnectorA = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector employeeConnectorB = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector storeTypeConnectorB = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        private static final PhysicalCube cubeAnalysisA = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final PhysicalCube cubeAnalysisB = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final VirtualCube virtualCubeAnalysis = RolapMappingFactory.eINSTANCE.createVirtualCube();

        static {
            // Measures for Cube A
            measureEmployeeStoreSalesA.setName("Employee Store Sales");
            measureEmployeeStoreSalesA.setFormatString("$#,##0");
            measureEmployeeStoreSalesA.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_SALES_INVENTORY_FACT);

            measureEmployeeStoreCostA.setName("Employee Store Cost");
            measureEmployeeStoreCostA.setFormatString("$#,##0");
            measureEmployeeStoreCostA.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_COST_INVENTORY_FACT);

            measureGroupA.getMeasures().addAll(List.of(measureEmployeeStoreSalesA, measureEmployeeStoreCostA));

            // Measures for Cube B
            measureEmployeeStoreSalesB.setName("Employee Store Sales");
            measureEmployeeStoreSalesB.setFormatString("$#,##0");
            measureEmployeeStoreSalesB.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_SALES_INVENTORY_FACT);

            measureEmployeeStoreCostB.setName("Employee Store Cost");
            measureEmployeeStoreCostB.setFormatString("$#,##0");
            measureEmployeeStoreCostB.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_COST_INVENTORY_FACT);

            measureGroupB.getMeasures().addAll(List.of(measureEmployeeStoreSalesB, measureEmployeeStoreCostB));

            // Inventory Query
            inventoryQuery.setTable(CatalogSupplier.TABLE_INVENTORY_FACT);
            inventoryQuery.setAlias("inventory");

            // Dimension Connectors for Cube A
            employeeConnectorA.setOverrideDimensionName("Employee");
            employeeConnectorA.setDimension(CatalogSupplier.DIMENSION_EMPLOYEE);
            employeeConnectorA.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_INVENTORY_FACT);

            storeTypeConnectorA.setOverrideDimensionName("Store Type");
            storeTypeConnectorA.setDimension(CatalogSupplier.DIMENSION_STORE_TYPE_WITH_QUERY_EMPLOYEE);
            storeTypeConnectorA.setForeignKey(CatalogSupplier.COLUMN_WAREHOUSE_ID_INVENTORY_FACT);

            // Dimension Connectors for Cube B
            employeeConnectorB.setOverrideDimensionName("Employee");
            employeeConnectorB.setDimension(CatalogSupplier.DIMENSION_EMPLOYEE);
            employeeConnectorB.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_INVENTORY_FACT);

            storeTypeConnectorB.setOverrideDimensionName("Store Type");
            storeTypeConnectorB.setDimension(CatalogSupplier.DIMENSION_STORE_TYPE_WITH_QUERY_EMPLOYEE);
            storeTypeConnectorB.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_INVENTORY_FACT);

            // Cube A
            cubeAnalysisA.setName("Employee Store Analysis A");
            cubeAnalysisA.setQuery(inventoryQuery);
            cubeAnalysisA.getDimensionConnectors().addAll(List.of(employeeConnectorA, storeTypeConnectorA));
            cubeAnalysisA.getMeasureGroups().add(measureGroupA);

            // Cube B
            cubeAnalysisB.setName("Employee Store Analysis B");
            cubeAnalysisB.setQuery(inventoryQuery);
            cubeAnalysisB.getDimensionConnectors().addAll(List.of(employeeConnectorB, storeTypeConnectorB));
            cubeAnalysisB.getMeasureGroups().add(measureGroupB);

            // Virtual Cube
            virtualCubeAnalysis.setName("Employee Store Analysis");
            virtualCubeAnalysis.getReferencedMeasures().addAll(List.of(measureEmployeeStoreSalesA, measureEmployeeStoreCostB));
        }

        public SharedDimensionTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getCubes().addAll(List.of(cubeAnalysisA, cubeAnalysisB, virtualCubeAnalysis));
            catalog.getAccessRoles().addAll((Collection<? extends AccessRole>) catalogAccessRoles(catalog2));
            return catalog;
        }
    }

    /*
    + "<Cube name=\"Alternate Sales\">\n"
    + "  <Table name=\"sales_fact_1997\"/>\n"
    + "  <DimensionUsage name=\"Store Type\" source=\"Store Type\" foreignKey=\"store_id\" />\n"
    + "  <DimensionUsage name=\"Store\" source=\"Store\" foreignKey=\"store_id\"/>\n"
    + "  <DimensionUsage name=\"Buyer\" source=\"Store\" visible=\"true\" foreignKey=\"product_id\" highCardinality=\"false\"/>\n"
    + "  <DimensionUsage name=\"BuyerTwo\" source=\"Store\" visible=\"true\" foreignKey=\"product_id\" highCardinality=\"false\"/>\n"
    + "  <DimensionUsage name=\"Store Size in SQFT\" source=\"Store Size in SQFT\"\n"
    + "      foreignKey=\"store_id\"/>\n"
    + "  <DimensionUsage name=\"Store Type\" source=\"Store Type\" foreignKey=\"store_id\"/>\n"
    + "  <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
    + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\" formatString=\"Standard\"/>\n"
    + "</Cube>";
     */
    public static class SharedDimensionTestModifier1 extends EmfMappingModifier {

        private static final SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
        private static final TableQuery salesFactQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final DimensionConnector storeTypeConnector1 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector storeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector buyerConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector buyerTwoConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector storeSizeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector storeTypeConnector2 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector timeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        private static final PhysicalCube alternateSalesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();

        static {
            // Unit Sales Measure
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");

            measureGroup.getMeasures().add(unitSalesMeasure);

            // Sales Fact Query
            salesFactQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);

            // Dimension Connectors
            storeTypeConnector1.setOverrideDimensionName("Store Type");
            storeTypeConnector1.setDimension(CatalogSupplier.DIMENSION_STORE_TYPE_WITH_QUERY_STORE);
            storeTypeConnector1.setForeignKey(CatalogSupplier.COLUMN_STORE_COST_SALESFACT);

            storeConnector.setOverrideDimensionName("Store");
            storeConnector.setDimension(CatalogSupplier.DIMENSION_STORE);
            storeConnector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);

            buyerConnector.setOverrideDimensionName("Buyer");
            buyerConnector.setDimension(CatalogSupplier.DIMENSION_STORE);
            buyerConnector.setVisible(true);
            buyerConnector.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);

            buyerTwoConnector.setOverrideDimensionName("BuyerTwo");
            buyerTwoConnector.setDimension(CatalogSupplier.DIMENSION_STORE);
            buyerTwoConnector.setVisible(true);
            buyerTwoConnector.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);

            storeSizeConnector.setOverrideDimensionName("Store Size in SQFT");
            storeSizeConnector.setDimension(CatalogSupplier.DIMENSION_STORE_SIZE_IN_SQFT);
            storeSizeConnector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);

            storeTypeConnector2.setOverrideDimensionName("Store Type");
            storeTypeConnector2.setDimension(CatalogSupplier.DIMENSION_STORE_TYPE_WITH_QUERY_STORE);
            storeTypeConnector2.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);

            timeConnector.setOverrideDimensionName("Time");
            timeConnector.setDimension(CatalogSupplier.DIMENSION_TIME);
            timeConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);

            // Alternate Sales Cube
            alternateSalesCube.setName("Alternate Sales");
            alternateSalesCube.setQuery(salesFactQuery);
            alternateSalesCube.getDimensionConnectors().addAll(List.of(
                storeTypeConnector1, storeConnector, buyerConnector, buyerTwoConnector,
                storeSizeConnector, storeTypeConnector2, timeConnector));
            alternateSalesCube.getMeasureGroups().add(measureGroup);
        }

        public SharedDimensionTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getCubes().add(alternateSalesCube);
            catalog.getAccessRoles().addAll((Collection<? extends AccessRole>) catalogAccessRoles(catalog2));
            return catalog;
        }
    }

    public static class SelectNotInGroupByTestModifier2 extends EmfMappingModifier {

        private static final StandardDimension customStoreDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy customStoreHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level storeCountryLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final Level storeCityLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final Level storeNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final MemberProperty storeStateProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();

        private static final SumMeasure customStoreSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final SumMeasure customStoreCostMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final CountMeasure salesCountMeasure = RolapMappingFactory.eINSTANCE.createCountMeasure();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        private static final TableQuery salesFactQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final TableQuery storeQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final DimensionConnector customStoreConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final PhysicalCube customSalesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();

        static {
            // Store State Property
            storeStateProperty.setName("Store State");
            storeStateProperty.setColumn(CatalogSupplier.COLUMN_STORE_STATE_STORE);

            // Store Country Level
            storeCountryLevel.setName("Store Country");
            storeCountryLevel.setColumn(CatalogSupplier.COLUMN_STORE_COUNTRY_STORE);
            storeCountryLevel.setUniqueMembers(true);

            // Store City Level
            storeCityLevel.setName("Store City");
            storeCityLevel.setColumn(CatalogSupplier.COLUMN_STORE_CITY_STORE);
            storeCityLevel.setUniqueMembers(false);
            storeCityLevel.getMemberProperties().add(storeStateProperty);

            // Store Name Level
            storeNameLevel.setName("Store Name");
            storeNameLevel.setColumn(CatalogSupplier.COLUMN_STORE_NAME_STORE);
            storeNameLevel.setUniqueMembers(true);

            // Store Query
            storeQuery.setTable(CatalogSupplier.TABLE_STORE);

            // Custom Store Hierarchy
            customStoreHierarchy.setHasAll(true);
            customStoreHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);
            customStoreHierarchy.setQuery(storeQuery);
            customStoreHierarchy.getLevels().addAll(List.of(storeCountryLevel, storeCityLevel, storeNameLevel));

            // Custom Store Dimension
            customStoreDimension.setName("CustomStore");
            customStoreDimension.getHierarchies().add(customStoreHierarchy);

            // Measures
            customStoreSalesMeasure.setName("Custom Store Sales");
            customStoreSalesMeasure.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);
            customStoreSalesMeasure.setFormatString("#,###.00");

            customStoreCostMeasure.setName("Custom Store Cost");
            customStoreCostMeasure.setColumn(CatalogSupplier.COLUMN_STORE_COST_SALESFACT);

            salesCountMeasure.setName("Sales Count");
            salesCountMeasure.setColumn(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);

            measureGroup.getMeasures().addAll(List.of(customStoreSalesMeasure, customStoreCostMeasure, salesCountMeasure));

            // Sales Fact Query
            salesFactQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);

            // Custom Store Connector
            customStoreConnector.setOverrideDimensionName("CustomStore");
            customStoreConnector.setDimension(customStoreDimension);
            customStoreConnector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);

            // Custom Sales Cube
            customSalesCube.setName("CustomSales");
            customSalesCube.setQuery(salesFactQuery);
            customSalesCube.getDimensionConnectors().add(customStoreConnector);
            customSalesCube.getMeasureGroups().add(measureGroup);
        }

        public SelectNotInGroupByTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getCubes().add(customSalesCube);
            catalog.getAccessRoles().addAll((Collection<? extends AccessRole>) catalogAccessRoles(catalog2));
            return catalog;
        }
    }

    public static class AggregationOnDistinctCountMeasuresTestModifier extends EmfMappingModifier {

        private static final VirtualCube warehouseAndSales2 = RolapMappingFactory.eINSTANCE.createVirtualCube();
        private static final VirtualCube warehouseAndSales3 = RolapMappingFactory.eINSTANCE.createVirtualCube();

        private static final DimensionConnector genderConnector1 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector storeConnector1 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector productConnector1 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector warehouseConnector1 = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        private static final DimensionConnector genderConnector2 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector storeConnector2 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector productConnector2 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector warehouseConnector2 = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        private static final CubeConnector salesCubeUsage = RolapMappingFactory.eINSTANCE.createCubeConnector();

        static {
            // Dimension Connectors for Warehouse and Sales2
            genderConnector1.setOverrideDimensionName("Gender");
            genderConnector1.setDimension(CatalogSupplier.DIMENSION_GENDER);
            genderConnector1.setPhysicalCube(CatalogSupplier.CUBE_SALES);

            storeConnector1.setOverrideDimensionName("Store");
            storeConnector1.setDimension(CatalogSupplier.DIMENSION_STORE);
            storeConnector1.setPhysicalCube(CatalogSupplier.CUBE_SALES);

            productConnector1.setOverrideDimensionName("Product");
            productConnector1.setDimension(CatalogSupplier.DIMENSION_PRODUCT);
            productConnector1.setPhysicalCube(CatalogSupplier.CUBE_SALES);

            warehouseConnector1.setOverrideDimensionName("Warehouse");
            warehouseConnector1.setDimension(CatalogSupplier.DIMENSION_WAREHOUSE);
            warehouseConnector1.setPhysicalCube(CatalogSupplier.CUBE_WAREHOUSE);

            // Warehouse and Sales2 Virtual Cube
            warehouseAndSales2.setName("Warehouse and Sales2");
            warehouseAndSales2.setDefaultMeasure(CatalogSupplier.MEASURE_STORE_SALES);
            warehouseAndSales2.getDimensionConnectors().addAll(List.of(
                genderConnector1, storeConnector1, productConnector1, warehouseConnector1));
            warehouseAndSales2.getReferencedMeasures().addAll(List.of(
                CatalogSupplier.MEASURE_STORE_SALES, CatalogSupplier.MEASURE_CUSTOMER_COUNT));

            // Dimension Connectors for Warehouse and Sales3
            genderConnector2.setOverrideDimensionName("Gender");
            genderConnector2.setPhysicalCube(CatalogSupplier.CUBE_SALES);

            storeConnector2.setOverrideDimensionName("Store");

            productConnector2.setOverrideDimensionName("Product");

            warehouseConnector2.setOverrideDimensionName("Warehouse");
            warehouseConnector2.setPhysicalCube(CatalogSupplier.CUBE_WAREHOUSE);

            // Sales Cube Usage
            salesCubeUsage.setCube(CatalogSupplier.CUBE_SALES);
            salesCubeUsage.setIgnoreUnrelatedDimensions(true);

            // Warehouse and Sales3 Virtual Cube
            warehouseAndSales3.setName("Warehouse and Sales3");
            warehouseAndSales3.getCubeUsages().add(salesCubeUsage);
            warehouseAndSales3.getDimensionConnectors().addAll(List.of(
                genderConnector2, storeConnector2, productConnector2, warehouseConnector2));
            warehouseAndSales3.getReferencedMeasures().add(CatalogSupplier.MEASURE_CUSTOMER_COUNT);
        }

        public AggregationOnDistinctCountMeasuresTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getCubes().addAll(List.of(warehouseAndSales2, warehouseAndSales3));
            catalog.getAccessRoles().addAll((Collection<? extends AccessRole>) catalogAccessRoles(catalog2));
            return catalog;
        }
    }

    //storeDimensionLevelDependent,
    //cubeA,
    public static class SelectNotInGroupByTestModifier1 extends EmfMappingModifier {

        private static final StandardDimension customStoreDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy customStoreHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level levelStoreCountry = RolapMappingFactory.eINSTANCE.createLevel();
        private static final Level levelStoreCity = RolapMappingFactory.eINSTANCE.createLevel();
        private static final MemberProperty propertyStoreState = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final Level levelStoreName = RolapMappingFactory.eINSTANCE.createLevel();

        private static final TableQuery queryStore = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final TableQuery querySalesFact = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final SumMeasure measureStoreSales = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final SumMeasure measureStoreCost = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final CountMeasure measureSalesCount = RolapMappingFactory.eINSTANCE.createCountMeasure();

        private static final PhysicalCube customSalesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final DimensionConnector dimensionConnectorStore = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        static {
            // Configure Store Country level
            levelStoreCountry.setName("Store Country");
            levelStoreCountry.setColumn(CatalogSupplier.COLUMN_STORE_COUNTRY_STORE);
            levelStoreCountry.setUniqueMembers(true);

            // Configure Store State property
            propertyStoreState.setName("Store State");
            propertyStoreState.setColumn(CatalogSupplier.COLUMN_STORE_STATE_STORE);
            propertyStoreState.setDependsOnLevelValue(true);

            // Configure Store City level with property
            levelStoreCity.setName("Store City");
            levelStoreCity.setColumn(CatalogSupplier.COLUMN_STORE_CITY_STORE);
            levelStoreCity.setUniqueMembers(false);
            levelStoreCity.getMemberProperties().add(propertyStoreState);

            // Configure Store Name level
            levelStoreName.setName("Store Name");
            levelStoreName.setColumn(CatalogSupplier.COLUMN_STORE_NAME_STORE);
            levelStoreName.setUniqueMembers(true);

            // Configure store table query
            queryStore.setTable(CatalogSupplier.TABLE_STORE);

            // Configure custom store hierarchy
            customStoreHierarchy.setHasAll(true);
            customStoreHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);
            customStoreHierarchy.setQuery(queryStore);
            customStoreHierarchy.getLevels().addAll(List.of(levelStoreCountry, levelStoreCity, levelStoreName));

            // Configure custom store dimension
            customStoreDimension.setName("CustomStore");
            customStoreDimension.getHierarchies().add(customStoreHierarchy);

            // Configure measures
            measureStoreSales.setName("Custom Store Sales");
            measureStoreSales.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);
            measureStoreSales.setFormatString("#,###.00");

            measureStoreCost.setName("Custom Store Cost");
            measureStoreCost.setColumn(CatalogSupplier.COLUMN_STORE_COST_SALESFACT);

            measureSalesCount.setName("Sales Count");
            measureSalesCount.setColumn(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);

            // Configure sales fact query
            querySalesFact.setTable(CatalogSupplier.TABLE_SALES_FACT);

            // Configure dimension connector
            dimensionConnectorStore.setOverrideDimensionName("CustomStore");
            dimensionConnectorStore.setDimension(customStoreDimension);
            dimensionConnectorStore.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);

            // Configure measure group
            measureGroup.getMeasures().addAll(List.of(measureStoreSales, measureStoreCost, measureSalesCount));

            // Configure custom sales cube
            customSalesCube.setName("CustomSales");
            customSalesCube.setQuery(querySalesFact);
            customSalesCube.getDimensionConnectors().add(dimensionConnectorStore);
            customSalesCube.getMeasureGroups().add(measureGroup);
        }

        public SelectNotInGroupByTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getCubes().add(customSalesCube);
            catalog.getAccessRoles().addAll((Collection<? extends AccessRole>) catalogAccessRoles(catalog2));
            return catalog;
        }
    }

    //storeDimensionUniqueLevelDependentProp,
    //cubeA
    public static class SelectNotInGroupByTestModifier3 extends EmfMappingModifier {

        private static final StandardDimension customStoreDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy customStoreHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level levelStoreCountry = RolapMappingFactory.eINSTANCE.createLevel();
        private static final Level levelStoreCity = RolapMappingFactory.eINSTANCE.createLevel();
        private static final MemberProperty propertyStoreState = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final Level levelStoreName = RolapMappingFactory.eINSTANCE.createLevel();

        private static final TableQuery queryStore = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final TableQuery querySalesFact = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final SumMeasure measureStoreSales = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final SumMeasure measureStoreCost = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final CountMeasure measureSalesCount = RolapMappingFactory.eINSTANCE.createCountMeasure();

        private static final PhysicalCube customSalesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final DimensionConnector dimensionConnectorStore = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        static {
            // Configure Store Country level
            levelStoreCountry.setName("Store Country");
            levelStoreCountry.setColumn(CatalogSupplier.COLUMN_STORE_COUNTRY_STORE);
            levelStoreCountry.setUniqueMembers(true);

            // Configure Store State property (depends on level value)
            propertyStoreState.setName("Store State");
            propertyStoreState.setColumn(CatalogSupplier.COLUMN_STORE_STATE_STORE);
            propertyStoreState.setDependsOnLevelValue(true);

            // Configure Store City level with property
            levelStoreCity.setName("Store City");
            levelStoreCity.setColumn(CatalogSupplier.COLUMN_STORE_CITY_STORE);
            levelStoreCity.setUniqueMembers(false);
            levelStoreCity.getMemberProperties().add(propertyStoreState);

            // Configure Store Name level
            levelStoreName.setName("Store Name");
            levelStoreName.setColumn(CatalogSupplier.COLUMN_STORE_NAME_STORE);
            levelStoreName.setUniqueMembers(true);

            // Configure store table query
            queryStore.setTable(CatalogSupplier.TABLE_STORE);

            // Configure custom store hierarchy with unique key level
            customStoreHierarchy.setHasAll(true);
            customStoreHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);
            customStoreHierarchy.setUniqueKeyLevelName("Store Name");
            customStoreHierarchy.setQuery(queryStore);
            customStoreHierarchy.getLevels().addAll(List.of(levelStoreCountry, levelStoreCity, levelStoreName));

            // Configure custom store dimension
            customStoreDimension.setName("CustomStore");
            customStoreDimension.getHierarchies().add(customStoreHierarchy);

            // Configure measures
            measureStoreSales.setName("Custom Store Sales");
            measureStoreSales.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);
            measureStoreSales.setFormatString("#,###.00");

            measureStoreCost.setName("Custom Store Cost");
            measureStoreCost.setColumn(CatalogSupplier.COLUMN_STORE_COST_SALESFACT);

            measureSalesCount.setName("Sales Count");
            measureSalesCount.setColumn(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);

            // Configure sales fact query
            querySalesFact.setTable(CatalogSupplier.TABLE_SALES_FACT);

            // Configure dimension connector
            dimensionConnectorStore.setOverrideDimensionName("CustomStore");
            dimensionConnectorStore.setDimension(customStoreDimension);
            dimensionConnectorStore.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);

            // Configure measure group
            measureGroup.getMeasures().addAll(List.of(measureStoreSales, measureStoreCost, measureSalesCount));

            // Configure custom sales cube
            customSalesCube.setName("CustomSales");
            customSalesCube.setQuery(querySalesFact);
            customSalesCube.getDimensionConnectors().add(dimensionConnectorStore);
            customSalesCube.getMeasureGroups().add(measureGroup);
        }

        public SelectNotInGroupByTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getCubes().add(customSalesCube);
            catalog.getAccessRoles().addAll((Collection<? extends AccessRole>) catalogAccessRoles(catalog2));
            return catalog;
        }
    }

    //storeDimensionUniqueLevelIndependentProp,
    //cubeA
    public static class SelectNotInGroupByTestModifier4 extends EmfMappingModifier {

        private static final StandardDimension customStoreDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy customStoreHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level levelStoreCountry = RolapMappingFactory.eINSTANCE.createLevel();
        private static final Level levelStoreCity = RolapMappingFactory.eINSTANCE.createLevel();
        private static final MemberProperty propertyStoreState = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final Level levelStoreName = RolapMappingFactory.eINSTANCE.createLevel();

        private static final TableQuery queryStore = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final TableQuery querySalesFact = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final SumMeasure measureStoreSales = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final SumMeasure measureStoreCost = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final CountMeasure measureSalesCount = RolapMappingFactory.eINSTANCE.createCountMeasure();

        private static final PhysicalCube customSalesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final DimensionConnector dimensionConnectorStore = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        static {
            // Configure Store Country level
            levelStoreCountry.setName("Store Country");
            levelStoreCountry.setColumn(CatalogSupplier.COLUMN_STORE_COUNTRY_STORE);
            levelStoreCountry.setUniqueMembers(true);

            // Configure Store State property (does NOT depend on level value)
            propertyStoreState.setName("Store State");
            propertyStoreState.setColumn(CatalogSupplier.COLUMN_STORE_STATE_STORE);
            propertyStoreState.setDependsOnLevelValue(false);

            // Configure Store City level with property
            levelStoreCity.setName("Store City");
            levelStoreCity.setColumn(CatalogSupplier.COLUMN_STORE_CITY_STORE);
            levelStoreCity.setUniqueMembers(false);
            levelStoreCity.getMemberProperties().add(propertyStoreState);

            // Configure Store Name level
            levelStoreName.setName("Store Name");
            levelStoreName.setColumn(CatalogSupplier.COLUMN_STORE_NAME_STORE);
            levelStoreName.setUniqueMembers(true);

            // Configure store table query
            queryStore.setTable(CatalogSupplier.TABLE_STORE);

            // Configure custom store hierarchy with unique key level
            customStoreHierarchy.setHasAll(true);
            customStoreHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);
            customStoreHierarchy.setUniqueKeyLevelName("Store Name");
            customStoreHierarchy.setQuery(queryStore);
            customStoreHierarchy.getLevels().addAll(List.of(levelStoreCountry, levelStoreCity, levelStoreName));

            // Configure custom store dimension
            customStoreDimension.setName("CustomStore");
            customStoreDimension.getHierarchies().add(customStoreHierarchy);

            // Configure measures
            measureStoreSales.setName("Custom Store Sales");
            measureStoreSales.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);
            measureStoreSales.setFormatString("#,###.00");

            measureStoreCost.setName("Custom Store Cost");
            measureStoreCost.setColumn(CatalogSupplier.COLUMN_STORE_COST_SALESFACT);

            measureSalesCount.setName("Sales Count");
            measureSalesCount.setColumn(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);

            // Configure sales fact query
            querySalesFact.setTable(CatalogSupplier.TABLE_SALES_FACT);

            // Configure dimension connector
            dimensionConnectorStore.setOverrideDimensionName("CustomStore");
            dimensionConnectorStore.setDimension(customStoreDimension);
            dimensionConnectorStore.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);

            // Configure measure group
            measureGroup.getMeasures().addAll(List.of(measureStoreSales, measureStoreCost, measureSalesCount));

            // Configure custom sales cube
            customSalesCube.setName("CustomSales");
            customSalesCube.setQuery(querySalesFact);
            customSalesCube.getDimensionConnectors().add(dimensionConnectorStore);
            customSalesCube.getMeasureGroups().add(measureGroup);
        }

        public SelectNotInGroupByTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getCubes().add(customSalesCube);
            catalog.getAccessRoles().addAll((Collection<? extends AccessRole>) catalogAccessRoles(catalog2));
            return catalog;
        }
    }

    public static class IgnoreUnrelatedDimensionsTestModifier extends EmfMappingModifier {

        private static final VirtualCube warehouseAndSales2 = RolapMappingFactory.eINSTANCE.createVirtualCube();

        private static final CubeConnector salesCubeUsage = RolapMappingFactory.eINSTANCE.createCubeConnector();
        private static final CubeConnector warehouseCubeUsage = RolapMappingFactory.eINSTANCE.createCubeConnector();

        private static final DimensionConnector customersConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector educationLevelConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector genderConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector maritalStatusConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector productConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector promotionMediaConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector promotionsConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector storeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector timeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector yearlyIncomeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector warehouseConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        static {
            // Configure cube usages
            salesCubeUsage.setCube(CatalogSupplier.CUBE_SALES);
            salesCubeUsage.setIgnoreUnrelatedDimensions(true);

            warehouseCubeUsage.setCube(CatalogSupplier.CUBE_WAREHOUSE);
            warehouseCubeUsage.setIgnoreUnrelatedDimensions(true);

            // Configure dimension connectors
            customersConnector.setOverrideDimensionName("Customers");
            customersConnector.setDimension(CatalogSupplier.DIMENSION_CUSTOMERS);
            customersConnector.setPhysicalCube(CatalogSupplier.CUBE_SALES);

            educationLevelConnector.setOverrideDimensionName("Education Level");
            educationLevelConnector.setDimension(CatalogSupplier.DIMENSION_EDUCATION_LEVEL);
            educationLevelConnector.setPhysicalCube(CatalogSupplier.CUBE_SALES);

            genderConnector.setOverrideDimensionName("Gender");
            genderConnector.setDimension(CatalogSupplier.DIMENSION_GENDER);
            genderConnector.setPhysicalCube(CatalogSupplier.CUBE_SALES);

            maritalStatusConnector.setOverrideDimensionName("Marital Status");
            maritalStatusConnector.setDimension(CatalogSupplier.DIMENSION_MARITAL_STATUS);
            maritalStatusConnector.setPhysicalCube(CatalogSupplier.CUBE_SALES);

            productConnector.setOverrideDimensionName("Product");
            productConnector.setDimension(CatalogSupplier.DIMENSION_PRODUCT);
            productConnector.setPhysicalCube(CatalogSupplier.CUBE_SALES);

            promotionMediaConnector.setOverrideDimensionName("Promotion Media");
            promotionMediaConnector.setDimension(CatalogSupplier.DIMENSION_PROMOTION_MEDIA);
            promotionMediaConnector.setPhysicalCube(CatalogSupplier.CUBE_SALES);

            promotionsConnector.setOverrideDimensionName("Promotions");
            promotionsConnector.setDimension(CatalogSupplier.DIMENSION_PROMOTIONS);
            promotionsConnector.setPhysicalCube(CatalogSupplier.CUBE_SALES);

            storeConnector.setOverrideDimensionName("Store");
            storeConnector.setDimension(CatalogSupplier.DIMENSION_STORE);
            storeConnector.setPhysicalCube(CatalogSupplier.CUBE_SALES);

            timeConnector.setOverrideDimensionName("Time");
            timeConnector.setDimension(CatalogSupplier.DIMENSION_TIME);
            timeConnector.setPhysicalCube(CatalogSupplier.CUBE_SALES);

            yearlyIncomeConnector.setOverrideDimensionName("Yearly Income");
            yearlyIncomeConnector.setDimension(CatalogSupplier.DIMENSION_YEARLY_INCOME);
            yearlyIncomeConnector.setPhysicalCube(CatalogSupplier.CUBE_SALES);

            warehouseConnector.setOverrideDimensionName("Warehouse");
            warehouseConnector.setDimension(CatalogSupplier.DIMENSION_WAREHOUSE);
            warehouseConnector.setPhysicalCube(CatalogSupplier.CUBE_SALES);

            // Configure virtual cube
            warehouseAndSales2.setName("Warehouse and Sales2");
            warehouseAndSales2.setDefaultMeasure(CatalogSupplier.MEASURE_STORE_SALES);
            warehouseAndSales2.getCubeUsages().addAll(List.of(salesCubeUsage, warehouseCubeUsage));
            warehouseAndSales2.getDimensionConnectors().addAll(List.of(
                customersConnector, educationLevelConnector, genderConnector, maritalStatusConnector,
                productConnector, promotionMediaConnector, promotionsConnector, storeConnector,
                timeConnector, yearlyIncomeConnector, warehouseConnector
            ));
            warehouseAndSales2.getReferencedCalculatedMembers().addAll(List.of(
                CatalogSupplier.CALCULATED_MEMBER_PROFIT,
                CatalogSupplier.CALCULATED_MEMBER_PROFIT_GROWTH,
                CatalogSupplier.CALCULATED_MEMBER_AVERAGE_WAREHOUSE_SALE
            ));
            warehouseAndSales2.getReferencedMeasures().addAll(List.of(
                CatalogSupplier.MEASURE_SALES_COUNT,
                CatalogSupplier.MEASURE_STORE_COST,
                CatalogSupplier.MEASURE_STORE_SALES,
                CatalogSupplier.MEASURE_UNIT_SALES,
                CatalogSupplier.MEASURE_WAREHOUSE_STORE_INVOICE,
                CatalogSupplier.MEASURE_WAREHOUSE_SUPPLY_TIME,
                CatalogSupplier.MEASURE_UNITS_ORDERED,
                CatalogSupplier.MEASURE_UNITS_SHIPPED,
                CatalogSupplier.MEASURE_WAREHOUSE_COST,
                CatalogSupplier.MEASURE_WAREHOUSE_PROFIT,
                CatalogSupplier.MEASURE_WAREHOUSE_SALES
            ));
        }

        public IgnoreUnrelatedDimensionsTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getCubes().add(warehouseAndSales2);
            catalog.getAccessRoles().addAll((Collection<? extends AccessRole>) catalogAccessRoles(catalog2));
            return catalog;
        }
    }

    //cubeSales3
    public static class IgnoreUnrelatedDimensionsTestModifier1 extends EmfMappingModifier {

        private static final StandardDimension educationLevelDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy educationLevelHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level educationLevelLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final TableQuery customerTableQuery1 = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final StandardDimension genderDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy genderHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level genderLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final TableQuery customerTableQuery2 = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final TableQuery salesFactQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        private static final PhysicalCube sales3Cube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final DimensionConnector timeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector educationLevelConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector productConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector genderConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        private static final VirtualCube warehouseAndSales3 = RolapMappingFactory.eINSTANCE.createVirtualCube();
        private static final CubeConnector sales3CubeUsage = RolapMappingFactory.eINSTANCE.createCubeConnector();
        private static final CubeConnector warehouseCubeUsage = RolapMappingFactory.eINSTANCE.createCubeConnector();

        private static final DimensionConnector vcGenderConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector vcEducationLevelConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector vcProductConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector vcTimeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector vcWarehouseConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        static {
            // Configure Education Level dimension
            educationLevelLevel.setName("Education Level");
            educationLevelLevel.setColumn(CatalogSupplier.COLUMN_EDUCATION_CUSTOMER);
            educationLevelLevel.setUniqueMembers(true);

            customerTableQuery1.setTable(CatalogSupplier.TABLE_CUSTOMER);

            educationLevelHierarchy.setHasAll(true);
            educationLevelHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);
            educationLevelHierarchy.setQuery(customerTableQuery1);
            educationLevelHierarchy.getLevels().add(educationLevelLevel);

            educationLevelDimension.setName("Education Level");
            educationLevelDimension.getHierarchies().add(educationLevelHierarchy);

            // Configure Gender dimension
            genderLevel.setName("Gender");
            genderLevel.setColumn(CatalogSupplier.COLUMN_GENDER_CUSTOMER);
            genderLevel.setUniqueMembers(true);

            customerTableQuery2.setTable(CatalogSupplier.TABLE_CUSTOMER);

            genderHierarchy.setHasAll(true);
            genderHierarchy.setDefaultMember("[Gender].[F]");
            genderHierarchy.setAllMemberName("All Gender");
            genderHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);
            genderHierarchy.setQuery(customerTableQuery2);
            genderHierarchy.getLevels().add(genderLevel);

            genderDimension.setName("Gender");
            genderDimension.getHierarchies().add(genderHierarchy);

            // Configure Unit Sales measure
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");

            // Configure measure group
            measureGroup.getMeasures().add(unitSalesMeasure);

            // Configure Sales Fact query
            salesFactQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);

            // Configure dimension connectors for Sales 3 cube
            timeConnector.setOverrideDimensionName("Time");
            timeConnector.setDimension(CatalogSupplier.DIMENSION_TIME);
            timeConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);

            educationLevelConnector.setOverrideDimensionName("Education Level");
            educationLevelConnector.setDimension(educationLevelDimension);
            educationLevelConnector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);

            productConnector.setOverrideDimensionName("Product");
            productConnector.setDimension(CatalogSupplier.DIMENSION_PRODUCT);
            productConnector.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);

            genderConnector.setOverrideDimensionName("Gender");
            genderConnector.setDimension(genderDimension);
            genderConnector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);

            // Configure Sales 3 cube
            sales3Cube.setName("Sales 3");
            sales3Cube.setQuery(salesFactQuery);
            sales3Cube.getDimensionConnectors().addAll(List.of(
                timeConnector, educationLevelConnector, productConnector, genderConnector
            ));
            sales3Cube.getMeasureGroups().add(measureGroup);

            // Configure cube usages for virtual cube
            sales3CubeUsage.setCube(sales3Cube);
            sales3CubeUsage.setIgnoreUnrelatedDimensions(false);

            warehouseCubeUsage.setCube(CatalogSupplier.CUBE_WAREHOUSE);
            warehouseCubeUsage.setIgnoreUnrelatedDimensions(true);

            // Configure dimension connectors for virtual cube
            vcGenderConnector.setOverrideDimensionName("Gender");
            vcGenderConnector.setDimension(genderDimension);
            vcGenderConnector.setPhysicalCube(sales3Cube);

            vcEducationLevelConnector.setOverrideDimensionName("Education Level");
            vcEducationLevelConnector.setDimension(educationLevelDimension);
            vcEducationLevelConnector.setPhysicalCube(sales3Cube);

            vcProductConnector.setOverrideDimensionName("Product");
            vcProductConnector.setDimension(CatalogSupplier.DIMENSION_PRODUCT);
            vcProductConnector.setPhysicalCube(sales3Cube);

            vcTimeConnector.setOverrideDimensionName("Time");
            vcTimeConnector.setDimension(CatalogSupplier.DIMENSION_TIME);
            vcTimeConnector.setPhysicalCube(sales3Cube);

            vcWarehouseConnector.setOverrideDimensionName("Warehouse");
            vcWarehouseConnector.setDimension(CatalogSupplier.DIMENSION_WAREHOUSE);
            vcWarehouseConnector.setPhysicalCube(CatalogSupplier.CUBE_WAREHOUSE);

            // Configure virtual cube
            warehouseAndSales3.setName("Warehouse and Sales 3");
            warehouseAndSales3.setDefaultMeasure(CatalogSupplier.MEASURE_WAREHOUSE_STORE_INVOICE);
            warehouseAndSales3.getCubeUsages().addAll(List.of(sales3CubeUsage, warehouseCubeUsage));
            warehouseAndSales3.getDimensionConnectors().addAll(List.of(
                vcGenderConnector, vcEducationLevelConnector, vcProductConnector,
                vcTimeConnector, vcWarehouseConnector
            ));
            warehouseAndSales3.getReferencedMeasures().addAll(List.of(
                unitSalesMeasure,
                CatalogSupplier.MEASURE_WAREHOUSE_STORE_INVOICE,
                CatalogSupplier.MEASURE_WAREHOUSE_SALES
            ));
        }

        public IgnoreUnrelatedDimensionsTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getCubes().add(sales3Cube);
            catalog.getCubes().add(warehouseAndSales3);
            catalog.getAccessRoles().addAll((Collection<? extends AccessRole>) catalogAccessRoles(catalog2));
            return catalog;
        }
    }

    public static class ParentChildHierarchyTestModifier1 extends EmfMappingModifier {

        private static final StandardDimension employeesClosureDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy employeesClosureHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level closureLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final Level employeeLevel = RolapMappingFactory.eINSTANCE.createLevel();

        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.JoinQuery joinQuery = RolapMappingFactory.eINSTANCE.createJoinQuery();
        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.JoinedQueryElement leftJoin = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.JoinedQueryElement rightJoin = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
        private static final TableQuery employeeClosureTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final TableQuery employee2TableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final DimensionConnector employeesClosureConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        static {
            // Configure closure level
            closureLevel.setName("Closure");
            closureLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            closureLevel.setUniqueMembers(false);
            closureLevel.setColumn(CatalogSupplier.COLUMN_SUPERVISOR_ID_EMPLOYEE_CLOSURE);

            // Configure employee level
            employeeLevel.setName("Employee");
            employeeLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            employeeLevel.setUniqueMembers(true);
            employeeLevel.setColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE_CLOSURE);

            // Configure join query
            employeeClosureTableQuery.setTable(CatalogSupplier.TABLE_EMPLOYEE_CLOSURE);

            employee2TableQuery.setTable(CatalogSupplier.TABLE_EMPLOYEE);
            employee2TableQuery.setAlias("employee2");

            leftJoin.setKey(CatalogSupplier.COLUMN_SUPERVISOR_ID_EMPLOYEE_CLOSURE);
            leftJoin.setQuery(employeeClosureTableQuery);

            rightJoin.setKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
            rightJoin.setQuery(employee2TableQuery);

            joinQuery.setLeft(leftJoin);
            joinQuery.setRight(rightJoin);

            // Configure hierarchy
            employeesClosureHierarchy.setHasAll(true);
            employeesClosureHierarchy.setAllMemberName("All Employees");
            employeesClosureHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE_CLOSURE);
            employeesClosureHierarchy.setQuery(joinQuery);
            employeesClosureHierarchy.getLevels().addAll(List.of(closureLevel, employeeLevel));

            // Configure dimension
            employeesClosureDimension.setName("EmployeesClosure");
            employeesClosureDimension.getHierarchies().add(employeesClosureHierarchy);

            // Configure dimension connector
            employeesClosureConnector.setOverrideDimensionName("EmployeesClosure");
            employeesClosureConnector.setDimension(employeesClosureDimension);
            employeesClosureConnector.setForeignKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_SALARY);
        }

        public ParentChildHierarchyTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected PhysicalCube physicalCube(org.eclipse.daanse.rolap.mapping.api.model.PhysicalCubeMapping pc) {
            PhysicalCube cube = (PhysicalCube) super.physicalCube(pc);
            if ("HR".equals(cube.getName())) {
                cube.getDimensionConnectors().add(employeesClosureConnector);
            }
            return cube;
        }
    }

    public static class ParentChildHierarchyTestModifier2 extends EmfMappingModifier {

        private static final StandardDimension employeeSnowFlakeDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.ParentChildHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createParentChildHierarchy();
        private static final Level employeeIdLevel = RolapMappingFactory.eINSTANCE.createLevel();

        private static final MemberProperty maritalStatusProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty positionTitleProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty genderProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty salaryProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty educationLevelProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty managementRoleProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();

        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.JoinQuery joinQuery = RolapMappingFactory.eINSTANCE.createJoinQuery();
        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.JoinedQueryElement leftJoin = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.JoinedQueryElement rightJoin = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
        private static final TableQuery employeeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final TableQuery storeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.ParentChildLink parentChildLink = RolapMappingFactory.eINSTANCE.createParentChildLink();
        private static final TableQuery employeeClosureTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final DimensionConnector employeeSnowFlakeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        static {
            // Configure member properties
            maritalStatusProperty.setName("Marital Status");
            maritalStatusProperty.setColumn(CatalogSupplier.COLUMN_MARITAL_STATUS_EMPLOYEE);

            positionTitleProperty.setName("Position Title");
            positionTitleProperty.setColumn(CatalogSupplier.COLUMN_POSITION_TITLE_EMPLOYEE);

            genderProperty.setName("Gender");
            genderProperty.setColumn(CatalogSupplier.COLUMN_GENDER_EMPLOYEE);

            salaryProperty.setName("Salary");
            salaryProperty.setColumn(CatalogSupplier.COLUMN_SALARY_EMPLOYEE);

            educationLevelProperty.setName("Education Level");
            educationLevelProperty.setColumn(CatalogSupplier.COLUMN_EDUCATION_LEVEL_EMPLOYEE);

            managementRoleProperty.setName("Management Role");
            managementRoleProperty.setColumn(CatalogSupplier.COLUMN_MANAGEMENT_ROLE_EMPLOYEE);

            // Configure Employee Id level
            employeeIdLevel.setName("Employee Id");
            employeeIdLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            employeeIdLevel.setUniqueMembers(true);
            employeeIdLevel.setColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
            employeeIdLevel.setNameColumn(CatalogSupplier.COLUMN_FULL_NAME_EMPLOYEE);
            employeeIdLevel.getMemberProperties().addAll(List.of(
                maritalStatusProperty, positionTitleProperty, genderProperty,
                salaryProperty, educationLevelProperty, managementRoleProperty
            ));

            // Configure join query
            employeeTableQuery.setTable(CatalogSupplier.TABLE_EMPLOYEE);
            storeTableQuery.setTable(CatalogSupplier.TABLE_STORE);

            leftJoin.setKey(CatalogSupplier.COLUMN_STORE_ID_EMPLOYEE);
            leftJoin.setQuery(employeeTableQuery);

            rightJoin.setKey(CatalogSupplier.COLUMN_STORE_ID_STORE);
            rightJoin.setAlias("store");
            rightJoin.setQuery(storeTableQuery);

            joinQuery.setLeft(leftJoin);
            joinQuery.setRight(rightJoin);

            // Configure parent-child link (closure)
            employeeClosureTableQuery.setTable(CatalogSupplier.TABLE_EMPLOYEE_CLOSURE);

            parentChildLink.setParentColumn(CatalogSupplier.COLUMN_SUPERVISOR_ID_EMPLOYEE_CLOSURE);
            parentChildLink.setChildColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE_CLOSURE);
            parentChildLink.setTable(employeeClosureTableQuery);

            // Configure parent-child hierarchy
            hierarchy.setHasAll(true);
            hierarchy.setAllMemberName("All Employees");
            hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
            hierarchy.setQuery(joinQuery);
            hierarchy.setParentColumn(CatalogSupplier.COLUMN_SUPERVISOR_ID_EMPLOYEE);
            hierarchy.setNullParentValue("0");
            hierarchy.setParentChildLink(parentChildLink);
            hierarchy.setLevel(employeeIdLevel);

            // Configure dimension
            employeeSnowFlakeDimension.setName("EmployeeSnowFlake");
            employeeSnowFlakeDimension.getHierarchies().add(hierarchy);

            // Configure dimension connector
            employeeSnowFlakeConnector.setOverrideDimensionName("EmployeeSnowFlake");
            employeeSnowFlakeConnector.setDimension(employeeSnowFlakeDimension);
            employeeSnowFlakeConnector.setForeignKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_SALARY);
        }

        public ParentChildHierarchyTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected PhysicalCube physicalCube(org.eclipse.daanse.rolap.mapping.api.model.PhysicalCubeMapping pc) {
            PhysicalCube cube = (PhysicalCube) super.physicalCube(pc);
            if ("HR".equals(cube.getName())) {
                cube.getDimensionConnectors().add(employeeSnowFlakeConnector);
            }
            return cube;
        }
    }

    public static class ParentChildHierarchyTestModifier3 extends EmfMappingModifier {

        private static final StandardDimension sharedEmployeeDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.ParentChildHierarchy sharedEmployeeHierarchy = RolapMappingFactory.eINSTANCE.createParentChildHierarchy();
        private static final Level employeeIdLevel = RolapMappingFactory.eINSTANCE.createLevel();

        private static final MemberProperty maritalStatusProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty positionTitleProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty genderProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty salaryProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty educationLevelProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty managementRoleProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();

        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.JoinQuery joinQuery = RolapMappingFactory.eINSTANCE.createJoinQuery();
        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.JoinedQueryElement leftJoin = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.JoinedQueryElement rightJoin = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
        private static final TableQuery employeeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final TableQuery storeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.ParentChildLink parentChildLink = RolapMappingFactory.eINSTANCE.createParentChildLink();
        private static final TableQuery employeeClosureTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final StandardDimension departmentDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy departmentHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level departmentLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final TableQuery departmentTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final PhysicalCube employeeSharedClosureCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final TableQuery salaryTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final DimensionConnector sharedEmployeeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector departmentConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector storeTypeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        private static final SumMeasure orgSalaryMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final CountMeasure countMeasure = RolapMappingFactory.eINSTANCE.createCountMeasure();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        static {
            // Configure member properties
            maritalStatusProperty.setName("Marital Status");
            maritalStatusProperty.setColumn(CatalogSupplier.COLUMN_MARITAL_STATUS_EMPLOYEE);

            positionTitleProperty.setName("Position Title");
            positionTitleProperty.setColumn(CatalogSupplier.COLUMN_POSITION_TITLE_EMPLOYEE);

            genderProperty.setName("Gender");
            genderProperty.setColumn(CatalogSupplier.COLUMN_GENDER_EMPLOYEE);

            salaryProperty.setName("Salary");
            salaryProperty.setColumn(CatalogSupplier.COLUMN_SALARY_EMPLOYEE);

            educationLevelProperty.setName("Education Level");
            educationLevelProperty.setColumn(CatalogSupplier.COLUMN_EDUCATION_LEVEL_EMPLOYEE);

            managementRoleProperty.setName("Management Role");
            managementRoleProperty.setColumn(CatalogSupplier.COLUMN_MANAGEMENT_ROLE_EMPLOYEE);

            // Configure Employee Id level
            employeeIdLevel.setName("Employee Id");
            employeeIdLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            employeeIdLevel.setUniqueMembers(true);
            employeeIdLevel.setColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
            employeeIdLevel.setNameColumn(CatalogSupplier.COLUMN_FULL_NAME_EMPLOYEE);
            employeeIdLevel.getMemberProperties().addAll(List.of(
                maritalStatusProperty, positionTitleProperty, genderProperty,
                salaryProperty, educationLevelProperty, managementRoleProperty
            ));

            // Configure join query
            employeeTableQuery.setTable(CatalogSupplier.TABLE_EMPLOYEE);
            storeTableQuery.setTable(CatalogSupplier.TABLE_STORE);

            leftJoin.setKey(CatalogSupplier.COLUMN_STORE_ID_EMPLOYEE);
            leftJoin.setQuery(employeeTableQuery);

            rightJoin.setKey(CatalogSupplier.COLUMN_STORE_ID_STORE);
            rightJoin.setAlias("store");
            rightJoin.setQuery(storeTableQuery);

            joinQuery.setLeft(leftJoin);
            joinQuery.setRight(rightJoin);

            // Configure parent-child link (closure)
            employeeClosureTableQuery.setTable(CatalogSupplier.TABLE_EMPLOYEE_CLOSURE);

            parentChildLink.setParentColumn(CatalogSupplier.COLUMN_SUPERVISOR_ID_EMPLOYEE_CLOSURE);
            parentChildLink.setChildColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE_CLOSURE);
            parentChildLink.setTable(employeeClosureTableQuery);

            // Configure shared employee hierarchy
            sharedEmployeeHierarchy.setHasAll(true);
            sharedEmployeeHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
            sharedEmployeeHierarchy.setQuery(joinQuery);
            sharedEmployeeHierarchy.setParentColumn(CatalogSupplier.COLUMN_SUPERVISOR_ID_EMPLOYEE);
            sharedEmployeeHierarchy.setNullParentValue("0");
            sharedEmployeeHierarchy.setParentChildLink(parentChildLink);
            sharedEmployeeHierarchy.setLevel(employeeIdLevel);

            // Configure shared employee dimension
            sharedEmployeeDimension.setName("SharedEmployee");
            sharedEmployeeDimension.getHierarchies().add(sharedEmployeeHierarchy);

            // Configure Department dimension
            departmentLevel.setName("Department Description");
            departmentLevel.setColumn(CatalogSupplier.COLUMN_DEPARTMENT_ID_DEPARTMENT);
            departmentLevel.setUniqueMembers(true);

            departmentTableQuery.setTable(CatalogSupplier.TABLE_DEPARTMENT);

            departmentHierarchy.setHasAll(true);
            departmentHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_DEPARTMENT_ID_DEPARTMENT);
            departmentHierarchy.setQuery(departmentTableQuery);
            departmentHierarchy.getLevels().add(departmentLevel);

            departmentDimension.setName("Department");
            departmentDimension.getHierarchies().add(departmentHierarchy);

            // Configure measures
            orgSalaryMeasure.setName("Org Salary");
            orgSalaryMeasure.setColumn(CatalogSupplier.COLUMN_SALARY_PAID_SALARY);
            orgSalaryMeasure.setFormatString("Currency");

            countMeasure.setName("Count");
            countMeasure.setColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_SALARY);
            countMeasure.setFormatString("#,#");

            measureGroup.getMeasures().addAll(List.of(orgSalaryMeasure, countMeasure));

            // Configure salary table query
            salaryTableQuery.setTable(CatalogSupplier.TABLE_SALARY);
            salaryTableQuery.setAlias("salary_closure");

            // Configure dimension connectors
            sharedEmployeeConnector.setOverrideDimensionName("SharedEmployee");
            sharedEmployeeConnector.setDimension(sharedEmployeeDimension);
            sharedEmployeeConnector.setForeignKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_SALARY);

            departmentConnector.setOverrideDimensionName("Department");
            departmentConnector.setDimension(departmentDimension);
            departmentConnector.setForeignKey(CatalogSupplier.COLUMN_DEPARTMENT_ID_SALARY);

            storeTypeConnector.setOverrideDimensionName("Store Type");
            storeTypeConnector.setDimension(CatalogSupplier.DIMENSION_STORE_TYPE);
            storeTypeConnector.setForeignKey(CatalogSupplier.COLUMN_WAREHOUSE_ID_WAREHOUSE);

            // Configure cube
            employeeSharedClosureCube.setName("EmployeeSharedClosureCube");
            employeeSharedClosureCube.setQuery(salaryTableQuery);
            employeeSharedClosureCube.getDimensionConnectors().addAll(List.of(
                sharedEmployeeConnector, departmentConnector, storeTypeConnector
            ));
            employeeSharedClosureCube.getMeasureGroups().add(measureGroup);
        }

        public ParentChildHierarchyTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getCubes().add(employeeSharedClosureCube);
            catalog.getAccessRoles().addAll((Collection<? extends AccessRole>) catalogAccessRoles(catalog2));
            return catalog;
        }
    }

    public static class ParentChildHierarchyTestModifier4 extends EmfMappingModifier {

        private static final StandardDimension employeesNonClosureDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.ParentChildHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createParentChildHierarchy();
        private static final Level employeeIdLevel = RolapMappingFactory.eINSTANCE.createLevel();

        private static final MemberProperty maritalStatusProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty positionTitleProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty genderProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty salaryProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty educationLevelProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty managementRoleProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();

        private static final TableQuery employeeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final DimensionConnector employeesNonClosureConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        static {
            // Configure member properties
            maritalStatusProperty.setName("Marital Status");
            maritalStatusProperty.setColumn(CatalogSupplier.COLUMN_MARITAL_STATUS_EMPLOYEE);

            positionTitleProperty.setName("Position Title");
            positionTitleProperty.setColumn(CatalogSupplier.COLUMN_POSITION_TITLE_EMPLOYEE);

            genderProperty.setName("Gender");
            genderProperty.setColumn(CatalogSupplier.COLUMN_GENDER_EMPLOYEE);

            salaryProperty.setName("Salary");
            salaryProperty.setColumn(CatalogSupplier.COLUMN_SALARY_EMPLOYEE);

            educationLevelProperty.setName("Education Level");
            educationLevelProperty.setColumn(CatalogSupplier.COLUMN_EDUCATION_LEVEL_EMPLOYEE);

            managementRoleProperty.setName("Management Role");
            managementRoleProperty.setColumn(CatalogSupplier.COLUMN_MANAGEMENT_ROLE_EMPLOYEE);

            // Configure Employee Id level
            employeeIdLevel.setName("Employee Id");
            employeeIdLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            employeeIdLevel.setUniqueMembers(true);
            employeeIdLevel.setColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
            employeeIdLevel.setNameColumn(CatalogSupplier.COLUMN_FULL_NAME_EMPLOYEE);
            employeeIdLevel.getMemberProperties().addAll(List.of(
                maritalStatusProperty, positionTitleProperty, genderProperty,
                salaryProperty, educationLevelProperty, managementRoleProperty
            ));

            // Configure employee table query
            employeeTableQuery.setTable(CatalogSupplier.TABLE_EMPLOYEE);

            // Configure parent-child hierarchy without closure table
            hierarchy.setHasAll(true);
            hierarchy.setAllMemberName("All Employees");
            hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
            hierarchy.setQuery(employeeTableQuery);
            hierarchy.setParentColumn(CatalogSupplier.COLUMN_SUPERVISOR_ID_EMPLOYEE);
            hierarchy.setNullParentValue("0");
            hierarchy.setLevel(employeeIdLevel);

            // Configure dimension
            employeesNonClosureDimension.setName("EmployeesNonClosure");
            employeesNonClosureDimension.getHierarchies().add(hierarchy);

            // Configure dimension connector
            employeesNonClosureConnector.setOverrideDimensionName("EmployeesNonClosure");
            employeesNonClosureConnector.setDimension(employeesNonClosureDimension);
            employeesNonClosureConnector.setForeignKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_SALARY);
        }

        public ParentChildHierarchyTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected PhysicalCube physicalCube(org.eclipse.daanse.rolap.mapping.api.model.PhysicalCubeMapping pc) {
            PhysicalCube cube = (PhysicalCube) super.physicalCube(pc);
            if ("HR".equals(cube.getName())) {
                cube.getDimensionConnectors().add(employeesNonClosureConnector);
            }
            return cube;
        }
    }

    public static class ParentChildHierarchyTestModifier5 extends EmfMappingModifier {

        private static final StandardDimension employeesNoClosureDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.ParentChildHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createParentChildHierarchy();
        private static final Level employeeIdLevel = RolapMappingFactory.eINSTANCE.createLevel();

        private static final MemberProperty maritalStatusProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty positionTitleProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty genderProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty salaryProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty educationLevelProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty managementRoleProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();

        private static final TableQuery employeeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final DimensionConnector employeesNoClosureConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        static {
            // Configure member properties
            maritalStatusProperty.setName("Marital Status");
            maritalStatusProperty.setColumn(CatalogSupplier.COLUMN_MARITAL_STATUS_EMPLOYEE);

            positionTitleProperty.setName("Position Title");
            positionTitleProperty.setColumn(CatalogSupplier.COLUMN_POSITION_ID_EMPLOYEE);

            genderProperty.setName("Gender");
            genderProperty.setColumn(CatalogSupplier.COLUMN_GENDER_EMPLOYEE);

            salaryProperty.setName("Salary");
            salaryProperty.setColumn(CatalogSupplier.COLUMN_SALARY_EMPLOYEE);

            educationLevelProperty.setName("Education Level");
            educationLevelProperty.setColumn(CatalogSupplier.COLUMN_EDUCATION_LEVEL_EMPLOYEE);

            managementRoleProperty.setName("Management Role");
            managementRoleProperty.setColumn(CatalogSupplier.COLUMN_MANAGEMENT_ROLE_EMPLOYEE);

            // Configure Employee Id level
            employeeIdLevel.setName("Employee Id");
            employeeIdLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            employeeIdLevel.setUniqueMembers(true);
            employeeIdLevel.setColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
            employeeIdLevel.setNameColumn(CatalogSupplier.COLUMN_FULL_NAME_EMPLOYEE);
            employeeIdLevel.getMemberProperties().addAll(List.of(
                maritalStatusProperty, positionTitleProperty, genderProperty,
                salaryProperty, educationLevelProperty, managementRoleProperty
            ));

            // Configure employee table query
            employeeTableQuery.setTable(CatalogSupplier.TABLE_EMPLOYEE);

            // Configure parent-child hierarchy without closure table
            hierarchy.setHasAll(true);
            hierarchy.setAllMemberName("All Employees");
            hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
            hierarchy.setQuery(employeeTableQuery);
            hierarchy.setParentColumn(CatalogSupplier.COLUMN_SUPERVISOR_ID_EMPLOYEE);
            hierarchy.setNullParentValue("0");
            hierarchy.setLevel(employeeIdLevel);

            // Configure dimension
            employeesNoClosureDimension.setName("EmployeesNoClosure");
            employeesNoClosureDimension.getHierarchies().add(hierarchy);

            // Configure dimension connector
            employeesNoClosureConnector.setOverrideDimensionName("EmployeesNoClosure");
            employeesNoClosureConnector.setDimension(employeesNoClosureDimension);
            employeesNoClosureConnector.setForeignKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_SALARY);
        }

        public ParentChildHierarchyTestModifier5(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected PhysicalCube physicalCube(org.eclipse.daanse.rolap.mapping.api.model.PhysicalCubeMapping pc) {
            PhysicalCube cube = (PhysicalCube) super.physicalCube(pc);
            if ("HR".equals(cube.getName())) {
                cube.getDimensionConnectors().add(employeesNoClosureConnector);
            }
            return cube;
        }
    }

    public static class ParentChildHierarchyTestModifier6 extends EmfMappingModifier {

        private static final StandardDimension departmentDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy departmentHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level departmentLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final TableQuery departmentTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final StandardDimension employeesDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.ParentChildHierarchy employeesHierarchy = RolapMappingFactory.eINSTANCE.createParentChildHierarchy();
        private static final Level employeeIdLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final TableQuery employeeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final MemberProperty maritalStatusProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty positionTitleProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty genderProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty salaryProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty educationLevelProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberProperty managementRoleProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();

        private static final PhysicalCube hrFewerDimsCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final TableQuery salaryTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final DimensionConnector departmentConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector employeesConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        private static final SumMeasure orgSalaryMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final CountMeasure countMeasure = RolapMappingFactory.eINSTANCE.createCountMeasure();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        static {
            // Configure Department dimension
            departmentLevel.setName("Department Description");
            departmentLevel.setColumn(CatalogSupplier.COLUMN_DEPARTMENT_ID_DEPARTMENT);
            departmentLevel.setUniqueMembers(true);

            departmentTableQuery.setTable(CatalogSupplier.TABLE_DEPARTMENT);

            departmentHierarchy.setHasAll(true);
            departmentHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_DEPARTMENT_ID_DEPARTMENT);
            departmentHierarchy.setQuery(departmentTableQuery);
            departmentHierarchy.getLevels().add(departmentLevel);

            departmentDimension.setName("Department");
            departmentDimension.getHierarchies().add(departmentHierarchy);

            // Configure member properties for Employees
            maritalStatusProperty.setName("Marital Status");
            maritalStatusProperty.setColumn(CatalogSupplier.COLUMN_MARITAL_STATUS_EMPLOYEE);

            positionTitleProperty.setName("Position Title");
            positionTitleProperty.setColumn(CatalogSupplier.COLUMN_POSITION_TITLE_EMPLOYEE);

            genderProperty.setName("Gender");
            genderProperty.setColumn(CatalogSupplier.COLUMN_GENDER_EMPLOYEE);

            salaryProperty.setName("Salary");
            salaryProperty.setColumn(CatalogSupplier.COLUMN_SALARY_EMPLOYEE);

            educationLevelProperty.setName("Education Level");
            educationLevelProperty.setColumn(CatalogSupplier.COLUMN_EDUCATION_LEVEL_EMPLOYEE);

            managementRoleProperty.setName("Management Role");
            managementRoleProperty.setColumn(CatalogSupplier.COLUMN_MANAGEMENT_ROLE_EMPLOYEE);

            // Configure Employee Id level
            employeeIdLevel.setName("Employee Id");
            employeeIdLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            employeeIdLevel.setUniqueMembers(true);
            employeeIdLevel.setColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
            employeeIdLevel.setNameColumn(CatalogSupplier.COLUMN_FULL_NAME_EMPLOYEE);
            employeeIdLevel.getMemberProperties().addAll(List.of(
                maritalStatusProperty, positionTitleProperty, genderProperty,
                salaryProperty, educationLevelProperty, managementRoleProperty
            ));

            // Configure employee table query
            employeeTableQuery.setTable(CatalogSupplier.TABLE_EMPLOYEE);

            // Configure Employees parent-child hierarchy
            employeesHierarchy.setHasAll(true);
            employeesHierarchy.setAllMemberName("All Employees");
            employeesHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
            employeesHierarchy.setQuery(employeeTableQuery);
            employeesHierarchy.setParentColumn(CatalogSupplier.COLUMN_SUPERVISOR_ID_EMPLOYEE);
            employeesHierarchy.setNullParentValue("0");
            employeesHierarchy.setLevel(employeeIdLevel);

            employeesDimension.setName("Employees");
            employeesDimension.getHierarchies().add(employeesHierarchy);

            // Configure measures
            orgSalaryMeasure.setName("Org Salary");
            orgSalaryMeasure.setColumn(CatalogSupplier.COLUMN_SALARY_PAID_SALARY);
            orgSalaryMeasure.setFormatString("Currency");

            countMeasure.setName("Count");
            countMeasure.setColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_SALARY);
            countMeasure.setFormatString("#,#");

            measureGroup.getMeasures().addAll(List.of(orgSalaryMeasure, countMeasure));

            // Configure salary table query
            salaryTableQuery.setTable(CatalogSupplier.TABLE_SALARY);

            // Configure dimension connectors
            departmentConnector.setOverrideDimensionName("Department");
            departmentConnector.setDimension(departmentDimension);
            departmentConnector.setForeignKey(CatalogSupplier.COLUMN_DEPARTMENT_ID_SALARY);

            employeesConnector.setOverrideDimensionName("Employees");
            employeesConnector.setDimension(employeesDimension);
            employeesConnector.setForeignKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_SALARY);

            // Configure cube
            hrFewerDimsCube.setName("HR-fewer-dims");
            hrFewerDimsCube.setQuery(salaryTableQuery);
            hrFewerDimsCube.getDimensionConnectors().addAll(List.of(
                departmentConnector, employeesConnector
            ));
            hrFewerDimsCube.getMeasureGroups().add(measureGroup);
        }

        public ParentChildHierarchyTestModifier6(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getCubes().add(hrFewerDimsCube);
            catalog.getAccessRoles().addAll((Collection<? extends AccessRole>) catalogAccessRoles(catalog2));
            return catalog;
        }
    }

    public static class ParentChildHierarchyTestModifier7 extends EmfMappingModifier {

        private static final StandardDimension employeesDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.ParentChildHierarchy employeesHierarchy = RolapMappingFactory.eINSTANCE.createParentChildHierarchy();
        private static final Level employeeIdLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final MemberProperty firstNameProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();

        private static final TableQuery employeeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.ParentChildLink parentChildLink = RolapMappingFactory.eINSTANCE.createParentChildLink();
        private static final TableQuery employeeClosureTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final PhysicalCube hrOrderedCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final TableQuery salaryTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final DimensionConnector employeesConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        private static final SumMeasure orgSalaryMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final CountMeasure countMeasure = RolapMappingFactory.eINSTANCE.createCountMeasure();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        static {
            // Configure First Name property
            firstNameProperty.setName("First Name");
            firstNameProperty.setColumn(CatalogSupplier.COLUMN_FIRST_NAME_EMPLOYEE);

            // Configure Employee Id level with ordinalColumn
            employeeIdLevel.setName("Employee Id");
            employeeIdLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            employeeIdLevel.setUniqueMembers(true);
            employeeIdLevel.setColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
            employeeIdLevel.setNameColumn(CatalogSupplier.COLUMN_FULL_NAME_EMPLOYEE);
            employeeIdLevel.setOrdinalColumn(CatalogSupplier.COLUMN_LAST_NAME_EMPLOYEE);
            employeeIdLevel.getMemberProperties().add(firstNameProperty);

            // Configure employee table query
            employeeTableQuery.setTable(CatalogSupplier.TABLE_EMPLOYEE);

            // Configure parent-child link (closure)
            employeeClosureTableQuery.setTable(CatalogSupplier.TABLE_EMPLOYEE_CLOSURE);

            parentChildLink.setParentColumn(CatalogSupplier.COLUMN_SUPERVISOR_ID_EMPLOYEE_CLOSURE);
            parentChildLink.setChildColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE_CLOSURE);
            parentChildLink.setTable(employeeClosureTableQuery);

            // Configure Employees parent-child hierarchy with closure
            employeesHierarchy.setHasAll(true);
            employeesHierarchy.setAllMemberName("All Employees");
            employeesHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
            employeesHierarchy.setQuery(employeeTableQuery);
            employeesHierarchy.setParentColumn(CatalogSupplier.COLUMN_SUPERVISOR_ID_EMPLOYEE);
            employeesHierarchy.setNullParentValue("0");
            employeesHierarchy.setParentChildLink(parentChildLink);
            employeesHierarchy.setLevel(employeeIdLevel);

            employeesDimension.setName("Employees");
            employeesDimension.getHierarchies().add(employeesHierarchy);

            // Configure measures
            orgSalaryMeasure.setName("Org Salary");
            orgSalaryMeasure.setColumn(CatalogSupplier.COLUMN_SALARY_PAID_SALARY);
            orgSalaryMeasure.setFormatString("Currency");

            countMeasure.setName("Count");
            countMeasure.setColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_SALARY);
            countMeasure.setFormatString("#,#");

            measureGroup.getMeasures().addAll(List.of(orgSalaryMeasure, countMeasure));

            // Configure salary table query
            salaryTableQuery.setTable(CatalogSupplier.TABLE_SALARY);

            // Configure dimension connector
            employeesConnector.setOverrideDimensionName("Employees");
            employeesConnector.setDimension(employeesDimension);
            employeesConnector.setForeignKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_SALARY);

            // Configure cube
            hrOrderedCube.setName("HR-ordered");
            hrOrderedCube.setQuery(salaryTableQuery);
            hrOrderedCube.getDimensionConnectors().add(employeesConnector);
            hrOrderedCube.getMeasureGroups().add(measureGroup);
        }

        public ParentChildHierarchyTestModifier7(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getCubes().add(hrOrderedCube);
            catalog.getAccessRoles().addAll((Collection<? extends AccessRole>) catalogAccessRoles(catalog2));
            return catalog;
        }
    }

    public static class ParentChildHierarchyTestModifier8 extends EmfMappingModifier {

        private static final StandardDimension employeesDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.ParentChildHierarchy employeesHierarchy = RolapMappingFactory.eINSTANCE.createParentChildHierarchy();
        private static final Level employeeNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final TableQuery employeeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.ParentChildLink parentChildLink = RolapMappingFactory.eINSTANCE.createParentChildLink();
        private static final TableQuery employeeClosureTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final PhysicalCube customSalesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final TableQuery salesFactTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final DimensionConnector employeesConnector1 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final SumMeasure storeSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final MeasureGroup measureGroup1 = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        private static final PhysicalCube customHRCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final TableQuery salaryTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final DimensionConnector employeesConnector2 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final SumMeasure orgSalaryMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final MeasureGroup measureGroup2 = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        private static final VirtualCube customSalesAndHRCube = RolapMappingFactory.eINSTANCE.createVirtualCube();
        private static final DimensionConnector employeesConnector3 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.CalculatedMember calculatedMember = RolapMappingFactory.eINSTANCE.createCalculatedMember();

        static {
            // Configure Employee Name level
            employeeNameLevel.setName("Employee Name");
            employeeNameLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            employeeNameLevel.setUniqueMembers(true);
            employeeNameLevel.setColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
            employeeNameLevel.setNameColumn(CatalogSupplier.COLUMN_FULL_NAME_EMPLOYEE);

            // Configure employee table query
            employeeTableQuery.setTable(CatalogSupplier.TABLE_EMPLOYEE);

            // Configure parent-child link (closure)
            employeeClosureTableQuery.setTable(CatalogSupplier.TABLE_EMPLOYEE_CLOSURE);

            parentChildLink.setParentColumn(CatalogSupplier.COLUMN_SUPERVISOR_ID_EMPLOYEE_CLOSURE);
            parentChildLink.setChildColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE_CLOSURE);
            parentChildLink.setTable(employeeClosureTableQuery);

            // Configure Employees parent-child hierarchy
            employeesHierarchy.setHasAll(true);
            employeesHierarchy.setAllMemberName("All Employees");
            employeesHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
            employeesHierarchy.setQuery(employeeTableQuery);
            employeesHierarchy.setParentColumn(CatalogSupplier.COLUMN_SUPERVISOR_ID_EMPLOYEE);
            employeesHierarchy.setNullParentValue("0");
            employeesHierarchy.setParentChildLink(parentChildLink);
            employeesHierarchy.setLevel(employeeNameLevel);

            employeesDimension.setName("Employees");
            employeesDimension.getHierarchies().add(employeesHierarchy);

            // Configure CustomSales cube
            storeSalesMeasure.setName("Store Sales");
            storeSalesMeasure.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);

            measureGroup1.getMeasures().add(storeSalesMeasure);

            salesFactTableQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);

            employeesConnector1.setOverrideDimensionName("Employees");
            employeesConnector1.setDimension(employeesDimension);
            employeesConnector1.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);

            customSalesCube.setName("CustomSales");
            customSalesCube.setQuery(salesFactTableQuery);
            customSalesCube.getDimensionConnectors().add(employeesConnector1);
            customSalesCube.getMeasureGroups().add(measureGroup1);

            // Configure CustomHR cube
            orgSalaryMeasure.setName("Org Salary");
            orgSalaryMeasure.setColumn(CatalogSupplier.COLUMN_SALARY_PAID_SALARY);

            measureGroup2.getMeasures().add(orgSalaryMeasure);

            salaryTableQuery.setTable(CatalogSupplier.TABLE_SALARY);

            employeesConnector2.setOverrideDimensionName("Employees");
            employeesConnector2.setDimension(employeesDimension);
            employeesConnector2.setForeignKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_SALARY);

            customHRCube.setName("CustomHR");
            customHRCube.setQuery(salaryTableQuery);
            customHRCube.getDimensionConnectors().add(employeesConnector2);
            customHRCube.getMeasureGroups().add(measureGroup2);

            // Configure CustomSalesAndHR virtual cube
            employeesConnector3.setOverrideDimensionName("Employees");
            employeesConnector3.setDimension(employeesDimension);
            employeesConnector3.setForeignKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_SALARY);

            calculatedMember.setName("HR Cost per Sale");
            calculatedMember.setFormula("[Measures].[Store Sales] / [Measures].[Org Salary]");

            customSalesAndHRCube.setName("CustomSalesAndHR");
            customSalesAndHRCube.getDimensionConnectors().add(employeesConnector3);
            customSalesAndHRCube.getReferencedMeasures().addAll(List.of(storeSalesMeasure, orgSalaryMeasure));
            customSalesAndHRCube.getCalculatedMembers().add(calculatedMember);
        }

        public ParentChildHierarchyTestModifier8(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getCubes().add(customSalesCube);
            catalog.getCubes().add(customHRCube);
            catalog.getCubes().add(customSalesAndHRCube);
            catalog.getAccessRoles().addAll((Collection<? extends AccessRole>) catalogAccessRoles(catalog2));
            return catalog;
        }
    }

    public static class ParentChildHierarchyTestModifier9 extends EmfMappingModifier {

        private static final StandardDimension employeesDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.ParentChildHierarchy employeesHierarchy = RolapMappingFactory.eINSTANCE.createParentChildHierarchy();
        private static final Level employeeIdLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final TableQuery employeeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.ParentChildLink parentChildLink = RolapMappingFactory.eINSTANCE.createParentChildLink();
        private static final TableQuery employeeClosureTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final PhysicalCube hr4cCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final TableQuery salaryTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final DimensionConnector employeesConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final CountMeasure countMeasure = RolapMappingFactory.eINSTANCE.createCountMeasure();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        static {
            // Configure Employee Id level
            employeeIdLevel.setName("Employee Id");
            employeeIdLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            employeeIdLevel.setUniqueMembers(true);
            employeeIdLevel.setColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
            employeeIdLevel.setNameColumn(CatalogSupplier.COLUMN_FULL_NAME_EMPLOYEE);

            // Configure employee table query
            employeeTableQuery.setTable(CatalogSupplier.TABLE_EMPLOYEE);

            // Configure parent-child link (closure)
            employeeClosureTableQuery.setTable(CatalogSupplier.TABLE_EMPLOYEE_CLOSURE);

            parentChildLink.setParentColumn(CatalogSupplier.COLUMN_SUPERVISOR_ID_EMPLOYEE_CLOSURE);
            parentChildLink.setChildColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE_CLOSURE);
            parentChildLink.setTable(employeeClosureTableQuery);

            // Configure Employees parent-child hierarchy
            employeesHierarchy.setHasAll(true);
            employeesHierarchy.setAllMemberName("All");
            employeesHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
            employeesHierarchy.setQuery(employeeTableQuery);
            employeesHierarchy.setParentColumn(CatalogSupplier.COLUMN_SUPERVISOR_ID_EMPLOYEE);
            employeesHierarchy.setNullParentValue("0");
            employeesHierarchy.setParentChildLink(parentChildLink);
            employeesHierarchy.setLevel(employeeIdLevel);

            employeesDimension.setName("Employees");
            employeesDimension.getHierarchies().add(employeesHierarchy);

            // Configure measure
            countMeasure.setName("Count");
            countMeasure.setColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_SALARY);

            measureGroup.getMeasures().add(countMeasure);

            // Configure salary table query
            salaryTableQuery.setTable(CatalogSupplier.TABLE_SALARY);

            // Configure dimension connector
            employeesConnector.setOverrideDimensionName("Employees");
            employeesConnector.setDimension(employeesDimension);
            employeesConnector.setForeignKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_SALARY);

            // Configure cube
            hr4cCube.setName("HR4C");
            hr4cCube.setQuery(salaryTableQuery);
            hr4cCube.getDimensionConnectors().add(employeesConnector);
            hr4cCube.getMeasureGroups().add(measureGroup);
        }

        public ParentChildHierarchyTestModifier9(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getCubes().add(hr4cCube);
            catalog.getAccessRoles().addAll((Collection<? extends AccessRole>) catalogAccessRoles(catalog2));
            return catalog;
        }
    }

    public static class ParentChildHierarchyTestModifier10 extends EmfMappingModifier {

        private static final StandardDimension employeesDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.ParentChildHierarchy employeesHierarchy = RolapMappingFactory.eINSTANCE.createParentChildHierarchy();
        private static final Level employeeIdLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final TableQuery employeeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final PhysicalCube hr4cCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final TableQuery salaryTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final DimensionConnector employeesConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final CountMeasure countMeasure = RolapMappingFactory.eINSTANCE.createCountMeasure();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        static {
            // Configure Employee Id level
            employeeIdLevel.setName("Employee Id");
            employeeIdLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            employeeIdLevel.setUniqueMembers(true);
            employeeIdLevel.setColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
            employeeIdLevel.setNameColumn(CatalogSupplier.COLUMN_FULL_NAME_EMPLOYEE);

            // Configure employee table query
            employeeTableQuery.setTable(CatalogSupplier.TABLE_EMPLOYEE);

            // Configure Employees parent-child hierarchy WITHOUT closure table
            employeesHierarchy.setHasAll(true);
            employeesHierarchy.setAllMemberName("All");
            employeesHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
            employeesHierarchy.setQuery(employeeTableQuery);
            employeesHierarchy.setParentColumn(CatalogSupplier.COLUMN_SUPERVISOR_ID_EMPLOYEE);
            employeesHierarchy.setNullParentValue("0");
            employeesHierarchy.setLevel(employeeIdLevel);

            employeesDimension.setName("Employees");
            employeesDimension.getHierarchies().add(employeesHierarchy);

            // Configure measure
            countMeasure.setName("Count");
            countMeasure.setColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_SALARY);

            measureGroup.getMeasures().add(countMeasure);

            // Configure salary table query
            salaryTableQuery.setTable(CatalogSupplier.TABLE_SALARY);

            // Configure dimension connector
            employeesConnector.setOverrideDimensionName("Employees");
            employeesConnector.setDimension(employeesDimension);
            employeesConnector.setForeignKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_SALARY);

            // Configure cube
            hr4cCube.setName("HR4C");
            hr4cCube.setQuery(salaryTableQuery);
            hr4cCube.getDimensionConnectors().add(employeesConnector);
            hr4cCube.getMeasureGroups().add(measureGroup);
        }

        public ParentChildHierarchyTestModifier10(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getCubes().add(hr4cCube);
            catalog.getAccessRoles().addAll((Collection<? extends AccessRole>) catalogAccessRoles(catalog2));
            return catalog;
        }
    }

    public static class ParentChildHierarchyTestModifier11 extends EmfMappingModifier {

        public ParentChildHierarchyTestModifier11(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Create inline table columns
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.PhysicalColumn storeIdColumn =
                RolapMappingFactory.eINSTANCE.createPhysicalColumn();
            storeIdColumn.setName("store_id");
            storeIdColumn.setType(ColumnType.INTEGER);

            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.PhysicalColumn employeeIdColumn =
                RolapMappingFactory.eINSTANCE.createPhysicalColumn();
            employeeIdColumn.setName("employee_id");
            employeeIdColumn.setType(ColumnType.INTEGER);

            // Create inline table rows
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.InlineTable inlineTable =
                RolapMappingFactory.eINSTANCE.createInlineTable();
            inlineTable.getColumns().addAll(List.of(storeIdColumn, employeeIdColumn));

            // Add rows to inline table
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Row row1 = RolapMappingFactory.eINSTANCE.createRow();
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RowValue rv1_1 = RolapMappingFactory.eINSTANCE.createRowValue();
            rv1_1.setColumn(storeIdColumn);
            rv1_1.setValue("2");
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RowValue rv1_2 = RolapMappingFactory.eINSTANCE.createRowValue();
            rv1_2.setColumn(employeeIdColumn);
            rv1_2.setValue("o");
            row1.getRowValues().addAll(List.of(rv1_1, rv1_2));

            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Row row2 = RolapMappingFactory.eINSTANCE.createRow();
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RowValue rv2_1 = RolapMappingFactory.eINSTANCE.createRowValue();
            rv2_1.setColumn(storeIdColumn);
            rv2_1.setValue("2");
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RowValue rv2_2 = RolapMappingFactory.eINSTANCE.createRowValue();
            rv2_2.setColumn(employeeIdColumn);
            rv2_2.setValue("1");
            row2.getRowValues().addAll(List.of(rv2_1, rv2_2));

            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Row row3 = RolapMappingFactory.eINSTANCE.createRow();
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RowValue rv3_1 = RolapMappingFactory.eINSTANCE.createRowValue();
            rv3_1.setColumn(storeIdColumn);
            rv3_1.setValue("2");
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RowValue rv3_2 = RolapMappingFactory.eINSTANCE.createRowValue();
            rv3_2.setColumn(employeeIdColumn);
            rv3_2.setValue("2");
            row3.getRowValues().addAll(List.of(rv3_1, rv3_2));

            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Row row4 = RolapMappingFactory.eINSTANCE.createRow();
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RowValue rv4_1 = RolapMappingFactory.eINSTANCE.createRowValue();
            rv4_1.setColumn(storeIdColumn);
            rv4_1.setValue("2");
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RowValue rv4_2 = RolapMappingFactory.eINSTANCE.createRowValue();
            rv4_2.setColumn(employeeIdColumn);
            rv4_2.setValue("22");
            row4.getRowValues().addAll(List.of(rv4_1, rv4_2));

            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Row row5 = RolapMappingFactory.eINSTANCE.createRow();
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RowValue rv5_1 = RolapMappingFactory.eINSTANCE.createRowValue();
            rv5_1.setColumn(storeIdColumn);
            rv5_1.setValue("2");
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RowValue rv5_2 = RolapMappingFactory.eINSTANCE.createRowValue();
            rv5_2.setColumn(employeeIdColumn);
            rv5_2.setValue("22");
            row5.getRowValues().addAll(List.of(rv5_1, rv5_2));

            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Row row6 = RolapMappingFactory.eINSTANCE.createRow();
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RowValue rv6_1 = RolapMappingFactory.eINSTANCE.createRowValue();
            rv6_1.setColumn(storeIdColumn);
            rv6_1.setValue("2");
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RowValue rv6_2 = RolapMappingFactory.eINSTANCE.createRowValue();
            rv6_2.setColumn(employeeIdColumn);
            rv6_2.setValue("32");
            row6.getRowValues().addAll(List.of(rv6_1, rv6_2));

            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Row row7 = RolapMappingFactory.eINSTANCE.createRow();
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RowValue rv7_1 = RolapMappingFactory.eINSTANCE.createRowValue();
            rv7_1.setColumn(storeIdColumn);
            rv7_1.setValue("2");
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RowValue rv7_2 = RolapMappingFactory.eINSTANCE.createRowValue();
            rv7_2.setColumn(employeeIdColumn);
            rv7_2.setValue("484");
            row7.getRowValues().addAll(List.of(rv7_1, rv7_2));

            inlineTable.getRows().addAll(List.of(row1, row2, row3, row4, row5, row6, row7));

            // Create inline table query
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.InlineTableQuery inlineTableQuery =
                RolapMappingFactory.eINSTANCE.createInlineTableQuery();
            inlineTableQuery.setAlias("bri_store_employee");
            inlineTableQuery.setTable(inlineTable);

            // Create employee table query
            TableQuery employeeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            employeeTableQuery.setTable(CatalogSupplier.TABLE_EMPLOYEE);
            employeeTableQuery.setAlias("employee");

            // Create join query
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.JoinQuery joinQuery =
                RolapMappingFactory.eINSTANCE.createJoinQuery();

            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.JoinedQueryElement leftJoin =
                RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
            leftJoin.setKey(employeeIdColumn);
            leftJoin.setQuery(inlineTableQuery);

            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.JoinedQueryElement rightJoin =
                RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
            rightJoin.setKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
            rightJoin.setQuery(employeeTableQuery);

            joinQuery.setLeft(leftJoin);
            joinQuery.setRight(rightJoin);

            // Create parent-child link (closure)
            TableQuery employeeClosureTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            employeeClosureTableQuery.setTable(CatalogSupplier.TABLE_EMPLOYEE_CLOSURE);

            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.ParentChildLink parentChildLink =
                RolapMappingFactory.eINSTANCE.createParentChildLink();
            parentChildLink.setParentColumn(CatalogSupplier.COLUMN_SUPERVISOR_ID_EMPLOYEE_CLOSURE);
            parentChildLink.setChildColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE_CLOSURE);
            parentChildLink.setTable(employeeClosureTableQuery);

            // Create level
            Level employeeLevel = RolapMappingFactory.eINSTANCE.createLevel();
            employeeLevel.setName("Employee");
            employeeLevel.setColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
            employeeLevel.setNameColumn(CatalogSupplier.COLUMN_FULL_NAME_EMPLOYEE);
            employeeLevel.setColumnType(ColumnInternalDataType.INTEGER);
            employeeLevel.setUniqueMembers(true);
            employeeLevel.setType(LevelDefinition.REGULAR);
            employeeLevel.setHideMemberIf(HideMemberIf.NEVER);

            // Create parent-child hierarchy
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.ParentChildHierarchy hierarchy =
                RolapMappingFactory.eINSTANCE.createParentChildHierarchy();
            hierarchy.setName("Employee");
            hierarchy.setHasAll(false);
            hierarchy.setPrimaryKey(storeIdColumn);
            hierarchy.setQuery(joinQuery);
            hierarchy.setParentColumn(CatalogSupplier.COLUMN_SUPERVISOR_ID_EMPLOYEE);
            hierarchy.setNullParentValue("nullParentValue");
            hierarchy.setParentChildLink(parentChildLink);
            hierarchy.setLevel(employeeLevel);

            // Create dimension
            StandardDimension employeeDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            employeeDimension.setName("Employee");
            employeeDimension.getHierarchies().add(hierarchy);

            // Create measure
            SumMeasure storeSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            storeSalesMeasure.setName("Store Sales");
            storeSalesMeasure.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);
            storeSalesMeasure.setDataType(ColumnInternalDataType.NUMERIC);
            storeSalesMeasure.setFormatString("#,###.00");
            storeSalesMeasure.setVisible(true);

            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(storeSalesMeasure);

            // Create dimension connector
            DimensionConnector employeeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            employeeConnector.setOverrideDimensionName("Employee");
            employeeConnector.setDimension(employeeDimension);
            employeeConnector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);

            // Create cube
            TableQuery salesFactTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            salesFactTableQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);

            PhysicalCube salesBug441Cube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            salesBug441Cube.setName("Sales_Bug_441");
            salesBug441Cube.setCache(true);
            salesBug441Cube.setEnabled(true);
            salesBug441Cube.setQuery(salesFactTableQuery);
            salesBug441Cube.getDimensionConnectors().add(employeeConnector);
            salesBug441Cube.getMeasureGroups().add(measureGroup);

            // Create catalog
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName("FoodMart");
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().add(salesBug441Cube);

            return catalog;
        }
    }

    public static class ValidMeasureFunDefTestModifier extends EmfMappingModifier {

        private static final SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();

        private static final StandardDimension productDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy defaultHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level productNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final ExplicitHierarchy brandOnlyHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level productLevel = RolapMappingFactory.eINSTANCE.createLevel();

        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.JoinQuery joinQuery1 = RolapMappingFactory.eINSTANCE.createJoinQuery();
        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.JoinedQueryElement leftJoin1 = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.JoinedQueryElement rightJoin1 = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
        private static final TableQuery productTableQuery1 = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final TableQuery productClassTableQuery1 = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.JoinQuery joinQuery2 = RolapMappingFactory.eINSTANCE.createJoinQuery();
        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.JoinedQueryElement leftJoin2 = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
        private static final org.eclipse.daanse.rolap.mapping.emf.rolapmapping.JoinedQueryElement rightJoin2 = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
        private static final TableQuery productTableQuery2 = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final TableQuery productClassTableQuery2 = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final PhysicalCube salesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final TableQuery salesFactTableQuery1 = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final DimensionConnector productConnector1 = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        private static final PhysicalCube sales1Cube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final TableQuery salesFactTableQuery2 = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final SumMeasure unitSales1Measure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        private static final VirtualCube virtualCube = RolapMappingFactory.eINSTANCE.createVirtualCube();
        private static final DimensionConnector productConnector2 = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        static {
            // Configure Unit Sales measure
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");

            // Configure Product Name level
            productNameLevel.setName("Product Name");
            productNameLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_NAME_PRODUCT);
            productNameLevel.setUniqueMembers(true);

            // Configure first join for default hierarchy
            productTableQuery1.setTable(CatalogSupplier.TABLE_PRODUCT);
            productClassTableQuery1.setTable(CatalogSupplier.TABLE_PRODUCT_CLASS);

            leftJoin1.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT);
            leftJoin1.setQuery(productTableQuery1);

            rightJoin1.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT_CLASS);
            rightJoin1.setQuery(productClassTableQuery1);

            joinQuery1.setLeft(leftJoin1);
            joinQuery1.setRight(rightJoin1);

            // Configure default hierarchy
            defaultHierarchy.setHasAll(true);
            defaultHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);
            defaultHierarchy.setQuery(joinQuery1);
            defaultHierarchy.getLevels().add(productNameLevel);

            // Configure Product level for BrandOnly hierarchy
            productLevel.setName("Product");
            productLevel.setColumn(CatalogSupplier.COLUMN_BRAND_NAME_PRODUCT);
            productLevel.setUniqueMembers(false);

            // Configure second join for BrandOnly hierarchy
            productTableQuery2.setTable(CatalogSupplier.TABLE_PRODUCT);
            productClassTableQuery2.setTable(CatalogSupplier.TABLE_PRODUCT_CLASS);

            leftJoin2.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT);
            leftJoin2.setQuery(productTableQuery2);

            rightJoin2.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT_CLASS);
            rightJoin2.setQuery(productClassTableQuery2);

            joinQuery2.setLeft(leftJoin2);
            joinQuery2.setRight(rightJoin2);

            // Configure BrandOnly hierarchy
            brandOnlyHierarchy.setName("BrandOnly");
            brandOnlyHierarchy.setHasAll(true);
            brandOnlyHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);
            brandOnlyHierarchy.setQuery(joinQuery2);
            brandOnlyHierarchy.getLevels().add(productLevel);

            // Configure Product dimension
            productDimension.setName("Store");
            productDimension.getHierarchies().addAll(List.of(defaultHierarchy, brandOnlyHierarchy));

            // Configure Sales cube
            salesFactTableQuery1.setTable(CatalogSupplier.TABLE_SALES_FACT);

            productConnector1.setOverrideDimensionName("Product");
            productConnector1.setDimension(productDimension);
            productConnector1.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);

            salesCube.setName("Sales");
            salesCube.setDefaultMeasure(unitSalesMeasure);
            salesCube.setQuery(salesFactTableQuery1);
            salesCube.getDimensionConnectors().add(productConnector1);

            // Configure Sales 1 cube
            unitSales1Measure.setName("Unit Sales1");
            unitSales1Measure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSales1Measure.setFormatString("Standard");

            measureGroup.getMeasures().add(unitSales1Measure);

            salesFactTableQuery2.setTable(CatalogSupplier.TABLE_SALES_FACT);

            sales1Cube.setName("Sales 1");
            sales1Cube.setCache(true);
            sales1Cube.setEnabled(true);
            sales1Cube.setQuery(salesFactTableQuery2);
            sales1Cube.getMeasureGroups().add(measureGroup);

            // Configure Virtual Cube
            productConnector2.setOverrideDimensionName("Product");
            productConnector2.setDimension(productDimension);
            productConnector2.setPhysicalCube(salesCube);

            virtualCube.setName("Virtual Cube");
            virtualCube.setEnabled(true);
            virtualCube.getDimensionConnectors().add(productConnector2);
            virtualCube.getReferencedMeasures().add(unitSales1Measure);
        }

        public ValidMeasureFunDefTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName("FoodMart");
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().add(salesCube);
            catalog.getCubes().add(sales1Cube);
            catalog.getCubes().add(virtualCube);
            return catalog;
        }
    }

    public static class FunctionTestModifier extends EmfMappingModifier {

        /*
         "<CalculatedMember "
        + "name='H1 1997' "
        + "formula='Aggregate([Time].[1997].[Q1]:[Time].[1997].[Q2])' "
        + "dimension='Time' />" ));
         */
        public FunctionTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                CalculatedMember calculatedMember = RolapMappingFactory.eINSTANCE.createCalculatedMember();
                calculatedMember.setName("H1 1997");
                calculatedMember.setFormula("Aggregate([Time].[1997].[Q1]:[Time].[1997].[Q2])");
                calculatedMember.setHierarchy(CatalogSupplier.HIERARCHY_TIME);
                result.add(calculatedMember);
            }
            return result;
        }
    }

    public static class FunctionTestModifier2 extends EmfMappingModifier {

        /*
      "<CalculatedMember "
        + "name='H1 1997' "
        + "formula='Aggregate([Time].[1997].[Q1]:[Time].[1997].[Q2])' "
        + "dimension='Time' />"
        + "<CalculatedMember "
        + "name='Partial' "
        + "formula='Aggregate([Education Level].[Partial College]:[Education Level].[Partial High School])' "
        + "dimension='Education Level' />"));
         */
        public FunctionTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                CalculatedMember calculatedMember1 = RolapMappingFactory.eINSTANCE.createCalculatedMember();
                calculatedMember1.setName("H1 1997");
                calculatedMember1.setFormula("Aggregate([Time].[1997].[Q1]:[Time].[1997].[Q2])");
                calculatedMember1.setHierarchy(CatalogSupplier.HIERARCHY_TIME);
                result.add(calculatedMember1);

                CalculatedMember calculatedMember2 = RolapMappingFactory.eINSTANCE.createCalculatedMember();
                calculatedMember2.setName("Partial");
                calculatedMember2.setFormula("Aggregate([Education Level].[Partial College]:[Education Level].[Partial High School])");
                calculatedMember2.setHierarchy(CatalogSupplier.HIERARCHY_EDUCATION_LEVEL);
                result.add(calculatedMember2);
            }
            return result;
        }
    }

    public static class FunctionTestModifier3 extends EmfMappingModifier {

        /*
      "<Cube name=\"Sales_Hierarchize\">\n"
        + "  <Table name=\"sales_fact_1997\"/>\n"
        + "  <Dimension name=\"Time_Alphabetical\" type=\"TimeDimension\" foreignKey=\"time_id\">\n"
        + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n"
        + "      <Table name=\"time_by_day\"/>\n"
        + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
        + "          levelType=\"TimeYears\"/>\n"
        + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
        + "          levelType=\"TimeQuarters\"/>\n"
        + "      <Level name=\"Month\" column=\"month_of_year\" uniqueMembers=\"false\" type=\"Numeric\"\n"
        + "          ordinalColumn=\"the_month\"\n"
        + "          levelType=\"TimeMonths\"/>\n"
        + "    </Hierarchy>\n"
        + "  </Dimension>\n"
        + "\n"
        + "  <Dimension name=\"Month_Alphabetical\" type=\"TimeDimension\" foreignKey=\"time_id\">\n"
        + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n"
        + "      <Table name=\"time_by_day\"/>\n"
        + "      <Level name=\"Month\" column=\"month_of_year\" uniqueMembers=\"false\" type=\"Numeric\"\n"
        + "          ordinalColumn=\"the_month\"\n"
        + "          levelType=\"TimeMonths\"/>\n"
        + "    </Hierarchy>\n"
        + "  </Dimension>\n"
        + "\n"
        + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
        + "      formatString=\"Standard\"/>\n"
        + "</Cube>"
         */

        private static final PhysicalCube cube = RolapMappingFactory.eINSTANCE.createPhysicalCube();

        static {
            cube.setName("Sales_Hierarchize");

            TableQuery tableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            tableQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
            cube.setQuery(tableQuery);

            // Time_Alphabetical dimension
            TimeDimension timeAlphaDim = RolapMappingFactory.eINSTANCE.createTimeDimension();
            timeAlphaDim.setName("Time_Alphabetical");

            ExplicitHierarchy timeAlphaHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            timeAlphaHierarchy.setHasAll(false);
            timeAlphaHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);

            TableQuery timeByDayQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            timeByDayQuery.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);
            timeAlphaHierarchy.setQuery(timeByDayQuery);

            Level yearLevel = RolapMappingFactory.eINSTANCE.createLevel();
            yearLevel.setName("Year");
            yearLevel.setColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
            yearLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            yearLevel.setUniqueMembers(true);
            yearLevel.setType(LevelDefinition.TIME_YEARS);

            Level quarterLevel = RolapMappingFactory.eINSTANCE.createLevel();
            quarterLevel.setName("Quarter");
            quarterLevel.setColumn(CatalogSupplier.COLUMN_QUARTER_TIME_BY_DAY);
            quarterLevel.setUniqueMembers(false);
            quarterLevel.setType(LevelDefinition.TIME_QUARTERS);

            Level monthLevel1 = RolapMappingFactory.eINSTANCE.createLevel();
            monthLevel1.setName("Month");
            monthLevel1.setColumn(CatalogSupplier.COLUMN_MONTH_OF_YEAR_TIME_BY_DAY);
            monthLevel1.setUniqueMembers(false);
            monthLevel1.setColumnType(ColumnInternalDataType.NUMERIC);
            monthLevel1.setOrdinalColumn(CatalogSupplier.COLUMN_THE_MONTH_TIME_BY_DAY);
            monthLevel1.setType(LevelDefinition.TIME_MONTHS);

            timeAlphaHierarchy.getLevels().add(yearLevel);
            timeAlphaHierarchy.getLevels().add(quarterLevel);
            timeAlphaHierarchy.getLevels().add(monthLevel1);
            timeAlphaDim.getHierarchies().add(timeAlphaHierarchy);

            DimensionConnector timeAlphaConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            timeAlphaConnector.setOverrideDimensionName("Time_Alphabetical");
            timeAlphaConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
            timeAlphaConnector.setDimension(timeAlphaDim);

            // Month_Alphabetical dimension
            TimeDimension monthAlphaDim = RolapMappingFactory.eINSTANCE.createTimeDimension();
            monthAlphaDim.setName("Month_Alphabetical");

            ExplicitHierarchy monthAlphaHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            monthAlphaHierarchy.setHasAll(false);
            monthAlphaHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);

            TableQuery timeByDayQuery2 = RolapMappingFactory.eINSTANCE.createTableQuery();
            timeByDayQuery2.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);
            monthAlphaHierarchy.setQuery(timeByDayQuery2);

            Level monthLevel2 = RolapMappingFactory.eINSTANCE.createLevel();
            monthLevel2.setName("Month");
            monthLevel2.setColumn(CatalogSupplier.COLUMN_MONTH_OF_YEAR_TIME_BY_DAY);
            monthLevel2.setUniqueMembers(false);
            monthLevel2.setColumnType(ColumnInternalDataType.NUMERIC);
            monthLevel2.setOrdinalColumn(CatalogSupplier.COLUMN_THE_MONTH_TIME_BY_DAY);
            monthLevel2.setType(LevelDefinition.TIME_MONTHS);

            monthAlphaHierarchy.getLevels().add(monthLevel2);
            monthAlphaDim.getHierarchies().add(monthAlphaHierarchy);

            DimensionConnector monthAlphaConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            monthAlphaConnector.setOverrideDimensionName("Month_Alphabetical");
            monthAlphaConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
            monthAlphaConnector.setDimension(monthAlphaDim);

            cube.getDimensionConnectors().add(timeAlphaConnector);
            cube.getDimensionConnectors().add(monthAlphaConnector);

            // Measure Group
            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

            SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");

            measureGroup.getMeasures().add(unitSalesMeasure);
            cube.getMeasureGroups().add(measureGroup);
        }

        public FunctionTestModifier3(CatalogMapping catalogMapping) {
            super(catalogMapping);
        }

        protected List<? extends CubeMapping> catalogCubes(CatalogMapping schemaMappingOriginal) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.catalogCubes(schemaMappingOriginal));
            result.add(cube);
            return result;
        }
    }

    public static class MemberCacheControlTestModifier extends EmfMappingModifier {

        /*
            "  <Dimension name=\"Retail\" foreignKey=\"store_id\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "      <Table name=\"store\"/>\n"
            + "      <Level name=\"State\" column=\"store_state\" uniqueMembers=\"true\">\n"
            + "        <Property name=\"Country\" column=\"store_country\"/>\n"
            + "      </Level>\n"
            + "      <Level name=\"City\" column=\"store_city\" uniqueMembers=\"true\">\n"
            + "        <Property name=\"Population\" column=\"store_postal_code\"/>\n"
            + "      </Level>\n"
            + "      <Level name=\"Name\" column=\"store_name\" uniqueMembers=\"true\">\n"
            + "        <Property name=\"Store Type\" column=\"store_type\"/>\n"
            + "        <Property name=\"Store Manager\" column=\"store_manager\"/>\n"
            + "        <Property name=\"Store Sqft\" column=\"store_sqft\" type=\"Numeric\"/>\n"
            + "        <Property name=\"Has coffee bar\" column=\"coffee_bar\" type=\"Boolean\"/>\n"
            + "        <Property name=\"Street address\" column=\"store_street_address\" type=\"String\"/>\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "   </Dimension>"));
         */

        private static final StandardDimension retailDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final DimensionConnector retailConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        static {
            retailDimension.setName("Retail");

            ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            hierarchy.setHasAll(true);
            hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);

            TableQuery tableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            tableQuery.setTable(CatalogSupplier.TABLE_STORE);
            hierarchy.setQuery(tableQuery);

            Level stateLevel = RolapMappingFactory.eINSTANCE.createLevel();
            stateLevel.setName("State");
            stateLevel.setColumn(CatalogSupplier.COLUMN_STORE_STATE_STORE);
            stateLevel.setUniqueMembers(true);

            MemberProperty countryProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
            countryProperty.setName("Country");
            countryProperty.setColumn(CatalogSupplier.COLUMN_STORE_COUNTRY_STORE);
            stateLevel.getMemberProperties().add(countryProperty);

            Level cityLevel = RolapMappingFactory.eINSTANCE.createLevel();
            cityLevel.setName("City");
            cityLevel.setColumn(CatalogSupplier.COLUMN_STORE_CITY_STORE);
            cityLevel.setUniqueMembers(true);

            MemberProperty populationProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
            populationProperty.setName("Population");
            populationProperty.setColumn(CatalogSupplier.COLUMN_STORE_POSTAL_CODE_STORE);
            cityLevel.getMemberProperties().add(populationProperty);

            Level nameLevel = RolapMappingFactory.eINSTANCE.createLevel();
            nameLevel.setName("Name");
            nameLevel.setColumn(CatalogSupplier.COLUMN_STORE_NAME_STORE);
            nameLevel.setUniqueMembers(true);

            MemberProperty storeTypeProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
            storeTypeProperty.setName("Store Type");
            storeTypeProperty.setColumn(CatalogSupplier.COLUMN_STORE_TYPE_STORE);

            MemberProperty storeManagerProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
            storeManagerProperty.setName("Store Manager");
            storeManagerProperty.setColumn(CatalogSupplier.COLUMN_STORE_MANAGER_STORE);

            MemberProperty storeSqftProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
            storeSqftProperty.setName("Store Sqft");
            storeSqftProperty.setColumn(CatalogSupplier.COLUMN_STORE_SQFT_STORE);
            storeSqftProperty.setPropertyType(ColumnInternalDataType.NUMERIC);

            MemberProperty coffeeBarProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
            coffeeBarProperty.setName("Has coffee bar");
            coffeeBarProperty.setColumn(CatalogSupplier.COLUMN_COFFEE_BAR_STORE);
            coffeeBarProperty.setPropertyType(ColumnInternalDataType.BOOLEAN);

            MemberProperty streetAddressProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
            streetAddressProperty.setName("Street address");
            streetAddressProperty.setColumn(CatalogSupplier.COLUMN_STORE_STREET_ADDRESS_STORE);
            streetAddressProperty.setPropertyType(ColumnInternalDataType.STRING);

            nameLevel.getMemberProperties().add(storeTypeProperty);
            nameLevel.getMemberProperties().add(storeManagerProperty);
            nameLevel.getMemberProperties().add(storeSqftProperty);
            nameLevel.getMemberProperties().add(coffeeBarProperty);
            nameLevel.getMemberProperties().add(streetAddressProperty);

            hierarchy.getLevels().add(stateLevel);
            hierarchy.getLevels().add(cityLevel);
            hierarchy.getLevels().add(nameLevel);

            retailDimension.getHierarchies().add(hierarchy);

            retailConnector.setOverrideDimensionName("Retail");
            retailConnector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
            retailConnector.setDimension(retailDimension);
        }

        public MemberCacheControlTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnector> result = new ArrayList<>();
            result.addAll((Collection<? extends DimensionConnector>) super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(retailConnector);
            }
            return result;
        }
    }

    public static class NonEmptyTestModifier extends EmfMappingModifier {

        /*
      "<Dimension name=\"Product Ragged\" foreignKey=\"product_id\">\n"
        + "  <Hierarchy hasAll=\"false\" primaryKey=\"product_id\">\n"
        + "    <Table name=\"product\"/>\n"
        + "    <Level name=\"Brand Name\" table=\"product\" column=\"brand_name\" uniqueMembers=\"false\"/>\n"
        + "    <Level name=\"Product Name\" table=\"product\" column=\"product_name\" uniqueMembers=\"true\"\n"
        + "        hideMemberIf=\"IfBlankName\""
        + "        />\n"
        + "  </Hierarchy>\n"
        + "</Dimension>" ) );
         */

        private static final StandardDimension productRaggedDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final DimensionConnector productRaggedConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        static {
            productRaggedDimension.setName("Product Ragged");

            ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            hierarchy.setHasAll(false);
            hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);

            TableQuery tableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            tableQuery.setTable(CatalogSupplier.TABLE_PRODUCT);
            hierarchy.setQuery(tableQuery);

            Level brandNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
            brandNameLevel.setName("Brand Name");
            brandNameLevel.setColumn(CatalogSupplier.COLUMN_BRAND_NAME_PRODUCT);
            brandNameLevel.setUniqueMembers(false);

            Level productNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productNameLevel.setName("Product Name");
            productNameLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_NAME_PRODUCT);
            productNameLevel.setUniqueMembers(true);
            productNameLevel.setHideMemberIf(HideMemberIf.IF_BLANK_NAME);

            hierarchy.getLevels().add(brandNameLevel);
            hierarchy.getLevels().add(productNameLevel);

            productRaggedDimension.getHierarchies().add(hierarchy);

            productRaggedConnector.setOverrideDimensionName("Product Ragged");
            productRaggedConnector.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);
            productRaggedConnector.setDimension(productRaggedDimension);
        }

        public NonEmptyTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(productRaggedConnector);
            }
            return result;
        }
    }

    public static class NonEmptyTestModifier2 extends EmfMappingModifier {

        private final HideMemberIf hideMemberIf;

        /*
                      "<Dimension name=\"Product Ragged\" foreignKey=\"product_id\">\n"
                + "  <Hierarchy hasAll=\"true\" primaryKey=\"product_id\">\n"
                + "    <Table name=\"product\"/>\n"
                + "    <Level name=\"Brand Name\" table=\"product\" column=\"brand_name\" uniqueMembers=\"false\"/>\n"
                + "    <Level name=\"Product Name\" table=\"product\" column=\"product_name\" uniqueMembers=\"true\"\n"
                + "        hideMemberIf=\"IfBlankName\""
                + "        />\n"
                + "  </Hierarchy>\n"
                + "</Dimension>" ) );

                 */
        public NonEmptyTestModifier2(CatalogMapping catalog, HideMemberIf hideMemberIf) {
            super(catalog);
            this.hideMemberIf = hideMemberIf;
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                StandardDimension productRaggedDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                productRaggedDimension.setName("Product Ragged");

                ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy.setHasAll(true);
                hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);

                TableQuery tableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
                tableQuery.setTable(CatalogSupplier.TABLE_PRODUCT);
                hierarchy.setQuery(tableQuery);

                Level brandNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
                brandNameLevel.setName("Brand Name");
                brandNameLevel.setColumn(CatalogSupplier.COLUMN_BRAND_NAME_PRODUCT);
                brandNameLevel.setUniqueMembers(false);

                Level productNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
                productNameLevel.setName("Product Name");
                productNameLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_NAME_PRODUCT);
                productNameLevel.setUniqueMembers(true);
                productNameLevel.setHideMemberIf(hideMemberIf);

                hierarchy.getLevels().add(brandNameLevel);
                hierarchy.getLevels().add(productNameLevel);

                productRaggedDimension.getHierarchies().add(hierarchy);

                DimensionConnector productRaggedConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                productRaggedConnector.setOverrideDimensionName("Product Ragged");
                productRaggedConnector.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);
                productRaggedConnector.setDimension(productRaggedDimension);

                result.add(productRaggedConnector);
            }
            return result;
        }
    }

    public static class NonEmptyTestModifier3 extends EmfMappingModifier {

        /*
      "<Dimension name=\"Product Ragged\" foreignKey=\"product_id\">\n"
        + "  <Hierarchy hasAll=\"true\" primaryKey=\"product_id\">\n"
        + "    <Table name=\"product\"/>\n"
        + "    <Level name=\"Brand Name\" table=\"product\" column=\"brand_name\" uniqueMembers=\"false\""
        + "        hideMemberIf=\"IfBlankName\""
        + "        />\n"
        + "    <Level name=\"Product Name\" table=\"product\" column=\"product_name\"\n uniqueMembers=\"true\"/>\n"
        + "  </Hierarchy>\n"
        + "</Dimension>" ) );
         */

        private static final StandardDimension productRaggedDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final DimensionConnector productRaggedConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        static {
            productRaggedDimension.setName("Product Ragged");

            ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            hierarchy.setHasAll(true);
            hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);

            TableQuery tableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            tableQuery.setTable(CatalogSupplier.TABLE_PRODUCT);
            hierarchy.setQuery(tableQuery);

            Level brandNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
            brandNameLevel.setName("Brand Name");
            brandNameLevel.setColumn(CatalogSupplier.COLUMN_BRAND_NAME_PRODUCT);
            brandNameLevel.setUniqueMembers(false);
            brandNameLevel.setHideMemberIf(HideMemberIf.IF_BLANK_NAME);

            Level productNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productNameLevel.setName("Product Name");
            productNameLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_NAME_PRODUCT);
            productNameLevel.setUniqueMembers(true);

            hierarchy.getLevels().add(brandNameLevel);
            hierarchy.getLevels().add(productNameLevel);

            productRaggedDimension.getHierarchies().add(hierarchy);

            productRaggedConnector.setOverrideDimensionName("Product Ragged");
            productRaggedConnector.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);
            productRaggedConnector.setDimension(productRaggedDimension);
        }

        public NonEmptyTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(productRaggedConnector);
            }
            return result;
        }
    }

    public static class NonEmptyTestModifier4 extends EmfMappingModifier {

        /*
      "  <Dimension name=\"Time\" type=\"TimeDimension\" foreignKey=\"time_id\">\n"
        + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\" defaultMember=\"[Time].[1997].[Q1].[1]\" >\n"
        + "      <Table name=\"time_by_day\"/>\n"
        + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
        + "          levelType=\"TimeYears\"/>\n"
        + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
        + "          levelType=\"TimeQuarters\"/>\n"
        + "      <Level name=\"Month\" column=\"month_of_year\" uniqueMembers=\"false\" type=\"Numeric\"\n"
        + "          levelType=\"TimeMonths\"/>\n"
        + "    </Hierarchy>\n"
        + "  </Dimension>" ));
         */

        private static final TimeDimension timeDimension = RolapMappingFactory.eINSTANCE.createTimeDimension();
        private static final DimensionConnector timeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        static {
            timeDimension.setName("Time");

            ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            hierarchy.setHasAll(false);
            hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);
            hierarchy.setDefaultMember("[Time].[1997].[Q1].[1]");

            TableQuery tableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            tableQuery.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);
            hierarchy.setQuery(tableQuery);

            Level yearLevel = RolapMappingFactory.eINSTANCE.createLevel();
            yearLevel.setName("Year");
            yearLevel.setColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
            yearLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            yearLevel.setUniqueMembers(true);
            yearLevel.setType(LevelDefinition.TIME_YEARS);

            Level quarterLevel = RolapMappingFactory.eINSTANCE.createLevel();
            quarterLevel.setName("Quarter");
            quarterLevel.setColumn(CatalogSupplier.COLUMN_QUARTER_TIME_BY_DAY);
            quarterLevel.setUniqueMembers(true);
            quarterLevel.setType(LevelDefinition.TIME_QUARTERS);

            Level monthLevel = RolapMappingFactory.eINSTANCE.createLevel();
            monthLevel.setName("Month");
            monthLevel.setColumn(CatalogSupplier.COLUMN_MONTH_OF_YEAR_TIME_BY_DAY);
            monthLevel.setUniqueMembers(false);
            monthLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            monthLevel.setType(LevelDefinition.TIME_MONTHS);

            hierarchy.getLevels().add(yearLevel);
            hierarchy.getLevels().add(quarterLevel);
            hierarchy.getLevels().add(monthLevel);

            timeDimension.getHierarchies().add(hierarchy);

            timeConnector.setOverrideDimensionName("Time");
            timeConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
            timeConnector.setDimension(timeDimension);
        }

        public NonEmptyTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(timeConnector);
            }
            return result;
        }
    }

    public static class NonEmptyTestModifier5 extends EmfMappingModifier {

        /*
      "  <Dimension name=\"Store2\"  foreignKey=\"store_id\" >\n"
        + "    <Hierarchy hasAll=\"false\" primaryKey=\"store_id\"  defaultMember='[Store2].[USA].[OR]'>\n"
        + "      <Table name=\"store\"/>\n"
        + "      <Level name=\"Store Country\" column=\"store_country\"  uniqueMembers=\"true\"\n"
        + "          />\n"
        + "      <Level name=\"Store State\" column=\"store_state\" uniqueMembers=\"true\"\n"
        + "         />\n"
        + "      <Level name=\"Store City\" column=\"store_city\" uniqueMembers=\"false\" />\n"
        + "    </Hierarchy>\n"
        + "  </Dimension>" ));
         */

        private static final StandardDimension store2Dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final DimensionConnector store2Connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        static {
            store2Dimension.setName("Store2");

            ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            hierarchy.setHasAll(false);
            hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);
            hierarchy.setDefaultMember("[Store2].[USA].[OR]");

            TableQuery tableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            tableQuery.setTable(CatalogSupplier.TABLE_STORE);
            hierarchy.setQuery(tableQuery);

            Level countryLevel = RolapMappingFactory.eINSTANCE.createLevel();
            countryLevel.setName("Store Country");
            countryLevel.setColumn(CatalogSupplier.COLUMN_STORE_COUNTRY_STORE);
            countryLevel.setUniqueMembers(true);

            Level stateLevel = RolapMappingFactory.eINSTANCE.createLevel();
            stateLevel.setName("Store State");
            stateLevel.setColumn(CatalogSupplier.COLUMN_STORE_STATE_STORE);
            stateLevel.setUniqueMembers(true);

            Level cityLevel = RolapMappingFactory.eINSTANCE.createLevel();
            cityLevel.setName("Store City");
            cityLevel.setColumn(CatalogSupplier.COLUMN_STORE_CITY_STORE);
            cityLevel.setUniqueMembers(false);

            hierarchy.getLevels().add(countryLevel);
            hierarchy.getLevels().add(stateLevel);
            hierarchy.getLevels().add(cityLevel);

            store2Dimension.getHierarchies().add(hierarchy);

            store2Connector.setOverrideDimensionName("Store2");
            store2Connector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
            store2Connector.setDimension(store2Dimension);
        }

        public NonEmptyTestModifier5(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(store2Connector);
            }
            return result;
        }
    }

    public static class NonEmptyTestModifier7 extends EmfMappingModifier {

        /*
        "<Schema name=\"FoodMart\">"
          + "  <Dimension name=\"Store\">"
          + "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">"
          + "      <Table name=\"store\" />"
          + "      <Level name=\"Store Country\" column=\"store_country\" uniqueMembers=\"true\" />"
          + "      <Level name=\"Store State\" column=\"store_state\" uniqueMembers=\"true\" />"
          + "    </Hierarchy>"
          + "  </Dimension>"
          + "  <Dimension name=\"Time\" type=\"TimeDimension\">\n"
          + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n"
          + "      <Table name=\"time_by_day\"/>\n"
          + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
          + "          levelType=\"TimeYears\"/>\n"
          + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
          + "          levelType=\"TimeQuarters\"/>\n"
          + "    </Hierarchy>\n"
          + "    </Dimension>"
          + "  <Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">"
          + "    <Table name=\"sales_fact_1997\" />"
          + "    <DimensionUsage name=\"Store\" source=\"Store\" foreignKey=\"store_id\" />"
          + "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\" />"
          + "    <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\" formatString=\"Standard\" />"
          + "    <CalculatedMember name=\"dummyMeasure\" dimension=\"Measures\">"
          + "      <Formula>[Measures].[Unit Sales]</Formula>"
          + "    </CalculatedMember>"
          + "    <CalculatedMember name=\"dummyMeasure2\" dimension=\"Measures\">"
          + "      <Formula>[Measures].[dummyMeasure]</Formula>"
          + "    </CalculatedMember>"
          + "  </Cube>"
          + "  <VirtualCube defaultMeasure=\"dummyMeasure\" name=\"virtual\">"
          + "    <VirtualCubeDimension name=\"Store\" />"
          + "    <VirtualCubeDimension name=\"Time\" />"
          + "    <VirtualCubeMeasure name=\"[Measures].[dummyMeasure2]\" cubeName=\"Sales\" />"
          + "  </VirtualCube>"
          + "</Schema>" );
         */

        private static final StandardDimension storeDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final TimeDimension timeDimension = RolapMappingFactory.eINSTANCE.createTimeDimension();
        private static final ExplicitHierarchy timeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final CalculatedMember cmDummyMeasure = RolapMappingFactory.eINSTANCE.createCalculatedMember();
        private static final CalculatedMember dummyMeasure2Cm = RolapMappingFactory.eINSTANCE.createCalculatedMember();
        private static final PhysicalCube salesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final VirtualCube virtualCube = RolapMappingFactory.eINSTANCE.createVirtualCube();

        static {
            // Store Dimension
            storeDimension.setName("Store");

            ExplicitHierarchy storeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            storeHierarchy.setHasAll(true);
            storeHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);

            TableQuery storeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            storeTableQuery.setTable(CatalogSupplier.TABLE_STORE);
            storeHierarchy.setQuery(storeTableQuery);

            Level storeCountryLevel = RolapMappingFactory.eINSTANCE.createLevel();
            storeCountryLevel.setName("Store Country");
            storeCountryLevel.setColumn(CatalogSupplier.COLUMN_STORE_COUNTRY_STORE);
            storeCountryLevel.setUniqueMembers(true);

            Level storeStateLevel = RolapMappingFactory.eINSTANCE.createLevel();
            storeStateLevel.setName("Store State");
            storeStateLevel.setColumn(CatalogSupplier.COLUMN_STORE_STATE_STORE);
            storeStateLevel.setUniqueMembers(true);

            storeHierarchy.getLevels().add(storeCountryLevel);
            storeHierarchy.getLevels().add(storeStateLevel);

            storeDimension.getHierarchies().add(storeHierarchy);

            // Time Dimension
            timeDimension.setName("Time");

            timeHierarchy.setHasAll(true);
            timeHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);

            TableQuery timeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            timeTableQuery.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);
            timeHierarchy.setQuery(timeTableQuery);

            Level yearLevel = RolapMappingFactory.eINSTANCE.createLevel();
            yearLevel.setName("Year");
            yearLevel.setColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
            yearLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            yearLevel.setUniqueMembers(true);
            yearLevel.setType(LevelDefinition.TIME_YEARS);

            Level quarterLevel = RolapMappingFactory.eINSTANCE.createLevel();
            quarterLevel.setName("Quarter");
            quarterLevel.setColumn(CatalogSupplier.COLUMN_QUARTER_TIME_BY_DAY);
            quarterLevel.setUniqueMembers(false);
            quarterLevel.setType(LevelDefinition.TIME_QUARTERS);

            timeHierarchy.getLevels().add(yearLevel);
            timeHierarchy.getLevels().add(quarterLevel);

            timeDimension.getHierarchies().add(timeHierarchy);

            // Unit Sales Measure
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");

            // Calculated Members
            cmDummyMeasure.setName("dummyMeasure");
            cmDummyMeasure.setFormula("[Measures].[Unit Sales]");

            dummyMeasure2Cm.setName("dummyMeasure2");
            dummyMeasure2Cm.setFormula("[Measures].[dummyMeasure]");

            // Sales Cube
            salesCube.setName("Sales");
            salesCube.setDefaultMeasure(unitSalesMeasure);

            TableQuery cubeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            cubeTableQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
            salesCube.setQuery(cubeTableQuery);

            DimensionConnector storeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            storeConnector.setOverrideDimensionName("Store");
            storeConnector.setDimension(storeDimension);
            storeConnector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);

            DimensionConnector timeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            timeConnector.setOverrideDimensionName("Time");
            timeConnector.setDimension(timeDimension);
            timeConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);

            salesCube.getDimensionConnectors().add(storeConnector);
            salesCube.getDimensionConnectors().add(timeConnector);

            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(unitSalesMeasure);
            salesCube.getMeasureGroups().add(measureGroup);

            salesCube.getCalculatedMembers().add(cmDummyMeasure);
            salesCube.getCalculatedMembers().add(dummyMeasure2Cm);

            // Virtual Cube
            virtualCube.setName("virtual");
            virtualCube.setDefaultMeasure(cmDummyMeasure);

            DimensionConnector virtualStoreConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            virtualStoreConnector.setOverrideDimensionName("Store");
            virtualStoreConnector.setDimension(storeDimension);

            DimensionConnector virtualTimeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            virtualTimeConnector.setOverrideDimensionName("Time");
            virtualTimeConnector.setDimension(timeDimension);

            virtualCube.getDimensionConnectors().add(virtualStoreConnector);
            virtualCube.getDimensionConnectors().add(virtualTimeConnector);

            virtualCube.getReferencedCalculatedMembers().add(dummyMeasure2Cm);
        }

        public NonEmptyTestModifier7(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName("FoodMart");
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().add(salesCube);
            catalog.getCubes().add(virtualCube);
            return catalog;
        }
    }

    public static class BasicQueryTestModifier1 extends EmfMappingModifier {

        /*
            "<Dimension name=\"Gender2\" foreignKey=\"customer_id\">\n"
                + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Gender\" primaryKey=\"customer_id\">\n"
                + "    <View alias=\"gender2\">\n" + "      <SQL dialect=\"generic\">\n"
                + "        <![CDATA[SELECT * FROM customer]]>\n" + "      </SQL>\n"
                + "      <SQL dialect=\"oracle\">\n" + "        <![CDATA[SELECT * FROM \"customer\"]]>\n"
                + "      </SQL>\n" + "      <SQL dialect=\"hsqldb\">\n"
                + "        <![CDATA[SELECT * FROM \"customer\"]]>\n" + "      </SQL>\n"
                + "      <SQL dialect=\"derby\">\n" + "        <![CDATA[SELECT * FROM \"customer\"]]>\n"
                + "      </SQL>\n" + "      <SQL dialect=\"luciddb\">\n"
                + "        <![CDATA[SELECT * FROM \"customer\"]]>\n" + "      </SQL>\n"
                + "      <SQL dialect=\"db2\">\n" + "        <![CDATA[SELECT * FROM \"customer\"]]>\n"
                + "      </SQL>\n" + "      <SQL dialect=\"neoview\">\n"
                + "        <![CDATA[SELECT * FROM \"customer\"]]>\n" + "      </SQL>\n"
                + "      <SQL dialect=\"netezza\">\n" + "        <![CDATA[SELECT * FROM \"customer\"]]>\n"
                + "      </SQL>\n" + "      <SQL dialect=\"snowflake\">\n"
                + "        <![CDATA[SELECT * FROM \"customer\"]]>\n" + "      </SQL>\n" + "    </View>\n"
                + "    <Level name=\"Gender\" column=\"gender\" uniqueMembers=\"true\"/>\n" + "  </Hierarchy>\n"
                + "</Dimension>", null ));
         */

        private static final PhysicalColumn CUSTOMER_ID_COLUMN_IN_CUSTOMER = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
        private static final PhysicalColumn GENDER_COLUMN_IN_CUSTOMER = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
        private static final SqlSelectQuery sqlSelectQuery = RolapMappingFactory.eINSTANCE.createSqlSelectQuery();
        private static final StandardDimension gender2Dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final DimensionConnector gender2Connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        static {
            CUSTOMER_ID_COLUMN_IN_CUSTOMER.setName("customer_id");
            CUSTOMER_ID_COLUMN_IN_CUSTOMER.setType(ColumnType.INTEGER);

            GENDER_COLUMN_IN_CUSTOMER.setName("gender");
            GENDER_COLUMN_IN_CUSTOMER.setType(ColumnType.VARCHAR);
            GENDER_COLUMN_IN_CUSTOMER.setColumnSize(30);

            SqlView sqlView = RolapMappingFactory.eINSTANCE.createSqlView();
            sqlView.setName("gender2");
            sqlView.getColumns().add(CUSTOMER_ID_COLUMN_IN_CUSTOMER);
            sqlView.getColumns().add(GENDER_COLUMN_IN_CUSTOMER);

            SqlStatement sqlStatement1 = RolapMappingFactory.eINSTANCE.createSqlStatement();
            sqlStatement1.getDialects().add("generic");
            sqlStatement1.setSql("SELECT * FROM customer");

            SqlStatement sqlStatement2 = RolapMappingFactory.eINSTANCE.createSqlStatement();
            sqlStatement2.getDialects().add("oracle");
            sqlStatement2.getDialects().add("hsqldb");
            sqlStatement2.getDialects().add("derby");
            sqlStatement2.getDialects().add("luciddb");
            sqlStatement2.getDialects().add("db2");
            sqlStatement2.getDialects().add("neoview");
            sqlStatement2.getDialects().add("netezza");
            sqlStatement2.getDialects().add("snowflake");
            sqlStatement2.setSql("SELECT * FROM \"customer\"");

            sqlView.getSqlStatements().add(sqlStatement1);
            sqlView.getSqlStatements().add(sqlStatement2);

            sqlSelectQuery.setAlias("gender2");
            sqlSelectQuery.setSql(sqlView);

            gender2Dimension.setName("Gender2");

            ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            hierarchy.setHasAll(true);
            hierarchy.setAllMemberName("All Gender");
            hierarchy.setPrimaryKey(CUSTOMER_ID_COLUMN_IN_CUSTOMER);
            hierarchy.setQuery(sqlSelectQuery);

            Level genderLevel = RolapMappingFactory.eINSTANCE.createLevel();
            genderLevel.setName("Gender");
            genderLevel.setColumn(GENDER_COLUMN_IN_CUSTOMER);
            genderLevel.setUniqueMembers(true);

            hierarchy.getLevels().add(genderLevel);
            gender2Dimension.getHierarchies().add(hierarchy);

            gender2Connector.setOverrideDimensionName("Gender2");
            gender2Connector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
            gender2Connector.setDimension(gender2Dimension);
        }

        public BasicQueryTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(gender2Connector);
            }
            return result;
        }
    }

    public static class BasicQueryTestModifier2 extends EmfMappingModifier {

        /*
            "   <Dimension name=\"ProdAmbiguousLevelName\" foreignKey=\"product_id\">\n"
                + "    <Hierarchy hasAll=\"true\" primaryKey=\"product_id\" primaryKeyTable=\"product\">\n"
                + "      <Join leftKey=\"product_class_id\" rightKey=\"product_class_id\">\n"
                + "        <Table name=\"product\"/>\n" + "        <Table name=\"product_class\"/>\n"
                + "      </Join>\n" + "\n"
                + "      <Level name=\"Drink\" table=\"product_class\" column=\"product_family\"\n"
                + "          uniqueMembers=\"true\"/>\n"
                + "      <Level name=\"Beverages\" table=\"product_class\" column=\"product_department\"\n"
                + "          uniqueMembers=\"false\"/>\n"
                + "      <Level name=\"Product Category\" table=\"product_class\" column=\"product_category\"\n"
                + "          uniqueMembers=\"false\"/>\n" + "    </Hierarchy>\n" + "  </Dimension>\n", null ));
         */

        private static final StandardDimension prodAmbiguousDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final DimensionConnector prodAmbiguousConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        static {
            prodAmbiguousDimension.setName("ProdAmbiguousLevelName");

            ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            hierarchy.setHasAll(true);
            hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);

            JoinQuery joinQuery = RolapMappingFactory.eINSTANCE.createJoinQuery();

            JoinedQueryElement leftJoin = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
            leftJoin.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT);
            TableQuery leftTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            leftTable.setTable(CatalogSupplier.TABLE_PRODUCT);
            leftJoin.setQuery(leftTable);

            JoinedQueryElement rightJoin = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
            rightJoin.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT_CLASS);
            TableQuery rightTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            rightTable.setTable(CatalogSupplier.TABLE_PRODUCT_CLASS);
            rightJoin.setQuery(rightTable);

            joinQuery.setLeft(leftJoin);
            joinQuery.setRight(rightJoin);

            hierarchy.setQuery(joinQuery);

            Level drinkLevel = RolapMappingFactory.eINSTANCE.createLevel();
            drinkLevel.setName("Drink");
            drinkLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_FAMILY_PRODUCT_CLASS);
            drinkLevel.setUniqueMembers(true);

            Level beveragesLevel = RolapMappingFactory.eINSTANCE.createLevel();
            beveragesLevel.setName("Beverages");
            beveragesLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_DEPARTMENT_PRODUCT_CLASS);
            beveragesLevel.setUniqueMembers(false);

            Level categoryLevel = RolapMappingFactory.eINSTANCE.createLevel();
            categoryLevel.setName("Product Category");
            categoryLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_CATEGORY_PRODUCT_CLASS);
            categoryLevel.setUniqueMembers(false);

            hierarchy.getLevels().add(drinkLevel);
            hierarchy.getLevels().add(beveragesLevel);
            hierarchy.getLevels().add(categoryLevel);

            prodAmbiguousDimension.getHierarchies().add(hierarchy);

            prodAmbiguousConnector.setOverrideDimensionName("ProdAmbiguousLevelName");
            prodAmbiguousConnector.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);
            prodAmbiguousConnector.setDimension(prodAmbiguousDimension);
        }

        public BasicQueryTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(prodAmbiguousConnector);
            }
            return result;
        }
    }

    public static class BasicQueryTestModifier3 extends EmfMappingModifier {

        /*
            "<Dimension name=\"ProductView\" foreignKey=\"product_id\">\n"
                + "   <Hierarchy hasAll=\"true\" primaryKey=\"product_id\" primaryKeyTable=\"productView\">\n"
                + "       <View alias=\"productView\">\n" + "           <SQL dialect=\"db2\"><![CDATA[\n"
                + "SELECT *\n" + "FROM \"product\", \"product_class\"\n"
                + "WHERE \"product\".\"product_class_id\" = \"product_class\".\"product_class_id\"\n" + "]]>\n"
                + "           </SQL>\n" + "           <SQL dialect=\"mssql\"><![CDATA[\n"
                + "SELECT \"product\".\"product_id\",\n" + "\"product\".\"brand_name\",\n"
                + "\"product\".\"product_name\",\n" + "\"product\".\"SKU\",\n" + "\"product\".\"SRP\",\n"
                + "\"product\".\"gross_weight\",\n" + "\"product\".\"net_weight\",\n"
                + "\"product\".\"recyclable_package\",\n" + "\"product\".\"low_fat\",\n"
                + "\"product\".\"units_per_case\",\n" + "\"product\".\"cases_per_pallet\",\n"
                + "\"product\".\"shelf_width\",\n" + "\"product\".\"shelf_height\",\n"
                + "\"product\".\"shelf_depth\",\n" + "\"product_class\".\"product_class_id\",\n"
                + "\"product_class\".\"product_subcategory\",\n" + "\"product_class\".\"product_category\",\n"
                + "\"product_class\".\"product_department\",\n" + "\"product_class\".\"product_family\"\n"
                + "FROM \"product\" inner join \"product_class\"\n"
                + "ON \"product\".\"product_class_id\" = \"product_class\".\"product_class_id\"\n" + "]]>\n"
                + "           </SQL>\n" + "           <SQL dialect=\"mysql\"><![CDATA[\n"
                + "SELECT `product`.`product_id`,\n" + "`product`.`brand_name`,\n" + "`product`.`product_name`,\n"
                + "`product`.`SKU`,\n" + "`product`.`SRP`,\n" + "`product`.`gross_weight`,\n"
                + "`product`.`net_weight`,\n" + "`product`.`recyclable_package`,\n" + "`product`.`low_fat`,\n"
                + "`product`.`units_per_case`,\n" + "`product`.`cases_per_pallet`,\n" + "`product`.`shelf_width`,\n"
                + "`product`.`shelf_height`,\n" + "`product`.`shelf_depth`,\n"
                + "`product_class`.`product_class_id`,\n" + "`product_class`.`product_family`,\n"
                + "`product_class`.`product_department`,\n" + "`product_class`.`product_category`,\n"
                + "`product_class`.`product_subcategory` \n" + "FROM `product`, `product_class`\n"
                + "WHERE `product`.`product_class_id` = `product_class`.`product_class_id`\n" + "]]>\n"
                + "           </SQL>\n" + "           <SQL dialect=\"generic\"><![CDATA[\n" + "SELECT *\n"
                + "FROM \"product\", \"product_class\"\n"
                + "WHERE \"product\".\"product_class_id\" = \"product_class\".\"product_class_id\"\n" + "]]>\n"
                + "           </SQL>\n" + "       </View>\n"
                + "       <Level name=\"Product Family\" column=\"product_family\" uniqueMembers=\"true\"/>\n"
                + "       <Level name=\"Product Department\" column=\"product_department\" uniqueMembers=\"false\"/>\n"
                + "       <Level name=\"Product Category\" column=\"product_category\" uniqueMembers=\"false\"/>\n"
                + "       <Level name=\"Product Subcategory\" column=\"product_subcategory\" uniqueMembers=\"false\"/>\n"
                + "       <Level name=\"Brand Name\" column=\"brand_name\" uniqueMembers=\"false\"/>\n"
                + "       <Level name=\"Product Name\" column=\"product_name\" uniqueMembers=\"true\"/>\n"
                + "   </Hierarchy>\n" + "</Dimension>" ));
         */

        private static final StandardDimension productViewDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final DimensionConnector productViewConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        static {
            productViewDimension.setName("ProductView");

            ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            hierarchy.setHasAll(true);
            hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);

            SqlView sqlView = RolapMappingFactory.eINSTANCE.createSqlView();

            // DB2 SQL
            SqlStatement db2Sql = RolapMappingFactory.eINSTANCE.createSqlStatement();
            db2Sql.getDialects().add("db2");
            db2Sql.setSql("SELECT * FROM \"product\", \"product_class\" WHERE \"product\".\"product_class_id\" = \"product_class\".\"product_class_id\"");

            // MSSQL SQL
            SqlStatement mssqlSql = RolapMappingFactory.eINSTANCE.createSqlStatement();
            mssqlSql.getDialects().add("mssql");
            mssqlSql.setSql("SELECT \"product\".\"product_id\",\n" + "\"product\".\"brand_name\",\n"
                + "\"product\".\"product_name\",\n" + "\"product\".\"SKU\",\n" + "\"product\".\"SRP\",\n"
                + "\"product\".\"gross_weight\",\n" + "\"product\".\"net_weight\",\n"
                + "\"product\".\"recyclable_package\",\n" + "\"product\".\"low_fat\",\n"
                + "\"product\".\"units_per_case\",\n" + "\"product\".\"cases_per_pallet\",\n"
                + "\"product\".\"shelf_width\",\n" + "\"product\".\"shelf_height\",\n"
                + "\"product\".\"shelf_depth\",\n" + "\"product_class\".\"product_class_id\",\n"
                + "\"product_class\".\"product_subcategory\",\n" + "\"product_class\".\"product_category\",\n"
                + "\"product_class\".\"product_department\",\n" + "\"product_class\".\"product_family\"\n"
                + "FROM \"product\" inner join \"product_class\"\n"
                + "ON \"product\".\"product_class_id\" = \"product_class\".\"product_class_id\"\n");

            // MySQL SQL
            SqlStatement mysqlSql = RolapMappingFactory.eINSTANCE.createSqlStatement();
            mysqlSql.getDialects().add("mysql");
            mysqlSql.setSql("SELECT `product`.`product_id`,\n" + "`product`.`brand_name`,\n" + "`product`.`product_name`,\n"
                + "`product`.`SKU`,\n" + "`product`.`SRP`,\n" + "`product`.`gross_weight`,\n"
                + "`product`.`net_weight`,\n" + "`product`.`recyclable_package`,\n" + "`product`.`low_fat`,\n"
                + "`product`.`units_per_case`,\n" + "`product`.`cases_per_pallet`,\n" + "`product`.`shelf_width`,\n"
                + "`product`.`shelf_height`,\n" + "`product`.`shelf_depth`,\n"
                + "`product_class`.`product_class_id`,\n" + "`product_class`.`product_family`,\n"
                + "`product_class`.`product_department`,\n" + "`product_class`.`product_category`,\n"
                + "`product_class`.`product_subcategory` \n" + "FROM `product`, `product_class`\n"
                + "WHERE `product`.`product_class_id` = `product_class`.`product_class_id`\n");

            sqlView.getSqlStatements().add(db2Sql);
            sqlView.getSqlStatements().add(mssqlSql);
            sqlView.getSqlStatements().add(mysqlSql);

            sqlView.getColumns().add(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);
            sqlView.getColumns().add(CatalogSupplier.COLUMN_PRODUCT_FAMILY_PRODUCT_CLASS);
            sqlView.getColumns().add(CatalogSupplier.COLUMN_PRODUCT_DEPARTMENT_PRODUCT_CLASS);
            sqlView.getColumns().add(CatalogSupplier.COLUMN_PRODUCT_SUBCATEGORY_PRODUCT_CLASS);
            sqlView.getColumns().add(CatalogSupplier.COLUMN_BRAND_NAME_PRODUCT);
            sqlView.getColumns().add(CatalogSupplier.COLUMN_PRODUCT_NAME_PRODUCT);

            SqlSelectQuery selectQuery = RolapMappingFactory.eINSTANCE.createSqlSelectQuery();
            selectQuery.setAlias("productView");
            selectQuery.setSql(sqlView);

            hierarchy.setQuery(selectQuery);

            Level productFamilyLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productFamilyLevel.setName("Product Family");
            productFamilyLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_FAMILY_PRODUCT_CLASS);
            productFamilyLevel.setUniqueMembers(true);

            Level productDepartmentLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productDepartmentLevel.setName("Product Department");
            productDepartmentLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_DEPARTMENT_PRODUCT_CLASS);
            productDepartmentLevel.setUniqueMembers(false);

            Level productCategoryLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productCategoryLevel.setName("Product Category");
            productCategoryLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_CATEGORY_PRODUCT_CLASS);
            productCategoryLevel.setUniqueMembers(false);

            Level productSubcategoryLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productSubcategoryLevel.setName("Product Subcategory");
            productSubcategoryLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_SUBCATEGORY_PRODUCT_CLASS);
            productSubcategoryLevel.setUniqueMembers(false);

            Level brandNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
            brandNameLevel.setName("Brand Name");
            brandNameLevel.setColumn(CatalogSupplier.COLUMN_BRAND_NAME_PRODUCT);
            brandNameLevel.setUniqueMembers(false);

            Level productNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productNameLevel.setName("Product Name");
            productNameLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_NAME_PRODUCT);
            productNameLevel.setUniqueMembers(false);

            hierarchy.getLevels().add(productFamilyLevel);
            hierarchy.getLevels().add(productDepartmentLevel);
            hierarchy.getLevels().add(productCategoryLevel);
            hierarchy.getLevels().add(productSubcategoryLevel);
            hierarchy.getLevels().add(brandNameLevel);
            hierarchy.getLevels().add(productNameLevel);

            productViewDimension.getHierarchies().add(hierarchy);

            productViewConnector.setOverrideDimensionName("ProductView");
            productViewConnector.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);
            productViewConnector.setDimension(productViewDimension);
        }

        public BasicQueryTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(productViewConnector);
            }
            return result;
        }
    }

    public static class BasicQueryTestModifier4 extends EmfMappingModifier {

        /*
            <DimensionUsage name="Other Store" source="Store" foreignKey="unit_sales" />
         */

        private static final DimensionConnector otherStoreConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        static {
            otherStoreConnector.setOverrideDimensionName("Other Store");
            otherStoreConnector.setDimension(CatalogSupplier.DIMENSION_STORE_TYPE_WITH_QUERY_STORE);
            otherStoreConnector.setForeignKey(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
        }

        public BasicQueryTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(otherStoreConnector);
            }
            return result;
        }
    }

    public static class BasicQueryTestModifier5 extends EmfMappingModifier {

        /*
                        "<Dimension name=\"Gender3\" foreignKey=\"customer_id\">\n"
                + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Gender\"\n"
                + " allMemberCaption=\"Frauen und Maenner\" primaryKey=\"customer_id\">\n"
                + "  <Table name=\"customer\"/>\n"
                + "    <Level name=\"Gender\" column=\"gender\" uniqueMembers=\"true\"/>\n" + "  </Hierarchy>\n"
                + "</Dimension>" ));

         */

        private static final StandardDimension gender3Dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final DimensionConnector gender3Connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        static {
            gender3Dimension.setName("Gender3");

            ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            hierarchy.setHasAll(true);
            hierarchy.setAllMemberName("All Gender");
            hierarchy.setAllMemberCaption("Frauen und Maenner");
            hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);

            TableQuery tableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            tableQuery.setTable(CatalogSupplier.TABLE_CUSTOMER);
            hierarchy.setQuery(tableQuery);

            Level genderLevel = RolapMappingFactory.eINSTANCE.createLevel();
            genderLevel.setName("Gender");
            genderLevel.setColumn(CatalogSupplier.COLUMN_GENDER_CUSTOMER);
            genderLevel.setUniqueMembers(true);

            hierarchy.getLevels().add(genderLevel);

            gender3Dimension.getHierarchies().add(hierarchy);

            gender3Connector.setOverrideDimensionName("Gender3");
            gender3Connector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
            gender3Connector.setDimension(gender3Dimension);
        }

        public BasicQueryTestModifier5(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(gender3Connector);
            }
            return result;

        }
    }

    public static class BasicQueryTestModifier6 extends EmfMappingModifier {

        /*
            "<Dimension name=\"Position2608\" foreignKey=\"employee_id\">\n"
                + " <Hierarchy hasAll=\"true\" allMemberName=\"All Position\"\n"
                + "        primaryKey=\"employee_id\">\n" + "   <Table name=\"employee\"/>\n"
                + "   <Level name=\"Management Role\" uniqueMembers=\"true\"\n"
                + "          column=\"management_role\"/>\n"
                + "   <Level name=\"Position Title\" uniqueMembers=\"false\"\n"
                + "          column=\"position_title\" ordinalColumn=\"position_id\"/>\n" + " </Hierarchy>\n"
                + "</Dimension>" ));
         */

        private static final StandardDimension position2608Dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final DimensionConnector position2608Connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        static {
            position2608Dimension.setName("Position2608");

            ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            hierarchy.setHasAll(true);
            hierarchy.setAllMemberName("All Position");
            hierarchy.setAllMemberCaption("Frauen und Maenner");
            hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);

            TableQuery tableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            tableQuery.setTable(CatalogSupplier.TABLE_EMPLOYEE);
            hierarchy.setQuery(tableQuery);

            Level managementRoleLevel = RolapMappingFactory.eINSTANCE.createLevel();
            managementRoleLevel.setName("Management Role");
            managementRoleLevel.setColumn(CatalogSupplier.COLUMN_MANAGEMENT_ROLE_EMPLOYEE);
            managementRoleLevel.setUniqueMembers(true);

            Level positionTitleLevel = RolapMappingFactory.eINSTANCE.createLevel();
            positionTitleLevel.setName("Position Title");
            positionTitleLevel.setUniqueMembers(false);
            positionTitleLevel.setColumn(CatalogSupplier.COLUMN_POSITION_TITLE_EMPLOYEE);
            positionTitleLevel.setOrdinalColumn(CatalogSupplier.COLUMN_POSITION_ID_EMPLOYEE);

            hierarchy.getLevels().add(managementRoleLevel);
            hierarchy.getLevels().add(positionTitleLevel);

            position2608Dimension.getHierarchies().add(hierarchy);

            position2608Connector.setOverrideDimensionName("Position2608");
            position2608Connector.setForeignKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_SALARY);
            position2608Connector.setDimension(position2608Dimension);
        }

        public BasicQueryTestModifier6(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("HR".equals(cube.getName())) {
                result.add(position2608Connector);
            }
            return result;
        }
    }

    public static class BasicQueryTestModifier7 extends EmfMappingModifier {

        /*
            "<Measure name='zero' aggregator='sum'>\n"
            + " <MeasureExpression>\n" + " <SQL dialect='generic'>\n" + " NULL" + " </SQL>"
            + " <SQL dialect='vertica'>\n" + " NULL::FLOAT" + " </SQL>" + "</MeasureExpression></Measure>"
        */

        public BasicQueryTestModifier7(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends MeasureGroupMapping> physicalCubeMeasureGroups(PhysicalCubeMapping cube) {
            List<MeasureGroupMapping> result = new ArrayList<>();
            result.addAll(super.physicalCubeMeasureGroups(cube));
            if ("Sales".equals(cube.getName())) {
                MeasureGroup mg = RolapMappingFactory.eINSTANCE.createMeasureGroup();
                mg.setPhysicalCube((PhysicalCube) cube);

                SumMeasure zeroMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
                zeroMeasure.setName("zero");
                zeroMeasure.setMeasureGroup(mg);

                SQLExpressionColumn expressionColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();
                expressionColumn.setName("_zero_expression");

                SqlStatement genericSql = RolapMappingFactory.eINSTANCE.createSqlStatement();
                genericSql.getDialects().add("generic");
                genericSql.setSql(" NULL ");

                SqlStatement verticaSql = RolapMappingFactory.eINSTANCE.createSqlStatement();
                verticaSql.getDialects().add("vertica");
                verticaSql.setSql(" NULL::FLOAT ");

                expressionColumn.getSqls().add(genericSql);
                expressionColumn.getSqls().add(verticaSql);

                zeroMeasure.setColumn(expressionColumn);

                mg.getMeasures().add(zeroMeasure);
                result.add(mg);
            }
            return result;
        }
    }

    public static class BasicQueryTestModifier8 extends EmfMappingModifier {

        /*
            "<Dimension foreignKey=\"product_id\" type=\"StandardDimension\" visible=\"true\" highCardinality=\"false\" "
                + "name=\"Example\">\n"
                + "  <Hierarchy name=\"Example Hierarchy\" visible=\"true\" hasAll=\"true\" allMemberName=\"All\" "
                + "allMemberCaption=\"All\" primaryKey=\"product_id\" primaryKeyTable=\"product\">\n"
                + "    <Join leftKey=\"product_class_id\" rightKey=\"product_class_id\">\n"
                + "      <Table name=\"product\">\n" + "      </Table>\n" + "         <Table name=\"product_class\">\n"
                + "      </Table>\n" + "    </Join>\n"
                + "    <Level name=\"IsZero\" visible=\"true\" table=\"product\" column=\"product_id\" type=\"Integer\" "
                + "uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "      <NameExpression>\n" + "        <SQL dialect=\"generic\">\n" + "          <![CDATA[case when "
                + dialect.quoteIdentifier( "product", "product_id" ) + "=0 then 'Zero' else 'Non-Zero' end]]>\n"
                + "        </SQL>\n" + "      </NameExpression>\n" + "    </Level>\n"
                + "    <Level name=\"SubCat\" visible=\"true\" table=\"product_class\" column=\"product_class_id\" "
                + "type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "      <NameExpression>\n" + "        <SQL dialect=\"generic\">\n" + "          <![CDATA[" + dialect
                    .quoteIdentifier( "product_class", "product_subcategory" ) + "]]>\n" + "        </SQL>\n"
                + "      </NameExpression>\n" + "    </Level>\n"
                + "    <Level name=\"ProductName\" visible=\"true\" table=\"product\" column=\"product_id\" "
                + "type=\"Integer\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "      <NameExpression>\n" + "        <SQL dialect=\"generic\">\n" + "          <![CDATA[" + dialect
                    .quoteIdentifier( "product", "product_name" ) + "]]>\n" + "        </SQL>\n"
                + "      </NameExpression>\n" + "    </Level>\n" + "  </Hierarchy>\n" + "</Dimension>\n", null, null,
         */

        private Dialect dialect;

        public BasicQueryTestModifier8(CatalogMapping catalog, Dialect dialect) {
            super(catalog);
            this.dialect = dialect;
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                StandardDimension exampleDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                exampleDimension.setName("Example");
                exampleDimension.setVisible(true);

                ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy.setName("Example Hierarchy");
                hierarchy.setVisible(true);
                hierarchy.setHasAll(true);
                hierarchy.setAllMemberName("All");
                hierarchy.setAllMemberCaption("All");
                hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);

                JoinQuery joinQuery = RolapMappingFactory.eINSTANCE.createJoinQuery();

                JoinedQueryElement leftJoin = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
                leftJoin.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT);
                TableQuery leftTable = RolapMappingFactory.eINSTANCE.createTableQuery();
                leftTable.setTable(CatalogSupplier.TABLE_PRODUCT);
                leftJoin.setQuery(leftTable);

                JoinedQueryElement rightJoin = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
                rightJoin.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT_CLASS);
                TableQuery rightTable = RolapMappingFactory.eINSTANCE.createTableQuery();
                rightTable.setTable(CatalogSupplier.TABLE_PRODUCT_CLASS);
                rightJoin.setQuery(rightTable);

                joinQuery.setLeft(leftJoin);
                joinQuery.setRight(rightJoin);

                hierarchy.setQuery(joinQuery);

                // IsZero Level
                Level isZeroLevel = RolapMappingFactory.eINSTANCE.createLevel();
                isZeroLevel.setName("IsZero");
                isZeroLevel.setVisible(true);
                isZeroLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);
                isZeroLevel.setColumnType(ColumnInternalDataType.INTEGER);
                isZeroLevel.setUniqueMembers(false);
                isZeroLevel.setHideMemberIf(HideMemberIf.NEVER);

                SQLExpressionColumn isZeroNameColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();
                isZeroNameColumn.setName("_isZero_name_expression");
                SqlStatement isZeroSql = RolapMappingFactory.eINSTANCE.createSqlStatement();
                isZeroSql.getDialects().add("generic");
                isZeroSql.setSql("case when " + dialect.quoteIdentifier("product", "product_id") + "=0 then 'Zero' else 'Non-Zero' end");
                isZeroNameColumn.getSqls().add(isZeroSql);
                isZeroLevel.setNameColumn(isZeroNameColumn);

                // SubCat Level
                Level subCatLevel = RolapMappingFactory.eINSTANCE.createLevel();
                subCatLevel.setName("SubCat");
                subCatLevel.setVisible(true);
                subCatLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT_CLASS);
                subCatLevel.setColumnType(ColumnInternalDataType.STRING);
                subCatLevel.setUniqueMembers(false);
                subCatLevel.setHideMemberIf(HideMemberIf.NEVER);

                SQLExpressionColumn subCatNameColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();
                subCatNameColumn.setName("_subCat_name_expression");
                SqlStatement subCatSql = RolapMappingFactory.eINSTANCE.createSqlStatement();
                subCatSql.getDialects().add("generic");
                subCatSql.setSql(dialect.quoteIdentifier("product_class", "product_subcategory"));
                subCatNameColumn.getSqls().add(subCatSql);
                subCatLevel.setNameColumn(subCatNameColumn);

                // ProductName Level
                Level productNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
                productNameLevel.setName("ProductName");
                productNameLevel.setVisible(true);
                productNameLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);
                productNameLevel.setColumnType(ColumnInternalDataType.INTEGER);
                productNameLevel.setUniqueMembers(false);
                productNameLevel.setHideMemberIf(HideMemberIf.NEVER);

                SQLExpressionColumn productNameColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();
                productNameColumn.setName("_productName_name_expression");
                SqlStatement productNameSql = RolapMappingFactory.eINSTANCE.createSqlStatement();
                productNameSql.getDialects().add("generic");
                productNameSql.setSql(dialect.quoteIdentifier("product", "product_name"));
                productNameColumn.getSqls().add(productNameSql);
                productNameLevel.setNameColumn(productNameColumn);

                hierarchy.getLevels().add(isZeroLevel);
                hierarchy.getLevels().add(subCatLevel);
                hierarchy.getLevels().add(productNameLevel);

                exampleDimension.getHierarchies().add(hierarchy);

                DimensionConnector exampleConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                exampleConnector.setOverrideDimensionName("Example");
                exampleConnector.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);
                exampleConnector.setDimension(exampleDimension);

                result.add(exampleConnector);
            }
            return result;
        }
    }

    public static class BasicQueryTestModifier9 extends EmfMappingModifier {

        /*
            "<CalculatedMember dimension=\"Gender\" visible=\"true\" name=\"last\">"
                + "<Formula>([Gender].LastChild)</Formula>" + "</CalculatedMember>" ));
        */

        public BasicQueryTestModifier9(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                CalculatedMember calculatedMember = RolapMappingFactory.eINSTANCE.createCalculatedMember();
                calculatedMember.setHierarchy(CatalogSupplier.HIERARCHY_GENDER);
                calculatedMember.setVisible(true);
                calculatedMember.setName("last");
                calculatedMember.setFormula("([Gender].LastChild)");
                result.add(calculatedMember);
            }
            return result;
        }
    }

    public static class BasicQueryTestModifier10 extends EmfMappingModifier {

        /*
            "<Dimension name=\"Gender4\" foreignKey=\"customer_id\">\n"
                + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Gender\"\n"
                + " allLevelName=\"GenderLevel\" primaryKey=\"customer_id\">\n" + "  <Table name=\"customer\"/>\n"
                + "    <Level name=\"Gender\" column=\"gender\" uniqueMembers=\"true\"/>\n" + "  </Hierarchy>\n"
                + "</Dimension>" ));
         */

        private static final StandardDimension gender4Dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final DimensionConnector gender4Connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        static {
            gender4Dimension.setName("Gender4");

            ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            hierarchy.setHasAll(true);
            hierarchy.setAllMemberName("All Gender");
            hierarchy.setAllLevelName("GenderLevel");
            hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);

            TableQuery tableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            tableQuery.setTable(CatalogSupplier.TABLE_CUSTOMER);
            hierarchy.setQuery(tableQuery);

            Level genderLevel = RolapMappingFactory.eINSTANCE.createLevel();
            genderLevel.setName("Gender");
            genderLevel.setColumn(CatalogSupplier.COLUMN_GENDER_CUSTOMER);
            genderLevel.setUniqueMembers(true);

            hierarchy.getLevels().add(genderLevel);

            gender4Dimension.getHierarchies().add(hierarchy);

            gender4Connector.setOverrideDimensionName("Gender4");
            gender4Connector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
            gender4Connector.setDimension(gender4Dimension);
        }

        public BasicQueryTestModifier10(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(gender4Connector);
            }
            return result;
        }
    }

    public static class BasicQueryTestModifier11 extends EmfMappingModifier {

        /*
            "  <Dimension name=\"Customer_2\" foreignKey=\"customer_id\">\n" + "    <Hierarchy hasAll=\"true\" "
                + "allMemberName=\"All Customers\" " + "primaryKey=\"customer_id\" " + " >\n"
                + "      <Table name=\"customer\"/>\n"
                + "      <Level name=\"Name1\" column=\"customer_id\" uniqueMembers=\"true\"/>"
                + "      <Level name=\"Name2\" column=\"customer_id\" uniqueMembers=\"true\"/>\n"
                + "    </Hierarchy>\n" + "  </Dimension>" ));
         */

        private static final StandardDimension customer2Dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final DimensionConnector customer2Connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        static {
            customer2Dimension.setName("Customer_2");

            ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            hierarchy.setHasAll(true);
            hierarchy.setAllMemberName("All Customers");
            hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);

            TableQuery tableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            tableQuery.setTable(CatalogSupplier.TABLE_CUSTOMER);
            hierarchy.setQuery(tableQuery);

            Level name1Level = RolapMappingFactory.eINSTANCE.createLevel();
            name1Level.setName("Name1");
            name1Level.setColumn(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);
            name1Level.setUniqueMembers(true);

            Level name2Level = RolapMappingFactory.eINSTANCE.createLevel();
            name2Level.setName("Name2");
            name2Level.setColumn(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);
            name2Level.setUniqueMembers(true);

            hierarchy.getLevels().add(name1Level);
            hierarchy.getLevels().add(name2Level);

            customer2Dimension.getHierarchies().add(hierarchy);

            customer2Connector.setOverrideDimensionName("Customer_2");
            customer2Connector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
            customer2Connector.setDimension(customer2Dimension);
        }

        public BasicQueryTestModifier11(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(customer2Connector);
            }
            return result;
        }
    }

    public static class BasicQueryTestModifier12 extends EmfMappingModifier {

        /*
            "<Measure name='zero' aggregator='sum'>\n"
            + "  <MeasureExpression>\n" + "  <SQL dialect='generic'>\n" + "    0"
            + "  </SQL></MeasureExpression></Measure>", null, null ));        */

        public BasicQueryTestModifier12(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends MeasureGroupMapping> physicalCubeMeasureGroups(PhysicalCubeMapping cube) {
            List<MeasureGroupMapping> result = new ArrayList<>();
            result.addAll(super.physicalCubeMeasureGroups(cube));
            if ("Sales".equals(cube.getName())) {
                MeasureGroup mg = RolapMappingFactory.eINSTANCE.createMeasureGroup();
                mg.setPhysicalCube((PhysicalCube) cube);

                SumMeasure zeroMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
                zeroMeasure.setName("zero");
                zeroMeasure.setMeasureGroup(mg);

                SQLExpressionColumn expressionColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();
                expressionColumn.setName("_zero_expression");

                SqlStatement genericSql = RolapMappingFactory.eINSTANCE.createSqlStatement();
                genericSql.getDialects().add("generic");
                genericSql.setSql("0");

                expressionColumn.getSqls().add(genericSql);

                zeroMeasure.setColumn(expressionColumn);

                mg.getMeasures().add(zeroMeasure);
                result.add(mg);
            }
            return result;
        }
    }

    public static class BasicQueryTestModifier14 extends EmfMappingModifier {

        /*
        "" + "<?xml version=\"1.0\"?>\n" + "<Schema name=\"FoodMart 2442\">\n"
            + "<Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">\n" + "  <Table name=\"sales_fact_1997\">\n"
            + "    <AggName name=\"agg_c_special_sales_fact_1997\">\n"
            + "        <AggFactCount column=\"FACT_COUNT\"/>\n" + "        <AggIgnoreColumn column=\"foo\"/>\n"
            + "        <AggIgnoreColumn column=\"bar\"/>\n"
            + "        <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"UNIT_SALES_SUM\" />\n"
            + "        <AggLevel name=\"[Time].[Year]\" column=\"TIME_YEAR\" />\n"
            + "        <AggLevel name=\"[Time].[Quarter]\" column=\"TIME_QUARTER\" />\n" + "    </AggName>\n"
            + "  </Table>\n"

            + " <Dimension name=\"Time\"" + " type=\"TimeDimension\" foreignKey=\"time_id\">\n"
            + "   <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n" + "      <Table name=\"time_by_day\"/>\n"
            + "      <Level name=\"Year\" \n"

            // column and nameColumn are the same
            + "         column=\"the_year\" nameColumn=\"the_year\" ordinalColumn=\"the_year\"\n"
            + "         type=\"Numeric\" uniqueMembers=\"true\" levelType=\"TimeYears\"/>\n"
            + "      <Level name=\"Quarter\" \n" + "         column=\"quarter\" ordinalColumn=\"quarter\"\n"
            + "         uniqueMembers=\"false\" levelType=\"TimeQuarters\"/>\n" + "    </Hierarchy>\n"
            + "  </Dimension>\n"

            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n" + "</Cube>\n" + "</Schema>";
            */

        public BasicQueryTestModifier14(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Create Unit Sales measure
            SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");

            // Create Time dimension
            TimeDimension timeDimension = RolapMappingFactory.eINSTANCE.createTimeDimension();
            timeDimension.setName("Time");

            ExplicitHierarchy timeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            timeHierarchy.setHasAll(false);
            timeHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);

            TableQuery timeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            timeTableQuery.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);
            timeHierarchy.setQuery(timeTableQuery);

            Level yearLevel = RolapMappingFactory.eINSTANCE.createLevel();
            yearLevel.setName("Year");
            yearLevel.setColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
            yearLevel.setNameColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
            yearLevel.setOrdinalColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
            yearLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            yearLevel.setUniqueMembers(true);

            Level quarterLevel = RolapMappingFactory.eINSTANCE.createLevel();
            quarterLevel.setName("Quarter");
            quarterLevel.setColumn(CatalogSupplier.COLUMN_QUARTER_TIME_BY_DAY);
            quarterLevel.setOrdinalColumn(CatalogSupplier.COLUMN_QUARTER_TIME_BY_DAY);
            quarterLevel.setUniqueMembers(false);

            timeHierarchy.getLevels().add(yearLevel);
            timeHierarchy.getLevels().add(quarterLevel);
            timeDimension.getHierarchies().add(timeHierarchy);

            // Create dimension connector for Time
            DimensionConnector timeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            timeConnector.setOverrideDimensionName("Time");
            timeConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
            timeConnector.setDimension(timeDimension);

            // Create aggregation table
            AggregationName aggName = RolapMappingFactory.eINSTANCE.createAggregationName();
            aggName.setName(CatalogSupplier.TABLE_AGG_C_SPECIAL_SALES_FACT_1997);

            AggregationColumnName factCount = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
            factCount.setColumn(CatalogSupplier.COLUMN_FACT_COUNT_AGG_C_SPECIAL_SALES_FACT_1997);
            aggName.setAggregationFactCount(factCount);

            AggregationMeasure aggMeasure = RolapMappingFactory.eINSTANCE.createAggregationMeasure();
            aggMeasure.setName("[Measures].[Unit Sales]");
            aggMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SUM_AGG_C_SPECIAL_SALES_FACT_1997);
            aggName.getAggregationMeasures().add(aggMeasure);

            AggregationLevel aggYearLevel = RolapMappingFactory.eINSTANCE.createAggregationLevel();
            aggYearLevel.setName("[Time].[Year]");
            aggYearLevel.setColumn(CatalogSupplier.COLUMN_TIME_YEAR_AGG_C_SPECIAL_SALES_FACT_1997);
            aggName.getAggregationLevels().add(aggYearLevel);

            AggregationLevel aggQuarterLevel = RolapMappingFactory.eINSTANCE.createAggregationLevel();
            aggQuarterLevel.setName("[Time].[Quarter]");
            aggQuarterLevel.setColumn(CatalogSupplier.COLUMN_TIME_QUARTER_AGG_C_SPECIAL_SALES_FACT_1997);
            aggName.getAggregationLevels().add(aggQuarterLevel);

            // Create table query with aggregation
            TableQuery tableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            tableQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
            tableQuery.getAggregationTables().add(aggName);

            // Create measure group
            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(unitSalesMeasure);
            unitSalesMeasure.setMeasureGroup(measureGroup);

            // Create Sales cube
            PhysicalCube salesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            salesCube.setName("Sales");
            salesCube.setDefaultMeasure(unitSalesMeasure);
            salesCube.setQuery(tableQuery);
            salesCube.getDimensionConnectors().add(timeConnector);
            salesCube.getMeasureGroups().add(measureGroup);
            measureGroup.setPhysicalCube(salesCube);

            // Create catalog
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName("FoodMart 2442");
            catalog.getCubes().add(salesCube);

            return catalog;
        }
    }

    public static class BasicQueryTestModifier15 extends EmfMappingModifier {

        /*
        "" + "<?xml version=\"1.0\"?>\n" + "<Schema name=\"FoodMart 2285\">\n"
            + "<Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">\n" + "  <Table name=\"sales_fact_1997\">\n"
            + "     <AggExclude name=\"agg_c_special_sales_fact_1997\" />" + "  </Table>\n"
            + "  <Dimension name=\"Product\" foreignKey=\"product_id\">\n"
            + "     <Hierarchy hasAll=\"true\" primaryKey=\"product_id\" primaryKeyTable=\"product\">\n"
            + "         <Join leftKey=\"product_class_id\" rightKey=\"product_class_id\">\n"
            + "             <Table name=\"product\"/>\n" + "             <Table name=\"product_class\"/>\n"
            + "         </Join>\t  \n"
            + "         <Level name=\"Product Subcategory\" table=\"product_class\" column=\"product_class_id\"\n"
            + "             uniqueMembers=\"false\"/>\n" + "     </Hierarchy>\n" + "  </Dimension>\n"
            + "  <Dimension name=\"Time\" type=\"TimeDimension\" foreignKey=\"time_id\">\n"
            + "     <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n" + "         <Table name=\"time_by_day\"/>\n"
            + "         <Level name=\"Month Upper\" column=\"month_of_year\" nameColumn=\"the_month\" "
            + "             uniqueMembers=\"false\" type=\"Numeric\" levelType=\"TimeMonths\"/>"
            + "         <Level name=\"Month\" column=\"month_of_year\" nameColumn=\"the_month\" "
            + "             uniqueMembers=\"false\" type=\"Numeric\" levelType=\"TimeMonths\"/>\n"
            + "    </Hierarchy>\n" + "  </Dimension>\n"
            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\" "
            + "     formatString=\"Standard\"/>\n" + "</Cube>\n" + "</Schema>";
            */

        public BasicQueryTestModifier15(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Create Unit Sales measure
            SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");

            // Create Product dimension
            StandardDimension productDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            productDimension.setName("Product");

            ExplicitHierarchy productHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            productHierarchy.setHasAll(true);
            productHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);

            JoinQuery productJoin = RolapMappingFactory.eINSTANCE.createJoinQuery();
            JoinedQueryElement leftJoin = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
            leftJoin.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT);
            TableQuery leftTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            leftTable.setTable(CatalogSupplier.TABLE_PRODUCT);
            leftJoin.setQuery(leftTable);

            JoinedQueryElement rightJoin = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
            rightJoin.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT_CLASS);
            TableQuery rightTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            rightTable.setTable(CatalogSupplier.TABLE_PRODUCT_CLASS);
            rightJoin.setQuery(rightTable);

            productJoin.setLeft(leftJoin);
            productJoin.setRight(rightJoin);
            productHierarchy.setQuery(productJoin);

            Level productSubcategoryLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productSubcategoryLevel.setName("Product Subcategory");
            productSubcategoryLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT_CLASS);
            productSubcategoryLevel.setUniqueMembers(false);

            productHierarchy.getLevels().add(productSubcategoryLevel);
            productDimension.getHierarchies().add(productHierarchy);

            DimensionConnector productConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            productConnector.setOverrideDimensionName("Product");
            productConnector.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);
            productConnector.setDimension(productDimension);

            // Create Time dimension
            TimeDimension timeDimension = RolapMappingFactory.eINSTANCE.createTimeDimension();
            timeDimension.setName("Time");

            ExplicitHierarchy timeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            timeHierarchy.setHasAll(false);
            timeHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);

            TableQuery timeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            timeTableQuery.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);
            timeHierarchy.setQuery(timeTableQuery);

            Level monthUpperLevel = RolapMappingFactory.eINSTANCE.createLevel();
            monthUpperLevel.setName("Month Upper");
            monthUpperLevel.setColumn(CatalogSupplier.COLUMN_MONTH_OF_YEAR_TIME_BY_DAY);
            monthUpperLevel.setNameColumn(CatalogSupplier.COLUMN_THE_MONTH_TIME_BY_DAY);
            monthUpperLevel.setUniqueMembers(false);
            monthUpperLevel.setColumnType(ColumnInternalDataType.NUMERIC);

            Level monthLevel = RolapMappingFactory.eINSTANCE.createLevel();
            monthLevel.setName("Month");
            monthLevel.setColumn(CatalogSupplier.COLUMN_MONTH_OF_YEAR_TIME_BY_DAY);
            monthLevel.setNameColumn(CatalogSupplier.COLUMN_THE_MONTH_TIME_BY_DAY);
            monthLevel.setUniqueMembers(false);
            monthLevel.setColumnType(ColumnInternalDataType.NUMERIC);

            timeHierarchy.getLevels().add(monthUpperLevel);
            timeHierarchy.getLevels().add(monthLevel);
            timeDimension.getHierarchies().add(timeHierarchy);

            DimensionConnector timeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            timeConnector.setOverrideDimensionName("Time");
            timeConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
            timeConnector.setDimension(timeDimension);

            // Create aggregation exclude
            AggregationExclude aggExclude = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude.setName("agg_c_special_sales_fact_1997");

            // Create table query with aggregation exclude
            TableQuery tableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            tableQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
            tableQuery.getAggregationExcludes().add(aggExclude);

            // Create measure group
            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(unitSalesMeasure);
            unitSalesMeasure.setMeasureGroup(measureGroup);

            // Create Sales cube
            PhysicalCube salesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            salesCube.setName("Sales");
            salesCube.setDefaultMeasure(unitSalesMeasure);
            salesCube.setQuery(tableQuery);
            salesCube.getDimensionConnectors().add(productConnector);
            salesCube.getDimensionConnectors().add(timeConnector);
            salesCube.getMeasureGroups().add(measureGroup);
            measureGroup.setPhysicalCube(salesCube);

            // Create catalog
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName("FoodMart 2285");
            catalog.getCubes().add(salesCube);
            if (catalog2 != null) {
                catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            }

            return catalog;
        }
    }

    public static class BasicQueryTestModifier16 extends EmfMappingModifier {

        /*
        "" + "<?xml version=\"1.0\"?>\n" + "<Schema name=\"tiny\">\n"
            + "  <Dimension name=\"Time\" type=\"TimeDimension\">\n"
            + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n" + "      <Table name=\"time_by_day\" />\n"
            + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\" "
            + "levelType=\"TimeYears\" />\n"
            + "      <Level name=\"Quarter\" uniqueMembers=\"false\" levelType=\"TimeQuarters\" >\n"
            + "        <KeyExpression><SQL>RTRIM(quarter)</SQL></KeyExpression>\n" + "      </Level>\n"
            + "    </Hierarchy>\n" + "  </Dimension>\n" + "

            <Dimension name=\"Product\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"product_id\" primaryKeyTable=\"product\">\n"
            + "      <Join leftKey=\"product_class_id\" rightKey=\"product_class_id\">\n"
            + "        <Table name=\"product\"/>\n" + "        <Table name=\"product_class\"/>\n" + "      </Join>\n"
            + "      <Level name=\"Product Family\" table=\"product_class\" column=\"product_family\" "
            + "uniqueMembers=\"true\" />\n" + "    </Hierarchy>\n" + "  </Dimension>\n"

            + "  <Dimension name=\"Warehouse\">\n" + "    <Hierarchy hasAll=\"true\" primaryKey=\"warehouse_id\">\n"
            + "      <Table name=\"warehouse\"/>\n"
            + "      <Level name=\"Country\" column=\"warehouse_country\" uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"State Province\" column=\"warehouse_state_province\"\n"
            + "          uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"City\" column=\"warehouse_city\" uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Warehouse Name\" column=\"warehouse_name\" uniqueMembers=\"true\"/>\n"
            + "    </Hierarchy>\n" + "  </Dimension>\n" + "


            <Cube name=\"Sales\">\n"
            + "    <Table name=\"sales_fact_1997\" />\n"
            + "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\" />\n"
            + "    <DimensionUsage name=\"Product\" source=\"Product\" foreignKey=\"product_id\" />\n"
            + "    <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\" formatString=\"Standard\" />\n"
            + "  </Cube>\n" + "
            <Cube name=\"Warehouse\">\n" + "    <Table name=\"inventory_fact_1997\" />\n"
            + "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\" />\n"
            + "    <DimensionUsage name=\"Product\" source=\"Product\" foreignKey=\"product_id\" />\n"
            + "    <DimensionUsage name=\"Warehouse\" source=\"Warehouse\" foreignKey=\"warehouse_id\"/>\n"
            + "    <Measure name=\"Warehouse Sales\" column=\"warehouse_sales\" aggregator=\"sum\" "
            + "formatString=\"Standard\" />\n"
            + "    <CalculatedMember name=\"Warehouse Sales Calc\" dimension=\"Measures\">\n"
            + "      <Formula>[Measures].[Warehouse Sales]</Formula>\n" + "    </CalculatedMember>\n" + "  </Cube>\n"

            + "  <VirtualCube name=\"Warehouse and Sales\">\n" + "    <VirtualCubeDimension name=\"Time\" />\n"
            + "    <VirtualCubeDimension name=\"Product\" />\n"
            + "    <VirtualCubeDimension cubeName=\"Warehouse\" name=\"Warehouse\"/>\n"
            + "    <VirtualCubeMeasure cubeName=\"Sales\" name=\"[Measures].[Unit Sales]\" />\n"
            + "    <VirtualCubeMeasure cubeName=\"Warehouse\" name=\"[Measures].[Warehouse Sales Calc]\" />\n"
            + "  </VirtualCube>\n" + "</Schema>\n";

            */

        public BasicQueryTestModifier16(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Create Time dimension
            TimeDimension timeDimension = RolapMappingFactory.eINSTANCE.createTimeDimension();
            timeDimension.setName("Time");

            ExplicitHierarchy timeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            timeHierarchy.setHasAll(false);
            timeHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);

            TableQuery timeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            timeTableQuery.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);
            timeHierarchy.setQuery(timeTableQuery);

            Level yearLevel = RolapMappingFactory.eINSTANCE.createLevel();
            yearLevel.setName("Year");
            yearLevel.setColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
            yearLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            yearLevel.setUniqueMembers(true);

            Level quarterLevel = RolapMappingFactory.eINSTANCE.createLevel();
            quarterLevel.setName("Quarter");
            quarterLevel.setUniqueMembers(false);

            SQLExpressionColumn quarterColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();
            quarterColumn.setName("_quarter_key");
            SqlStatement quarterSql = RolapMappingFactory.eINSTANCE.createSqlStatement();
            quarterSql.getDialects().add("generic");
            quarterSql.setSql("RTRIM(quarter)");
            quarterColumn.getSqls().add(quarterSql);
            quarterLevel.setColumn(quarterColumn);

            timeHierarchy.getLevels().add(yearLevel);
            timeHierarchy.getLevels().add(quarterLevel);
            timeDimension.getHierarchies().add(timeHierarchy);

            // Create Product dimension
            StandardDimension productDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            productDimension.setName("Product");

            ExplicitHierarchy productHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            productHierarchy.setHasAll(true);
            productHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);

            JoinQuery productJoin = RolapMappingFactory.eINSTANCE.createJoinQuery();
            JoinedQueryElement productLeft = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
            productLeft.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT);
            TableQuery productLeftTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            productLeftTable.setTable(CatalogSupplier.TABLE_PRODUCT);
            productLeft.setQuery(productLeftTable);

            JoinedQueryElement productRight = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
            productRight.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT_CLASS);
            TableQuery productRightTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            productRightTable.setTable(CatalogSupplier.TABLE_PRODUCT_CLASS);
            productRight.setQuery(productRightTable);

            productJoin.setLeft(productLeft);
            productJoin.setRight(productRight);
            productHierarchy.setQuery(productJoin);

            Level productFamilyLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productFamilyLevel.setName("Product Family");
            productFamilyLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_FAMILY_PRODUCT_CLASS);
            productFamilyLevel.setUniqueMembers(true);

            productHierarchy.getLevels().add(productFamilyLevel);
            productDimension.getHierarchies().add(productHierarchy);

            // Create Warehouse dimension
            StandardDimension warehouseDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            warehouseDimension.setName("Warehouse");

            ExplicitHierarchy warehouseHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            warehouseHierarchy.setHasAll(true);
            warehouseHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_WAREHOUSE_ID_WAREHOUSE);

            TableQuery warehouseTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            warehouseTableQuery.setTable(CatalogSupplier.TABLE_WAREHOUSE);
            warehouseHierarchy.setQuery(warehouseTableQuery);

            Level countryLevel = RolapMappingFactory.eINSTANCE.createLevel();
            countryLevel.setName("Country");
            countryLevel.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_COUNTRY_WAREHOUSE);
            countryLevel.setUniqueMembers(true);

            Level stateProvinceLevel = RolapMappingFactory.eINSTANCE.createLevel();
            stateProvinceLevel.setName("State Province");
            stateProvinceLevel.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_STATE_PROVINCE_WAREHOUSE);
            stateProvinceLevel.setUniqueMembers(true);

            Level cityLevel = RolapMappingFactory.eINSTANCE.createLevel();
            cityLevel.setName("City");
            cityLevel.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_CITY_WAREHOUSE);
            cityLevel.setUniqueMembers(false);

            Level warehouseNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
            warehouseNameLevel.setName("Warehouse Name");
            warehouseNameLevel.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_NAME_WAREHOUSE);
            warehouseNameLevel.setUniqueMembers(true);

            warehouseHierarchy.getLevels().add(countryLevel);
            warehouseHierarchy.getLevels().add(stateProvinceLevel);
            warehouseHierarchy.getLevels().add(cityLevel);
            warehouseHierarchy.getLevels().add(warehouseNameLevel);
            warehouseDimension.getHierarchies().add(warehouseHierarchy);

            // Create Sales cube
            PhysicalCube salesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            salesCube.setName("Sales");

            TableQuery salesTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            salesTableQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
            salesCube.setQuery(salesTableQuery);

            DimensionConnector salesTimeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            salesTimeConnector.setOverrideDimensionName("Time");
            salesTimeConnector.setDimension(timeDimension);
            salesTimeConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);

            DimensionConnector salesProductConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            salesProductConnector.setOverrideDimensionName("Product");
            salesProductConnector.setDimension(productDimension);
            salesProductConnector.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);

            salesCube.getDimensionConnectors().add(salesTimeConnector);
            salesCube.getDimensionConnectors().add(salesProductConnector);

            SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");

            MeasureGroup salesMeasureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            salesMeasureGroup.getMeasures().add(unitSalesMeasure);
            unitSalesMeasure.setMeasureGroup(salesMeasureGroup);
            salesMeasureGroup.setPhysicalCube(salesCube);
            salesCube.getMeasureGroups().add(salesMeasureGroup);

            // Create Warehouse cube
            PhysicalCube warehouseCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            warehouseCube.setName("Warehouse");

            TableQuery warehouseFactTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            warehouseFactTableQuery.setTable(CatalogSupplier.TABLE_INVENTORY_FACT);
            warehouseCube.setQuery(warehouseFactTableQuery);

            DimensionConnector whTimeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            whTimeConnector.setOverrideDimensionName("Time");
            whTimeConnector.setDimension(timeDimension);
            whTimeConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_INVENTORY_FACT);

            DimensionConnector whProductConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            whProductConnector.setOverrideDimensionName("Product");
            whProductConnector.setDimension(productDimension);
            whProductConnector.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_INVENTORY_FACT);

            DimensionConnector whWarehouseConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            whWarehouseConnector.setOverrideDimensionName("Warehouse");
            whWarehouseConnector.setDimension(warehouseDimension);
            whWarehouseConnector.setForeignKey(CatalogSupplier.COLUMN_WAREHOUSE_ID_INVENTORY_FACT);

            warehouseCube.getDimensionConnectors().add(whTimeConnector);
            warehouseCube.getDimensionConnectors().add(whProductConnector);
            warehouseCube.getDimensionConnectors().add(whWarehouseConnector);

            SumMeasure warehouseSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            warehouseSalesMeasure.setName("Warehouse Sales");
            warehouseSalesMeasure.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_SALES_INVENTORY_FACT);
            warehouseSalesMeasure.setFormatString("Standard");

            MeasureGroup warehouseMeasureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            warehouseMeasureGroup.getMeasures().add(warehouseSalesMeasure);
            warehouseSalesMeasure.setMeasureGroup(warehouseMeasureGroup);
            warehouseMeasureGroup.setPhysicalCube(warehouseCube);
            warehouseCube.getMeasureGroups().add(warehouseMeasureGroup);

            CalculatedMember warehouseSalesCalc = RolapMappingFactory.eINSTANCE.createCalculatedMember();
            warehouseSalesCalc.setName("Warehouse Sales Calc");
            warehouseSalesCalc.setFormula("[Measures].[Warehouse Sales]");
            warehouseCube.getCalculatedMembers().add(warehouseSalesCalc);

            // Create Virtual Cube
            VirtualCube virtualCube = RolapMappingFactory.eINSTANCE.createVirtualCube();
            virtualCube.setName("Warehouse and Sales");

            DimensionConnector vcTimeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            vcTimeConnector.setOverrideDimensionName("Time");
            vcTimeConnector.setDimension(timeDimension);

            DimensionConnector vcProductConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            vcProductConnector.setOverrideDimensionName("Product");
            vcProductConnector.setDimension(productDimension);

            DimensionConnector vcWarehouseConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            vcWarehouseConnector.setOverrideDimensionName("Warehouse");
            vcWarehouseConnector.setPhysicalCube(warehouseCube);
            vcWarehouseConnector.setDimension(warehouseDimension);

            virtualCube.getDimensionConnectors().add(vcTimeConnector);
            virtualCube.getDimensionConnectors().add(vcProductConnector);
            virtualCube.getDimensionConnectors().add(vcWarehouseConnector);

            virtualCube.getReferencedMeasures().add(unitSalesMeasure);
            virtualCube.getReferencedCalculatedMembers().add(warehouseSalesCalc);

            // Create catalog
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName("tiny");
            catalog.getCubes().add(salesCube);
            catalog.getCubes().add(warehouseCube);
            catalog.getCubes().add(virtualCube);
            if (catalog2 != null) {
                catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            }

            return catalog;
        }
    }

    public static class BasicQueryTestModifier17 extends EmfMappingModifier {

        /*
        "" + "<?xml version=\"1.0\"?>\n" + "<Schema name=\"FoodMart 2399 Rollup Type\">\n"
            + "<Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">\n" + "  <Table name=\"sales_fact_1997\">\n"
            + "<AggExclude name=\"agg_c_14_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_g_ms_pcat_sales_fact_1997\" />\n"
            + "    <AggExclude name=\"agg_l_03_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_l_04_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_l_05_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_lc_06_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_lc_100_sales_fact_1997\" />\n"
            + "    <AggExclude name=\"agg_ll_01_sales_fact_1997\" />\n"
            + "    <AggExclude name=\"agg_pl_01_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_c_special_sales_fact_1997\" />\n"
            + "    <AggName name=\"agg_c_10_sales_fact_1997\">\n" + "        <AggFactCount column=\"FACT_COUNT\"/>\n"
            + "        <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"UNIT_SALES\" rollupType=\"AvgFromSum\" />\n"
            + "        <AggLevel name=\"[Time].[Year]\" column=\"THE_YEAR\" />\n"
            + "        <AggLevel name=\"[Time].[Quarter]\" column=\"QUARTER\" />\n" + "    </AggName>\n"
            + "  </Table>\n" + "  <Dimension name=\"Time\" type=\"TimeDimension\" foreignKey=\"time_id\">\n"
            + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n" + "      <Table name=\"time_by_day\"/>\n"
            + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
            + "          levelType=\"TimeYears\"/>\n"
            + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
            + "          levelType=\"TimeQuarters\"/>\n" + "    </Hierarchy>\n" + "  </Dimension>\n"
            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"avg\" />\n" + "</Cube>\n"
            + "</Schema>";
            */

        public BasicQueryTestModifier17(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Create Unit Sales measure
            SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);

            // Create Time dimension
            TimeDimension timeDimension = RolapMappingFactory.eINSTANCE.createTimeDimension();
            timeDimension.setName("Time");

            ExplicitHierarchy timeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            timeHierarchy.setHasAll(false);
            timeHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);

            TableQuery timeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            timeTableQuery.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);
            timeHierarchy.setQuery(timeTableQuery);

            Level yearLevel = RolapMappingFactory.eINSTANCE.createLevel();
            yearLevel.setName("Year");
            yearLevel.setColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
            yearLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            yearLevel.setUniqueMembers(true);

            Level quarterLevel = RolapMappingFactory.eINSTANCE.createLevel();
            quarterLevel.setName("Quarter");
            quarterLevel.setColumn(CatalogSupplier.COLUMN_QUARTER_TIME_BY_DAY);
            quarterLevel.setUniqueMembers(false);

            timeHierarchy.getLevels().add(yearLevel);
            timeHierarchy.getLevels().add(quarterLevel);
            timeDimension.getHierarchies().add(timeHierarchy);

            // Create aggregation excludes
            AggregationExclude aggExclude1 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude1.setName("agg_c_14_sales_fact_1997");

            AggregationExclude aggExclude2 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude2.setName("agg_g_ms_pcat_sales_fact_1997");

            AggregationExclude aggExclude3 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude3.setName("agg_l_03_sales_fact_1997");

            AggregationExclude aggExclude4 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude4.setName("agg_l_04_sales_fact_1997");

            AggregationExclude aggExclude5 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude5.setName("agg_l_05_sales_fact_1997");

            AggregationExclude aggExclude6 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude6.setName("agg_lc_06_sales_fact_1997");

            AggregationExclude aggExclude7 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude7.setName("agg_lc_100_sales_fact_1997");

            AggregationExclude aggExclude8 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude8.setName("agg_ll_01_sales_fact_1997");

            AggregationExclude aggExclude9 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude9.setName("agg_pl_01_sales_fact_1997");

            AggregationExclude aggExclude10 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude10.setName("agg_c_special_sales_fact_1997");

            // Create aggregation table with rollup type
            AggregationName aggName = RolapMappingFactory.eINSTANCE.createAggregationName();
            aggName.setName(CatalogSupplier.TABLE_AGG_C_10_SALES_FACT_1997);

            AggregationColumnName factCount = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
            factCount.setColumn(CatalogSupplier.COLUMN_FACT_COUNT_AGG_C_10_SALES_FACT_1997);
            aggName.setAggregationFactCount(factCount);

            AggregationMeasure aggMeasure = RolapMappingFactory.eINSTANCE.createAggregationMeasure();
            aggMeasure.setName("[Measures].[Unit Sales]");
            aggMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_AGG_C_10_SALES_FACT_1997);
            aggMeasure.setRollupType("AvgFromSum");
            aggName.getAggregationMeasures().add(aggMeasure);

            AggregationLevel aggYearLevel = RolapMappingFactory.eINSTANCE.createAggregationLevel();
            aggYearLevel.setName("[Time].[Time].[Year]");
            aggYearLevel.setColumn(CatalogSupplier.COLUMN_THE_YEAR_AGG_C_10_SALES_FACT_1997);
            aggName.getAggregationLevels().add(aggYearLevel);

            AggregationLevel aggQuarterLevel = RolapMappingFactory.eINSTANCE.createAggregationLevel();
            aggQuarterLevel.setName("[Time].[Time].[Quarter]");
            aggQuarterLevel.setColumn(CatalogSupplier.COLUMN_QUARTER_AGG_C_10_SALES_FACT_1997);
            aggName.getAggregationLevels().add(aggQuarterLevel);

            // Create table query with aggregation excludes and table
            TableQuery tableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            tableQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
            tableQuery.getAggregationExcludes().add(aggExclude1);
            tableQuery.getAggregationExcludes().add(aggExclude2);
            tableQuery.getAggregationExcludes().add(aggExclude3);
            tableQuery.getAggregationExcludes().add(aggExclude4);
            tableQuery.getAggregationExcludes().add(aggExclude5);
            tableQuery.getAggregationExcludes().add(aggExclude6);
            tableQuery.getAggregationExcludes().add(aggExclude7);
            tableQuery.getAggregationExcludes().add(aggExclude8);
            tableQuery.getAggregationExcludes().add(aggExclude9);
            tableQuery.getAggregationExcludes().add(aggExclude10);
            tableQuery.getAggregationTables().add(aggName);

            // Create dimension connector for Time
            DimensionConnector timeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            timeConnector.setOverrideDimensionName("Time");
            timeConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
            timeConnector.setDimension(timeDimension);

            // Create measure group
            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(unitSalesMeasure);
            unitSalesMeasure.setMeasureGroup(measureGroup);

            // Create Sales cube
            PhysicalCube salesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            salesCube.setName("Sales");
            salesCube.setDefaultMeasure(unitSalesMeasure);
            salesCube.setQuery(tableQuery);
            salesCube.getDimensionConnectors().add(timeConnector);
            salesCube.getMeasureGroups().add(measureGroup);
            measureGroup.setPhysicalCube(salesCube);

            // Create catalog
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName("FoodMart 2399 Rollup Type");
            catalog.getCubes().add(salesCube);
            if (catalog2 != null) {
                catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            }

            return catalog;
        }
    }

    public static class BasicQueryTestModifier18 extends EmfMappingModifier {

        /*
        "" + "<?xml version=\"1.0\"?>\n" + "<Schema name=\"FoodMart 2399 Rollup Type\">\n"
            + "<Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">\n" + "  <Table name=\"sales_fact_1997\">\n"
            + "<AggExclude name=\"agg_c_14_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_g_ms_pcat_sales_fact_1997\" />\n"
            + "    <AggExclude name=\"agg_l_03_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_l_04_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_l_05_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_lc_06_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_lc_100_sales_fact_1997\" />\n"
            + "    <AggExclude name=\"agg_ll_01_sales_fact_1997\" />\n"
            + "    <AggExclude name=\"agg_pl_01_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_c_special_sales_fact_1997\" />\n"
            + "    <AggName name=\"agg_c_10_sales_fact_1997\">\n" + "        <AggFactCount column=\"FACT_COUNT\"/>\n"
            + "        <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"UNIT_SALES\" rollupType=\"SumFromAvg\" />\n"
            + "        <AggLevel name=\"[Time].[Year]\" column=\"THE_YEAR\" />\n"
            + "        <AggLevel name=\"[Time].[Quarter]\" column=\"QUARTER\" />\n" + "    </AggName>\n"
            + "  </Table>\n" + "  <Dimension name=\"Time\" type=\"TimeDimension\" foreignKey=\"time_id\">\n"
            + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n" + "      <Table name=\"time_by_day\"/>\n"
            + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
            + "          levelType=\"TimeYears\"/>\n"
            + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
            + "          levelType=\"TimeQuarters\"/>\n" + "    </Hierarchy>\n" + "  </Dimension>\n"
            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"avg\" />\n" + "</Cube>\n"
            + "</Schema>";
            */

        public BasicQueryTestModifier18(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Create Unit Sales measure with AVG aggregator
            AvgMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createAvgMeasure();
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);

            // Create Time dimension
            TimeDimension timeDimension = RolapMappingFactory.eINSTANCE.createTimeDimension();
            timeDimension.setName("Time");

            ExplicitHierarchy timeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            timeHierarchy.setHasAll(false);
            timeHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);

            TableQuery timeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            timeTableQuery.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);
            timeHierarchy.setQuery(timeTableQuery);

            Level yearLevel = RolapMappingFactory.eINSTANCE.createLevel();
            yearLevel.setName("Year");
            yearLevel.setColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
            yearLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            yearLevel.setUniqueMembers(true);

            Level quarterLevel = RolapMappingFactory.eINSTANCE.createLevel();
            quarterLevel.setName("Quarter");
            quarterLevel.setColumn(CatalogSupplier.COLUMN_QUARTER_TIME_BY_DAY);
            quarterLevel.setUniqueMembers(false);

            timeHierarchy.getLevels().add(yearLevel);
            timeHierarchy.getLevels().add(quarterLevel);
            timeDimension.getHierarchies().add(timeHierarchy);

            // Create aggregation excludes
            AggregationExclude aggExclude1 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude1.setName("agg_c_14_sales_fact_1997");

            AggregationExclude aggExclude2 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude2.setName("agg_g_ms_pcat_sales_fact_1997");

            AggregationExclude aggExclude3 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude3.setName("agg_l_03_sales_fact_1997");

            AggregationExclude aggExclude4 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude4.setName("agg_l_04_sales_fact_1997");

            AggregationExclude aggExclude5 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude5.setName("agg_l_05_sales_fact_1997");

            AggregationExclude aggExclude6 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude6.setName("agg_lc_06_sales_fact_1997");

            AggregationExclude aggExclude7 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude7.setName("agg_lc_100_sales_fact_1997");

            AggregationExclude aggExclude8 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude8.setName("agg_ll_01_sales_fact_1997");

            AggregationExclude aggExclude9 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude9.setName("agg_pl_01_sales_fact_1997");

            AggregationExclude aggExclude10 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude10.setName("agg_c_special_sales_fact_1997");

            // Create aggregation table with rollup type SumFromAvg
            AggregationName aggName = RolapMappingFactory.eINSTANCE.createAggregationName();
            aggName.setName(CatalogSupplier.TABLE_AGG_C_10_SALES_FACT_1997);

            AggregationColumnName factCount = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
            factCount.setColumn(CatalogSupplier.COLUMN_FACT_COUNT_AGG_C_10_SALES_FACT_1997);
            aggName.setAggregationFactCount(factCount);

            AggregationMeasure aggMeasure = RolapMappingFactory.eINSTANCE.createAggregationMeasure();
            aggMeasure.setName("[Measures].[Unit Sales]");
            aggMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_AGG_C_10_SALES_FACT_1997);
            aggMeasure.setRollupType("SumFromAvg");
            aggName.getAggregationMeasures().add(aggMeasure);

            AggregationLevel aggYearLevel = RolapMappingFactory.eINSTANCE.createAggregationLevel();
            aggYearLevel.setName("[Time].[Time].[Year]");
            aggYearLevel.setColumn(CatalogSupplier.COLUMN_THE_YEAR_AGG_C_10_SALES_FACT_1997);
            aggName.getAggregationLevels().add(aggYearLevel);

            AggregationLevel aggQuarterLevel = RolapMappingFactory.eINSTANCE.createAggregationLevel();
            aggQuarterLevel.setName("[Time].[Time].[Quarter]");
            aggQuarterLevel.setColumn(CatalogSupplier.COLUMN_QUARTER_AGG_C_10_SALES_FACT_1997);
            aggName.getAggregationLevels().add(aggQuarterLevel);

            // Create table query with aggregation excludes and table
            TableQuery tableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            tableQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
            tableQuery.getAggregationExcludes().add(aggExclude1);
            tableQuery.getAggregationExcludes().add(aggExclude2);
            tableQuery.getAggregationExcludes().add(aggExclude3);
            tableQuery.getAggregationExcludes().add(aggExclude4);
            tableQuery.getAggregationExcludes().add(aggExclude5);
            tableQuery.getAggregationExcludes().add(aggExclude6);
            tableQuery.getAggregationExcludes().add(aggExclude7);
            tableQuery.getAggregationExcludes().add(aggExclude8);
            tableQuery.getAggregationExcludes().add(aggExclude9);
            tableQuery.getAggregationExcludes().add(aggExclude10);
            tableQuery.getAggregationTables().add(aggName);

            // Create dimension connector for Time
            DimensionConnector timeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            timeConnector.setOverrideDimensionName("Time");
            timeConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
            timeConnector.setDimension(timeDimension);

            // Create measure group
            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(unitSalesMeasure);
            unitSalesMeasure.setMeasureGroup(measureGroup);

            // Create Sales cube
            PhysicalCube salesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            salesCube.setName("Sales");
            salesCube.setDefaultMeasure(unitSalesMeasure);
            salesCube.setQuery(tableQuery);
            salesCube.getDimensionConnectors().add(timeConnector);
            salesCube.getMeasureGroups().add(measureGroup);
            measureGroup.setPhysicalCube(salesCube);

            // Create catalog
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName("FoodMart 2399 Rollup Type");
            catalog.getCubes().add(salesCube);
            if (catalog2 != null) {
                catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            }

            return catalog;
        }
    }

    public static class BasicQueryTestModifier19 extends EmfMappingModifier {

        /*
        "" + "<?xml version=\"1.0\"?>\n" + "<Schema name=\"FoodMart 2399 Rollup Type\">\n"
            + "<Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">\n" + "  <Table name=\"sales_fact_1997\">\n"
            + "<AggExclude name=\"agg_c_14_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_g_ms_pcat_sales_fact_1997\" />\n"
            + "    <AggExclude name=\"agg_l_03_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_l_04_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_l_05_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_lc_06_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_lc_100_sales_fact_1997\" />\n"
            + "    <AggExclude name=\"agg_ll_01_sales_fact_1997\" />\n"
            + "    <AggExclude name=\"agg_pl_01_sales_fact_1997\" />\n"
            + "<AggExclude name=\"agg_c_special_sales_fact_1997\" />\n"
            + "    <AggName name=\"agg_c_10_sales_fact_1997\">\n" + "        <AggFactCount column=\"FACT_COUNT\"/>\n"
            + "        <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"UNIT_SALES\" />\n"
            + "        <AggLevel name=\"[Time].[Year]\" column=\"THE_YEAR\" />\n"
            + "        <AggLevel name=\"[Time].[Quarter]\" column=\"QUARTER\" />\n" + "    </AggName>\n"
            + "  </Table>\n" + "  <Dimension name=\"Time\" type=\"TimeDimension\" foreignKey=\"time_id\">\n"
            + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n" + "      <Table name=\"time_by_day\"/>\n"
            + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
            + "          levelType=\"TimeYears\"/>\n"
            + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
            + "          levelType=\"TimeQuarters\"/>\n" + "    </Hierarchy>\n" + "  </Dimension>\n"
            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"avg\" />\n" + "</Cube>\n"
            + "</Schema>";
            */

        public BasicQueryTestModifier19(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Create Unit Sales measure with AVG aggregator
            AvgMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createAvgMeasure();
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);

            // Create Time dimension
            TimeDimension timeDimension = RolapMappingFactory.eINSTANCE.createTimeDimension();
            timeDimension.setName("Time");

            ExplicitHierarchy timeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            timeHierarchy.setHasAll(false);
            timeHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);

            TableQuery timeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            timeTableQuery.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);
            timeHierarchy.setQuery(timeTableQuery);

            Level yearLevel = RolapMappingFactory.eINSTANCE.createLevel();
            yearLevel.setName("Year");
            yearLevel.setColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
            yearLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            yearLevel.setUniqueMembers(true);

            Level quarterLevel = RolapMappingFactory.eINSTANCE.createLevel();
            quarterLevel.setName("Quarter");
            quarterLevel.setColumn(CatalogSupplier.COLUMN_QUARTER_TIME_BY_DAY);
            quarterLevel.setUniqueMembers(false);

            timeHierarchy.getLevels().add(yearLevel);
            timeHierarchy.getLevels().add(quarterLevel);
            timeDimension.getHierarchies().add(timeHierarchy);

            // Create aggregation excludes
            AggregationExclude aggExclude1 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude1.setName("agg_c_14_sales_fact_1997");

            AggregationExclude aggExclude2 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude2.setName("agg_g_ms_pcat_sales_fact_1997");

            AggregationExclude aggExclude3 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude3.setName("agg_l_03_sales_fact_1997");

            AggregationExclude aggExclude4 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude4.setName("agg_l_04_sales_fact_1997");

            AggregationExclude aggExclude5 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude5.setName("agg_l_05_sales_fact_1997");

            AggregationExclude aggExclude6 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude6.setName("agg_lc_06_sales_fact_1997");

            AggregationExclude aggExclude7 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude7.setName("agg_lc_100_sales_fact_1997");

            AggregationExclude aggExclude8 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude8.setName("agg_ll_01_sales_fact_1997");

            AggregationExclude aggExclude9 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude9.setName("agg_pl_01_sales_fact_1997");

            AggregationExclude aggExclude10 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
            aggExclude10.setName("agg_c_special_sales_fact_1997");

            // Create aggregation table WITHOUT rollup type (default)
            AggregationName aggName = RolapMappingFactory.eINSTANCE.createAggregationName();
            aggName.setName(CatalogSupplier.TABLE_AGG_C_10_SALES_FACT_1997);

            AggregationColumnName factCount = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
            factCount.setColumn(CatalogSupplier.COLUMN_FACT_COUNT_AGG_C_10_SALES_FACT_1997);
            aggName.setAggregationFactCount(factCount);

            AggregationMeasure aggMeasure = RolapMappingFactory.eINSTANCE.createAggregationMeasure();
            aggMeasure.setName("[Measures].[Unit Sales]");
            aggMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_AGG_C_10_SALES_FACT_1997);
            // Note: No rollupType set (default behavior)
            aggName.getAggregationMeasures().add(aggMeasure);

            AggregationLevel aggYearLevel = RolapMappingFactory.eINSTANCE.createAggregationLevel();
            aggYearLevel.setName("[Time].[Time].[Year]");
            aggYearLevel.setColumn(CatalogSupplier.COLUMN_THE_YEAR_AGG_C_10_SALES_FACT_1997);
            aggName.getAggregationLevels().add(aggYearLevel);

            AggregationLevel aggQuarterLevel = RolapMappingFactory.eINSTANCE.createAggregationLevel();
            aggQuarterLevel.setName("[Time].[Time].[Quarter]");
            aggQuarterLevel.setColumn(CatalogSupplier.COLUMN_QUARTER_AGG_C_10_SALES_FACT_1997);
            aggName.getAggregationLevels().add(aggQuarterLevel);

            // Create table query with aggregation excludes and table
            TableQuery tableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            tableQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
            tableQuery.getAggregationExcludes().add(aggExclude1);
            tableQuery.getAggregationExcludes().add(aggExclude2);
            tableQuery.getAggregationExcludes().add(aggExclude3);
            tableQuery.getAggregationExcludes().add(aggExclude4);
            tableQuery.getAggregationExcludes().add(aggExclude5);
            tableQuery.getAggregationExcludes().add(aggExclude6);
            tableQuery.getAggregationExcludes().add(aggExclude7);
            tableQuery.getAggregationExcludes().add(aggExclude8);
            tableQuery.getAggregationExcludes().add(aggExclude9);
            tableQuery.getAggregationExcludes().add(aggExclude10);
            tableQuery.getAggregationTables().add(aggName);

            // Create dimension connector for Time
            DimensionConnector timeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            timeConnector.setOverrideDimensionName("Time");
            timeConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
            timeConnector.setDimension(timeDimension);

            // Create measure group
            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(unitSalesMeasure);
            unitSalesMeasure.setMeasureGroup(measureGroup);

            // Create Sales cube
            PhysicalCube salesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            salesCube.setName("Sales");
            salesCube.setDefaultMeasure(unitSalesMeasure);
            salesCube.setQuery(tableQuery);
            salesCube.getDimensionConnectors().add(timeConnector);
            salesCube.getMeasureGroups().add(measureGroup);
            measureGroup.setPhysicalCube(salesCube);

            // Create catalog
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName("FoodMart 2399 Rollup Type");
            catalog.getCubes().add(salesCube);
            if (catalog2 != null) {
                catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            }

            return catalog;
        }
    }

    public static class BasicQueryTestModifier20 extends EmfMappingModifier {

        /*
            String cubeName = "Sales_MemberVis";
            String schema = SchemaUtil.getSchema(baseSchema, null, "<Cube name=\"" + cubeName + "\">\n"
            + "  <Table name=\"sales_fact_1997\"/>\n"
            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\" visible=\"false\"/>\n"
            + "  <Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n"
            + "  <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n"
            + "  <Measure name=\"Sales Count\" column=\"product_id\" aggregator=\"count\"\n"
            + "      formatString=\"#,###\"/>\n" + "  <Measure name=\"Customer Count\" column=\"customer_id\"\n"
            + "      aggregator=\"distinct-count\" formatString=\"#,###\"/>\n" + "  <CalculatedMember\n"
            + "      name=\"Profit\"\n" + "      dimension=\"Measures\"\n" + "      visible=\"false\"\n"
            + "      formula=\"[Measures].[Store Sales]-[Measures].[Store Cost]\">\n"
            + "    <CalculatedMemberProperty name=\"FORMAT_STRING\" value=\"$#,##0.00\"/>\n"
            + "  </CalculatedMember>\n" + "</Cube>", null, null, null, null );
            */

        public BasicQueryTestModifier20(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends CubeMapping> catalogCubes(CatalogMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.catalogCubes(schema));

            // Create Sales_MemberVis cube
            PhysicalCube salesMemberVisCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            salesMemberVisCube.setName("Sales_MemberVis");

            TableQuery tableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            tableQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
            salesMemberVisCube.setQuery(tableQuery);

            // Create measures
            SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");
            unitSalesMeasure.setVisible(false);

            SumMeasure storeCostMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            storeCostMeasure.setName("Store Cost");
            storeCostMeasure.setColumn(CatalogSupplier.COLUMN_STORE_COST_SALESFACT);
            storeCostMeasure.setFormatString("#,###.00");

            SumMeasure storeSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            storeSalesMeasure.setName("Store Sales");
            storeSalesMeasure.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);
            storeSalesMeasure.setFormatString("#,###.00");

            CountMeasure salesCountMeasure = RolapMappingFactory.eINSTANCE.createCountMeasure();
            salesCountMeasure.setName("Sales Count");
            salesCountMeasure.setColumn(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);
            salesCountMeasure.setFormatString("#,###");

            CountMeasure customerCountMeasure = RolapMappingFactory.eINSTANCE.createCountMeasure();
            customerCountMeasure.setName("Customer Count");
            customerCountMeasure.setColumn(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
            customerCountMeasure.setFormatString("#,###");
            customerCountMeasure.setDistinct(true);

            // Create measure group
            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(unitSalesMeasure);
            measureGroup.getMeasures().add(storeCostMeasure);
            measureGroup.getMeasures().add(storeSalesMeasure);
            measureGroup.getMeasures().add(salesCountMeasure);
            measureGroup.getMeasures().add(customerCountMeasure);

            unitSalesMeasure.setMeasureGroup(measureGroup);
            storeCostMeasure.setMeasureGroup(measureGroup);
            storeSalesMeasure.setMeasureGroup(measureGroup);
            salesCountMeasure.setMeasureGroup(measureGroup);
            customerCountMeasure.setMeasureGroup(measureGroup);

            measureGroup.setPhysicalCube(salesMemberVisCube);
            salesMemberVisCube.getMeasureGroups().add(measureGroup);

            // Create calculated member
            CalculatedMember profitMember = RolapMappingFactory.eINSTANCE.createCalculatedMember();
            profitMember.setName("Profit");
            profitMember.setVisible(false);
            profitMember.setFormula("[Measures].[Store Sales]-[Measures].[Store Cost]");

            CalculatedMemberProperty formatProperty = RolapMappingFactory.eINSTANCE.createCalculatedMemberProperty();
            formatProperty.setName("FORMAT_STRING");
            formatProperty.setValue("$#,##0.00");
            profitMember.getCalculatedMemberProperties().add(formatProperty);

            salesMemberVisCube.getCalculatedMembers().add(profitMember);

            result.add(salesMemberVisCube);
            return result;
        }
    }

    public static class BasicQueryTestModifier21 extends EmfMappingModifier {

        /*
            "<Cube name=\"Sales_DimWithoutAll\">\n"
            + "  <Table name=\"sales_fact_1997\"/>\n" + "  <Dimension name=\"Product\" foreignKey=\"product_id\">\n"
            + "    <Hierarchy hasAll=\"false\" primaryKey=\"product_id\" " + "primaryKeyTable=\"product\">\n"
            + "      <Join leftKey=\"product_class_id\" " + "rightKey=\"product_class_id\">\n"
            + "        <Table name=\"product\"/>\n" + "        <Table name=\"product_class\"/>\n" + "      </Join>\n"
            + "      <Level name=\"Product Family\" table=\"product_class\" " + "column=\"product_family\"\n"
            + "          uniqueMembers=\"true\"/>\n" + "      <Level name=\"Product Department\" "
            + "table=\"product_class\" column=\"product_department\"\n" + "          uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Product Category\" table=\"product_class\"" + " column=\"product_category\"\n"
            + "          uniqueMembers=\"false\"/>\n" + "      <Level name=\"Product Subcategory\" "
            + "table=\"product_class\" column=\"product_subcategory\"\n" + "          uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Brand Name\" table=\"product\" "
            + "column=\"brand_name\" uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Product Name\" table=\"product\" " + "column=\"product_name\"\n"
            + "          uniqueMembers=\"true\"/>\n" + "    </Hierarchy>\n" + "  </Dimension>\n"
            + "  <Dimension name=\"Gender\" foreignKey=\"customer_id\">\n"
            + "    <Hierarchy hasAll=\"false\" primaryKey=\"customer_id\">\n" + "    <Table name=\"customer\"/>\n"
            + "      <Level name=\"Gender\" column=\"gender\" " + "uniqueMembers=\"true\"/>\n" + "    </Hierarchy>\n"
            + "  </Dimension>" + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" " + "aggregator=\"sum\"\n"
            + "      formatString=\"Standard\" visible=\"false\"/>\n"
            + "  <Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n" + "</Cube>"
            */
        public BasicQueryTestModifier21(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends CubeMapping> catalogCubes(CatalogMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.catalogCubes(schema));

            // Create Product dimension with hierarchy
            StandardDimension productDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            productDimension.setName("Product");

            ExplicitHierarchy productHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            productHierarchy.setHasAll(false);
            productHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);

            // Create join query for product tables
            JoinQuery joinQuery = RolapMappingFactory.eINSTANCE.createJoinQuery();

            JoinedQueryElement leftJoin = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
            leftJoin.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT);
            TableQuery productTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            productTableQuery.setTable(CatalogSupplier.TABLE_PRODUCT);
            leftJoin.setQuery(productTableQuery);

            JoinedQueryElement rightJoin = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
            rightJoin.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT_CLASS);
            TableQuery productClassTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            productClassTableQuery.setTable(CatalogSupplier.TABLE_PRODUCT_CLASS);
            rightJoin.setQuery(productClassTableQuery);

            joinQuery.setLeft(leftJoin);
            joinQuery.setRight(rightJoin);
            productHierarchy.setQuery(joinQuery);

            // Create Product levels
            Level productFamilyLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productFamilyLevel.setName("Product Family");
            productFamilyLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_FAMILY_PRODUCT_CLASS);
            productFamilyLevel.setUniqueMembers(true);

            Level productDepartmentLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productDepartmentLevel.setName("Product Department");
            productDepartmentLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_DEPARTMENT_PRODUCT_CLASS);
            productDepartmentLevel.setUniqueMembers(false);

            Level productCategoryLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productCategoryLevel.setName("Product Category");
            productCategoryLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_CATEGORY_PRODUCT_CLASS);
            productCategoryLevel.setUniqueMembers(false);

            Level productSubcategoryLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productSubcategoryLevel.setName("Product Subcategory");
            productSubcategoryLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_SUBCATEGORY_PRODUCT_CLASS);
            productSubcategoryLevel.setUniqueMembers(false);

            Level brandNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
            brandNameLevel.setName("Brand Name");
            brandNameLevel.setColumn(CatalogSupplier.COLUMN_BRAND_NAME_PRODUCT);
            brandNameLevel.setUniqueMembers(false);

            Level productNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productNameLevel.setName("Product Name");
            productNameLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_NAME_PRODUCT);
            productNameLevel.setUniqueMembers(true);

            productHierarchy.getLevels().add(productFamilyLevel);
            productHierarchy.getLevels().add(productDepartmentLevel);
            productHierarchy.getLevels().add(productCategoryLevel);
            productHierarchy.getLevels().add(productSubcategoryLevel);
            productHierarchy.getLevels().add(brandNameLevel);
            productHierarchy.getLevels().add(productNameLevel);
            productDimension.getHierarchies().add(productHierarchy);

            // Create Gender dimension
            StandardDimension genderDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            genderDimension.setName("Gender");

            ExplicitHierarchy genderHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            genderHierarchy.setHasAll(false);
            genderHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);

            TableQuery customerTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            customerTableQuery.setTable(CatalogSupplier.TABLE_CUSTOMER);
            genderHierarchy.setQuery(customerTableQuery);

            Level genderLevel = RolapMappingFactory.eINSTANCE.createLevel();
            genderLevel.setName("Gender");
            genderLevel.setColumn(CatalogSupplier.COLUMN_GENDER_CUSTOMER);
            genderLevel.setUniqueMembers(true);

            genderHierarchy.getLevels().add(genderLevel);
            genderDimension.getHierarchies().add(genderHierarchy);

            // Create dimension connectors
            DimensionConnector productConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            productConnector.setOverrideDimensionName("Product");
            productConnector.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);
            productConnector.setDimension(productDimension);

            DimensionConnector genderConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            genderConnector.setOverrideDimensionName("Gender");
            genderConnector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
            genderConnector.setDimension(genderDimension);

            // Create measures
            SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");
            unitSalesMeasure.setVisible(false);

            SumMeasure storeCostMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            storeCostMeasure.setName("Store Cost");
            storeCostMeasure.setColumn(CatalogSupplier.COLUMN_STORE_COST_SALESFACT);
            storeCostMeasure.setFormatString("#,###.00");

            // Create measure group
            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(unitSalesMeasure);
            measureGroup.getMeasures().add(storeCostMeasure);

            unitSalesMeasure.setMeasureGroup(measureGroup);
            storeCostMeasure.setMeasureGroup(measureGroup);

            // Create Sales_DimWithoutAll cube
            PhysicalCube salesDimWithoutAllCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            salesDimWithoutAllCube.setName("Sales_DimWithoutAll");

            TableQuery salesTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            salesTableQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
            salesDimWithoutAllCube.setQuery(salesTableQuery);

            salesDimWithoutAllCube.getDimensionConnectors().add(productConnector);
            salesDimWithoutAllCube.getDimensionConnectors().add(genderConnector);

            measureGroup.setPhysicalCube(salesDimWithoutAllCube);
            salesDimWithoutAllCube.getMeasureGroups().add(measureGroup);

            result.add(salesDimWithoutAllCube);
            return result;
        }
    }

    public static class BasicQueryTestModifier22 extends EmfMappingModifier {

        /*
            final String cubeName = "Sales_withCities";
      String baseSchema = TestUtil.getRawSchema(context);
      String schema = SchemaUtil.getSchema(baseSchema, null, "<Cube name=\"" + cubeName + "\">\n"
            + "  <Table name=\"sales_fact_1997\"/>\n"
            + "  <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
            + "  <Dimension name=\"Cities\" foreignKey=\"customer_id\">\n"
            + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Cities\" primaryKey=\"customer_id\">\n"
            + "      <Table name=\"customer\"/>\n"
            + "      <Level name=\"City\" column=\"city\" uniqueMembers=\"false\"/> \n" + "    </Hierarchy>\n"
            + "  </Dimension>\n" + "  <Dimension name=\"Customers\" foreignKey=\"customer_id\">\n"
            + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Customers\" primaryKey=\"customer_id\">\n"
            + "      <Table name=\"customer\"/>\n"
            + "      <Level name=\"Country\" column=\"country\" uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"State Province\" column=\"state_province\" uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"City\" column=\"city\" uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Name\" column=\"fullname\" uniqueMembers=\"true\">\n"
            + "        <Property name=\"Gender\" column=\"gender\"/>\n"
            + "        <Property name=\"Marital Status\" column=\"marital_status\"/>\n"
            + "        <Property name=\"Education\" column=\"education\"/>\n"
            + "        <Property name=\"Yearly Income\" column=\"yearly_income\"/>\n" + "      </Level>\n"
            + "    </Hierarchy>\n" + "  </Dimension>\n" + "  <Dimension name=\"Gender\" foreignKey=\"customer_id\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"customer_id\">\n" + "    <Table name=\"customer\"/>\n"
            + "      <Level name=\"Gender\" column=\"gender\" uniqueMembers=\"true\"/>\n" + "    </Hierarchy>\n"
            + "  </Dimension>" + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\" visible=\"false\"/>\n"
            + "  <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n" + "</Cube>", null, null, null, null );
            */
        public BasicQueryTestModifier22(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends CubeMapping> catalogCubes(CatalogMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.catalogCubes(schema));

            // Create Cities dimension
            StandardDimension citiesDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            citiesDimension.setName("Cities");

            ExplicitHierarchy citiesHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            citiesHierarchy.setHasAll(true);
            citiesHierarchy.setAllMemberName("All Cities");
            citiesHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);

            TableQuery citiesTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            citiesTableQuery.setTable(CatalogSupplier.TABLE_CUSTOMER);
            citiesHierarchy.setQuery(citiesTableQuery);

            Level cityLevel = RolapMappingFactory.eINSTANCE.createLevel();
            cityLevel.setName("City");
            cityLevel.setColumn(CatalogSupplier.COLUMN_CITY_CUSTOMER);
            cityLevel.setUniqueMembers(false);

            citiesHierarchy.getLevels().add(cityLevel);
            citiesDimension.getHierarchies().add(citiesHierarchy);

            // Create Customers dimension
            StandardDimension customersDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            customersDimension.setName("Customers");

            ExplicitHierarchy customersHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            customersHierarchy.setHasAll(true);
            customersHierarchy.setAllMemberName("All Customers");
            customersHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);

            TableQuery customersTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            customersTableQuery.setTable(CatalogSupplier.TABLE_CUSTOMER);
            customersHierarchy.setQuery(customersTableQuery);

            Level countryLevel = RolapMappingFactory.eINSTANCE.createLevel();
            countryLevel.setName("Country");
            countryLevel.setColumn(CatalogSupplier.COLUMN_COUNTRY_CUSTOMER);
            countryLevel.setUniqueMembers(true);

            Level stateProvinceLevel = RolapMappingFactory.eINSTANCE.createLevel();
            stateProvinceLevel.setName("State Province");
            stateProvinceLevel.setColumn(CatalogSupplier.COLUMN_STATE_PROVINCE_CUSTOMER);
            stateProvinceLevel.setUniqueMembers(true);

            Level customerCityLevel = RolapMappingFactory.eINSTANCE.createLevel();
            customerCityLevel.setName("City");
            customerCityLevel.setColumn(CatalogSupplier.COLUMN_CITY_CUSTOMER);
            customerCityLevel.setUniqueMembers(false);

            Level nameLevel = RolapMappingFactory.eINSTANCE.createLevel();
            nameLevel.setName("Name");
            nameLevel.setColumn(CatalogSupplier.COLUMN_FULLNAME_CUSTOMER);
            nameLevel.setUniqueMembers(true);

            // Create member properties for Name level
            MemberProperty genderProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
            genderProperty.setName("Gender");
            genderProperty.setColumn(CatalogSupplier.COLUMN_GENDER_CUSTOMER);

            MemberProperty maritalStatusProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
            maritalStatusProperty.setName("Marital Status");
            maritalStatusProperty.setColumn(CatalogSupplier.COLUMN_MARITAL_STATUS_CUSTOMER);

            MemberProperty educationProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
            educationProperty.setName("Education");
            educationProperty.setColumn(CatalogSupplier.COLUMN_EDUCATION_CUSTOMER);

            MemberProperty yearlyIncomeProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
            yearlyIncomeProperty.setName("Yearly Income");
            yearlyIncomeProperty.setColumn(CatalogSupplier.COLUMN_YEARLY_INCOME_CUSTOMER);

            nameLevel.getMemberProperties().add(genderProperty);
            nameLevel.getMemberProperties().add(maritalStatusProperty);
            nameLevel.getMemberProperties().add(educationProperty);
            nameLevel.getMemberProperties().add(yearlyIncomeProperty);

            customersHierarchy.getLevels().add(countryLevel);
            customersHierarchy.getLevels().add(stateProvinceLevel);
            customersHierarchy.getLevels().add(customerCityLevel);
            customersHierarchy.getLevels().add(nameLevel);
            customersDimension.getHierarchies().add(customersHierarchy);

            // Create Gender dimension
            StandardDimension genderDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            genderDimension.setName("Gender");

            ExplicitHierarchy genderHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            genderHierarchy.setHasAll(true);
            genderHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);

            TableQuery genderTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            genderTableQuery.setTable(CatalogSupplier.TABLE_CUSTOMER);
            genderHierarchy.setQuery(genderTableQuery);

            Level genderLevel = RolapMappingFactory.eINSTANCE.createLevel();
            genderLevel.setName("Gender");
            genderLevel.setColumn(CatalogSupplier.COLUMN_GENDER_CUSTOMER);
            genderLevel.setUniqueMembers(true);

            genderHierarchy.getLevels().add(genderLevel);
            genderDimension.getHierarchies().add(genderHierarchy);

            // Create dimension connectors
            DimensionConnector timeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            timeConnector.setOverrideDimensionName("Time");
            timeConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
            timeConnector.setDimension(CatalogSupplier.DIMENSION_TIME);

            DimensionConnector citiesConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            citiesConnector.setOverrideDimensionName("Cities");
            citiesConnector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
            citiesConnector.setDimension(citiesDimension);

            DimensionConnector customersConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            customersConnector.setOverrideDimensionName("Customers");
            customersConnector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
            customersConnector.setDimension(customersDimension);

            DimensionConnector genderConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            genderConnector.setOverrideDimensionName("Gender");
            genderConnector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
            genderConnector.setDimension(genderDimension);

            // Create measures
            SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");
            unitSalesMeasure.setVisible(false);

            SumMeasure storeSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            storeSalesMeasure.setName("Store Sales");
            storeSalesMeasure.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);
            storeSalesMeasure.setFormatString("#,###.00");

            // Create measure group
            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(unitSalesMeasure);
            measureGroup.getMeasures().add(storeSalesMeasure);

            unitSalesMeasure.setMeasureGroup(measureGroup);
            storeSalesMeasure.setMeasureGroup(measureGroup);

            // Create Sales_withCities cube
            PhysicalCube salesWithCitiesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            salesWithCitiesCube.setName("Sales_withCities");

            TableQuery salesTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            salesTableQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
            salesWithCitiesCube.setQuery(salesTableQuery);

            salesWithCitiesCube.getDimensionConnectors().add(timeConnector);
            salesWithCitiesCube.getDimensionConnectors().add(citiesConnector);
            salesWithCitiesCube.getDimensionConnectors().add(customersConnector);
            salesWithCitiesCube.getDimensionConnectors().add(genderConnector);

            measureGroup.setPhysicalCube(salesWithCitiesCube);
            salesWithCitiesCube.getMeasureGroups().add(measureGroup);

            result.add(salesWithCitiesCube);
            return result;
        }
    }

    public static class BasicQueryTestModifier23 extends EmfMappingModifier {

        /*
            <Cube name=\"SalesWithBadMeasure\">\n"
            + "  <Table name=\"sales_fact_1997\"/>\n"
            + "  <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
            + "  <Measure name=\"Bad Measure\" aggregator=\"sum\"\n" + "      formatString=\"Standard\"/>\n"
            + "</Cube>
            */
        public BasicQueryTestModifier23(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends CubeMapping> catalogCubes(CatalogMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.catalogCubes(schema));

            // Create dimension connector for Time
            DimensionConnector timeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            timeConnector.setOverrideDimensionName("Time");
            timeConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
            timeConnector.setDimension(CatalogSupplier.DIMENSION_TIME);

            // Create Bad Measure (without column - intentionally bad)
            SumMeasure badMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            badMeasure.setName("Bad Measure");
            badMeasure.setFormatString("Standard");

            // Create measure group
            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(badMeasure);
            badMeasure.setMeasureGroup(measureGroup);

            // Create SalesWithBadMeasure cube
            PhysicalCube salesWithBadMeasureCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            salesWithBadMeasureCube.setName("SalesWithBadMeasure");

            TableQuery salesTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            salesTableQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
            salesWithBadMeasureCube.setQuery(salesTableQuery);

            salesWithBadMeasureCube.getDimensionConnectors().add(timeConnector);

            measureGroup.setPhysicalCube(salesWithBadMeasureCube);
            salesWithBadMeasureCube.getMeasureGroups().add(measureGroup);

            result.add(salesWithBadMeasureCube);
            return result;
        }
    }

    public static class BasicQueryTestModifier24 extends EmfMappingModifier {

        /*
            "<Cube name=\"SalesWithBadMeasure2\">\n"
            + "  <Table name=\"sales_fact_1997\"/>\n"
            + "  <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
            + "  <Measure name=\"Bad Measure\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\">\n" + "    <MeasureExpression>\n" + "       <SQL dialect=\"generic\">\n"
            + "         unit_sales\n" + "       </SQL>\n" + "    </MeasureExpression>\n" + "  </Measure>\n"
            + "</Cube>"
            */
        public BasicQueryTestModifier24(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends CubeMapping> catalogCubes(CatalogMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.catalogCubes(schema));

            // Create dimension connector for Time
            DimensionConnector timeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            timeConnector.setOverrideDimensionName("Time");
            timeConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
            timeConnector.setDimension(CatalogSupplier.DIMENSION_TIME);

            // Create Bad Measure with both column and SQL expression (intentionally bad - has both)
            SumMeasure badMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            badMeasure.setName("Bad Measure");
            badMeasure.setFormatString("Standard");

            // First set the column
            badMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);

            // Then also set SQL expression (this makes it bad - having both column and expression)
            SQLExpressionColumn expressionColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();

            SqlStatement genericSql = RolapMappingFactory.eINSTANCE.createSqlStatement();
            genericSql.getDialects().add("generic");
            genericSql.setSql("unit_sales");

            expressionColumn.getSqls().add(genericSql);

            // Override the column with the expression column (this is the bad part)
            badMeasure.setColumn(expressionColumn);

            // Create measure group
            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(badMeasure);
            badMeasure.setMeasureGroup(measureGroup);

            // Create SalesWithBadMeasure2 cube
            PhysicalCube salesWithBadMeasure2Cube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            salesWithBadMeasure2Cube.setName("SalesWithBadMeasure2");

            TableQuery salesTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            salesTableQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
            salesWithBadMeasure2Cube.setQuery(salesTableQuery);

            salesWithBadMeasure2Cube.getDimensionConnectors().add(timeConnector);

            measureGroup.setPhysicalCube(salesWithBadMeasure2Cube);
            salesWithBadMeasure2Cube.getMeasureGroups().add(measureGroup);

            result.add(salesWithBadMeasure2Cube);
            return result;
        }
    }

    public static class BasicQueryTestModifier25 extends EmfMappingModifier {

        /*
            <UserDefinedFunction name=\"SleepUdf\" className=\""
            + SleepUdf.class.getName() + "\"/>"
            */
        public BasicQueryTestModifier25(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: UserDefinedFunction
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("SleepUdf")
                .className(BasicQueryTest.SleepUdf.class.getName())
                .build());
            return result;
        }
        */
    }

    public static class BasicQueryTestModifier26 extends EmfMappingModifier {

        /*
            <Cube name=\"DefaultMeasureTesting\" defaultMeasure=\"Supply Time\">\n"
            + "  <Table name=\"inventory_fact_1997\"/>\n" + "  <DimensionUsage name=\"Store\" source=\"Store\" "
            + "foreignKey=\"store_id\"/>\n" + "  <DimensionUsage name=\"Store Type\" source=\"Store Type\" "
            + "foreignKey=\"store_id\"/>\n" + "  <Measure name=\"Store Invoice\" column=\"store_invoice\" "
            + "aggregator=\"sum\"/>\n" + "  <Measure name=\"Supply Time\" column=\"supply_time\" "
            + "aggregator=\"sum\"/>\n" + "  <Measure name=\"Warehouse Cost\" column=\"warehouse_cost\" "
            + "aggregator=\"sum\"/>\n" + "</Cube>
            */

        private final SumMeasure mSupplyTime;

        public BasicQueryTestModifier26(CatalogMapping catalog) {
            super(catalog);

            // Create Supply Time measure as instance field so it can be referenced as default measure
            mSupplyTime = RolapMappingFactory.eINSTANCE.createSumMeasure();
            mSupplyTime.setName("Supply Time");
            mSupplyTime.setColumn(CatalogSupplier.COLUMN_SUPPLY_TIME_INVENTORY_FACT);
        }

        @Override
        protected List<? extends CubeMapping> catalogCubes(CatalogMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.catalogCubes(schema));

            // Create dimension connectors
            DimensionConnector storeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            storeConnector.setOverrideDimensionName("Store");
            storeConnector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
            storeConnector.setDimension(CatalogSupplier.DIMENSION_STORE);

            DimensionConnector storeTypeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            storeTypeConnector.setOverrideDimensionName("Store Type");
            storeTypeConnector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
            storeTypeConnector.setDimension(CatalogSupplier.DIMENSION_STORE_TYPE);

            // Create measures
            SumMeasure storeInvoiceMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            storeInvoiceMeasure.setName("Store Invoice");
            storeInvoiceMeasure.setColumn(CatalogSupplier.COLUMN_STORE_INVOICE_INVENTORY_FACT);

            SumMeasure warehouseCostMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            warehouseCostMeasure.setName("Warehouse Cost");
            warehouseCostMeasure.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_COST_INVENTORY_FACT);

            // Create measure group
            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(storeInvoiceMeasure);
            measureGroup.getMeasures().add(mSupplyTime);
            measureGroup.getMeasures().add(warehouseCostMeasure);

            storeInvoiceMeasure.setMeasureGroup(measureGroup);
            mSupplyTime.setMeasureGroup(measureGroup);
            warehouseCostMeasure.setMeasureGroup(measureGroup);

            // Create DefaultMeasureTesting cube
            PhysicalCube defaultMeasureTestingCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            defaultMeasureTestingCube.setName("DefaultMeasureTesting");
            defaultMeasureTestingCube.setDefaultMeasure(mSupplyTime);

            TableQuery inventoryTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            inventoryTableQuery.setTable(CatalogSupplier.TABLE_INVENTORY_FACT);
            defaultMeasureTestingCube.setQuery(inventoryTableQuery);

            defaultMeasureTestingCube.getDimensionConnectors().add(storeConnector);
            defaultMeasureTestingCube.getDimensionConnectors().add(storeTypeConnector);

            measureGroup.setPhysicalCube(defaultMeasureTestingCube);
            defaultMeasureTestingCube.getMeasureGroups().add(measureGroup);

            result.add(defaultMeasureTestingCube);
            return result;
        }
    }

    public static class BasicQueryTestModifier27 extends EmfMappingModifier {

        private SumMeasure defaultMeasure = null;

        /*
                            "<Cube name=\"DefaultMeasureTesting\" defaultMeasure=\"Supply Time Error\">\n"
                    + "  <Table name=\"inventory_fact_1997\"/>\n" + "  <DimensionUsage name=\"Store\" source=\"Store\" "
                    + "foreignKey=\"store_id\"/>\n" + "  <DimensionUsage name=\"Store Type\" source=\"Store Type\" "
                    + "foreignKey=\"store_id\"/>\n" + "  <Measure name=\"Store Invoice\" column=\"store_invoice\" "
                    + "aggregator=\"sum\"/>\n" + "  <Measure name=\"Supply Time\" column=\"supply_time\" "
                    + "aggregator=\"sum\"/>\n" + "  <Measure name=\"Warehouse Cost\" column=\"warehouse_cost\" "
                    + "aggregator=\"sum\"/>\n" + "</Cube>"
                */

        private final SumMeasure mStoreInvoice;
        private final SumMeasure mSupplyTime;
        private final SumMeasure mWarehouseCost;

        public BasicQueryTestModifier27(CatalogMapping catalog, String defaultMeasure) {
            super(catalog);

            // Create measures as instance fields
            mStoreInvoice = RolapMappingFactory.eINSTANCE.createSumMeasure();
            mStoreInvoice.setName("Store Invoice");
            mStoreInvoice.setColumn(CatalogSupplier.COLUMN_STORE_INVOICE_INVENTORY_FACT);

            mSupplyTime = RolapMappingFactory.eINSTANCE.createSumMeasure();
            mSupplyTime.setName("Supply Time");
            mSupplyTime.setColumn(CatalogSupplier.COLUMN_SUPPLY_TIME_INVENTORY_FACT);

            mWarehouseCost = RolapMappingFactory.eINSTANCE.createSumMeasure();
            mWarehouseCost.setName("Warehouse Cost");
            mWarehouseCost.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_COST_INVENTORY_FACT);

            // Set default measure based on parameter
            if ("Store Invoice".equalsIgnoreCase(defaultMeasure)) {
                this.defaultMeasure = mStoreInvoice;
            }
            if ("Supply Time".equalsIgnoreCase(defaultMeasure)) {
                this.defaultMeasure = mSupplyTime;
            }
            if ("Warehouse Cost".equalsIgnoreCase(defaultMeasure)) {
                this.defaultMeasure = mWarehouseCost;
            }
        }

        @Override
        protected List<? extends CubeMapping> catalogCubes(CatalogMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.catalogCubes(schema));

            // Create dimension connectors
            DimensionConnector storeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            storeConnector.setOverrideDimensionName("Store");
            storeConnector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
            storeConnector.setDimension(CatalogSupplier.DIMENSION_STORE);

            DimensionConnector storeTypeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            storeTypeConnector.setOverrideDimensionName("Store Type");
            storeTypeConnector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
            storeTypeConnector.setDimension(CatalogSupplier.DIMENSION_STORE_TYPE);

            // Create measure group
            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(mStoreInvoice);
            measureGroup.getMeasures().add(mSupplyTime);
            measureGroup.getMeasures().add(mWarehouseCost);

            mStoreInvoice.setMeasureGroup(measureGroup);
            mSupplyTime.setMeasureGroup(measureGroup);
            mWarehouseCost.setMeasureGroup(measureGroup);

            // Create DefaultMeasureTesting cube
            PhysicalCube defaultMeasureTestingCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            defaultMeasureTestingCube.setName("DefaultMeasureTesting");
            defaultMeasureTestingCube.setDefaultMeasure(this.defaultMeasure);

            TableQuery inventoryTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            inventoryTableQuery.setTable(CatalogSupplier.TABLE_INVENTORY_FACT);
            defaultMeasureTestingCube.setQuery(inventoryTableQuery);

            defaultMeasureTestingCube.getDimensionConnectors().add(storeConnector);
            defaultMeasureTestingCube.getDimensionConnectors().add(storeTypeConnector);

            measureGroup.setPhysicalCube(defaultMeasureTestingCube);
            defaultMeasureTestingCube.getMeasureGroups().add(measureGroup);

            result.add(defaultMeasureTestingCube);
            return result;
        }
    }

    public static class BasicQueryTestModifier28 extends EmfMappingModifier {

        /*
                        <Cube name='FooBarZerOneAnything'>\n" + "  <Table name='sales_fact_1997'/>\n"
            + "  <Dimension name='Gender' foreignKey='customer_id'>\n"
            + "    <Hierarchy hasAll='true' allMemberName='All Gender' primaryKey='customer_id'>\n"
            + "      <Table name='customer'/>\n"
            + "      <Level name='Gender' column='gender' uniqueMembers='true'/>\n" + "    </Hierarchy>\n"
            + "  </Dimension>" + "<Measure name='zero' aggregator='sum'>\n" + "  <MeasureExpression>\n"
            + "  <SQL dialect='generic'>\n" + "    0" + "  </SQL></MeasureExpression></Measure>" + "</Cube>
            */
        public BasicQueryTestModifier28(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends CubeMapping> catalogCubes(CatalogMapping schema) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.catalogCubes(schema));

            // Create Gender dimension
            StandardDimension genderDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            genderDimension.setName("Gender");

            ExplicitHierarchy genderHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            genderHierarchy.setHasAll(true);
            genderHierarchy.setAllMemberName("All Gender");
            genderHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);

            TableQuery customerTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            customerTableQuery.setTable(CatalogSupplier.TABLE_CUSTOMER);
            genderHierarchy.setQuery(customerTableQuery);

            Level genderLevel = RolapMappingFactory.eINSTANCE.createLevel();
            genderLevel.setName("Gender");
            genderLevel.setColumn(CatalogSupplier.COLUMN_GENDER_CUSTOMER);
            genderLevel.setUniqueMembers(true);

            genderHierarchy.getLevels().add(genderLevel);
            genderDimension.getHierarchies().add(genderHierarchy);

            // Create dimension connector
            DimensionConnector genderConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            genderConnector.setOverrideDimensionName("Gender");
            genderConnector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
            genderConnector.setDimension(genderDimension);

            // Create zero measure with SQL expression
            SumMeasure zeroMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            zeroMeasure.setName("zero");

            SQLExpressionColumn expressionColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();

            SqlStatement genericSql = RolapMappingFactory.eINSTANCE.createSqlStatement();
            genericSql.getDialects().add("generic");
            genericSql.setSql("0");

            expressionColumn.getSqls().add(genericSql);
            zeroMeasure.setColumn(expressionColumn);

            // Create measure group
            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(zeroMeasure);
            zeroMeasure.setMeasureGroup(measureGroup);

            // Create FooBarZerOneAnything cube
            PhysicalCube fooBarZerOneAnythingCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            fooBarZerOneAnythingCube.setName("FooBarZerOneAnything");

            TableQuery salesTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            salesTableQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
            fooBarZerOneAnythingCube.setQuery(salesTableQuery);

            fooBarZerOneAnythingCube.getDimensionConnectors().add(genderConnector);

            measureGroup.setPhysicalCube(fooBarZerOneAnythingCube);
            fooBarZerOneAnythingCube.getMeasureGroups().add(measureGroup);

            result.add(fooBarZerOneAnythingCube);
            return result;
        }
    }

    public static class BasicQueryTestModifier29 extends EmfMappingModifier {

        /*
            <UserDefinedFunction name='CountConcurrentUdf' className='" + CountConcurrentUdf.class.getName() + "'/>
            */
        public BasicQueryTestModifier29(CatalogMapping catalog) {
            super(catalog);
        }
        /* TODO: UserDefinedFunction
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("CountConcurrentUdf")
                .className(BasicQueryTest.CountConcurrentUdf.class.getName())
                .build());
            return result;
        }

        */
    }

    public static class BasicQueryTestModifier30 extends EmfMappingModifier {

        /*
        "<Schema name=\"Foo\">\n" + "  <Cube name=\"Bar\">\n"
            + "    <Table name=\"warehouse\">\n" + "      <SQL>sleep(0.1) = 0</SQL>\n" + "    </Table>   \n"
            + " <Dimension name=\"Dim\">\n" + "   <Hierarchy hasAll=\"true\">\n"
            + "     <Level name=\"Level\" column=\"warehouse_id\"/>\n" + "      </Hierarchy>\n" + " </Dimension>\n"
            + " <Measure name=\"Measure\" aggregator=\"sum\">\n" + "   <MeasureExpression>\n" + "     <SQL>1</SQL>\n"
            + "   </MeasureExpression>\n" + " </Measure>\n" + "  </Cube>\n" + "</Schema>\n"
            */
        public BasicQueryTestModifier30(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected CatalogMapping modifyCatalog(CatalogMapping catalog) {
            // Create Dim dimension
            StandardDimension dimDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            dimDimension.setName("Dim");

            ExplicitHierarchy dimHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            dimHierarchy.setHasAll(true);

            Level levelLevel = RolapMappingFactory.eINSTANCE.createLevel();
            levelLevel.setName("Level");
            levelLevel.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_ID_WAREHOUSE);

            dimHierarchy.getLevels().add(levelLevel);
            dimDimension.getHierarchies().add(dimHierarchy);

            // Create dimension connector
            DimensionConnector dimConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            dimConnector.setOverrideDimensionName("Dim");
            dimConnector.setDimension(dimDimension);

            // Create Measure with SQL expression
            SumMeasure measure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            measure.setName("Measure");

            SQLExpressionColumn expressionColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();

            SqlStatement genericSql = RolapMappingFactory.eINSTANCE.createSqlStatement();
            genericSql.getDialects().add("generic");
            genericSql.setSql("1");

            expressionColumn.getSqls().add(genericSql);
            measure.setColumn(expressionColumn);

            // Create measure group
            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(measure);
            measure.setMeasureGroup(measureGroup);

            // Create Bar cube with SQL WHERE clause
            PhysicalCube barCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            barCube.setName("Bar");

            TableQuery warehouseTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            warehouseTableQuery.setTable(CatalogSupplier.TABLE_WAREHOUSE);

            // Add SQL WHERE expression
            SqlStatement whereClause = RolapMappingFactory.eINSTANCE.createSqlStatement();
            whereClause.getDialects().add("generic");
            whereClause.setSql("sleep(0.1) = 0");
            warehouseTableQuery.setSqlWhereExpression(whereClause);

            barCube.setQuery(warehouseTableQuery);
            barCube.getDimensionConnectors().add(dimConnector);

            measureGroup.setPhysicalCube(barCube);
            barCube.getMeasureGroups().add(measureGroup);

            // Create new catalog
            Catalog newCatalog = RolapMappingFactory.eINSTANCE.createCatalog();
            newCatalog.setName("Foo");
            newCatalog.getCubes().add(barCube);
            if (catalog != null) {
                newCatalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog));
            }

            return newCatalog;
        }
    }

    public static class BasicQueryTestModifier31 extends EmfMappingModifier {

        /*
        "" + "<?xml version=\"1.0\"?>\n" + "<Schema name=\"snowflake bug\">\n" + "  <Cube name=\"Bug\">\n"
            + "    <Table name=\"sales_fact_1997\"/>\n"
            + "    <Dimension name=\"Product - Bug\" foreignKey=\"product_id\" highCardinality=\"false\">\n"
            + "      <Hierarchy hasAll=\"true\" primaryKeyTable=\"product\" primaryKey=\"product_id\">\n"
            + "        <Join leftAlias=\"product_class\" leftKey=\"product_class_id\" rightAlias=\"product\" "
            + "rightKey=\"product_class_id\">\n"
            + "          <Table name=\"product_class\" alias=\"product_class\"/>\n"
            + "          <Table name=\"product\" alias=\"product\"/>\n" + "        </Join>\n"
            + "        <Level name=\"Product Family\" table=\"product_class\" column=\"product_family\" "
            + "uniqueMembers=\"false\"/>\n" + "      </Hierarchy>\n" + "    </Dimension>\n"
            + "    <Measure name=\"Sales\" aggregator=\"sum\" column=\"store_sales\"/>\n" + "  </Cube>\n"
            + "  <Cube name=\"No Bug\">\n" + "    <Table name=\"sales_fact_1997\"/>\n"
            + "    <Dimension name=\"Product - no Bug\" highCardinality=\"false\" foreignKey=\"product_id\">\n"
            + "      <Hierarchy hasAll=\"true\" primaryKeyTable=\"product\" primaryKey=\"product_id\">\n"
            + "        <Join leftAlias=\"product\" leftKey=\"product_class_id\" rightAlias=\"product_class\" "
            + "rightKey=\"product_class_id\">\n" + "          <Table name=\"product\" alias=\"product\"/>\n"
            + "          <Table name=\"product_class\" alias=\"product_class\"/>\n" + "        </Join>\n"
            + "        <Level name=\"Product Family\" table=\"product_class\" column=\"product_family\"/>\n"
            + "      </Hierarchy>\n" + "    </Dimension>\n"
            + "    <Measure name=\"Sales\" aggregator=\"sum\" column=\"store_sales\"/>\n" + "  </Cube>\n"
            + "</Schema>";

            */
        public BasicQueryTestModifier31(CatalogMapping catalog) {
            super(catalog);
        }

        protected Catalog modifyCatalog(CatalogMapping catalog) {
            // Create tables
            TableQuery salesFactTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            salesFactTable.setTable(CatalogSupplier.TABLE_SALES_FACT);

            TableQuery productClassTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            productClassTable.setTable(CatalogSupplier.TABLE_PRODUCT_CLASS);
            productClassTable.setAlias("product_class");

            TableQuery productTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            productTable.setTable(CatalogSupplier.TABLE_PRODUCT);
            productTable.setAlias("product");

            PhysicalColumn productIdInSalesFact = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
            productIdInSalesFact.setName("product_id");

            // Create join for "Bug" cube
            JoinedQueryElement leftBug = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
            leftBug.setAlias("product_class");
            leftBug.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT_CLASS);
            leftBug.setQuery(productClassTable);

            JoinedQueryElement rightBug = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
            rightBug.setAlias("product");
            rightBug.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT);
            rightBug.setQuery(productTable);

            JoinQuery joinBug = RolapMappingFactory.eINSTANCE.createJoinQuery();
            joinBug.setLeft(leftBug);
            joinBug.setRight(rightBug);

            // Create level for "Bug" cube
            Level productFamilyLevelBug = RolapMappingFactory.eINSTANCE.createLevel();
            productFamilyLevelBug.setName("Product Family");
            productFamilyLevelBug.setColumn(CatalogSupplier.COLUMN_PRODUCT_FAMILY_PRODUCT_CLASS);
            productFamilyLevelBug.setUniqueMembers(false);

            // Create hierarchy for "Bug" cube
            ExplicitHierarchy hierarchyBug = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            hierarchyBug.setHasAll(true);
            hierarchyBug.setPrimaryKey(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);
            hierarchyBug.setQuery(joinBug);
            hierarchyBug.getLevels().add(productFamilyLevelBug);

            // Create dimension for "Bug" cube
            StandardDimension dimensionBug = RolapMappingFactory.eINSTANCE.createStandardDimension();
            dimensionBug.setName("Product - Bug");
            dimensionBug.getHierarchies().add(hierarchyBug);

            // Create dimension connector for "Bug" cube
            DimensionConnector connectorBug = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            connectorBug.setOverrideDimensionName("Product - Bug");
            connectorBug.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);
            connectorBug.setDimension(dimensionBug);

            // Create measure for "Bug" cube
            SumMeasure salesMeasureBug = RolapMappingFactory.eINSTANCE.createSumMeasure();
            salesMeasureBug.setName("Sales");
            salesMeasureBug.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);

            // Create measure group for "Bug" cube
            MeasureGroup measureGroupBug = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroupBug.getMeasures().add(salesMeasureBug);

            // Create "Bug" cube
            PhysicalCube bugCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            bugCube.setName("Bug");
            bugCube.setQuery(salesFactTable);
            bugCube.getDimensionConnectors().add(connectorBug);
            bugCube.getMeasureGroups().add(measureGroupBug);

            // Create tables for "No Bug" cube (reuse or create new)
            TableQuery salesFactTable2 = RolapMappingFactory.eINSTANCE.createTableQuery();
            salesFactTable2.setTable(CatalogSupplier.TABLE_SALES_FACT);

            TableQuery productTable2 = RolapMappingFactory.eINSTANCE.createTableQuery();
            productTable2.setTable(CatalogSupplier.TABLE_PRODUCT);
            productTable2.setAlias("product");

            TableQuery productClassTable2 = RolapMappingFactory.eINSTANCE.createTableQuery();
            productClassTable2.setTable(CatalogSupplier.TABLE_PRODUCT_CLASS);
            productClassTable2.setAlias("product_class");

            // Create join for "No Bug" cube (reversed order)
            JoinedQueryElement leftNoBug = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
            leftNoBug.setAlias("product");
            leftNoBug.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT);
            leftNoBug.setQuery(productTable2);

            JoinedQueryElement rightNoBug = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
            rightNoBug.setAlias("product_class");
            rightNoBug.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT_CLASS);
            rightNoBug.setQuery(productClassTable2);

            JoinQuery joinNoBug = RolapMappingFactory.eINSTANCE.createJoinQuery();
            joinNoBug.setLeft(leftNoBug);
            joinNoBug.setRight(rightNoBug);

            // Create level for "No Bug" cube
            Level productFamilyLevelNoBug = RolapMappingFactory.eINSTANCE.createLevel();
            productFamilyLevelNoBug.setName("Product Family");
            productFamilyLevelNoBug.setColumn(CatalogSupplier.COLUMN_PRODUCT_FAMILY_PRODUCT_CLASS);

            // Create hierarchy for "No Bug" cube
            ExplicitHierarchy hierarchyNoBug = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            hierarchyNoBug.setHasAll(true);
            hierarchyNoBug.setPrimaryKey(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);
            hierarchyNoBug.setQuery(joinNoBug);
            hierarchyNoBug.getLevels().add(productFamilyLevelNoBug);

            // Create dimension for "No Bug" cube
            StandardDimension dimensionNoBug = RolapMappingFactory.eINSTANCE.createStandardDimension();
            dimensionNoBug.setName("Product - no Bug");
            dimensionNoBug.getHierarchies().add(hierarchyNoBug);

            // Create dimension connector for "No Bug" cube
            DimensionConnector connectorNoBug = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            connectorNoBug.setOverrideDimensionName("Product - no Bug");
            connectorNoBug.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);
            connectorNoBug.setDimension(dimensionNoBug);

            // Create measure for "No Bug" cube
            SumMeasure salesMeasureNoBug = RolapMappingFactory.eINSTANCE.createSumMeasure();
            salesMeasureNoBug.setName("Sales");
            salesMeasureNoBug.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);

            // Create measure group for "No Bug" cube
            MeasureGroup measureGroupNoBug = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroupNoBug.getMeasures().add(salesMeasureNoBug);

            // Create "No Bug" cube
            PhysicalCube noBugCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            noBugCube.setName("No Bug");
            noBugCube.setQuery(salesFactTable2);
            noBugCube.getDimensionConnectors().add(connectorNoBug);
            noBugCube.getMeasureGroups().add(measureGroupNoBug);

            // Create new catalog
            Catalog newCatalog = RolapMappingFactory.eINSTANCE.createCatalog();
            newCatalog.setName("snowflake bug");
            newCatalog.getCubes().add(bugCube);
            newCatalog.getCubes().add(noBugCube);
            if (catalog != null) {
                newCatalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog));
            }

            return newCatalog;
        }

    }

    public static class BasicQueryTestModifier32 extends EmfMappingModifier {

        /*
            "<Schema name=\"FoodMart\">\n"
            + "  <Dimension name=\"Store Size in SQFT\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n" + "      <Table name=\"store\"/>\n"
            + "      <Level name=\"Store Sqft\" column=\"store_sqft\" type=\"Numeric\" uniqueMembers=\"true\"/>\n"
            + "    </Hierarchy>\n" + "  </Dimension>\n" + "  <Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">\n"
            + "    <Table name=\"sales_fact_1997\"/>\n"
            + "    <DimensionUsage name=\"Store Size in SQFT\" source=\"Store Size in SQFT\" foreignKey=\"store_id\"/>\n"
            + "    <DimensionUsage name=\"SQFT 2\" source=\"Store Size in SQFT\" foreignKey=\"store_id\"/>\n"
            + "    <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\" formatString=\"Standard\"/>\n"
            + "  </Cube>\n" + "</Schema>"
            */
        public BasicQueryTestModifier32(CatalogMapping catalog) {
            super(catalog);
        }

        protected Catalog modifyCatalog(CatalogMapping catalog) {
            // Create table
            TableQuery storeTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            storeTable.setTable(CatalogSupplier.TABLE_STORE);

            TableQuery salesFactTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            salesFactTable.setTable(CatalogSupplier.TABLE_SALES_FACT);

            // Create level
            Level storeSqftLevel = RolapMappingFactory.eINSTANCE.createLevel();
            storeSqftLevel.setName("Store Sqft");
            storeSqftLevel.setColumn(CatalogSupplier.COLUMN_STORE_SQFT_STORE);
            storeSqftLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            storeSqftLevel.setUniqueMembers(true);

            // Create hierarchy
            ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            hierarchy.setHasAll(true);
            hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);
            hierarchy.setQuery(storeTable);
            hierarchy.getLevels().add(storeSqftLevel);

            // Create dimension
            StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            dimension.setName("Store Size in SQFT");
            dimension.getHierarchies().add(hierarchy);

            // Create dimension connectors
            DimensionConnector connector1 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            connector1.setOverrideDimensionName("Store Size in SQFT");
            connector1.setDimension(dimension);
            connector1.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);

            DimensionConnector connector2 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            connector2.setOverrideDimensionName("SQFT 2");
            connector2.setDimension(dimension);
            connector2.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);

            // Create measure
            SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");

            // Create measure group
            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(unitSalesMeasure);

            // Create cube
            PhysicalCube cube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            cube.setName("Sales");
            cube.setDefaultMeasure(unitSalesMeasure);
            cube.setQuery(salesFactTable);
            cube.getDimensionConnectors().add(connector1);
            cube.getDimensionConnectors().add(connector2);
            cube.getMeasureGroups().add(measureGroup);

            // Create catalog
            Catalog newCatalog = RolapMappingFactory.eINSTANCE.createCatalog();
            newCatalog.setName("FoodMart");
            newCatalog.getCubes().add(cube);
            if (catalog != null) {
                newCatalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog));
            }

            return newCatalog;
        }

    }

    public static class RolapCubeTestModifier1 extends EmfMappingModifier {

        /*
        String nonAccessibleMember =
            "  <CalculatedMember name=\"~Missing\" dimension=\"Gender\">\n"
            + "    <Formula>100</Formula>\n"
            + "  </CalculatedMember>\n";
        String accessibleMember =
            "  <CalculatedMember name=\"~Missing\" dimension=\"Product\">\n"
            + "    <Formula>100</Formula>\n"
            + "  </CalculatedMember>\n";
        */
        public RolapCubeTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                CalculatedMember calculatedMember1 = RolapMappingFactory.eINSTANCE.createCalculatedMember();
                calculatedMember1.setName("~Missing");
                calculatedMember1.setFormula("100");
                calculatedMember1.setHierarchy(CatalogSupplier.HIERARCHY_GENDER);
                result.add(calculatedMember1);

                CalculatedMember calculatedMember2 = RolapMappingFactory.eINSTANCE.createCalculatedMember();
                calculatedMember2.setName("~Missing");
                calculatedMember2.setFormula("100");
                calculatedMember2.setHierarchy(CatalogSupplier.HIERARCHY_PRODUCT);
                result.add(calculatedMember2);
            }
            return result;
        }
    }

    public static class OrderByAliasTestModifier1KE extends EmfMappingModifier {

        /*
        "<Dimension name=\"Promotions\" foreignKey=\"promotion_id\">\n"
        + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
        + "    <Table name=\"promotion\"/>\n"
        + "    <Level name=\"Promotion Name\" column=\"promotion_name\" uniqueMembers=\"true\">\n"
        + "      <KeyExpression><SQL>RTRIM("
        + colName + ")</SQL></KeyExpression>\n"
        + "    </Level>\n"
        + "  </Hierarchy>\n"
        + "</Dimension>"));
         */

        private StringBuilder colName;

        public OrderByAliasTestModifier1KE(CatalogMapping catalog, final StringBuilder colName) {
            super(catalog);
            this.colName = colName;
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                // Find and remove existing Promotions dimension connector if present
                java.util.Optional<? extends DimensionConnectorMapping> o = result.stream()
                    .filter(d -> "Promotions".equals(d.getOverrideDimensionName()))
                    .findFirst();
                int i = 0;
                if (o.isPresent()) {
                    i = result.indexOf(o.get());
                }

                // Create table
                TableQuery promotionTable = RolapMappingFactory.eINSTANCE.createTableQuery();
                promotionTable.setTable(CatalogSupplier.TABLE_PROMOTION);

                // Create SQL expression for key
                SQLExpressionColumn keyExpressionColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();
                keyExpressionColumn.setName("promotion_name_key");

                SqlStatement sqlStatement = RolapMappingFactory.eINSTANCE.createSqlStatement();
                sqlStatement.getDialects().add("generic");
                sqlStatement.setSql("RTRIM(" + colName + ")");

                keyExpressionColumn.getSqls().add(sqlStatement);

                // Create level
                Level promotionNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
                promotionNameLevel.setName("Promotion Name");
                promotionNameLevel.setColumn(keyExpressionColumn);
                promotionNameLevel.setUniqueMembers(true);

                // Create hierarchy
                ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy.setHasAll(true);
                hierarchy.setAllMemberName("All Promotions");
                hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PROMOTION_ID_PROMOTION);
                hierarchy.setDefaultMember("[All Promotions]");
                hierarchy.setQuery(promotionTable);
                hierarchy.getLevels().add(promotionNameLevel);

                // Create dimension
                StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension.setName("Promotions");
                dimension.getHierarchies().add(hierarchy);

                // Create dimension connector
                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("Promotions");
                connector.setForeignKey(CatalogSupplier.COLUMN_PROMOTION_ID_SALESFACT);
                connector.setDimension(dimension);

                result.add(i, connector);
            }
            return result;
        }
    }

    public static class OrderByAliasTestModifier1OE extends EmfMappingModifier {

        /*
        "<Dimension name=\"Promotions\" foreignKey=\"promotion_id\">\n"
        + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
        + "    <Table name=\"promotion\"/>\n"
        + "    <Level name=\"Promotion Name\" column=\"promotion_name\" uniqueMembers=\"true\">\n"
        + "      <OrdinalExpression><SQL>RTRIM("
        + colName + ")</SQL></OrdinalExpression>\n"
        + "    </Level>\n"
        + "  </Hierarchy>\n"
        + "</Dimension>"));
         */

        private StringBuilder colName;

        public OrderByAliasTestModifier1OE(CatalogMapping catalog, final StringBuilder colName) {
            super(catalog);
            this.colName = colName;
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                // Find and remove existing Promotions dimension connector if present
                java.util.Optional<? extends DimensionConnectorMapping> o = result.stream()
                    .filter(d -> "Promotions".equals(d.getOverrideDimensionName()))
                    .findFirst();
                int i = 0;
                if (o.isPresent()) {
                    i = result.indexOf(o.get());
                }

                // Create table
                TableQuery promotionTable = RolapMappingFactory.eINSTANCE.createTableQuery();
                promotionTable.setTable(CatalogSupplier.TABLE_PROMOTION);

                PhysicalColumn promotionIdInSalesFact = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
                promotionIdInSalesFact.setName("promotion_id");

                // Create SQL expression for ordinal
                SQLExpressionColumn ordinalExpressionColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();
                ordinalExpressionColumn.setName("promotion_name_ordinal");

                SqlStatement sqlStatement = RolapMappingFactory.eINSTANCE.createSqlStatement();
                sqlStatement.getDialects().add("generic");
                sqlStatement.setSql("RTRIM(" + colName + ")");

                ordinalExpressionColumn.getSqls().add(sqlStatement);

                // Create level
                Level promotionNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
                promotionNameLevel.setName("Promotion Name");
                promotionNameLevel.setColumn(CatalogSupplier.COLUMN_PROMOTION_NAME_PROMOTION);
                promotionNameLevel.setOrdinalColumn(ordinalExpressionColumn);
                promotionNameLevel.setUniqueMembers(true);

                // Create hierarchy
                ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy.setHasAll(true);
                hierarchy.setAllMemberName("All Promotions");
                hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PROMOTION_ID_PROMOTION);
                hierarchy.setDefaultMember("[All Promotions]");
                hierarchy.setQuery(promotionTable);
                hierarchy.getLevels().add(promotionNameLevel);

                // Create dimension
                StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension.setName("Promotions");
                dimension.getHierarchies().add(hierarchy);

                // Create dimension connector
                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("Promotions");
                connector.setForeignKey(CatalogSupplier.COLUMN_PROMOTION_ID_SALESFACT);
                connector.setDimension(dimension);

                result.add(i, connector);
            }
            return result;
        }
    }

    public static class OrderByAliasTestModifier1ME extends EmfMappingModifier {

        /*
        "<Dimension name=\"Promotions\" foreignKey=\"promotion_id\">\n"
        + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
        + "    <Table name=\"promotion\"/>\n"
        + "    <Level name=\"Promotion Name\" column=\"promotion_name\" uniqueMembers=\"true\">\n"
        + "      <MeasureExpression><SQL>RTRIM("
        + colName + ")</SQL></MeasureExpression>\n"
        + "    </Level>\n"
        + "  </Hierarchy>\n"
        + "</Dimension>"));
         */

        private StringBuilder colName;

        public OrderByAliasTestModifier1ME(CatalogMapping catalog, final StringBuilder colName) {
            super(catalog);
            this.colName = colName;
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                // Find and remove existing Promotions dimension connector if present
                java.util.Optional<? extends DimensionConnectorMapping> o = result.stream()
                    .filter(d -> "Promotions".equals(d.getOverrideDimensionName()))
                    .findFirst();
                int i = 0;
                if (o.isPresent()) {
                    i = result.indexOf(o.get());
                }

                // Create table
                TableQuery promotionTable = RolapMappingFactory.eINSTANCE.createTableQuery();
                promotionTable.setTable(CatalogSupplier.TABLE_PROMOTION);

                // Create level
                Level promotionNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
                promotionNameLevel.setName("Promotion Name");
                promotionNameLevel.setColumn(CatalogSupplier.COLUMN_PROMOTION_NAME_PROMOTION);
                promotionNameLevel.setUniqueMembers(true);

                // Create hierarchy
                ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy.setHasAll(true);
                hierarchy.setAllMemberName("All Promotions");
                hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PROMOTION_ID_PROMOTION);
                hierarchy.setDefaultMember("[All Promotions]");
                hierarchy.setQuery(promotionTable);
                hierarchy.getLevels().add(promotionNameLevel);

                // Create dimension
                StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension.setName("Promotions");
                dimension.getHierarchies().add(hierarchy);

                // Create dimension connector
                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("Promotions");
                connector.setForeignKey(CatalogSupplier.COLUMN_PROMOTION_ID_SALESFACT);
                connector.setDimension(dimension);

                result.add(i, connector);
            }
            return result;
        }
    }

    public static class OrderByAliasTestModifier1CE extends EmfMappingModifier {

        /*
        "<Dimension name=\"Promotions\" foreignKey=\"promotion_id\">\n"
        + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
        + "    <Table name=\"promotion\"/>\n"
        + "    <Level name=\"Promotion Name\" column=\"promotion_name\" uniqueMembers=\"true\">\n"
        + "      <CaptionExpression><SQL>RTRIM("
        + colName + ")</SQL></CaptionExpression>\n"
        + "    </Level>\n"
        + "  </Hierarchy>\n"
        + "</Dimension>"));
         */

        private StringBuilder colName;

        public OrderByAliasTestModifier1CE(CatalogMapping catalog, final StringBuilder colName) {
            super(catalog);
            this.colName = colName;
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                // Find and remove existing Promotions dimension connector if present
                java.util.Optional<? extends DimensionConnectorMapping> o = result.stream()
                    .filter(d -> "Promotions".equals(d.getOverrideDimensionName()))
                    .findFirst();
                int i = 0;
                if (o.isPresent()) {
                    i = result.indexOf(o.get());
                }

                // Create table
                TableQuery promotionTable = RolapMappingFactory.eINSTANCE.createTableQuery();
                promotionTable.setTable(CatalogSupplier.TABLE_PROMOTION);

                // Create SQL expression for caption
                SQLExpressionColumn captionExpressionColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();
                captionExpressionColumn.setName("promotion_name_caption");

                SqlStatement sqlStatement = RolapMappingFactory.eINSTANCE.createSqlStatement();
                sqlStatement.getDialects().add("generic");
                sqlStatement.setSql("RTRIM(" + colName + ")");

                captionExpressionColumn.getSqls().add(sqlStatement);

                // Create level
                Level promotionNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
                promotionNameLevel.setName("Promotion Name");
                promotionNameLevel.setColumn(CatalogSupplier.COLUMN_PROMOTION_NAME_PROMOTION);
                promotionNameLevel.setCaptionColumn(captionExpressionColumn);
                promotionNameLevel.setUniqueMembers(true);

                // Create hierarchy
                ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy.setHasAll(true);
                hierarchy.setAllMemberName("All Promotions");
                hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PROMOTION_ID_PROMOTION);
                hierarchy.setDefaultMember("[All Promotions]");
                hierarchy.setQuery(promotionTable);
                hierarchy.getLevels().add(promotionNameLevel);

                // Create dimension
                StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension.setName("Promotions");
                dimension.getHierarchies().add(hierarchy);

                // Create dimension connector
                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("Promotions");
                connector.setForeignKey(CatalogSupplier.COLUMN_PROMOTION_ID_SALESFACT);
                connector.setDimension(dimension);

                result.add(i, connector);
            }
            return result;
        }
    }

    public static class OrderByAliasTestModifier1NE extends EmfMappingModifier {

        /*
        "<Dimension name=\"Promotions\" foreignKey=\"promotion_id\">\n"
        + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
        + "    <Table name=\"promotion\"/>\n"
        + "    <Level name=\"Promotion Name\" column=\"promotion_name\" uniqueMembers=\"true\">\n"
        + "      <NameExpression><SQL>RTRIM("
        + colName + ")</SQL></NameExpression>\n"
        + "    </Level>\n"
        + "  </Hierarchy>\n"
        + "</Dimension>"));
         */

        private StringBuilder colName;

        public OrderByAliasTestModifier1NE(CatalogMapping catalog, final StringBuilder colName) {
            super(catalog);
            this.colName = colName;
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                // Find and remove existing Promotions dimension connector if present
                java.util.Optional<? extends DimensionConnectorMapping> o = result.stream()
                    .filter(d -> "Promotions".equals(d.getOverrideDimensionName()))
                    .findFirst();
                int i = 0;
                if (o.isPresent()) {
                    i = result.indexOf(o.get());
                }

                // Create table
                TableQuery promotionTable = RolapMappingFactory.eINSTANCE.createTableQuery();
                promotionTable.setTable(CatalogSupplier.TABLE_PROMOTION);

                // Create SQL expression for name
                SQLExpressionColumn nameExpressionColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();
                nameExpressionColumn.setName("promotion_name_expression");

                SqlStatement sqlStatement = RolapMappingFactory.eINSTANCE.createSqlStatement();
                sqlStatement.getDialects().add("generic");
                sqlStatement.setSql("RTRIM(" + colName + ")");

                nameExpressionColumn.getSqls().add(sqlStatement);

                // Create level
                Level promotionNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
                promotionNameLevel.setName("Promotion Name");
                promotionNameLevel.setColumn(CatalogSupplier.COLUMN_PROMOTION_NAME_PROMOTION);
                promotionNameLevel.setNameColumn(nameExpressionColumn);
                promotionNameLevel.setUniqueMembers(true);

                // Create hierarchy
                ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy.setHasAll(true);
                hierarchy.setAllMemberName("All Promotions");
                hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PROMOTION_ID_PROMOTION);
                hierarchy.setDefaultMember("[All Promotions]");
                hierarchy.setQuery(promotionTable);
                hierarchy.getLevels().add(promotionNameLevel);

                // Create dimension
                StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension.setName("Promotions");
                dimension.getHierarchies().add(hierarchy);

                // Create dimension connector
                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("Promotions");
                connector.setForeignKey(CatalogSupplier.COLUMN_PROMOTION_ID_SALESFACT);
                connector.setDimension(dimension);

                result.add(i, connector);
            }
            return result;
        }
    }

    public static class OrderByAliasTestModifier2 extends EmfMappingModifier {

        /*
        "<Dimension name=\"Employees\" foreignKey=\"employee_id\">\n"
        + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Employees\"\n"
        + "      primaryKey=\"employee_id\">\n"
        + "    <Table name=\"employee\"/>\n"
        + "    <Level name=\"Employee Id\" type=\"Numeric\" uniqueMembers=\"true\"\n"
        + "        column=\"employee_id\" parentColumn=\"supervisor_id\"\n"
        + "        nameColumn=\"full_name\" nullParentValue=\"0\">\n"
        + "      <ParentExpression><SQL>RTRIM("
        + colName + ")</SQL></ParentExpression>\n"
        + "      <Closure parentColumn=\"supervisor_id\" childColumn=\"employee_id\">\n"
        + "        <Table name=\"employee_closure\"/>\n"
        + "      </Closure>\n"
        + "      <Property name=\"Marital Status\" column=\"marital_status\"/>\n"
        + "      <Property name=\"Position Title\" column=\"position_title\"/>\n"
        + "      <Property name=\"Gender\" column=\"gender\"/>\n"
        + "      <Property name=\"Salary\" column=\"salary\"/>\n"
        + "      <Property name=\"Education Level\" column=\"education_level\"/>\n"
        + "      <Property name=\"Management Role\" column=\"management_role\"/>\n"
        + "    </Level>\n"
        + "  </Hierarchy>\n"
        + "</Dimension>"));
         */
        private StringBuilder colName;

        public OrderByAliasTestModifier2(CatalogMapping catalog, final StringBuilder colName) {
            super(catalog);
            this.colName = colName;
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("HR".equals(cube.getName())) {
                // Find and remove existing Employees dimension connector if present
                java.util.Optional<? extends DimensionConnectorMapping> o = result.stream()
                    .filter(d -> "Employees".equals(d.getOverrideDimensionName()))
                    .findFirst();
                int i = 0;
                if (o.isPresent()) {
                    i = result.indexOf(o.get());
                }

                // Create table
                TableQuery employeeTable = RolapMappingFactory.eINSTANCE.createTableQuery();
                employeeTable.setTable(CatalogSupplier.TABLE_EMPLOYEE);

                TableQuery employeeClosureTable = RolapMappingFactory.eINSTANCE.createTableQuery();
                employeeClosureTable.setTable(CatalogSupplier.TABLE_EMPLOYEE_CLOSURE);

                // Create SQL expression for parent
                SQLExpressionColumn parentExpressionColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();
                parentExpressionColumn.setName("supervisor_expression");

                SqlStatement sqlStatement = RolapMappingFactory.eINSTANCE.createSqlStatement();
                sqlStatement.getDialects().add("generic");
                sqlStatement.setSql("RTRIM(" + colName + ")");

                parentExpressionColumn.getSqls().add(sqlStatement);

                // Create member properties
                MemberProperty maritalStatusProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
                maritalStatusProperty.setName("Marital Status");
                maritalStatusProperty.setColumn(CatalogSupplier.COLUMN_MARITAL_STATUS_EMPLOYEE);

                MemberProperty positionTitleProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
                positionTitleProperty.setName("Position Title");
                positionTitleProperty.setColumn(CatalogSupplier.COLUMN_POSITION_TITLE_EMPLOYEE);

                MemberProperty genderProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
                genderProperty.setName("Gender");
                genderProperty.setColumn(CatalogSupplier.COLUMN_GENDER_EMPLOYEE);

                MemberProperty salaryProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
                salaryProperty.setName("Salary");
                salaryProperty.setColumn(CatalogSupplier.COLUMN_SALARY_EMPLOYEE);

                MemberProperty educationLevelProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
                educationLevelProperty.setName("Education Level");
                educationLevelProperty.setColumn(CatalogSupplier.COLUMN_EDUCATION_LEVEL_EMPLOYEE);

                MemberProperty managementRoleProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
                managementRoleProperty.setName("Management Role");
                managementRoleProperty.setColumn(CatalogSupplier.COLUMN_MANAGEMENT_ROLE_EMPLOYEE);

                // Create level
                Level employeeIdLevel = RolapMappingFactory.eINSTANCE.createLevel();
                employeeIdLevel.setName("Employee Id");
                employeeIdLevel.setColumnType(ColumnInternalDataType.NUMERIC);
                employeeIdLevel.setUniqueMembers(true);
                employeeIdLevel.setColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
                employeeIdLevel.setNameColumn(CatalogSupplier.COLUMN_FULL_NAME_EMPLOYEE);
                employeeIdLevel.getMemberProperties().addAll(List.of(
                    maritalStatusProperty, positionTitleProperty, genderProperty,
                    salaryProperty, educationLevelProperty, managementRoleProperty
                ));

                // Create parent child link (closure)
                org.eclipse.daanse.rolap.mapping.emf.rolapmapping.ParentChildLink parentChildLink =
                    RolapMappingFactory.eINSTANCE.createParentChildLink();
                parentChildLink.setParentColumn(CatalogSupplier.COLUMN_SUPERVISOR_ID_EMPLOYEE_CLOSURE);
                parentChildLink.setChildColumn(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE_CLOSURE);
                parentChildLink.setTable(employeeClosureTable);

                // Create parent-child hierarchy
                org.eclipse.daanse.rolap.mapping.emf.rolapmapping.ParentChildHierarchy hierarchy =
                    RolapMappingFactory.eINSTANCE.createParentChildHierarchy();
                hierarchy.setHasAll(true);
                hierarchy.setAllMemberName("All Employees");
                hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_EMPLOYEE);
                hierarchy.setQuery(employeeTable);
                hierarchy.setParentColumn(parentExpressionColumn);
                hierarchy.setNullParentValue("0");
                hierarchy.setParentChildLink(parentChildLink);
                hierarchy.setLevel(employeeIdLevel);

                // Create dimension
                StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension.setName("Employees");
                dimension.getHierarchies().add(hierarchy);

                // Create dimension connector
                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("Employees");
                connector.setForeignKey(CatalogSupplier.COLUMN_EMPLOYEE_ID_SALARY);
                connector.setDimension(dimension);

                result.add(i, connector);
            }
            return result;
        }
    }

    public static class OrderByAliasTestModifier3 extends EmfMappingModifier {

        /*
        "<Dimension name=\"Promotions\" foreignKey=\"promotion_id\">\n"
        + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
        + "    <Table name=\"promotion\"/>\n"
        + "    <Level name=\"Promotion Name\" column=\"promotion_name\" uniqueMembers=\"true\">\n"
        + "      <PropertyExpression name=\"Rtrim Name\"><SQL>RTRIM("
        + colName + ")</SQL></PropertyExpression>\n"
        + "    </Level>\n"
        + "  </Hierarchy>\n"
        + "</Dimension>"));
         */

        private StringBuilder colName;

        public OrderByAliasTestModifier3(CatalogMapping catalog, final StringBuilder colName) {
            super(catalog);
            this.colName = colName;
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                // Find and remove existing Promotions dimension connector if present
                java.util.Optional<? extends DimensionConnectorMapping> o = result.stream()
                    .filter(d -> "Promotions".equals(d.getOverrideDimensionName()))
                    .findFirst();
                int i = 0;
                if (o.isPresent()) {
                    i = result.indexOf(o.get());
                }

                // Create table
                TableQuery promotionTable = RolapMappingFactory.eINSTANCE.createTableQuery();
                promotionTable.setTable(CatalogSupplier.TABLE_PROMOTION);

                // Create SQL expression for property
                SQLExpressionColumn propertyExpressionColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();
                propertyExpressionColumn.setName("rtrim_name");

                SqlStatement sqlStatement = RolapMappingFactory.eINSTANCE.createSqlStatement();
                sqlStatement.getDialects().add("generic");
                sqlStatement.setSql("RTRIM(" + colName + ")");

                propertyExpressionColumn.getSqls().add(sqlStatement);

                // Create member property
                MemberProperty rtrimNameProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
                rtrimNameProperty.setName("Rtrim Name");
                rtrimNameProperty.setColumn(propertyExpressionColumn);

                // Create level
                Level promotionNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
                promotionNameLevel.setName("Promotion Name");
                promotionNameLevel.setColumn(CatalogSupplier.COLUMN_PROMOTION_NAME_PROMOTION);
                promotionNameLevel.setUniqueMembers(true);
                promotionNameLevel.getMemberProperties().add(rtrimNameProperty);

                // Create hierarchy
                ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy.setHasAll(true);
                hierarchy.setAllMemberName("All Promotions");
                hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PROMOTION_ID_PROMOTION);
                hierarchy.setDefaultMember("[All Promotions]");
                hierarchy.setQuery(promotionTable);
                hierarchy.getLevels().add(promotionNameLevel);

                // Create dimension
                StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension.setName("Promotions");
                dimension.getHierarchies().add(hierarchy);

                // Create dimension connector
                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("Promotions");
                connector.setForeignKey(CatalogSupplier.COLUMN_PROMOTION_ID_SALESFACT);
                connector.setDimension(dimension);

                result.add(i, connector);
            }
            return result;
        }
    }

    public static class OrderByAliasTestModifier4 extends EmfMappingModifier {

        /*
                "<?xml version=\"1.0\"?>\n"
        + "<Schema name=\"FoodMart\">\n"
        + "  <Dimension name=\"Time\" type=\"TimeDimension\">\n"
        + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n"
        + "      <Table name=\"time_by_day\" />\n"
        + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\" "
        + "levelType=\"TimeYears\" />\n"
        + "      <Level name=\"Quarter\" uniqueMembers=\"false\" levelType=\"TimeQuarters\" >\n"
        + "        <KeyExpression><SQL>RTRIM(quarter)</SQL></KeyExpression>\n"
        + "      </Level>\n"
        + "    </Hierarchy>\n"
        + "  </Dimension>\n"
        + "  <Dimension name=\"Product\">\n"
        + "    <Hierarchy hasAll=\"true\" primaryKey=\"product_id\" primaryKeyTable=\"product\">\n"
        + "      <Join leftKey=\"product_class_id\" rightKey=\"product_class_id\">\n"
        + "        <Table name=\"product\"/>\n"
        + "        <Table name=\"product_class\"/>\n"
        + "      </Join>\n"
        + "      <Level name=\"Product Family\" table=\"product_class\" column=\"product_family\" "
        + "uniqueMembers=\"true\" />\n"
        + "    </Hierarchy>\n"
        + "  </Dimension>\n"
        + "  <Cube name=\"Sales\">\n"
        + "    <Table name=\"sales_fact_1997\" />\n"
        + "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\" />\n"
        + "    <DimensionUsage name=\"Product\" source=\"Product\" foreignKey=\"product_id\" />\n"
        + "    <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\" formatString=\"Standard\" />\n"
        + "  </Cube>\n"
        + "  <Cube name=\"Warehouse\">\n"
        + "    <Table name=\"inventory_fact_1997\" />\n"
        + "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\" />\n"
        + "    <DimensionUsage name=\"Product\" source=\"Product\" foreignKey=\"product_id\" />\n"
        + "    <Measure name=\"Warehouse Sales\" column=\"warehouse_sales\" aggregator=\"sum\" "
        + "formatString=\"Standard\" />\n"
        + "  </Cube>\n"
        + "  <VirtualCube name=\"Warehouse and Sales\">\n"
        + "    <VirtualCubeDimension name=\"Time\" />\n"
        + "    <VirtualCubeDimension name=\"Product\" />\n"
        + "    <VirtualCubeMeasure cubeName=\"Sales\" name=\"[Measures].[Unit Sales]\" />\n"
        + "    <VirtualCubeMeasure cubeName=\"Warehouse\" name=\"[Measures].[Warehouse Sales]\" />\n"
        + "  </VirtualCube>\n"
        + "</Schema>");
         */

        public OrderByAliasTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        protected Catalog modifyCatalog(CatalogMapping catalog) {
            // Create Time dimension
            TableQuery timeByDayTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            timeByDayTable.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);

            // Create SQL expression for Quarter key
            SQLExpressionColumn quarterKeyExpression = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();
            quarterKeyExpression.setName("quarter_key");
            SqlStatement quarterSql = RolapMappingFactory.eINSTANCE.createSqlStatement();
            quarterSql.getDialects().add("generic");
            quarterSql.setSql("RTRIM(quarter)");
            quarterKeyExpression.getSqls().add(quarterSql);

            Level yearLevel = RolapMappingFactory.eINSTANCE.createLevel();
            yearLevel.setName("Year");
            yearLevel.setColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
            yearLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            yearLevel.setUniqueMembers(true);
            yearLevel.setType(LevelDefinition.TIME_YEARS);

            Level quarterLevel = RolapMappingFactory.eINSTANCE.createLevel();
            quarterLevel.setName("Quarter");
            quarterLevel.setColumn(quarterKeyExpression);
            quarterLevel.setUniqueMembers(false);
            quarterLevel.setType(LevelDefinition.TIME_QUARTERS);

            ExplicitHierarchy timeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            timeHierarchy.setHasAll(false);
            timeHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);
            timeHierarchy.setQuery(timeByDayTable);
            timeHierarchy.getLevels().add(yearLevel);
            timeHierarchy.getLevels().add(quarterLevel);

            TimeDimension timeDimension = RolapMappingFactory.eINSTANCE.createTimeDimension();
            timeDimension.setName("Time");
            timeDimension.getHierarchies().add(timeHierarchy);

            // Create Product dimension
            TableQuery productTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            productTable.setTable(CatalogSupplier.TABLE_PRODUCT);

            TableQuery productClassTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            productClassTable.setTable(CatalogSupplier.TABLE_PRODUCT_CLASS);

            JoinedQueryElement leftProduct = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
            leftProduct.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT);
            leftProduct.setQuery(productTable);

            JoinedQueryElement rightProductClass = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
            rightProductClass.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT_CLASS);
            rightProductClass.setQuery(productClassTable);

            JoinQuery productJoin = RolapMappingFactory.eINSTANCE.createJoinQuery();
            productJoin.setLeft(leftProduct);
            productJoin.setRight(rightProductClass);

            Level productFamilyLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productFamilyLevel.setName("Product Family");
            productFamilyLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_FAMILY_PRODUCT_CLASS);
            productFamilyLevel.setUniqueMembers(true);

            ExplicitHierarchy productHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            productHierarchy.setHasAll(true);
            productHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);
            productHierarchy.setQuery(productJoin);
            productHierarchy.getLevels().add(productFamilyLevel);

            StandardDimension productDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            productDimension.setName("Product");
            productDimension.getHierarchies().add(productHierarchy);

            // Create Sales cube
            TableQuery salesFactTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            salesFactTable.setTable(CatalogSupplier.TABLE_SALES_FACT);

            DimensionConnector salesTimeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            salesTimeConnector.setOverrideDimensionName("Time");
            salesTimeConnector.setDimension(timeDimension);
            salesTimeConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);

            DimensionConnector salesProductConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            salesProductConnector.setOverrideDimensionName("Product");
            salesProductConnector.setDimension(productDimension);
            salesProductConnector.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);

            SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");

            MeasureGroup salesMeasureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            salesMeasureGroup.getMeasures().add(unitSalesMeasure);

            PhysicalCube salesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            salesCube.setName("Sales");
            salesCube.setQuery(salesFactTable);
            salesCube.getDimensionConnectors().add(salesTimeConnector);
            salesCube.getDimensionConnectors().add(salesProductConnector);
            salesCube.getMeasureGroups().add(salesMeasureGroup);

            // Create Warehouse cube
            TableQuery inventoryFactTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            inventoryFactTable.setTable(CatalogSupplier.TABLE_INVENTORY_FACT);

            DimensionConnector warehouseTimeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            warehouseTimeConnector.setOverrideDimensionName("Time");
            warehouseTimeConnector.setDimension(timeDimension);
            warehouseTimeConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_INVENTORY_FACT);

            DimensionConnector warehouseProductConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            warehouseProductConnector.setOverrideDimensionName("Product");
            warehouseProductConnector.setDimension(productDimension);
            warehouseProductConnector.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_INVENTORY_FACT);

            SumMeasure warehouseSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            warehouseSalesMeasure.setName("Warehouse Sales");
            warehouseSalesMeasure.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_SALES_INVENTORY_FACT);
            warehouseSalesMeasure.setFormatString("Standard");

            MeasureGroup warehouseMeasureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            warehouseMeasureGroup.getMeasures().add(warehouseSalesMeasure);

            PhysicalCube warehouseCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            warehouseCube.setName("Warehouse");
            warehouseCube.setQuery(inventoryFactTable);
            warehouseCube.getDimensionConnectors().add(warehouseTimeConnector);
            warehouseCube.getDimensionConnectors().add(warehouseProductConnector);
            warehouseCube.getMeasureGroups().add(warehouseMeasureGroup);

            // Create Virtual Cube
            DimensionConnector virtualTimeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            virtualTimeConnector.setOverrideDimensionName("Time");
            virtualTimeConnector.setDimension(timeDimension);

            DimensionConnector virtualProductConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            virtualProductConnector.setOverrideDimensionName("Product");
            virtualProductConnector.setDimension(productDimension);

            VirtualCube virtualCube = RolapMappingFactory.eINSTANCE.createVirtualCube();
            virtualCube.setName("Warehouse and Sales");
            virtualCube.getDimensionConnectors().add(virtualTimeConnector);
            virtualCube.getDimensionConnectors().add(virtualProductConnector);
            virtualCube.getReferencedMeasures().add(unitSalesMeasure);
            virtualCube.getReferencedMeasures().add(warehouseSalesMeasure);

            // Create catalog
            Catalog newCatalog = RolapMappingFactory.eINSTANCE.createCatalog();
            newCatalog.setName("FoodMart");
            newCatalog.getCubes().add(salesCube);
            newCatalog.getCubes().add(warehouseCube);
            newCatalog.getCubes().add(virtualCube);
            if (catalog != null) {
                newCatalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog));
            }

            return newCatalog;
        }
    }

    public static class TestCalculatedMembersModifier1 extends EmfMappingModifier {

        /*
            "<CalculatedMember name='Profit With Spaces'"
            + "  dimension='Measures'"
            + "  formula='[Measures].[Store Sales]-[Measures].[Store Cost]'/>"));
        */
        public TestCalculatedMembersModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Warehouse and Sales".equals(cube.getName())) {
                CalculatedMember calculatedMember = RolapMappingFactory.eINSTANCE.createCalculatedMember();
                calculatedMember.setName("Profit With Spaces");
                calculatedMember.setFormula("[Measures].[Store Sales]-[Measures].[Store Cost]");
                result.add(calculatedMember);
            }
            return result;
        }
    }

    public static class TestCalculatedMembersModifier2 extends EmfMappingModifier {

        /*
            "<CalculatedMember\n"
            + "    name=\"Profit Formatted\"\n"
            + "    dimension=\"Measures\"\n"
            + "    visible=\"false\"\n"
            + "    formula=\"[Measures].[Store Sales]-[Measures].[Store Cost]\">\n"
            + "  <CalculatedMemberProperty name=\"FORMAT_STRING\" value=\"$#,##0.00\"/>\n"
            + "  <CalculatedMemberProperty name=\"CELL_FORMATTER\" value=\""
            + UdfTest.FooBarCellFormatter.class.getName()
            + "\"/>\n"
            + "</CalculatedMember>\n"));
        */
        public TestCalculatedMembersModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                CalculatedMember calculatedMember = RolapMappingFactory.eINSTANCE.createCalculatedMember();
                calculatedMember.setName("Profit Formatted");
                calculatedMember.setVisible(false);
                calculatedMember.setFormula("[Measures].[Store Sales]-[Measures].[Store Cost]");

                CalculatedMemberProperty prop1 = RolapMappingFactory.eINSTANCE.createCalculatedMemberProperty();
                prop1.setName("FORMAT_STRING");
                prop1.setValue("$#,##0.00");
                calculatedMember.getCalculatedMemberProperties().add(prop1);

                CalculatedMemberProperty prop2 = RolapMappingFactory.eINSTANCE.createCalculatedMemberProperty();
                prop2.setName("CELL_FORMATTER");
                prop2.setValue(FormatterUtil.FooBarCellFormatter.class.getName());
                calculatedMember.getCalculatedMemberProperties().add(prop2);

                result.add(calculatedMember);
            }
            return result;

        }

    }

    public static class TestCalculatedMembersModifier3 extends EmfMappingModifier {

        /*
                "<CalculatedMember\n"
                + "    name=\"My Tuple\"\n"
                + "    dimension=\"Measures\"\n"
                + "    visible=\"false\"\n"
                + "    formula=\"StrToTuple('([Gender].[M], [Marital Status].[S])', [Gender], [Marital Status])\"/>\n"));
        */
        public TestCalculatedMembersModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                CalculatedMember calculatedMember = RolapMappingFactory.eINSTANCE.createCalculatedMember();
                calculatedMember.setName("My Tuple");
                calculatedMember.setVisible(false);
                calculatedMember.setFormula("StrToTuple('([Gender].[M], [Marital Status].[S])', [Gender], [Marital Status])");
                result.add(calculatedMember);
            }
            return result;
        }
    }

    public static class TestCalculatedMembersModifier4 extends EmfMappingModifier {

        /*
                "  <CalculatedMember\n"
                + "    name=\"Profit Formatted\"\n"
                + "    dimension=\"Measures\"\n"
                + "    visible=\"false\"\n"
                + "    formula=\"[Measures].[Store Sales]-[Measures].[Store Cost]\">\n"
                + "  <CalculatedMemberProperty name=\"FORMAT_STRING\" value=\"$#,##0.00\"/>\n"
                + "  <CalculatedMemberProperty name=\"CELL_FORMATTER\" value=\"mondrian.test.NonExistentCellFormatter\"/>\n"
                + "</CalculatedMember>\n"));
        */
        public TestCalculatedMembersModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
        	List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                CalculatedMember calculatedMember = RolapMappingFactory.eINSTANCE.createCalculatedMember();
                calculatedMember.setName("Profit Formatted");
                calculatedMember.setVisible(false);
                calculatedMember.setFormula("[Measures].[Store Sales]-[Measures].[Store Cost]");

                CalculatedMemberProperty prop1 = RolapMappingFactory.eINSTANCE.createCalculatedMemberProperty();
                prop1.setName("FORMAT_STRING");
                prop1.setValue("$#,##0.00");
                calculatedMember.getCalculatedMemberProperties().add(prop1);

                CalculatedMemberProperty prop2 = RolapMappingFactory.eINSTANCE.createCalculatedMemberProperty();
                prop2.setName("CELL_FORMATTER");
                prop2.setValue("mondrian.test.NonExistentCellFormatter");
                calculatedMember.getCalculatedMemberProperties().add(prop2);

                result.add(calculatedMember);
            }
            return result;
        }

    }

    public static class TestAggregationManagerModifier1 extends EmfMappingModifier {

        /*
            "<Dimension name=\"Store2\" foreignKey=\"store_id\">\n"
            + "  <Hierarchy hasAll=\"true\" primaryKey=\"store_id\" allMemberName=\"All Stores\">"
            + "    <Table name=\"store\"/>\n"
            + "    <Level name=\"Store Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
            + "    <Level name=\"Store State\"   column=\"store_state\"   uniqueMembers=\"true\"/>\n"
            + "    <Level name=\"Store City\"    column=\"store_city\"    uniqueMembers=\"false\"/>\n"
            + "    <Level name=\"Store Type\"    column=\"store_type\"    uniqueMembers=\"false\"/>\n"
            + "    <Level name=\"Store Name\"    column=\"store_name\"    uniqueMembers=\"true\"/>\n"
            + "  </Hierarchy>\n"
            + "</Dimension>"));
         */

        public TestAggregationManagerModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension.setName("Store2");

                ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy.setHasAll(true);
                hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);
                hierarchy.setAllMemberName("All Stores");

                TableQuery table = RolapMappingFactory.eINSTANCE.createTableQuery();
                table.setTable(CatalogSupplier.TABLE_STORE);
                hierarchy.setQuery(table);

                Level level1 = RolapMappingFactory.eINSTANCE.createLevel();
                level1.setName("Store Country");
                level1.setColumn(CatalogSupplier.COLUMN_STORE_COUNTRY_STORE);
                level1.setUniqueMembers(true);
                hierarchy.getLevels().add(level1);

                Level level2 = RolapMappingFactory.eINSTANCE.createLevel();
                level2.setName("Store State");
                level2.setColumn(CatalogSupplier.COLUMN_STORE_STATE_STORE);
                level2.setUniqueMembers(true);
                hierarchy.getLevels().add(level2);

                Level level3 = RolapMappingFactory.eINSTANCE.createLevel();
                level3.setName("Store City");
                level3.setColumn(CatalogSupplier.COLUMN_STORE_CITY_STORE);
                level3.setUniqueMembers(false);
                hierarchy.getLevels().add(level3);

                Level level4 = RolapMappingFactory.eINSTANCE.createLevel();
                level4.setName("Store Type");
                level4.setColumn(CatalogSupplier.COLUMN_STORE_TYPE_STORE);
                level4.setUniqueMembers(false);
                hierarchy.getLevels().add(level4);

                Level level5 = RolapMappingFactory.eINSTANCE.createLevel();
                level5.setName("Store Name");
                level5.setColumn(CatalogSupplier.COLUMN_STORE_NAME_STORE);
                level5.setUniqueMembers(true);
                hierarchy.getLevels().add(level5);

                dimension.getHierarchies().add(hierarchy);

                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("Store2");
                connector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
                connector.setDimension(dimension);

                result.add(connector);
            }
            return result;
        }

    }

    public static class TestAggregationManagerModifier2 extends EmfMappingModifier {

        /*
            "<Dimension name=\"Promotions\" foreignKey=\"promotion_id\">\n"
            + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
            + "    <Table name=\"promotion\"/>\n"
            + "    <Level name=\"Promotion Name\" column=\"promotion_name\" uniqueMembers=\"true\">\n"
            + "      <KeyExpression><SQL>ERROR_TEST_FUNCTION_NAME("
            + colName + ")</SQL></KeyExpression>\n"
            + "    </Level>\n"
            + "  </Hierarchy>\n"
            + "</Dimension>", false));
         */
        private final StringBuilder colName;

        public TestAggregationManagerModifier2(CatalogMapping catalog, final StringBuilder colName) {
            super(catalog);
            this.colName = colName;
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube).stream()
                    .filter(d -> !"Promotions".equals(d.getOverrideDimensionName())).toList());
            if ("Sales".equals(cube.getName())) {
                StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension.setName("Promotions");

                ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy.setHasAll(true);
                hierarchy.setAllMemberName("All Promotions");
                hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PROMOTION_ID_PROMOTION);
                hierarchy.setDefaultMember("[All Promotions]");

                TableQuery table = RolapMappingFactory.eINSTANCE.createTableQuery();
                table.setTable(CatalogSupplier.TABLE_PROMOTION);
                hierarchy.setQuery(table);

                Level level = RolapMappingFactory.eINSTANCE.createLevel();
                level.setName("Promotion Name");
                level.setColumn(CatalogSupplier.COLUMN_PROMOTION_NAME_PROMOTION);
                level.setUniqueMembers(true);

                SQLExpressionColumn sqlColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();
                sqlColumn.setType(ColumnType.VARCHAR);

                SqlStatement sqlStatement = RolapMappingFactory.eINSTANCE.createSqlStatement();
                sqlStatement.setSql("ERROR_TEST_FUNCTION_NAME(" + colName + ")");
                sqlStatement.getDialects().add("generic");
                sqlColumn.getSqls().add(sqlStatement);

                level.setColumn(sqlColumn);
                hierarchy.getLevels().add(level);

                dimension.getHierarchies().add(hierarchy);

                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("Promotions");
                connector.setForeignKey(CatalogSupplier.COLUMN_PROMOTION_ID_SALESFACT);
                connector.setDimension(dimension);

                result.add(connector);
            }
            return result;

        }
    }

    public static class TestAggregationManagerModifier10 extends EmfMappingModifier {

        /*
            "<Dimension name=\"Promotions\" foreignKey=\"promotion_id\">\n"
            + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
            + "    <Table name=\"promotion\"/>\n"
            + "    <Level name=\"Promotion Name\" column=\"promotion_name\" uniqueMembers=\"true\">\n"
            + "      <KeyExpression><SQL>RTRIM("
            + colName + ")</SQL></KeyExpression>\n"
            + "    </Level>\n"
            + "  </Hierarchy>\n"
            + "</Dimension>", false));
         */
        private final StringBuilder colName;

        public TestAggregationManagerModifier10(CatalogMapping catalog, final StringBuilder colName) {
            super(catalog);
            this.colName = colName;
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube).stream()
                    .filter(d -> !"Promotions".equals(d.getOverrideDimensionName())).toList());
            if ("Sales".equals(cube.getName())) {
                StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension.setName("Promotions");

                ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy.setHasAll(true);
                hierarchy.setAllMemberName("All Promotions");
                hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PROMOTION_ID_PROMOTION);
                hierarchy.setDefaultMember("[All Promotions]");

                TableQuery table = RolapMappingFactory.eINSTANCE.createTableQuery();
                table.setTable(CatalogSupplier.TABLE_PROMOTION);
                hierarchy.setQuery(table);

                Level level = RolapMappingFactory.eINSTANCE.createLevel();
                level.setName("Promotion Name");
                level.setColumn(CatalogSupplier.COLUMN_PROMOTION_NAME_PROMOTION);
                level.setUniqueMembers(true);

                SQLExpressionColumn sqlColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();
                sqlColumn.setType(ColumnType.VARCHAR);

                SqlStatement sqlStatement = RolapMappingFactory.eINSTANCE.createSqlStatement();
                sqlStatement.setSql("RTRIM(" + colName + ")");
                sqlStatement.getDialects().add("generic");
                sqlColumn.getSqls().add(sqlStatement);

                level.setColumn(sqlColumn);
                hierarchy.getLevels().add(level);

                dimension.getHierarchies().add(hierarchy);

                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("Promotions");
                connector.setForeignKey(CatalogSupplier.COLUMN_PROMOTION_ID_SALESFACT);
                connector.setDimension(dimension);

                result.add(connector);
            }
            return result;

        }
    }

    public static class DrillThroughTestModifier1 extends EmfMappingModifier {

        /*
            "  <Dimension name=\"Store2\" foreignKey=\"store_id\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "      <Table name=\"store_ragged\"/>\n"
            + "      <Level name=\"Store Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"Store Id\" column=\"store_id\" captionColumn=\"store_name\" uniqueMembers=\"true\" type=\"Integer\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension name=\"Store3\" foreignKey=\"store_id\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "      <Table name=\"store\"/>\n"
            + "      <Level name=\"Store Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"Store Id\" column=\"store_id\" captionColumn=\"store_name\" uniqueMembers=\"true\" type=\"Numeric\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"));
         */


        public DrillThroughTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                // Store2 dimension
                StandardDimension dimension2 = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension2.setName("Store2");

                ExplicitHierarchy hierarchy2 = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy2.setHasAll(true);
                hierarchy2.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE_RAGGED);

                TableQuery table2 = RolapMappingFactory.eINSTANCE.createTableQuery();
                table2.setTable(CatalogSupplier.TABLE_STORE_RAGGED);
                hierarchy2.setQuery(table2);

                Level level2_1 = RolapMappingFactory.eINSTANCE.createLevel();
                level2_1.setName("Store Country");
                level2_1.setColumn(CatalogSupplier.COLUMN_STORE_COUNTRY_STORE_RAGGED);
                level2_1.setUniqueMembers(true);
                hierarchy2.getLevels().add(level2_1);

                Level level2_2 = RolapMappingFactory.eINSTANCE.createLevel();
                level2_2.setName("Store Id");
                level2_2.setColumn(CatalogSupplier.COLUMN_STORE_ID_STORE_RAGGED);
                level2_2.setCaptionColumn(CatalogSupplier.COLUMN_STORE_NAME_STORE_RAGGED);
                level2_2.setUniqueMembers(true);
                level2_2.setColumnType(ColumnInternalDataType.INTEGER);
                hierarchy2.getLevels().add(level2_2);

                dimension2.getHierarchies().add(hierarchy2);

                DimensionConnector connector2 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector2.setOverrideDimensionName("Store2");
                connector2.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
                connector2.setDimension(dimension2);

                result.add(connector2);

                // Store3 dimension
                StandardDimension dimension3 = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension3.setName("Store3");

                ExplicitHierarchy hierarchy3 = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy3.setHasAll(true);
                hierarchy3.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);

                TableQuery table3 = RolapMappingFactory.eINSTANCE.createTableQuery();
                table3.setTable(CatalogSupplier.TABLE_STORE);
                hierarchy3.setQuery(table3);

                Level level3_1 = RolapMappingFactory.eINSTANCE.createLevel();
                level3_1.setName("Store Country");
                level3_1.setColumn(CatalogSupplier.COLUMN_STORE_COUNTRY_STORE);
                level3_1.setUniqueMembers(true);
                hierarchy3.getLevels().add(level3_1);

                Level level3_2 = RolapMappingFactory.eINSTANCE.createLevel();
                level3_2.setName("Store Id");
                level3_2.setColumn(CatalogSupplier.COLUMN_STORE_ID_STORE);
                level3_2.setCaptionColumn(CatalogSupplier.COLUMN_STORE_NAME_STORE);
                level3_2.setUniqueMembers(true);
                level3_2.setColumnType(ColumnInternalDataType.NUMERIC);
                hierarchy3.getLevels().add(level3_2);

                dimension3.getHierarchies().add(hierarchy3);

                DimensionConnector connector3 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector3.setOverrideDimensionName("Store3");
                connector3.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
                connector3.setDimension(dimension3);

                result.add(connector3);


            }
            return result;

        }

    }

    public static class DrillThroughTestModifier2 extends EmfMappingModifier {

        /*
                "  <Dimension name=\"Store2\" foreignKey=\"store_id\">\n"
                + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Stores\" >\n"
                + "      <Table name=\"store_ragged\"/>\n"
                + "      <Level name=\"Store Id\" column=\"store_id\" nameColumn=\"store_id\" ordinalColumn=\"region_id\" uniqueMembers=\"true\">\n"
                + "     </Level>"
                + "    </Hierarchy>\n"
                + "  </Dimension>\n"));
         */


        public DrillThroughTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
            	Optional<DimensionConnectorMapping> o = result.stream().filter(d -> "Promotion Media".equals(d.getOverrideDimensionName())).findFirst();
            	int i = 0;
            	if (o.isPresent()) {
            	    i = result.indexOf(o.get());
                }

                StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension.setName("Store2");

                ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy.setHasAll(true);
                hierarchy.setAllMemberName("All Stores");

                TableQuery table = RolapMappingFactory.eINSTANCE.createTableQuery();
                table.setTable(CatalogSupplier.TABLE_STORE_RAGGED);
                hierarchy.setQuery(table);

                Level level = RolapMappingFactory.eINSTANCE.createLevel();
                level.setName("Store Id");
                level.setColumn(CatalogSupplier.COLUMN_STORE_ID_STORE_RAGGED);
                level.setNameColumn(CatalogSupplier.COLUMN_STORE_ID_STORE_RAGGED);
                level.setOrdinalColumn(CatalogSupplier.COLUMN_REGION_ID_STORE_RAGGED);
                level.setUniqueMembers(true);
                hierarchy.getLevels().add(level);

                dimension.getHierarchies().add(hierarchy);

                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("Store2");
                connector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
                connector.setDimension(dimension);

            	result.add(i, connector);
            }
            return result;
        }

    }

    public static class DrillThroughTestModifier3 extends EmfMappingModifier {

        /*
            "  <Dimension name=\"Education Level2\" foreignKey=\"customer_id\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"customer_id\">\n"
            + "      <Table name=\"customer\"/>\n"
            + "      <Level name=\"Education Level but with a very long name that will be too long if converted directly into a column\" column=\"education\" uniqueMembers=\"true\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>",
         */


        public DrillThroughTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension.setName("Education Level2");

                ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy.setHasAll(true);
                hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);

                TableQuery table = RolapMappingFactory.eINSTANCE.createTableQuery();
                table.setTable(CatalogSupplier.TABLE_CUSTOMER);
                hierarchy.setQuery(table);

                Level level = RolapMappingFactory.eINSTANCE.createLevel();
                level.setName("Education Level but with a very long name that will be too long if converted directly into a column");
                level.setColumn(CatalogSupplier.COLUMN_EDUCATION_CUSTOMER);
                level.setUniqueMembers(true);
                hierarchy.getLevels().add(level);

                dimension.getHierarchies().add(hierarchy);

                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("Education Level2");
                connector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
                connector.setDimension(dimension);

            	result.add(connector);
            }
            return result;
        }
    }

    public static class RaggedHierarchyTestModifier1 extends EmfMappingModifier {

        /*
                "<Dimension name=\"Gender4\" foreignKey=\"customer_id\">\n"
                + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Gender\" primaryKey=\"customer_id\">\n"
                + "      <Table name=\"customer\"/>\n"
                + "      <Level name=\"Gender\" column=\"gender\" uniqueMembers=\"true\" hideMemberIf=\"IfBlankName\">\n"
                + "         <NameExpression> "
                + " <SQL dialect='generic'> "
                    +           "case \"gender\" "
                    +           "when 'F' then ' ' "
                    +           "when 'M' then 'M' "
                    + " end "
                    + "</SQL> "
                    + "</NameExpression>  "
                    + "      </Level>"
                    + "    </Hierarchy>\n"
                    + "  </Dimension>"));
         */


        public RaggedHierarchyTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension.setName("Gender4");

                ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy.setHasAll(true);
                hierarchy.setAllMemberName("All Gender");
                hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);

                TableQuery table = RolapMappingFactory.eINSTANCE.createTableQuery();
                table.setTable(CatalogSupplier.TABLE_CUSTOMER);
                hierarchy.setQuery(table);

                Level level = RolapMappingFactory.eINSTANCE.createLevel();
                level.setName("Gender");
                level.setColumn(CatalogSupplier.COLUMN_GENDER_CUSTOMER);
                level.setUniqueMembers(true);
                level.setHideMemberIf(HideMemberIf.IF_BLANK_NAME);

                SQLExpressionColumn nameColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();
                nameColumn.setType(ColumnType.VARCHAR);

                SqlStatement sqlStatement = RolapMappingFactory.eINSTANCE.createSqlStatement();
                sqlStatement.setSql("case \"gender\" when 'F' then ' ' when 'M' then 'M' ");
                sqlStatement.getDialects().add("generic");
                nameColumn.getSqls().add(sqlStatement);

                level.setNameColumn(nameColumn);
                hierarchy.getLevels().add(level);

                dimension.getHierarchies().add(hierarchy);

                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("Gender4");
                connector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
                connector.setDimension(dimension);

            	result.add(connector);
            }
            return result;
        }
    }

    public static class RaggedHierarchyTestModifier2 extends EmfMappingModifier {

        /*
            "<Dimension name=\"Store\" foreignKey=\"store_id\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "      <Table name=\"store_ragged\"/>\n"
            + "      <Level name=\"Store Country\" column=\"store_country\" uniqueMembers=\"true\"\n"
            + "          hideMemberIf=\"Never\"/>\n"
            + "      <Level name=\"Store State\" column=\"store_state\" uniqueMembers=\"true\"\n"
            + "          hideMemberIf=\"IfParentsName\"/>\n"
            + "      <Level name=\"Store City\" column=\"store_city\" uniqueMembers=\"false\"\n"
            + "          hideMemberIf=\"IfBlankName\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>"));
         */


        public RaggedHierarchyTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales Ragged".equals(cube.getName())) {
                StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension.setName("Store");

                ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy.setHasAll(true);
                hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE_RAGGED);

                TableQuery table = RolapMappingFactory.eINSTANCE.createTableQuery();
                table.setTable(CatalogSupplier.TABLE_STORE_RAGGED);
                hierarchy.setQuery(table);

                Level level1 = RolapMappingFactory.eINSTANCE.createLevel();
                level1.setName("Store Country");
                level1.setColumn(CatalogSupplier.COLUMN_STORE_COUNTRY_STORE_RAGGED);
                level1.setUniqueMembers(true);
                level1.setHideMemberIf(HideMemberIf.NEVER);
                hierarchy.getLevels().add(level1);

                Level level2 = RolapMappingFactory.eINSTANCE.createLevel();
                level2.setName("Store State");
                level2.setColumn(CatalogSupplier.COLUMN_STORE_STATE_STORE_RAGGED);
                level2.setUniqueMembers(true);
                level2.setHideMemberIf(HideMemberIf.IF_PARENTS_NAME);
                hierarchy.getLevels().add(level2);

                Level level3 = RolapMappingFactory.eINSTANCE.createLevel();
                level3.setName("Store City");
                level3.setColumn(CatalogSupplier.COLUMN_STORE_CITY_STORE_RAGGED);
                level3.setUniqueMembers(false);
                level3.setHideMemberIf(HideMemberIf.IF_BLANK_NAME);
                hierarchy.getLevels().add(level3);

                dimension.getHierarchies().add(hierarchy);

                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("Store");
                connector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
                connector.setDimension(dimension);

            	result.add(connector);
            }
            return result;
        }

    }

    public static class RolapResultTestModifier extends EmfMappingModifier {

        /*
            "<Dimension name=\"Promotions2\" foreignKey=\"promotion_id\">\n"
            + "  <Hierarchy hasAll=\"false\" primaryKey=\"promotion_id\">\n"
            + "    <Table name=\"promotion\"/>\n"
            + "    <Level name=\"Promotion2 Name\" column=\"promotion_name\" uniqueMembers=\"true\"/>\n"
            + "  </Hierarchy>\n"
            + "</Dimension>"));
         */


        public RolapResultTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension.setName("Promotions2");

                ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy.setHasAll(true);
                hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PROMOTION_ID_PROMOTION);

                TableQuery table = RolapMappingFactory.eINSTANCE.createTableQuery();
                table.setTable(CatalogSupplier.TABLE_PROMOTION);
                hierarchy.setQuery(table);

                Level level = RolapMappingFactory.eINSTANCE.createLevel();
                level.setName("Promotion2 Name");
                level.setColumn(CatalogSupplier.COLUMN_PROMOTION_NAME_PROMOTION);
                level.setUniqueMembers(true);
                hierarchy.getLevels().add(level);

                dimension.getHierarchies().add(hierarchy);

                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("Promotions2");
                connector.setForeignKey(CatalogSupplier.COLUMN_PROMOTION_ID_SALESFACT);
                connector.setDimension(dimension);

            	result.add(connector);
            }
            return result;
        }
    }

    public static class VirtualCubeTestModifier1 extends EmfMappingModifier {

        /*
            "  <CalculatedMember name=\"Shipped per Ordered\" dimension=\"Measures\">\n"
            + "    <Formula>[Measures].[Units Shipped] / [Measures].[Unit Sales]</Formula>\n"
            + "    <CalculatedMemberProperty name=\"FORMAT_STRING\" value=\"#.0%\"/>\n"
            + "  </CalculatedMember>\n"));
        */
        public VirtualCubeTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Warehouse and Sales".equals(cube.getName())) {
                CalculatedMember calculatedMember = RolapMappingFactory.eINSTANCE.createCalculatedMember();
                calculatedMember.setName("Shipped per Ordered");
                calculatedMember.setFormula("[Measures].[Units Shipped] / [Measures].[Unit Sales]");

                CalculatedMemberProperty prop = RolapMappingFactory.eINSTANCE.createCalculatedMemberProperty();
                prop.setName("FORMAT_STRING");
                prop.setValue("#.0%");
                calculatedMember.getCalculatedMemberProperties().add(prop);

                result.add(calculatedMember);
            }
            return result;
        }
    }

    public static class VirtualCubeTestModifier2 extends EmfMappingModifier {

        /*
            <VirtualCubeMeasure cubeName=\"Sales\" name=\"[Measures].[Customer Count]\"/>"
        */
        public VirtualCubeTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends MeasureMapping> virtualCubeReferencedMeasures(VirtualCubeMapping cube) {
            List<MeasureMapping> result = new ArrayList<>();
            result.addAll(super.virtualCubeReferencedMeasures(cube));
            if ("Warehouse and Sales".equals(cube.getName())) {
                result.add(look(CatalogSupplier.MEASURE_CUSTOMER_COUNT));
            }
            return result;
        }
    }

    public static class VirtualCubeTestModifier3 extends EmfMappingModifier {

        /*
            "<Schema name=\"FoodMart\">"
          + "<Dimension type=\"TimeDimension\" highCardinality=\"false\" name=\"Time\">"
          + "<Hierarchy visible=\"true\" hasAll=\"false\" primaryKey=\"time_id\">"
          + "<Table name=\"time_by_day\">"
          + "</Table>"
          + "<Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\" levelType=\"TimeYears\">"
          + "</Level>"
          + "<Level name=\"Quarter\" column=\"quarter\" type=\"String\" uniqueMembers=\"false\" levelType=\"TimeQuarters\">"
          + "</Level>"
          + "</Hierarchy>"
          + "</Dimension>"
          + "<Cube name=\"Sales\" visible=\"true\" defaultMeasure=\"Unit Sales\" >"
          + "<Table name=\"sales_fact_1997\">"
          + "<AggName name=\"agg_c_special_sales_fact_1997\">"
          + "<AggFactCount column=\"FACT_COUNT\">"
          + "</AggFactCount>"
          + "<AggMeasure column=\"UNIT_SALES_SUM\" name=\"[Measures].[Unit Sales]\">"
          + "</AggMeasure>"
          + "<AggLevel column=\"TIME_YEAR\" name=\"[Time].[Year]\">"
          + "</AggLevel>"
          + "</AggName>"
          + "</Table>"
          + "<DimensionUsage source=\"Time\" name=\"Time\" foreignKey=\"time_id\" highCardinality=\"false\">"
          + "</DimensionUsage>"
          + "<Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\">"
          + "</Measure>"
          + "<CalculatedMember name=\"recurse\" dimension=\"Measures\" visible=\"true\">"
          + "<Formula>"
          + "<![CDATA[(CoalesceEmpty((Measures.[Unit Sales], [Time].CurrentMember ) ,"
          + "(Measures.[recurse],[Time].CurrentMember.PrevMember)))]]>"
          + "</Formula>"
          + "</CalculatedMember>"
          + "</Cube>"
          + "<VirtualCube enabled=\"true\" name=\"Warehouse and Sales\" defaultMeasure=\"Store Sales\" visible=\"true\">"
          + "<VirtualCubeDimension visible=\"true\" highCardinality=\"false\" name=\"Time\">"
          + "</VirtualCubeDimension>"
          + "<VirtualCubeMeasure cubeName=\"Sales\" name=\"[Measures].[recurse]\" visible=\"true\">"
          + "</VirtualCubeMeasure>"
          + "</VirtualCube>"
          + "</Schema>";
         */

        private static TimeDimension dTime;

        public VirtualCubeTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog) {
            Catalog newCatalog = RolapMappingFactory.eINSTANCE.createCatalog();
            newCatalog.setName("FoodMart");

            // Create Time dimension
            dTime = RolapMappingFactory.eINSTANCE.createTimeDimension();
            dTime.setName("Time");

            ExplicitHierarchy timeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            timeHierarchy.setVisible(true);
            timeHierarchy.setHasAll(false);
            timeHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);

            TableQuery timeTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            timeTable.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);
            timeHierarchy.setQuery(timeTable);

            Level yearLevel = RolapMappingFactory.eINSTANCE.createLevel();
            yearLevel.setName("Year");
            yearLevel.setColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
            yearLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            yearLevel.setUniqueMembers(true);
            yearLevel.setType(LevelDefinition.TIME_YEARS);
            timeHierarchy.getLevels().add(yearLevel);

            Level quarterLevel = RolapMappingFactory.eINSTANCE.createLevel();
            quarterLevel.setName("Quarter");
            quarterLevel.setColumn(CatalogSupplier.COLUMN_QUARTER_TIME_BY_DAY);
            quarterLevel.setColumnType(ColumnInternalDataType.STRING);
            quarterLevel.setUniqueMembers(false);
            quarterLevel.setType(LevelDefinition.TIME_QUARTERS);
            timeHierarchy.getLevels().add(quarterLevel);

            dTime.getHierarchies().add(timeHierarchy);

            // Create Sales cube
            PhysicalCube cubeSales = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            cubeSales.setName("Sales");

            TableQuery salesTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            salesTable.setTable(CatalogSupplier.TABLE_SALES_FACT);

            AggregationName aggName = RolapMappingFactory.eINSTANCE.createAggregationName();
            aggName.setName(CatalogSupplier.TABLE_AGG_C_SPECIAL_SALES_FACT_1997);

            AggregationColumnName aggFactCount = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
            aggFactCount.setColumn(CatalogSupplier.COLUMN_FACT_COUNT_AGG_C_SPECIAL_SALES_FACT_1997);
            aggName.setAggregationFactCount(aggFactCount);

            AggregationMeasure aggMeasure = RolapMappingFactory.eINSTANCE.createAggregationMeasure();
            aggMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SUM_AGG_C_SPECIAL_SALES_FACT_1997);
            aggMeasure.setName("[Measures].[Unit Sales]");
            aggName.getAggregationMeasures().add(aggMeasure);

            AggregationLevel aggLevel = RolapMappingFactory.eINSTANCE.createAggregationLevel();
            aggLevel.setColumn(CatalogSupplier.COLUMN_TIME_YEAR_AGG_C_SPECIAL_SALES_FACT_1997);
            aggLevel.setName("[Time].[Year]");
            aggName.getAggregationLevels().add(aggLevel);

            salesTable.getAggregationTables().add(aggName);
            cubeSales.setQuery(salesTable);

            DimensionConnector timeDimConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            timeDimConnector.setOverrideDimensionName("Time");
            timeDimConnector.setDimension(dTime);
            timeDimConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
            cubeSales.getDimensionConnectors().add(timeDimConnector);

            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            measureGroup.getMeasures().add(unitSalesMeasure);
            cubeSales.getMeasureGroups().add(measureGroup);

            CalculatedMember cmRecurse = RolapMappingFactory.eINSTANCE.createCalculatedMember();
            cmRecurse.setName("recurse");
            cmRecurse.setVisible(true);
            cmRecurse.setFormula("(CoalesceEmpty((Measures.[Unit Sales], [Time].CurrentMember ) ,(Measures.[recurse],[Time].CurrentMember.PrevMember)))");
            cubeSales.getCalculatedMembers().add(cmRecurse);

            newCatalog.getCubes().add(cubeSales);

            // Create Virtual Cube
            VirtualCube virtualCube = RolapMappingFactory.eINSTANCE.createVirtualCube();
            virtualCube.setEnabled(true);
            virtualCube.setName("Warehouse and Sales");
            virtualCube.setVisible(true);

            DimensionConnector virtualTimeDimConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            virtualTimeDimConnector.setVisible(true);
            virtualTimeDimConnector.setOverrideDimensionName("Time");
            virtualTimeDimConnector.setDimension(dTime);
            virtualTimeDimConnector.setPhysicalCube(cubeSales);
            virtualCube.getDimensionConnectors().add(virtualTimeDimConnector);

            virtualCube.getReferencedCalculatedMembers().add(cmRecurse);

            newCatalog.getCubes().add(virtualCube);

            // Add database schemas
            for (DatabaseSchemaMapping dbSchema : catalogDatabaseSchemas(catalog)) {
                newCatalog.getDbschemas().add((DatabaseSchema) dbSchema);
            }

            return newCatalog;
        }
    }

    public static class SqlQueryTestModifier extends EmfMappingModifier {

        /*
                        " <Measure name=\"Avg Sales\" column=\"unit_sales\" aggregator=\"avg\"\n"
            + " formatString=\"#.###\"/>",

        */
        public SqlQueryTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends MeasureGroupMapping> physicalCubeMeasureGroups(PhysicalCubeMapping cube) {
            List<MeasureGroupMapping> result = new ArrayList<>();
            result.addAll(super.physicalCubeMeasureGroups(cube));
            if ("Sales".equals(cube.getName())) {
                MeasureGroup mg = RolapMappingFactory.eINSTANCE.createMeasureGroup();
                mg.setPhysicalCube((PhysicalCube) cube);

                AvgMeasure avgMeasure = RolapMappingFactory.eINSTANCE.createAvgMeasure();
                avgMeasure.setName("Avg Sales");
                avgMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
                avgMeasure.setFormatString("#.###");
                avgMeasure.setMeasureGroup(mg);
                mg.getMeasures().add(avgMeasure);

                result.add(mg);
            }
            return result;
        }

    }

    public static class CompoundSlicerTestModifier1 extends EmfMappingModifier {

        /*
                "<Measure name='Unit Sales Foo Bar' column='unit_sales'\n"
                        + "    aggregator='sum' formatString='Standard' formatter='"
                        + UdfTest.FooBarCellFormatter.class.getName()
                        + "'/>";
        */
        public CompoundSlicerTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends MeasureGroupMapping> physicalCubeMeasureGroups(PhysicalCubeMapping cube) {
        	List<MeasureGroupMapping> result = new ArrayList<>();
            result.addAll(super.physicalCubeMeasureGroups(cube));
            if ("Sales".equals(cube.getName())) {
                MeasureGroup mg = RolapMappingFactory.eINSTANCE.createMeasureGroup();
                mg.setPhysicalCube((PhysicalCube) cube);

                SumMeasure sumMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
                sumMeasure.setName("Unit Sales Foo Bar");
                sumMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
                sumMeasure.setFormatter(FormatterUtil.FooBarCellFormatter.class.getName());
                sumMeasure.setMeasureGroup(mg);
                mg.getMeasures().add(sumMeasure);

                result.add(mg);
            }
            return result;
        }
    }

    public static class CompoundSlicerTestModifier2 extends EmfMappingModifier {

        /*
                "<Measure name='Avg Unit Sales' aggregator='avg' column='unit_sales'/>\n"
                        + "<Measure name='Count Unit Sales' aggregator='count' column='unit_sales'/>\n"
                        + "<Measure name='Sum Unit Sales' aggregator='sum' column='unit_sales'/>\n",
        */
        public CompoundSlicerTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends MeasureGroupMapping> physicalCubeMeasureGroups(PhysicalCubeMapping cube) {
        	List<MeasureGroupMapping> result = new ArrayList<>();
            result.addAll(super.physicalCubeMeasureGroups(cube));
            if ("Sales".equals(cube.getName())) {
                MeasureGroup mg = RolapMappingFactory.eINSTANCE.createMeasureGroup();
                mg.setPhysicalCube((PhysicalCube) cube);

                AvgMeasure avgMeasure = RolapMappingFactory.eINSTANCE.createAvgMeasure();
                avgMeasure.setName("Avg Unit Sales");
                avgMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
                avgMeasure.setMeasureGroup(mg);
                mg.getMeasures().add(avgMeasure);

                CountMeasure countMeasure = RolapMappingFactory.eINSTANCE.createCountMeasure();
                countMeasure.setName("Count Unit Sales");
                countMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
                countMeasure.setMeasureGroup(mg);
                mg.getMeasures().add(countMeasure);

                SumMeasure sumMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
                sumMeasure.setName("Sum Unit Sales");
                sumMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
                sumMeasure.setMeasureGroup(mg);
                mg.getMeasures().add(sumMeasure);

                result.add(mg);
            }
            return result;
        }

    }

    public static class CompoundSlicerTestModifier3 extends EmfMappingModifier {

        /*
                            "<VirtualCubeMeasure cubeName=\"Sales\" name=\"[Measures].[Customer Count]\"/>\n",
                " <CalculatedMember name=\"Unit Sales by Customer\" dimension=\"Measures\">"
                        + "<Formula>Measures.[Unit Sales]/Measures.[Customer Count]</Formula>"
                        + "</CalculatedMember>",

        */
        public CompoundSlicerTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends MeasureMapping> virtualCubeReferencedMeasures(VirtualCubeMapping cube) {
            List<MeasureMapping> result = new ArrayList<>();
            result.addAll(super.virtualCubeReferencedMeasures(cube));
            if ("Warehouse and Sales".equals(cube.getName())) {
                result.add(look(CatalogSupplier.MEASURE_CUSTOMER_COUNT));
            }
            return result;

        }

        protected MemberMapping cubeDefaultMeasure(CubeMapping cube) {
            if ("Warehouse and Sales".equals(cube.getName())) {
                return CatalogSupplier.MEASURE_WAREHOUSE_SALES;
            }
            return member(cube.getDefaultMeasure());

        }

        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Warehouse and Sales".equals(cube.getName())) {
                CalculatedMember calculatedMember = RolapMappingFactory.eINSTANCE.createCalculatedMember();
                calculatedMember.setName("Unit Sales by Customer");
                calculatedMember.setFormula("Measures.[Unit Sales]/Measures.[Customer Count]");
                result.add(calculatedMember);
            }
            return result;
        }
    }

    public static class XmlaHandlerTypeTestModifier extends EmfMappingModifier {

        /*
            "<Measure name='typeMeasure' " + aggregator + datatype + ">\n"
            + "  <MeasureExpression>\n"
            + "  <SQL dialect='generic'>\n"
            + expression
            + "  </SQL></MeasureExpression></Measure>",
        */
        private final String expression;
        private final String type;
        public XmlaHandlerTypeTestModifier(CatalogMapping catalog, String expression, String type) {
            super(catalog);
            this.expression = expression;
            this.type = type;
        }


        protected List<? extends MeasureGroupMapping> physicalCubeMeasureGroups(PhysicalCubeMapping cube) {
        	List<MeasureGroupMapping> result = new ArrayList<>();
            result.addAll(super.physicalCubeMeasureGroups(cube));
            if ("Sales".equals(cube.getName())) {
                MeasureGroup mg = RolapMappingFactory.eINSTANCE.createMeasureGroup();
                mg.setPhysicalCube((PhysicalCube) cube);

                SQLExpressionColumn sqlColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();
                SqlStatement sqlStatement = RolapMappingFactory.eINSTANCE.createSqlStatement();
                sqlStatement.getDialects().add("generic");
                sqlStatement.setSql(expression);
                sqlColumn.getSqls().add(sqlStatement);

                if ((type != null) && type.equals("String")) {
                    org.eclipse.daanse.rolap.mapping.emf.rolapmapping.MaxMeasure measure =
                        RolapMappingFactory.eINSTANCE.createMaxMeasure();
                    measure.setName("typeMeasure");
                    measure.setDataType(type != null ? ColumnInternalDataType.get(type.toUpperCase()) : null);
                    measure.setColumn(sqlColumn);
                    measure.setMeasureGroup(mg);
                    mg.getMeasures().add(measure);
                } else {
                    SumMeasure measure = RolapMappingFactory.eINSTANCE.createSumMeasure();
                    measure.setName("typeMeasure");
                    measure.setDataType(type != null ? ColumnInternalDataType.get(type.toUpperCase()) : null);
                    measure.setColumn(sqlColumn);
                    measure.setMeasureGroup(mg);
                    mg.getMeasures().add(measure);
                }

                result.add(mg);
            }
            return result;
        }
    }

    public static class MultipleHierarchyTestModifier1 extends EmfMappingModifier {

        /*
            "<Dimension name=\"NuStore\" foreignKey=\"store_id\">\n"
            + "<Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "  <Table name=\"store\"/>\n"
            + "  <Level name=\"NuStore Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
            + "  <Level name=\"NuStore State\" column=\"store_state\" uniqueMembers=\"true\"/>\n"
            + "  <Level name=\"NuStore City\" column=\"store_city\" uniqueMembers=\"false\"/>\n"
            + "  <Level name=\"NuStore Name\" column=\"store_name\" uniqueMembers=\"true\">\n"
            + "    <Property name=\"NuStore Type\" column=\"store_type\"/>\n"
            + "    <Property name=\"NuStore Manager\" column=\"store_manager\"/>\n"
            + "    <Property name=\"NuStore Sqft\" column=\"store_sqft\" type=\"Numeric\"/>\n"
            + "    <Property name=\"Grocery Sqft\" column=\"grocery_sqft\" type=\"Numeric\"/>\n"
            + "    <Property name=\"Frozen Sqft\" column=\"frozen_sqft\" type=\"Numeric\"/>\n"
            + "    <Property name=\"Meat Sqft\" column=\"meat_sqft\" type=\"Numeric\"/>\n"
            + "    <Property name=\"Has coffee bar\" column=\"coffee_bar\" type=\"Boolean\"/>\n"
            + "    <Property name=\"Street address\" column=\"store_street_address\" type=\"String\"/>\n"
            + "  </Level>\n"
            + "</Hierarchy>\n"
            + "<Hierarchy caption=\"NuStore2\" name=\"NuStore2\" allMemberName=\"All NuStore2s\" hasAll=\"true\" primaryKey=\"NuStore_id\">\n"
            + "  <Table name=\"store\"/>\n"
            + "  <Level name=\"NuStore City\" column=\"store_city\" uniqueMembers=\"false\"/>\n"
            + "  <Level name=\"NuStore Name\" column=\"store_name\"  uniqueMembers=\"true\">\n"
            + "    <Property name=\"NuStore Type\" column=\"store_type\"/>\n"
            + "    <Property name=\"NuStore Manager\" column=\"store_manager\"/>\n"
            + "    <Property name=\"NuStore Sqft\" column=\"store_sqft\" type=\"Numeric\"/>\n"
            + "    <Property name=\"Grocery Sqft\" column=\"grocery_sqft\" type=\"Numeric\"/>\n"
            + "    <Property name=\"Frozen Sqft\" column=\"frozen_sqft\" type=\"Numeric\"/>\n"
            + "    <Property name=\"Meat Sqft\" column=\"meat_sqft\" type=\"Numeric\"/>\n"
            + "    <Property name=\"Has coffee bar\" column=\"coffee_bar\" type=\"Boolean\"/>\n"
            + "    <Property name=\"Street address\" column=\"store_street_address\" type=\"String\"/>\n"
            + "  </Level>\n"
            + "</Hierarchy>\n"
            + "</Dimension>"));
         */


        public MultipleHierarchyTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
            	PhysicalColumn nuStoreId = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
            	nuStoreId.setName("NuStore_id");
            	nuStoreId.setType(ColumnType.INTEGER);
            	nuStoreId.setTable(CatalogSupplier.TABLE_STORE);

                StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension.setName("NuStore");

                // First hierarchy
                ExplicitHierarchy hierarchy1 = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy1.setHasAll(true);
                hierarchy1.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);

                TableQuery table1 = RolapMappingFactory.eINSTANCE.createTableQuery();
                table1.setTable(CatalogSupplier.TABLE_STORE);
                hierarchy1.setQuery(table1);

                Level level1_1 = RolapMappingFactory.eINSTANCE.createLevel();
                level1_1.setName("NuStore Country");
                level1_1.setColumn(CatalogSupplier.COLUMN_STORE_COUNTRY_STORE);
                level1_1.setUniqueMembers(true);
                hierarchy1.getLevels().add(level1_1);

                Level level1_2 = RolapMappingFactory.eINSTANCE.createLevel();
                level1_2.setName("NuStore State");
                level1_2.setColumn(CatalogSupplier.COLUMN_STORE_STATE_STORE);
                level1_2.setUniqueMembers(true);
                hierarchy1.getLevels().add(level1_2);

                Level level1_3 = RolapMappingFactory.eINSTANCE.createLevel();
                level1_3.setName("NuStore City");
                level1_3.setColumn(CatalogSupplier.COLUMN_STORE_CITY_STORE);
                level1_3.setUniqueMembers(false);
                hierarchy1.getLevels().add(level1_3);

                Level level1_4 = RolapMappingFactory.eINSTANCE.createLevel();
                level1_4.setName("NuStore Name");
                level1_4.setColumn(CatalogSupplier.COLUMN_STORE_NAME_STORE);
                level1_4.setUniqueMembers(true);

                // Add member properties for level1_4
                addMemberProperty(level1_4, "NuStore Type", CatalogSupplier.COLUMN_STORE_TYPE_STORE, null);
                addMemberProperty(level1_4, "NuStore Manager", CatalogSupplier.COLUMN_STORE_MANAGER_STORE, null);
                addMemberProperty(level1_4, "NuStore Sqft", CatalogSupplier.COLUMN_STORE_SQFT_STORE, ColumnInternalDataType.NUMERIC);
                addMemberProperty(level1_4, "Grocery Sqft", CatalogSupplier.COLUMN_GROCERY_SQFT_STORE, ColumnInternalDataType.NUMERIC);
                addMemberProperty(level1_4, "Frozen Sqft", CatalogSupplier.COLUMN_FROZEN_SQFT_STORE, ColumnInternalDataType.NUMERIC);
                addMemberProperty(level1_4, "Meat Sqft", CatalogSupplier.COLUMN_MEAT_SQFT_STORE, ColumnInternalDataType.NUMERIC);
                addMemberProperty(level1_4, "Has coffee bar", CatalogSupplier.COLUMN_COFFEE_BAR_STORE, ColumnInternalDataType.BOOLEAN);
                addMemberProperty(level1_4, "Street address", CatalogSupplier.COLUMN_STORE_STREET_ADDRESS_STORE, ColumnInternalDataType.STRING);

                hierarchy1.getLevels().add(level1_4);
                dimension.getHierarchies().add(hierarchy1);

                // Second hierarchy
                ExplicitHierarchy hierarchy2 = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy2.setName("NuStore2");
                hierarchy2.setAllMemberName("All NuStore2s");
                hierarchy2.setHasAll(true);
                hierarchy2.setPrimaryKey(nuStoreId);

                TableQuery table2 = RolapMappingFactory.eINSTANCE.createTableQuery();
                table2.setTable(CatalogSupplier.TABLE_STORE);
                hierarchy2.setQuery(table2);

                Level level2_1 = RolapMappingFactory.eINSTANCE.createLevel();
                level2_1.setName("NuStore City");
                level2_1.setColumn(CatalogSupplier.COLUMN_STORE_CITY_STORE);
                level2_1.setUniqueMembers(false);
                hierarchy2.getLevels().add(level2_1);

                Level level2_2 = RolapMappingFactory.eINSTANCE.createLevel();
                level2_2.setName("NuStore Name");
                level2_2.setColumn(CatalogSupplier.COLUMN_STORE_NAME_STORE);
                level2_2.setUniqueMembers(true);

                // Add member properties for level2_2
                addMemberProperty(level2_2, "NuStore Type", CatalogSupplier.COLUMN_STORE_TYPE_STORE, null);
                addMemberProperty(level2_2, "NuStore Manager", CatalogSupplier.COLUMN_STORE_MANAGER_STORE, null);
                addMemberProperty(level2_2, "NuStore Sqft", CatalogSupplier.COLUMN_STORE_SQFT_STORE, ColumnInternalDataType.NUMERIC);
                addMemberProperty(level2_2, "Grocery Sqft", CatalogSupplier.COLUMN_GROCERY_SQFT_STORE, ColumnInternalDataType.NUMERIC);
                addMemberProperty(level2_2, "Frozen Sqft", CatalogSupplier.COLUMN_FROZEN_SQFT_STORE, ColumnInternalDataType.NUMERIC);
                addMemberProperty(level2_2, "Meat Sqft", CatalogSupplier.COLUMN_MEAT_SQFT_STORE, ColumnInternalDataType.NUMERIC);
                addMemberProperty(level2_2, "Has coffee bar", CatalogSupplier.COLUMN_COFFEE_BAR_STORE, ColumnInternalDataType.BOOLEAN);
                addMemberProperty(level2_2, "Street address", CatalogSupplier.COLUMN_STORE_STREET_ADDRESS_STORE, ColumnInternalDataType.STRING);

                hierarchy2.getLevels().add(level2_2);
                dimension.getHierarchies().add(hierarchy2);

                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("NuStore");
                connector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
                connector.setDimension(dimension);

            	result.add(connector);
            }
            return result;
        }

        private void addMemberProperty(Level level, String name, Column column, ColumnInternalDataType dataType) {
            MemberProperty prop = RolapMappingFactory.eINSTANCE.createMemberProperty();
            prop.setName(name);
            prop.setColumn(column);
            if (dataType != null) {
                prop.setPropertyType(dataType);
            }
            level.getMemberProperties().add(prop);
        }
    }

    public static class MultipleHierarchyTestModifier2 extends EmfMappingModifier {

        /*
            "<Dimension name=\"NuStore\" foreignKey=\"store_id\">\n"
            + "<Hierarchy name=\"NuStore\" hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "  <Table name=\"store\"/>\n"
            + "  <Level name=\"NuStore Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
            + "  <Level name=\"NuStore State\" column=\"store_state\" uniqueMembers=\"true\"/>\n"
            + "  <Level name=\"NuStore City\" column=\"store_city\" uniqueMembers=\"false\"/>\n"
            + "  <Level name=\"NuStore Name\" column=\"store_name\" uniqueMembers=\"true\"/>\n"
            + "</Hierarchy>\n"
            + "<Hierarchy caption=\"NuStore2\" name=\"NuStore2\" allMemberName=\"All NuStore2s\" hasAll=\"true\" primaryKey=\"NuStore_id\">\n"
            + "  <Table name=\"store\"/>\n"
            + "  <Level name=\"NuStore City\" column=\"store_city\" uniqueMembers=\"false\"/>\n"
            + "  <Level name=\"NuStore Name\" column=\"store_name\"  uniqueMembers=\"true\"/>\n"
            + "</Hierarchy>\n"
            + "</Dimension>"));
         */
        public MultipleHierarchyTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
            	PhysicalColumn nuStoreId = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
            	nuStoreId.setName("NuStore_id");
            	nuStoreId.setType(ColumnType.INTEGER);
            	nuStoreId.setTable(CatalogSupplier.TABLE_STORE);

                StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension.setName("NuStore");

                // First hierarchy
                ExplicitHierarchy hierarchy1 = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy1.setHasAll(true);
                hierarchy1.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);

                TableQuery table1 = RolapMappingFactory.eINSTANCE.createTableQuery();
                table1.setTable(CatalogSupplier.TABLE_STORE);
                hierarchy1.setQuery(table1);

                Level level1_1 = RolapMappingFactory.eINSTANCE.createLevel();
                level1_1.setName("NuStore Country");
                level1_1.setColumn(CatalogSupplier.COLUMN_STORE_COUNTRY_STORE);
                level1_1.setUniqueMembers(true);
                hierarchy1.getLevels().add(level1_1);

                Level level1_2 = RolapMappingFactory.eINSTANCE.createLevel();
                level1_2.setName("NuStore State");
                level1_2.setColumn(CatalogSupplier.COLUMN_STORE_STATE_STORE);
                level1_2.setUniqueMembers(true);
                hierarchy1.getLevels().add(level1_2);

                Level level1_3 = RolapMappingFactory.eINSTANCE.createLevel();
                level1_3.setName("NuStore City");
                level1_3.setColumn(CatalogSupplier.COLUMN_STORE_CITY_STORE);
                level1_3.setUniqueMembers(false);
                hierarchy1.getLevels().add(level1_3);

                Level level1_4 = RolapMappingFactory.eINSTANCE.createLevel();
                level1_4.setName("NuStore Name");
                level1_4.setColumn(CatalogSupplier.COLUMN_STORE_NAME_STORE);
                level1_4.setUniqueMembers(true);
                hierarchy1.getLevels().add(level1_4);

                dimension.getHierarchies().add(hierarchy1);

                // Second hierarchy
                ExplicitHierarchy hierarchy2 = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy2.setName("NuStore2");
                hierarchy2.setAllMemberName("All NuStore2s");
                hierarchy2.setHasAll(true);
                hierarchy2.setPrimaryKey(nuStoreId);

                TableQuery table2 = RolapMappingFactory.eINSTANCE.createTableQuery();
                table2.setTable(CatalogSupplier.TABLE_STORE);
                hierarchy2.setQuery(table2);

                Level level2_1 = RolapMappingFactory.eINSTANCE.createLevel();
                level2_1.setName("NuStore City");
                level2_1.setColumn(CatalogSupplier.COLUMN_STORE_CITY_STORE);
                level2_1.setUniqueMembers(false);
                hierarchy2.getLevels().add(level2_1);

                Level level2_2 = RolapMappingFactory.eINSTANCE.createLevel();
                level2_2.setName("NuStore Name");
                level2_2.setColumn(CatalogSupplier.COLUMN_STORE_NAME_STORE);
                level2_2.setUniqueMembers(true);
                hierarchy2.getLevels().add(level2_2);

                dimension.getHierarchies().add(hierarchy2);

                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("NuStore");
                connector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
                connector.setDimension(dimension);

            	result.add(connector);
            }
            return result;
        }
    }

    public static class PerformanceTestModifier1 extends EmfMappingModifier {

        /*
      "      <Dimension name=\"ACC\" caption=\"Account\" type=\"StandardDimension\" foreignKey=\"customer_id\">\n"
        + "         <Hierarchy hasAll=\"true\" allMemberName=\"All\" primaryKey=\"customer_id\">\n"
        + "            <Table name=\"customer\"/>\n"
        + "            <Level name=\"CODE\" caption=\"Account\" uniqueMembers=\"true\" column=\"account_num\" "
        + "type=\"String\"/>\n"
        + "         </Hierarchy>\n"
        + "      </Dimension>\n"
        + "      <Dimension name=\"Store Name sans All\" type=\"StandardDimension\" foreignKey=\"store_id\">\n"
        + "         <Hierarchy hasAll=\"false\" primaryKey=\"store_id\">\n"
        + "            <Table name=\"store\" />\n"
        + "            <Level name=\"Store Name\" uniqueMembers=\"true\" column=\"store_number\" type=\"Numeric\" "
        + "ordinalColumn=\"store_name\"/>\n"
        + "         </Hierarchy>\n"
        + "      </Dimension>\n",
      "      <CalculatedMember dimension=\"Measures\" name=\"EXP2_4\" formula=\"IIf([ACC].CurrentMember.Level.Ordinal"
        + " = [ACC].[All].Ordinal, Sum([ACC].[All].Children, [Measures].[Unit Sales]),     [Measures].[Unit Sales])"
        + "\"/>\n"
        + "      <CalculatedMember dimension=\"Measures\" name=\"EXP2\" formula=\"IIf(0 &#60; [Measures].[EXP2_4], "
        + "[Measures].[EXP2_4], NULL)\"/>\n" ));
         */

        public PerformanceTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                // ACC dimension
                StandardDimension accDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                accDimension.setName("ACC");

                ExplicitHierarchy accHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                accHierarchy.setHasAll(true);
                accHierarchy.setAllMemberName("All");
                accHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);

                TableQuery accTable = RolapMappingFactory.eINSTANCE.createTableQuery();
                accTable.setTable(CatalogSupplier.TABLE_CUSTOMER);
                accHierarchy.setQuery(accTable);

                Level accLevel = RolapMappingFactory.eINSTANCE.createLevel();
                accLevel.setName("CODE");
                accLevel.setColumn(CatalogSupplier.COLUMN_ACCOUNT_NUM_CUSTOMER);
                accLevel.setUniqueMembers(true);
                accLevel.setColumnType(ColumnInternalDataType.STRING);
                accHierarchy.getLevels().add(accLevel);

                accDimension.getHierarchies().add(accHierarchy);

                DimensionConnector accConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                accConnector.setOverrideDimensionName("ACC");
                accConnector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
                accConnector.setDimension(accDimension);

            	result.add(accConnector);

                // Store Name sans All dimension
                StandardDimension storeDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                storeDimension.setName("Store Name sans All");

                ExplicitHierarchy storeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                storeHierarchy.setHasAll(false);
                storeHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);

                TableQuery storeTable = RolapMappingFactory.eINSTANCE.createTableQuery();
                storeTable.setTable(CatalogSupplier.TABLE_STORE);
                storeHierarchy.setQuery(storeTable);

                Level storeLevel = RolapMappingFactory.eINSTANCE.createLevel();
                storeLevel.setName("Store Name");
                storeLevel.setColumn(CatalogSupplier.COLUMN_STORE_NUMBER_STORE);
                storeLevel.setUniqueMembers(true);
                storeLevel.setColumnType(ColumnInternalDataType.NUMERIC);
                storeLevel.setOrdinalColumn(CatalogSupplier.COLUMN_STORE_NAME_STORE);
                storeHierarchy.getLevels().add(storeLevel);

                storeDimension.getHierarchies().add(storeHierarchy);

                DimensionConnector storeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                storeConnector.setOverrideDimensionName("Store Name sans All");
                storeConnector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
                storeConnector.setDimension(storeDimension);

                result.add(storeConnector);
            }
            return result;
        }

        @Override
        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                CalculatedMember cm1 = RolapMappingFactory.eINSTANCE.createCalculatedMember();
                cm1.setName("EXP2_4");
                cm1.setFormula("IIf([ACC].CurrentMember.Level.Ordinal = [ACC].[All].Ordinal, Sum([ACC].[All].Children, [Measures].[Unit Sales]), [Measures].[Unit Sales])");
                result.add(cm1);

                CalculatedMember cm2 = RolapMappingFactory.eINSTANCE.createCalculatedMember();
                cm2.setName("EXP2");
                cm2.setFormula("IIf(0 < [Measures].[EXP2_4], [Measures].[EXP2_4], NULL)");
                result.add(cm2);
            }
            return result;
        }
    }

    public static class Ssas2005CompatibilityTestModifier1 extends EmfMappingModifier {

        /*
            "<Dimension name=\"Store Type 2\" foreignKey=\"store_id\">"
            + " <Hierarchy name=\"Store Type 2\" hasAll=\"true\" primaryKey=\"store_id\">"
            + " <Table name=\"store\"/>"
            + " <Level name=\"Store Type\" column=\"store_type\" uniqueMembers=\"true\"/>"
            + " </Hierarchy>"
            + "</Dimension>",
            */
        public Ssas2005CompatibilityTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }


        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension.setName("Store Type 2");

                ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy.setName("Store Type 2");
                hierarchy.setHasAll(true);
                hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);

                TableQuery table = RolapMappingFactory.eINSTANCE.createTableQuery();
                table.setTable(CatalogSupplier.TABLE_STORE);
                hierarchy.setQuery(table);

                Level level = RolapMappingFactory.eINSTANCE.createLevel();
                level.setName("Store Type");
                level.setColumn(CatalogSupplier.COLUMN_STORE_TYPE_STORE);
                level.setUniqueMembers(true);
                hierarchy.getLevels().add(level);

                dimension.getHierarchies().add(hierarchy);

                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("Store Type 2");
                connector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
                connector.setDimension(dimension);

            	result.add(connector);
            }
            return result;
        }

    }

    public static class Ssas2005CompatibilityTestModifier2 extends EmfMappingModifier {

        /*
             "<Dimension name=\"SameName\" foreignKey=\"customer_id\">\n"
             + " <Hierarchy hasAll=\"true\" primaryKey=\"id\">\n"
             + " <InlineTable alias=\"sn\">\n"
             + " <ColumnDefs>\n"
             + " <ColumnDef name=\"id\" type=\"Numeric\" />\n"
             + " <ColumnDef name=\"desc\" type=\"String\" />\n"
             + " </ColumnDefs>\n"
             + " <Rows>\n"
             + " <Row>\n"
             + " <Value column=\"id\">1</Value>\n"
             + " <Value column=\"desc\">SameName</Value>\n"
             + " </Row>\n"
             + " </Rows>\n"
             + " </InlineTable>\n"
             + " <Level name=\"SameName\" column=\"desc\" uniqueMembers=\"true\" />\n"
             + " </Hierarchy>\n"
             + "</Dimension>"));
            */

        PhysicalColumn id;
        PhysicalColumn desc;
        org.eclipse.daanse.rolap.mapping.emf.rolapmapping.InlineTable itt;
        org.eclipse.daanse.rolap.mapping.emf.rolapmapping.InlineTableQuery i;

        public Ssas2005CompatibilityTestModifier2(CatalogMapping catalog) {
            super(catalog);

            id = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
            id.setName("id");
            id.setType(ColumnType.DOUBLE);

            desc = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
            desc.setName("desc");
            desc.setType(ColumnType.VARCHAR);

            itt = RolapMappingFactory.eINSTANCE.createInlineTable();
            itt.getColumns().add(id);
            itt.getColumns().add(desc);

            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Row row = RolapMappingFactory.eINSTANCE.createRow();

            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RowValue rv1 = RolapMappingFactory.eINSTANCE.createRowValue();
            rv1.setColumn(id);
            rv1.setValue("1");
            row.getRowValues().add(rv1);

            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RowValue rv2 = RolapMappingFactory.eINSTANCE.createRowValue();
            rv2.setColumn(desc);
            rv2.setValue("SameName");
            row.getRowValues().add(rv2);

            itt.getRows().add(row);

            i = RolapMappingFactory.eINSTANCE.createInlineTableQuery();
            i.setAlias("sn");
            i.setTable(itt);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension.setName("SameName");

                ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy.setHasAll(true);
                hierarchy.setPrimaryKey(id);
                hierarchy.setQuery(i);

                Level level = RolapMappingFactory.eINSTANCE.createLevel();
                level.setName("SameName");
                level.setColumn(desc);
                level.setUniqueMembers(true);
                hierarchy.getLevels().add(level);

                dimension.getHierarchies().add(hierarchy);

                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("SameName");
                connector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
                connector.setDimension(dimension);

            	result.add(connector);
            }
            return result;
        }

    }

    public static class Ssas2005CompatibilityTestModifier3 extends EmfMappingModifier {

        /*
                "  <Dimension name=\"Customer Last Name\" "
                + "foreignKey=\"customer_id\">\n"
                + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Customers\""
                + " primaryKey=\"customer_id\">\n"
                + "      <Table name=\"customer\"/>\n"
                + "      <Level name=\"Last Name\" column=\"lname\" keyColumn=\"customer_id\" uniqueMembers=\"true\"/>\n"
                + "    </Hierarchy>\n"
                + "  </Dimension>\n"));
            */
        public Ssas2005CompatibilityTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension.setName("Customer Last Name");

                ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy.setHasAll(true);
                hierarchy.setAllMemberName("All Customers");
                hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);

                TableQuery table = RolapMappingFactory.eINSTANCE.createTableQuery();
                table.setTable(CatalogSupplier.TABLE_CUSTOMER);
                hierarchy.setQuery(table);

                Level level = RolapMappingFactory.eINSTANCE.createLevel();
                level.setName("Last Name");
                level.setColumn(CatalogSupplier.COLUMN_LNAME_CUSTOMER);
                level.setUniqueMembers(true);
                hierarchy.getLevels().add(level);

                dimension.getHierarchies().add(hierarchy);

                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("Customer Last Name");
                connector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
                connector.setDimension(dimension);

            	result.add(connector);
            }
            return result;
        }
    }

    public static class Ssas2005CompatibilityTestModifier4 extends EmfMappingModifier {

        /*
            final String cubeName = "Sales_inline";
            "<Cube name=\"" + cubeName + "\">\n"
            + "  <Table name=\"sales_fact_1997\"/>\n"
            + "  <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
            + "  <Dimension name=\"Alternative Promotion\" foreignKey=\"promotion_id\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"promo_id\">\n"
            + "      <InlineTable alias=\"alt_promotion\">\n"
            + "        <ColumnDefs>\n"
            + "          <ColumnDef name=\"promo_id\" type=\"Numeric\"/>\n"
            + "          <ColumnDef name=\"promo_name\" type=\"String\"/>\n"
            + "        </ColumnDefs>\n"
            + "        <Rows>\n"
            + "          <Row>\n"
            + "            <Value column=\"promo_id\">0</Value>\n"
            + "            <Value column=\"promo_name\">Promo0</Value>\n"
            + "          </Row>\n"
            + "          <Row>\n"
            + "            <Value column=\"promo_id\">1</Value>\n"
            + "          </Row>\n"
            + "        </Rows>\n"
            + "      </InlineTable>\n"
            + "      <Level name=\"Alternative Promotion\" column=\"promo_name\" uniqueMembers=\"true\"/> \n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\" visible=\"false\"/>\n"
            + "  <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n"
            + "</Cube>",
            */
        public Ssas2005CompatibilityTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends CubeMapping> catalogCubes(CatalogMapping catalogOriginal) {
            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.catalogCubes(catalogOriginal));

            PhysicalColumn promoId = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
            promoId.setName("promo_id");
            promoId.setType(ColumnType.NUMERIC);

            PhysicalColumn promoName = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
            promoName.setName("promo_name");
            promoName.setType(ColumnType.VARCHAR);

            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.InlineTable itt = RolapMappingFactory.eINSTANCE.createInlineTable();
            itt.setName("alt_promotion");
            itt.getColumns().add(promoId);
            itt.getColumns().add(promoName);

            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Row row1 = RolapMappingFactory.eINSTANCE.createRow();
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RowValue rv1_1 = RolapMappingFactory.eINSTANCE.createRowValue();
            rv1_1.setColumn(promoId);
            rv1_1.setValue("0");
            row1.getRowValues().add(rv1_1);
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RowValue rv1_2 = RolapMappingFactory.eINSTANCE.createRowValue();
            rv1_2.setColumn(promoName);
            rv1_2.setValue("Promo0");
            row1.getRowValues().add(rv1_2);
            itt.getRows().add(row1);

            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Row row2 = RolapMappingFactory.eINSTANCE.createRow();
            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.RowValue rv2_1 = RolapMappingFactory.eINSTANCE.createRowValue();
            rv2_1.setColumn(promoId);
            rv2_1.setValue("1");
            row2.getRowValues().add(rv2_1);
            itt.getRows().add(row2);

            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.InlineTableQuery itq = RolapMappingFactory.eINSTANCE.createInlineTableQuery();
            itq.setAlias("alt_promotion");
            itq.setTable(itt);

            PhysicalCube cube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            cube.setName("Sales_inline");

            TableQuery tableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            tableQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
            cube.setQuery(tableQuery);

            // Time dimension connector
            DimensionConnector timeDimConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            timeDimConnector.setOverrideDimensionName("Time");
            timeDimConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
            timeDimConnector.setDimension((org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Dimension) look(CatalogSupplier.DIMENSION_TIME));
            cube.getDimensionConnectors().add(timeDimConnector);

            // Alternative Promotion dimension
            StandardDimension altPromoDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            altPromoDimension.setName("Alternative Promotion");

            ExplicitHierarchy altPromoHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            altPromoHierarchy.setHasAll(true);
            altPromoHierarchy.setPrimaryKey(promoId);
            altPromoHierarchy.setQuery(itq);

            Level altPromoLevel = RolapMappingFactory.eINSTANCE.createLevel();
            altPromoLevel.setName("Alternative Promotion");
            altPromoLevel.setColumn(promoName);
            altPromoLevel.setUniqueMembers(true);
            altPromoHierarchy.getLevels().add(altPromoLevel);

            altPromoDimension.getHierarchies().add(altPromoHierarchy);

            DimensionConnector altPromoConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            altPromoConnector.setOverrideDimensionName("Alternative Promotion");
            altPromoConnector.setForeignKey(CatalogSupplier.COLUMN_PROMOTION_ID_SALESFACT);
            altPromoConnector.setDimension(altPromoDimension);
            cube.getDimensionConnectors().add(altPromoConnector);

            // Measure group
            MeasureGroup mg = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            mg.setPhysicalCube(cube);

            SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");
            unitSalesMeasure.setVisible(false);
            unitSalesMeasure.setMeasureGroup(mg);
            mg.getMeasures().add(unitSalesMeasure);

            SumMeasure storeSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            storeSalesMeasure.setName("Store Sales");
            storeSalesMeasure.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);
            storeSalesMeasure.setFormatString("#,###.00");
            storeSalesMeasure.setMeasureGroup(mg);
            mg.getMeasures().add(storeSalesMeasure);

            cube.getMeasureGroups().add(mg);

            result.add(cube);
            return result;

        }
    }

    public static class PerformanceTestModifier2 extends EmfMappingModifier {

        /*
          "<Dimension name=\"Gender%d \" foreignKey=\"customer_id\">"
            + "  <Hierarchy hasAll=\"true\" allMemberName=\"All Gender\" primaryKey=\"customer_id\">"
            + "    <Table name=\"customer\"/>"
            + "    <Level name=\"Gender\" column=\"gender\" uniqueMembers=\"true\"/>"
            + "  </Hierarchy>"
            + "</Dimension>"         */
        public PerformanceTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                for (int i = 0; i < 1000; i++) {
                    StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                    dimension.setName(new StringBuilder("Gender").append(i).toString());

                    ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                    hierarchy.setHasAll(true);
                    hierarchy.setAllMemberName("All Gender");
                    hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);

                    TableQuery table = RolapMappingFactory.eINSTANCE.createTableQuery();
                    table.setTable(CatalogSupplier.TABLE_CUSTOMER);
                    hierarchy.setQuery(table);

                    Level level = RolapMappingFactory.eINSTANCE.createLevel();
                    level.setName("Gender");
                    level.setColumn(CatalogSupplier.COLUMN_GENDER_CUSTOMER);
                    level.setUniqueMembers(true);
                    hierarchy.getLevels().add(level);

                    dimension.getHierarchies().add(hierarchy);

                    DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                    connector.setOverrideDimensionName(new StringBuilder("Gender").append(i).toString());
                    connector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
                    connector.setDimension(dimension);

                    result.add(connector);
                }
            }
            return result;
        }
    }

    public static class PerformanceTestModifier3 extends EmfMappingModifier {

        public PerformanceTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        /*
        "<Role name='Role1'>\n"
          + "  <SchemaGrant access='none'>\n"
          + "    <CubeGrant cube='Sales' access='all'>\n"
          + "      <HierarchyGrant hierarchy='[Store Type]' access='custom' rollupPolicy='partial'>\n"
          + "        <MemberGrant member='[Store Type].[All Store Types]' access='all'/>\n"
          + "        <MemberGrant member='[Store Type].[Supermarket]' access='none'/>\n"
          + "      </HierarchyGrant>\n"
          + "      <HierarchyGrant hierarchy='[Customers]' access='custom' rollupPolicy='partial'>\n"
          + "        <MemberGrant member='[Customers].[All Customers]' access='all'/>\n"
          + "        <MemberGrant member='[Customers].[USA].[CA].[Los Angeles]' access='none'/>\n"
          + "      </HierarchyGrant>\n"
          + "      <HierarchyGrant hierarchy='[Product]' access='custom' rollupPolicy='partial'>\n"
          + "        <MemberGrant member='[Product].[All Products]' access='all'/>\n"
          + "        <MemberGrant member='[Product].[Drink]' access='none'/>\n"
          + "      </HierarchyGrant>\n"
          + "      <HierarchyGrant hierarchy='[Promotion Media]' access='custom' rollupPolicy='partial'>\n"
          + "        <MemberGrant member='[Promotion Media].[All Media]' access='all'/>\n"
          + "        <MemberGrant member='[Promotion Media].[TV]' access='none'/>\n"
          + "      </HierarchyGrant>\n"
          + "      <HierarchyGrant hierarchy='[Education Level]' access='custom' rollupPolicy='partial'>\n"
          + "        <MemberGrant member='[Education Level].[All Education Levels]' access='all'/>\n"
          + "        <MemberGrant member='[Education Level].[Graduate Degree]' access='none'/>\n"
          + "      </HierarchyGrant>\n"
          + "    </CubeGrant>\n"
          + "  </SchemaGrant>\n"
          + "</Role>\n" );
         */

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));

            AccessRole role = RolapMappingFactory.eINSTANCE.createAccessRole();
            role.setName("Role1");

            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant.setCube((org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant.setCubeAccess(CubeAccess.ALL);

            // Store Type hierarchy grant
            AccessHierarchyGrant storeTypeGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            storeTypeGrant.setHierarchy((org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Hierarchy) look(CatalogSupplier.HIERARCHY_STORE_TYPE));
            storeTypeGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);
            storeTypeGrant.setRollupPolicy(RollupPolicy.PARTIAL);

            AccessMemberGrant storeTypeMember1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            storeTypeMember1.setMember("[Store Type].[All Store Types]");
            storeTypeMember1.setMemberAccess(MemberAccess.ALL);
            storeTypeGrant.getMemberGrants().add(storeTypeMember1);

            AccessMemberGrant storeTypeMember2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            storeTypeMember2.setMember("[Store Type].[Supermarket]");
            storeTypeMember2.setMemberAccess(MemberAccess.NONE);
            storeTypeGrant.getMemberGrants().add(storeTypeMember2);

            cubeGrant.getHierarchyGrants().add(storeTypeGrant);

            // Customers hierarchy grant
            AccessHierarchyGrant customersGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            customersGrant.setHierarchy((org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Hierarchy) look(CatalogSupplier.HIERARCHY_CUSTOMER));
            customersGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);
            customersGrant.setRollupPolicy(RollupPolicy.PARTIAL);

            AccessMemberGrant customersMember1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            customersMember1.setMember("[Customers].[All Customers]");
            customersMember1.setMemberAccess(MemberAccess.ALL);
            customersGrant.getMemberGrants().add(customersMember1);

            AccessMemberGrant customersMember2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            customersMember2.setMember("[Customers].[USA].[CA].[Los Angeles]");
            customersMember2.setMemberAccess(MemberAccess.NONE);
            customersGrant.getMemberGrants().add(customersMember2);

            cubeGrant.getHierarchyGrants().add(customersGrant);

            // Product hierarchy grant
            AccessHierarchyGrant productGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            productGrant.setHierarchy((org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Hierarchy) look(CatalogSupplier.HIERARCHY_PRODUCT));
            productGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);
            productGrant.setRollupPolicy(RollupPolicy.PARTIAL);

            AccessMemberGrant productMember1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            productMember1.setMember("[Product].[All Products]");
            productMember1.setMemberAccess(MemberAccess.ALL);
            productGrant.getMemberGrants().add(productMember1);

            AccessMemberGrant productMember2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            productMember2.setMember("[Product].[Drink]");
            productMember2.setMemberAccess(MemberAccess.NONE);
            productGrant.getMemberGrants().add(productMember2);

            cubeGrant.getHierarchyGrants().add(productGrant);

            // Promotion Media hierarchy grant
            AccessHierarchyGrant promoMediaGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            promoMediaGrant.setHierarchy((org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Hierarchy) look(CatalogSupplier.HIERARCHY_PROMOTION_MEDIA));
            promoMediaGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);
            promoMediaGrant.setRollupPolicy(RollupPolicy.PARTIAL);

            AccessMemberGrant promoMediaMember1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            promoMediaMember1.setMember("[Promotion Media].[All Media]");
            promoMediaMember1.setMemberAccess(MemberAccess.ALL);
            promoMediaGrant.getMemberGrants().add(promoMediaMember1);

            AccessMemberGrant promoMediaMember2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            promoMediaMember2.setMember("[Promotion Media].[TV]");
            promoMediaMember2.setMemberAccess(MemberAccess.NONE);
            promoMediaGrant.getMemberGrants().add(promoMediaMember2);

            cubeGrant.getHierarchyGrants().add(promoMediaGrant);

            // Education Level hierarchy grant
            AccessHierarchyGrant educationGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            educationGrant.setHierarchy((org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Hierarchy) look(CatalogSupplier.HIERARCHY_EDUCATION_LEVEL));
            educationGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);
            educationGrant.setRollupPolicy(RollupPolicy.PARTIAL);

            AccessMemberGrant educationMember1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            educationMember1.setMember("[Education Level].[All Education Levels]");
            educationMember1.setMemberAccess(MemberAccess.ALL);
            educationGrant.getMemberGrants().add(educationMember1);

            AccessMemberGrant educationMember2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            educationMember2.setMember("[Education Level].[Graduate Degree]");
            educationMember2.setMemberAccess(MemberAccess.NONE);
            educationGrant.getMemberGrants().add(educationMember2);

            cubeGrant.getHierarchyGrants().add(educationGrant);

            catalogGrant.getCubeGrants().add(cubeGrant);
            role.getAccessCatalogGrants().add(catalogGrant);

            result.add(role);
            return result;
        }
    }

    public static class PerformanceTestModifier4 extends EmfMappingModifier {

        /*
      "<UserDefinedFunction name=\"StringMult\" className=\""
        + CounterUdf.class.getName()
        + "\"/>\n",

            */


        public PerformanceTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: UserDefinedFunction
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("StringMult")
                .className(PerformanceTest.CounterUdf.class.getName())
                .build());
            return result;
        }
        */
    }

    public static class NativeSetEvaluationTestModifier extends EmfMappingModifier {

        /*
                <DimensionUsage name="PurchaseDate" source="Time" foreignKey="time_id"/>
            */
        public NativeSetEvaluationTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("PurchaseDate");
                connector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
                connector.setDimension((org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Dimension) look(CatalogSupplier.DIMENSION_TIME));
            	result.add(connector);
            }
            return result;
        }
    }

    public static class Olap4jTestModifier extends EmfMappingModifier {

        /*
            <CalculatedMember name='H1 1997' formula='Aggregate([Time].[1997].[Q1]:[Time].[1997].[Q2])' dimension='Time' />
         */
        public Olap4jTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                CalculatedMember calculatedMember = RolapMappingFactory.eINSTANCE.createCalculatedMember();
                calculatedMember.setName("H1 1997");
                calculatedMember.setFormula("Aggregate([Time].[1997].[Q1]:[Time].[1997].[Q2])");
                calculatedMember.setHierarchy((org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Hierarchy) look(CatalogSupplier.HIERARCHY_TIME));
                result.add(calculatedMember);
            }
            return result;
        }
    }

    public static class ScenarioTestModifier1 extends EmfMappingModifier {

        /*
                "<Dimension name='Scenario' foreignKey='time_id'>\n"
                + "  <Hierarchy primaryKey='time_id' hasAll='true'>\n"
                + "    <InlineTable alias='foo'>\n"
                + "      <ColumnDefs>\n"
                + "        <ColumnDef name='foo' type='Numeric'/>\n"
                + "      </ColumnDefs>\n"
                + "      <Rows/>\n"
                + "    </InlineTable>\n"
                + "    <Level name='Scenario' column='foo'/>\n"
                + "  </Hierarchy>\n"
                + "</Dimension>",
                "<Measure name='Atomic Cell Count' aggregator='count'/>"));

            */

        public ScenarioTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));

            PhysicalColumn foo = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
            foo.setName("foo");
            foo.setType(ColumnType.NUMERIC);

            org.eclipse.daanse.rolap.mapping.emf.rolapmapping.InlineTable itt = RolapMappingFactory.eINSTANCE.createInlineTable();
            itt.setName("foo");
            itt.getColumns().add(foo);

            if ("Sales".equals(cube.getName())) {
                StandardDimension dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
                dimension.setName("Scenario");

                ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
                hierarchy.setPrimaryKey(foo);
                hierarchy.setHasAll(true);

                org.eclipse.daanse.rolap.mapping.emf.rolapmapping.InlineTableQuery itq = RolapMappingFactory.eINSTANCE.createInlineTableQuery();
                itq.setAlias("foo");
                itq.setTable(itt);
                hierarchy.setQuery(itq);

                Level level = RolapMappingFactory.eINSTANCE.createLevel();
                level.setName("Scenario");
                level.setColumn(foo);
                hierarchy.getLevels().add(level);

                dimension.getHierarchies().add(hierarchy);

                DimensionConnector connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
                connector.setOverrideDimensionName("Scenario");
                connector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
                connector.setDimension(dimension);

            	result.add(connector);
            }
            return result;
        }

        protected List<? extends MeasureGroupMapping> physicalCubeMeasureGroups(PhysicalCubeMapping cube) {
            List<MeasureGroupMapping> result = new ArrayList<>();
            result.addAll(super.physicalCubeMeasureGroups(cube));
            if ("Sales".equals(cube.getName())) {
                MeasureGroup mg = RolapMappingFactory.eINSTANCE.createMeasureGroup();
                mg.setPhysicalCube((PhysicalCube) cube);

                CountMeasure countMeasure = RolapMappingFactory.eINSTANCE.createCountMeasure();
                countMeasure.setName("Atomic Cell Count");
                countMeasure.setMeasureGroup(mg);
                mg.getMeasures().add(countMeasure);

                result.add(mg);
            }
            return result;

        }

    }

    public static class SolveOrderScopeIsolationTestModifier extends EmfMappingModifier {

        /*
        "<CalculatedMember\n"
        + "    name=\"maleMinusFemale\"\n"
        + "    dimension=\"gender\"\n"
        + "    visible=\"false\"\n"
        + "    formula=\"gender.m - gender.f\">\n"
        + "  <CalculatedMemberProperty name=\"SOLVE_ORDER\" value=\"3000\"/>\n"
        + "</CalculatedMember>"
        + "<CalculatedMember\n"
        + "    name=\"ProfitSolveOrder3000\"\n"
        + "    dimension=\"Measures\">\n"
        + "  <Formula>[Measures].[Store Sales] - [Measures].[Store Cost]</Formula>\n"
        + "  <CalculatedMemberProperty name=\"SOLVE_ORDER\" value=\"3000\"/>\n"
        + "  <CalculatedMemberProperty name=\"FORMAT_STRING\" value=\"$#,##0.000000\"/>\n"
        + "</CalculatedMember>"
        + "<CalculatedMember\n"
        + "    name=\"ratio\"\n"
        + "    dimension=\"measures\"\n"
        + "    visible=\"false\"\n"
        + "    formula=\"measures.[unit sales] / measures.[sales count]\">\n"
        + "  <CalculatedMemberProperty name=\"FORMAT_STRING\" value=\"0.0#\"/>\n"
        + "  <CalculatedMemberProperty name=\"SOLVE_ORDER\" value=\"10\"/>\n"
        + "</CalculatedMember>"
        + "<CalculatedMember\n"
        + "    name=\"Total\"\n"
        + "    hierarchy=\"[Time].[Time]\"\n"
        + "    visible=\"false\"\n"
        + "    formula=\"AGGREGATE({[Time].[1997].[Q1],[Time].[1997].[Q2]})\">\n"
        + "  <CalculatedMemberProperty name=\"SOLVE_ORDER\" value=\"20\"/>\n"
        + "</CalculatedMember>";
         */
        public SolveOrderScopeIsolationTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            CalculatedMemberProperty calculatedMemberProperty1 = RolapMappingFactory.eINSTANCE.createCalculatedMemberProperty();
            calculatedMemberProperty1.setName("SOLVE_ORDER");
            calculatedMemberProperty1.setValue("3000");

            CalculatedMember maleMinusFemaleCalculatedMember = RolapMappingFactory.eINSTANCE.createCalculatedMember();
            maleMinusFemaleCalculatedMember.setName("maleMinusFemale");
            maleMinusFemaleCalculatedMember.setHierarchy(CatalogSupplier.HIERARCHY_GENDER);
            maleMinusFemaleCalculatedMember.setVisible(false);
            maleMinusFemaleCalculatedMember.setFormula("gender.m - gender.f");
            maleMinusFemaleCalculatedMember.getCalculatedMemberProperties().add(calculatedMemberProperty1);

            CalculatedMemberProperty calculatedMemberProperty2 = RolapMappingFactory.eINSTANCE.createCalculatedMemberProperty();
            calculatedMemberProperty2.setName("SOLVE_ORDER");
            calculatedMemberProperty2.setValue("3000");

            CalculatedMemberProperty calculatedMemberProperty3 = RolapMappingFactory.eINSTANCE.createCalculatedMemberProperty();
            calculatedMemberProperty3.setName("FORMAT_STRING");
            calculatedMemberProperty3.setValue("$#,##0.000000");

            CalculatedMember profitSolveOrder3000CalculatedMember = RolapMappingFactory.eINSTANCE.createCalculatedMember();
            profitSolveOrder3000CalculatedMember.setName("ProfitSolveOrder3000");
            //.dimension("Measures")
            profitSolveOrder3000CalculatedMember.setFormula("[Measures].[Store Sales] - [Measures].[Store Cost]");
            profitSolveOrder3000CalculatedMember.getCalculatedMemberProperties().add(calculatedMemberProperty2);
            profitSolveOrder3000CalculatedMember.getCalculatedMemberProperties().add(calculatedMemberProperty3);

            CalculatedMemberProperty calculatedMemberProperty4 = RolapMappingFactory.eINSTANCE.createCalculatedMemberProperty();
            calculatedMemberProperty4.setName("FORMAT_STRING");
            calculatedMemberProperty4.setValue("0.0#");

            CalculatedMemberProperty calculatedMemberProperty5 = RolapMappingFactory.eINSTANCE.createCalculatedMemberProperty();
            calculatedMemberProperty5.setName("SOLVE_ORDER");
            calculatedMemberProperty5.setValue("10");

            CalculatedMember ratioCalculatedMember = RolapMappingFactory.eINSTANCE.createCalculatedMember();
            ratioCalculatedMember.setName("ratio");
            //.dimension("Measures")
            ratioCalculatedMember.setFormula("measures.[unit sales] / measures.[sales count]");
            ratioCalculatedMember.getCalculatedMemberProperties().add(calculatedMemberProperty4);
            ratioCalculatedMember.getCalculatedMemberProperties().add(calculatedMemberProperty5);

            CalculatedMemberProperty calculatedMemberProperty6 = RolapMappingFactory.eINSTANCE.createCalculatedMemberProperty();
            calculatedMemberProperty6.setName("SOLVE_ORDER");
            calculatedMemberProperty6.setValue("20");

            CalculatedMember totalCalculatedMember = RolapMappingFactory.eINSTANCE.createCalculatedMember();
            ratioCalculatedMember.setName("Total");
            ratioCalculatedMember.setHierarchy(CatalogSupplier.HIERARCHY_TIME);
            ratioCalculatedMember.setFormula("AGGREGATE({[Time].[1997].[Q1],[Time].[1997].[Q2]})");
            ratioCalculatedMember.getCalculatedMemberProperties().add(calculatedMemberProperty6);

            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(maleMinusFemaleCalculatedMember);
                result.add(profitSolveOrder3000CalculatedMember);
                result.add(ratioCalculatedMember);
                result.add(totalCalculatedMember);
            }
            return result;
        }

    }

    public static class UdfTestModifier1 extends EmfMappingModifier {

        /*
            "<Measure name='Unit Sales Foo Bar' column='unit_sales'\n"
            + "    aggregator='sum' formatString='Standard' formatter='"
            + FooBarCellFormatter.class.getName()
            + "'/>");
        */
        public UdfTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends MeasureGroupMapping> physicalCubeMeasureGroups(PhysicalCubeMapping cube) {
            List<MeasureGroupMapping> result = new ArrayList<>();
            result.addAll(super.physicalCubeMeasureGroups(cube));
            if ("Sales".equals(cube.getName())) {
                SumMeasure m = RolapMappingFactory.eINSTANCE.createSumMeasure();
                m.setName("Unit Sales Foo Bar");
                m.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
                m.setFormatString("Standard");
                m.setFormatter(FormatterUtil.FooBarCellFormatter.class.getName());

            	MeasureGroup mg = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            	mg.setPhysicalCube((PhysicalCube) cube);
            	mg.getMeasures().add(m);
            	result.add(mg);
            }
            return result;
        }

    }

    public static class UdfTestModifier2 extends EmfMappingModifier {

         /*
           "<Measure name='Unit Sales Foo Bar' column='unit_sales'\n"
            + "    aggregator='sum' formatString='Standard'>\n"
            + "  <CellFormatter>\n"
            + "    <Script>\n"
            + "      return \"foo\" + value + \"bar\";\n"
            + "    </Script>\n"
            + "  </CellFormatter>\n"
            + "</Measure>");

        */
        public UdfTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends MeasureGroupMapping> physicalCubeMeasureGroups(PhysicalCubeMapping cube) {
            List<MeasureGroupMapping> result = new ArrayList<>();
            result.addAll(super.physicalCubeMeasureGroups(cube));
            if ("Sales".equals(cube.getName())) {
                SumMeasure m = RolapMappingFactory.eINSTANCE.createSumMeasure();
                m.setName("Unit Sales Foo Bar");
                m.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
                m.setFormatString("Standard");
                m.setFormatter(FormatterUtil.FooBarCellFormatter.class.getName());

                MeasureGroup mg = RolapMappingFactory.eINSTANCE.createMeasureGroup();
                mg.setPhysicalCube((PhysicalCube) cube);
                mg.getMeasures().add(m);
                result.add(mg);
            }
            return result;
        }

    }

    public static class UdfTestModifier3 extends EmfMappingModifier {

        /*
                        "<CalculatedMember\n"
            + "  name='Unit Sales Foo Bar'\n"
            + "      dimension='Measures'>\n"
            + "  <Formula>[Measures].[Unit Sales]</Formula>\n"
            + "  <CalculatedMemberProperty name='CELL_FORMATTER' value='"
            + FooBarCellFormatter.class.getName()
            + "'/>\n"
            + "</CalculatedMember>");

         */
        public UdfTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                CalculatedMemberProperty calculatedMemberProperty1 = RolapMappingFactory.eINSTANCE.createCalculatedMemberProperty();
                calculatedMemberProperty1.setName("CELL_FORMATTER");
                calculatedMemberProperty1.setValue(FormatterUtil.FooBarCellFormatter.class.getName());

                CalculatedMember unitSalesFooBarCalculatedMember = RolapMappingFactory.eINSTANCE.createCalculatedMember();
                unitSalesFooBarCalculatedMember.setName("Unit Sales Foo Bar");
                //.dimension("Measures")
                unitSalesFooBarCalculatedMember.setFormula("[Measures].[Unit Sales]");
                unitSalesFooBarCalculatedMember.getCalculatedMemberProperties().add(calculatedMemberProperty1);

                result.add(unitSalesFooBarCalculatedMember);
            }
            return result;
        }
    }

    public static class UdfTestModifier4 extends EmfMappingModifier {

        /*
            "<CalculatedMember\n"
            + "  name='Unit Sales Foo Bar'\n"
            + "      dimension='Measures'>\n"
            + "  <Formula>[Measures].[Unit Sales]</Formula>\n"
            + "  <CellFormatter className='"
            + FooBarCellFormatter.class.getName()
            + "'/>\n"
            + "</CalculatedMember>");
         */
        public UdfTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                CellFormatter cellFormatter = RolapMappingFactory.eINSTANCE.createCellFormatter();
                cellFormatter.setRef(FormatterUtil.FooBarCellFormatter.class.getName());

                CalculatedMember unitSalesFooBarCalculatedMember = RolapMappingFactory.eINSTANCE.createCalculatedMember();
                unitSalesFooBarCalculatedMember.setName("Unit Sales Foo Bar");
                //.dimension("Measures")
                unitSalesFooBarCalculatedMember.setFormula("[Measures].[Unit Sales]");
                unitSalesFooBarCalculatedMember.setCellFormatter(cellFormatter);

                result.add(unitSalesFooBarCalculatedMember);
            }
            return result;
        }

    }

    public static class UdfTestModifier5 extends EmfMappingModifier {

        /*
            "<CalculatedMember\n"
            + "  name='Unit Sales Foo Bar'\n"
            + "      dimension='Measures'>\n"
            + "  <Formula>[Measures].[Unit Sales]</Formula>\n"
            + "  <CellFormatter>\n"
            + "    <Script>\n"
            + "      return \"foo\" + value + \"bar\";\n"
            + "    </Script>\n"
            + "  </CellFormatter>\n"
            + "</CalculatedMember>");
         */
        public UdfTestModifier5(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends CalculatedMemberMapping> cubeCalculatedMembers(CubeMapping cube) {
            List<CalculatedMemberMapping> result = new ArrayList<>();
            result.addAll(super.cubeCalculatedMembers(cube));
            if ("Sales".equals(cube.getName())) {
                CellFormatter cellFormatter = RolapMappingFactory.eINSTANCE.createCellFormatter();
                cellFormatter.setRef("return \"foo\" + value + \"bar\";\n");

                CalculatedMember unitSalesFooBarCalculatedMember = RolapMappingFactory.eINSTANCE.createCalculatedMember();
                unitSalesFooBarCalculatedMember.setName("Unit Sales Foo Bar");
                //.dimension("Measures")
                unitSalesFooBarCalculatedMember.setFormula("[Measures].[Unit Sales]");
                unitSalesFooBarCalculatedMember.setCellFormatter(cellFormatter);
                result.add(unitSalesFooBarCalculatedMember);

            }
            return result;
        }
    }

    public static class UdfTestModifier11 extends EmfMappingModifier {

        /*
            "<UserDefinedFunction name=\"PlusOne\" className=\""
            + PlusOneUdf.class.getName()
            + "\"/>\n");

            */


        public UdfTestModifier11(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: TODO: UserDefinedFunction
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("PlusOne")
                .className(UdfTest.PlusOneUdf.class.getName())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier12 extends EmfMappingModifier {

        /*
            "<UserDefinedFunction name=\"BadPlusOne\" className=\""
            + BadPlusOneUdf.class.getName()
            + "\"/>\n");

            */


        public UdfTestModifier12(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: TODO: UserDefinedFunction
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("BadPlusOne")
                .className(UdfTest.BadPlusOneUdf.class.getName())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier14 extends EmfMappingModifier {

        /*
            "<UserDefinedFunction name=\"GenericPlusOne\" className=\""
            + PlusOrMinusOneUdf.class.getName()
            + "\"/>\n"
            + "<UserDefinedFunction name=\"GenericMinusOne\" className=\""
            + PlusOrMinusOneUdf.class.getName()
            + "\"/>\n");

            */


        public UdfTestModifier14(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: UserDefinedFunction
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("GenericPlusOne")
                .className(UdfTest.PlusOrMinusOneUdf.class.getName())
                .build());
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("GenericMinusOne")
                .className(UdfTest.PlusOrMinusOneUdf.class.getName())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier15 extends EmfMappingModifier {

        /*
            "<UserDefinedFunction name=\"StringMult\" className=\""
            + StringMultUdf.class.getName()
            + "\"/>\n");
            */


        public UdfTestModifier15(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: UserDefinedFunction
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("StringMult")
                .className(UdfTest.StringMultUdf.class.getName())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier16 extends EmfMappingModifier {

        /*
            "<UserDefinedFunction name=\"PlusOne\" className=\""
            + PlusOneUdf.class.getName() + "\"/>\n"
            + "<UserDefinedFunction name=\"AnotherMemberError\" className=\""
            + AnotherMemberErrorUdf.class.getName() + "\"/>");

            */


        public UdfTestModifier16(CatalogMapping catalog) {
            super(catalog);
        }
        /* TODO: UserDefinedFunction
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("PlusOne")
                .className(UdfTest.PlusOneUdf.class.getName())
                .build());
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("AnotherMemberError")
                .className(UdfTest.AnotherMemberErrorUdf.class.getName())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier18 extends EmfMappingModifier {

        /*
            "<UserDefinedFunction name=\"Reverse2\" className=\""
            + ReverseFunctionNotStatic.class.getName()
            + "\"/>\n");
            + "\"/>\n");            */


        public UdfTestModifier18(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: UserDefinedFunction
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("Reverse2")
                .className(UdfTest.ReverseFunctionNotStatic.class.getName())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier19 extends EmfMappingModifier {

        /*
            "<UserDefinedFunction name=\"MemberName\" className=\""
            + MemberNameFunction.class.getName()
            + "\"/>\n");
        */


        public UdfTestModifier19(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: UserDefinedFunction
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("MemberName")
                .className(UdfTest.MemberNameFunction.class.getName())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier6 extends EmfMappingModifier {

        /*
            "  <Dimension name='Promotion Media2' foreignKey='promotion_id'>\n"
            + "    <Hierarchy hasAll='true' allMemberName='All Media' primaryKey='promotion_id'>\n"
            + "      <Table name='promotion'/>\n"
            + "      <Level name='Media Type' column='media_type'\n"
            + "          uniqueMembers='true' formatter='"
            + FooBarMemberFormatter.class.getName()
            + "'/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>"));
            */

        private static final Level mediaTypeLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final ExplicitHierarchy promotionHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final StandardDimension promotionMedia2Dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final DimensionConnector promotionMedia2Connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final TableQuery promotionQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final MemberFormatter memberFormatter = RolapMappingFactory.eINSTANCE.createMemberFormatter();

        static {
            // Member Formatter
            memberFormatter.setRef(FormatterUtil.FooBarMemberFormatter.class.getName());

            // Media Type Level
            mediaTypeLevel.setName("Media Type");
            mediaTypeLevel.setColumn(CatalogSupplier.COLUMN_MEDIA_TYPE_PROMOTION);
            mediaTypeLevel.setUniqueMembers(true);
            mediaTypeLevel.setMemberFormatter(memberFormatter);

            // Promotion Query
            promotionQuery.setTable(CatalogSupplier.TABLE_PROMOTION);

            // Promotion Hierarchy
            promotionHierarchy.setHasAll(true);
            promotionHierarchy.setAllMemberName("All Media");
            promotionHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PROMOTION_ID_PROMOTION);
            promotionHierarchy.setQuery(promotionQuery);
            promotionHierarchy.getLevels().add(mediaTypeLevel);

            // Promotion Media2 Dimension
            promotionMedia2Dimension.setName("Promotion Media2");
            promotionMedia2Dimension.getHierarchies().add(promotionHierarchy);

            // Dimension Connector
            promotionMedia2Connector.setOverrideDimensionName("Promotion Media2");
            promotionMedia2Connector.setForeignKey(CatalogSupplier.COLUMN_PROMOTION_ID_SALESFACT);
            promotionMedia2Connector.setDimension(promotionMedia2Dimension);
        }

        public UdfTestModifier6(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(promotionMedia2Connector);
            }
            return result;
        }

    }

    public static class UdfTestModifier7 extends EmfMappingModifier {

        /*
            "  <Dimension name='Promotion Media2' foreignKey='promotion_id'>\n"
            + "    <Hierarchy hasAll='true' allMemberName='All Media' primaryKey='promotion_id'>\n"
            + "      <Table name='promotion'/>\n"
            + "      <Level name='Media Type' column='media_type'\n"
            + "          uniqueMembers='true'>\n"
            + "        <MemberFormatter>\n"
            + "          <Script language='JavaScript'>\n"
            + "             return \"foo\" + member.getName() + \"bar\"\n"
            + "          </Script>\n"
            + "        </MemberFormatter>\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>"));

            */

        private static final Level mediaTypeLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final ExplicitHierarchy promotionHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final StandardDimension promotionMedia2Dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final DimensionConnector promotionMedia2Connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final TableQuery promotionQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final MemberFormatter memberFormatter = RolapMappingFactory.eINSTANCE.createMemberFormatter();

        static {
            // Member Formatter
            memberFormatter.setRef("return \"foo\" + member.getName() + \"bar\"\n");

            // Media Type Level
            mediaTypeLevel.setName("Media Type");
            mediaTypeLevel.setColumn(CatalogSupplier.COLUMN_MEDIA_TYPE_PROMOTION);
            mediaTypeLevel.setUniqueMembers(true);
            mediaTypeLevel.setMemberFormatter(memberFormatter);

            // Promotion Query
            promotionQuery.setTable(CatalogSupplier.TABLE_PROMOTION);

            // Promotion Hierarchy
            promotionHierarchy.setHasAll(true);
            promotionHierarchy.setAllMemberName("All Media");
            promotionHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PROMOTION_ID_PROMOTION);
            promotionHierarchy.setQuery(promotionQuery);
            promotionHierarchy.getLevels().add(mediaTypeLevel);

            // Promotion Media2 Dimension
            promotionMedia2Dimension.setName("Promotion Media2");
            promotionMedia2Dimension.getHierarchies().add(promotionHierarchy);

            // Dimension Connector
            promotionMedia2Connector.setOverrideDimensionName("Promotion Media2");
            promotionMedia2Connector.setForeignKey(CatalogSupplier.COLUMN_PROMOTION_ID_SALESFACT);
            promotionMedia2Connector.setDimension(promotionMedia2Dimension);
        }

        public UdfTestModifier7(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(promotionMedia2Connector);
            }
            return result;
        }
    }

    public static class UdfTestModifier8 extends EmfMappingModifier {

        /*
            "<Dimension name='Promotions2' foreignKey='promotion_id'>\n"
            + "  <Hierarchy hasAll='true' allMemberName='All Promotions' primaryKey='promotion_id' defaultMember='[All Promotions]'>\n"
            + "    <Table name='promotion'/>\n"
            + "    <Level name='Promotion Name' column='promotion_id' uniqueMembers='true'>\n"
            + "      <Property name='Medium' column='media_type' formatter='"
            + FooBarPropertyFormatter.class.getName()
            + "'/>\n"
            + "    </Level>\n"
            + "  </Hierarchy>\n"
            + "</Dimension>"));

            */

        private static final MemberProperty mediumProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberPropertyFormatter propertyFormatter = RolapMappingFactory.eINSTANCE.createMemberPropertyFormatter();
        private static final Level promotionNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final ExplicitHierarchy promotionHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final StandardDimension promotions2Dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final DimensionConnector promotions2Connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final TableQuery promotionQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        static {
            // Property Formatter
            propertyFormatter.setRef(FormatterUtil.FooBarPropertyFormatter.class.getName());

            // Medium Property
            mediumProperty.setName("Medium");
            mediumProperty.setColumn(CatalogSupplier.COLUMN_MEDIA_TYPE_PROMOTION);
            mediumProperty.setFormatter(propertyFormatter);

            // Promotion Name Level
            promotionNameLevel.setName("Promotion Name");
            promotionNameLevel.setColumn(CatalogSupplier.COLUMN_PROMOTION_ID_PROMOTION);
            promotionNameLevel.setUniqueMembers(true);
            promotionNameLevel.getMemberProperties().add(mediumProperty);

            // Promotion Query
            promotionQuery.setTable(CatalogSupplier.TABLE_PROMOTION);

            // Promotion Hierarchy
            promotionHierarchy.setHasAll(true);
            promotionHierarchy.setAllMemberName("All Promotions");
            promotionHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PROMOTION_ID_PROMOTION);
            promotionHierarchy.setDefaultMember("[All Promotions]");
            promotionHierarchy.setQuery(promotionQuery);
            promotionHierarchy.getLevels().add(promotionNameLevel);

            // Promotions2 Dimension
            promotions2Dimension.setName("Promotions2");
            promotions2Dimension.getHierarchies().add(promotionHierarchy);

            // Dimension Connector
            promotions2Connector.setOverrideDimensionName("Promotions2");
            promotions2Connector.setForeignKey(CatalogSupplier.COLUMN_PROMOTION_ID_SALESFACT);
            promotions2Connector.setDimension(promotions2Dimension);
        }

        public UdfTestModifier8(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(promotions2Connector);
            }
            return result;
        }
    }

    public static class UdfTestModifier9 extends EmfMappingModifier {

        /*
            "<Dimension name='Promotions2' foreignKey='promotion_id'>\n"
            + "  <Hierarchy hasAll='true' allMemberName='All Promotions' primaryKey='promotion_id' defaultMember='[All Promotions]'>\n"
            + "    <Table name='promotion'/>\n"
            + "    <Level name='Promotion Name' column='promotion_id' uniqueMembers='true'>\n"
            + "      <Property name='Medium' column='media_type'>\n"
            + "        <PropertyFormatter className='"
            + FooBarPropertyFormatter.class.getName()
            + "'/>\n"
            + "      </Property>\n"
            + "    </Level>\n"
            + "  </Hierarchy>\n"
            + "</Dimension>"));

            */

        private static final MemberProperty mediumProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberPropertyFormatter propertyFormatter = RolapMappingFactory.eINSTANCE.createMemberPropertyFormatter();
        private static final Level promotionNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final ExplicitHierarchy promotionHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final StandardDimension promotions2Dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final DimensionConnector promotions2Connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final TableQuery promotionQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        static {
            // Property Formatter
            propertyFormatter.setRef(FormatterUtil.FooBarPropertyFormatter.class.getName());

            // Medium Property
            mediumProperty.setName("Medium");
            mediumProperty.setColumn(CatalogSupplier.COLUMN_MEDIA_TYPE_PROMOTION);
            mediumProperty.setFormatter(propertyFormatter);

            // Promotion Name Level
            promotionNameLevel.setName("Promotion Name");
            promotionNameLevel.setColumn(CatalogSupplier.COLUMN_PROMOTION_ID_PROMOTION);
            promotionNameLevel.setUniqueMembers(true);
            promotionNameLevel.getMemberProperties().add(mediumProperty);

            // Promotion Query
            promotionQuery.setTable(CatalogSupplier.TABLE_PROMOTION);

            // Promotion Hierarchy
            promotionHierarchy.setHasAll(true);
            promotionHierarchy.setAllMemberName("All Promotions");
            promotionHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PROMOTION_ID_PROMOTION);
            promotionHierarchy.setDefaultMember("[All Promotions]");
            promotionHierarchy.setQuery(promotionQuery);
            promotionHierarchy.getLevels().add(promotionNameLevel);

            // Promotions2 Dimension
            promotions2Dimension.setName("Promotions2");
            promotions2Dimension.getHierarchies().add(promotionHierarchy);

            // Dimension Connector
            promotions2Connector.setOverrideDimensionName("Promotions2");
            promotions2Connector.setForeignKey(CatalogSupplier.COLUMN_PROMOTION_ID_SALESFACT);
            promotions2Connector.setDimension(promotions2Dimension);
        }

        public UdfTestModifier9(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(promotions2Connector);
            }
            return result;
        }
    }

    public static class UdfTestModifier10 extends EmfMappingModifier {

        /*
            "<Dimension name='Promotions2' foreignKey='promotion_id'>\n"
            + "  <Hierarchy hasAll='true' allMemberName='All Promotions' primaryKey='promotion_id' defaultMember='[All Promotions]'>\n"
            + "    <Table name='promotion'/>\n"
            + "    <Level name='Promotion Name' column='promotion_id' uniqueMembers='true'>\n"
            + "      <Property name='Medium' column='media_type'>\n"
            + "        <PropertyFormatter>\n"
            + "          <Script language='JavaScript'>\n"
            + "            return \"foo\" + member.getName() + \"/\"\n"
            + "                   + propertyName + \"/\"\n"
            + "                   + propertyValue + \"bar\";\n"
            + "          </Script>\n"
            + "        </PropertyFormatter>\n"
            + "      </Property>\n"
            + "    </Level>\n"
            + "  </Hierarchy>\n"
            + "</Dimension>"));

            */

        private static final MemberProperty mediumProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
        private static final MemberPropertyFormatter propertyFormatter = RolapMappingFactory.eINSTANCE.createMemberPropertyFormatter();
        private static final Level promotionNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final ExplicitHierarchy promotionHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final StandardDimension promotions2Dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final DimensionConnector promotions2Connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final TableQuery promotionQuery = RolapMappingFactory.eINSTANCE.createTableQuery();

        static {
            // Property Formatter
            propertyFormatter.setRef("return \"foo\" + member.getName() + \"/\"\n + propertyName + \"/\"\n + propertyValue + \"bar\";\n");

            // Medium Property
            mediumProperty.setName("Medium");
            mediumProperty.setColumn(CatalogSupplier.COLUMN_MEDIA_TYPE_PROMOTION);
            mediumProperty.setFormatter(propertyFormatter);

            // Promotion Name Level
            promotionNameLevel.setName("Promotion Name");
            promotionNameLevel.setColumn(CatalogSupplier.COLUMN_PROMOTION_ID_PROMOTION);
            promotionNameLevel.setUniqueMembers(true);
            promotionNameLevel.getMemberProperties().add(mediumProperty);

            // Promotion Query
            promotionQuery.setTable(CatalogSupplier.TABLE_PROMOTION);

            // Promotion Hierarchy
            promotionHierarchy.setHasAll(true);
            promotionHierarchy.setAllMemberName("All Promotions");
            promotionHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PROMOTION_ID_PROMOTION);
            promotionHierarchy.setDefaultMember("[All Promotions]");
            promotionHierarchy.setQuery(promotionQuery);
            promotionHierarchy.getLevels().add(promotionNameLevel);

            // Promotions2 Dimension
            promotions2Dimension.setName("Promotions2");
            promotions2Dimension.getHierarchies().add(promotionHierarchy);

            // Dimension Connector
            promotions2Connector.setOverrideDimensionName("Promotions2");
            promotions2Connector.setForeignKey(CatalogSupplier.COLUMN_PROMOTION_ID_SALESFACT);
            promotions2Connector.setDimension(promotions2Dimension);
        }

        public UdfTestModifier10(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends DimensionConnectorMapping> cubeDimensionConnectors(CubeMapping cube) {
            List<DimensionConnectorMapping> result = new ArrayList<>();
            result.addAll(super.cubeDimensionConnectors(cube));
            if ("Sales".equals(cube.getName())) {
                result.add(promotions2Connector);
            }
            return result;
        }
    }

    public static class UdfTestModifier20 extends EmfMappingModifier {

        /*
            "<UserDefinedFunction name='StringMult'/>\n");
        */


        public UdfTestModifier20(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: UserDefinedFunction
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("StringMult")
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier21 extends EmfMappingModifier {

        /*
                        "<UserDefinedFunction name='StringMult' className='foo'>\n"
            + " <Script>bar</Script>\n"
            + "</UserDefinedFunction>");

        */


        public UdfTestModifier21(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: UserDefinedFunction
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("StringMult")
                .script(ScriptRBuilder.builder()
                    .cdata("bar")
                    .build())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier22 extends EmfMappingModifier {

        /*
            "<UserDefinedFunction name='StringMult'>\n"
            + " <Script language='bad'>bar</Script>\n"
            + "</UserDefinedFunction>");

        */


        public UdfTestModifier22(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: UserDefinedFunction
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("StringMult")
                .script(ScriptRBuilder.builder()
                    .language("bad")
                    .cdata("bar")
                    .build())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier23 extends EmfMappingModifier {

        /*
            "<UserDefinedFunction name='StringMult'>\n"
            + "  <Script language='JavaScript'>\n"
            + "    function getParameterTypes() {\n"
            + "      return new Array(\n"
            + "        new mondrian.olap.type.NumericType(),\n"
            + "        new mondrian.olap.type.StringType());\n"
            + "    }\n"
            + "    function getReturnType(parameterTypes) {\n"
            + "      return new mondrian.olap.type.StringType();\n"
            + "    }\n"
            + "    function execute(evaluator, arguments) {\n"
            + "      var n = arguments[0].evaluateScalar(evaluator);\n"
            + "      var s = arguments[1].evaluateScalar(evaluator);\n"
            + "      var r = \"\";\n"
            + "      while (n-- > 0) {\n"
            + "        r = r + s;\n"
            + "      }\n"
            + "      return r;\n"
            + "    }\n"
            + "  </Script>\n"
            + "</UserDefinedFunction>\n");

        */


        public UdfTestModifier23(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: UserDefinedFunction
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            String f = """
                            function getParameterTypes() {
                                return new Array(
                                    new mondrian.olap.type.NumericType(),
                                    new mondrian.olap.type.StringType());
                            }
                            function getReturnType(parameterTypes) {
                                return new mondrian.olap.type.StringType();
                            }
                            function execute(evaluator, arguments) {
                                var n = arguments[0].evaluateScalar(evaluator);
                                var s = arguments[1].evaluateScalar(evaluator);
                                var r = \\"\\";
                                while (n-- > 0) {
                                    r = r + s;
                                }
                                  return r;
                            }
                """;
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("StringMult")
                .script(ScriptRBuilder.builder()
                    .language("JavaScript")
                    .cdata(f)
                    .build())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier24 extends EmfMappingModifier {

        /*
            "<UserDefinedFunction name='Factorial'>\n"
            + "  <Script language='JavaScript'><![CDATA[\n"
            + "    function getParameterTypes() {\n"
            + "      return new Array(\n"
            + "        new mondrian.olap.type.NumericType());\n"
            + "    }\n"
            + "    function getReturnType(parameterTypes) {\n"
            + "      return new mondrian.olap.type.NumericType();\n"
            + "    }\n"
            + "    function execute(evaluator, arguments) {\n"
            + "      var n = arguments[0].evaluateScalar(evaluator);\n"
            + "      return factorial(n);\n"
            + "    }\n"
            + "    function factorial(n) {\n"
            + "      return n <= 1 ? 1 : n * factorial(n - 1);\n"
            + "    }\n"
            + "  ]]>\n"
            + "  </Script>\n"
            + "</UserDefinedFunction>\n");
        */


        public UdfTestModifier24(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: UserDefinedFunction
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            String f = """
                    function getParameterTypes() {
                      return new Array(
                        new mondrian.olap.type.NumericType());
                    }
                    function getReturnType(parameterTypes) {
                      return new mondrian.olap.type.NumericType();
                    }
                    function execute(evaluator, arguments) {
                      var n = arguments[0].evaluateScalar(evaluator);
                      return factorial(n);
                    }
                    function factorial(n) {
                      return n <= 1 ? 1 : n * factorial(n - 1);
                    }
                    """;
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("Factorial")
                .script(ScriptRBuilder.builder()
                    .language("JavaScript")
                    .cdata(f)
                    .build())
                .build());
            return result;
        }
        */
    }

    public static class UdfTestModifier25 extends EmfMappingModifier {

        /*
            "<UserDefinedFunction name='Factorial'>\n"
            + "  <Script language='JavaScript'><![CDATA[\n"
            + "    function getParameterTypes() {\n"
            + "      return new Array(\n"
            + "        new mondrian.olap.type.NumericType());\n"
            + "    }\n"
            + "    function getReturnType(parameterTypes) {\n"
            + "      return new mondrian.olap.type.NumericType();\n"
            + "    }\n"
            + "    function execute(evaluator, arguments) {\n"
            + "      var n = arguments[0].evaluateScalar(evaluator);\n"
            + "      return factorial(n);\n"
            + "    }\n"
            + "    function factorial(n) {\n"
            + "      return n <= 1 ? 1 : n * factorial_xx(n - 1);\n"
            + "    }\n"
            + "  ]]>\n"
            + "  </Script>\n"
            + "</UserDefinedFunction>\n");
        */


        public UdfTestModifier25(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: UserDefinedFunction
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            String f = """
                    function getParameterTypes() {
                      return new Array(
                        new mondrian.olap.type.NumericType());
                    }
                    function getReturnType(parameterTypes) {
                      return new mondrian.olap.type.NumericType();
                    }
                    function execute(evaluator, arguments) {
                      var n = arguments[0].evaluateScalar(evaluator);
                      return factorial(n);
                    }
                    function factorial(n) {
                      return n <= 1 ? 1 : n * factorial_xx(n - 1);
                    }
                        """;
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("Factorial")
                .script(ScriptRBuilder.builder()
                    .language("JavaScript")
                    .cdata(f)
                    .build())
                .build());
            return result;
        }
        */
    }

    public static class TestAggregationManagerModifier extends EmfMappingModifier {

        /*
                    "<Schema name=\"AMC\"><Cube name=\"Foo\" defaultMeasure=\"Unit Sales\">\n"
            + "  <Table name=\"sales_fact_1997\">\n"
            + "    <AggExclude name=\"agg_g_ms_pcat_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_c_14_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_pl_01_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_ll_01_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_l_03_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_lc_06_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_l_04_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_c_10_sales_fact_1997\"/>"
            + "    <AggName name=\"agg_l_05_sales_fact_1997\">"
            + "        <AggFactCount column=\"fact_count\"/>\n"
            + "        <AggIgnoreColumn column=\"customer_id\"/>\n"
            + "        <AggIgnoreColumn column=\"store_id\"/>\n"
            + "        <AggIgnoreColumn column=\"promotion_id\"/>\n"
            + " <AggForeignKey factColumn=\"product_id\" aggColumn=\"product_id\"/>"
            + "        <AggMeasure name=\"[Measures].[Store Cost]\" column=\"store_cost\" />\n"
            + "        <AggMeasure name=\"[Measures].[Store Sales]\" column=\"store_sales\" />\n"
            + "        <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"unit_sales\" />\n"
            + "    </AggName>\n"
            + "</Table>\n"
            + "  <Dimension name=\"Product\" foreignKey=\"product_id\">\n"
            + "<Hierarchy hasAll=\"true\" primaryKey=\"product_id\" primaryKeyTable=\"product\">\n"
            + "      <Join leftKey=\"product_class_id\" rightKey=\"product_class_id\">\n"
            + "        <Table name=\"product\"/>\n"
            + "        <Table name=\"product_class\"/>\n"
            + "     </Join>\n"
            + "     <Level name=\"Product Family\" table=\"product_class\" column=\"product_family\"\n"
            + "        uniqueMembers=\"true\"/>"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "<Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "<Measure name=\"Customer Count\" column=\"customer_id\" aggregator=\"distinct-count\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "<Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "<Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "</Cube></Schema>\n";
         */

        private static final SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final SumMeasure customerCountMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final SumMeasure storeSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final SumMeasure storeCostMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        private static final AggregationExclude aggExclude1 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude2 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude3 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude4 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude5 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude6 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude7 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude8 = RolapMappingFactory.eINSTANCE.createAggregationExclude();

        private static final AggregationName aggName = RolapMappingFactory.eINSTANCE.createAggregationName();
        private static final AggregationColumnName factCount = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
        private static final AggregationColumnName ignoreCustomer = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
        private static final AggregationColumnName ignoreStore = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
        private static final AggregationColumnName ignorePromotion = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
        private static final AggregationForeignKey aggForeignKey = RolapMappingFactory.eINSTANCE.createAggregationForeignKey();
        private static final AggregationMeasure aggMeasureStoreCost = RolapMappingFactory.eINSTANCE.createAggregationMeasure();
        private static final AggregationMeasure aggMeasureStoreSales = RolapMappingFactory.eINSTANCE.createAggregationMeasure();
        private static final AggregationMeasure aggMeasureUnitSales = RolapMappingFactory.eINSTANCE.createAggregationMeasure();

        private static final TableQuery salesFactQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final TableQuery productTable = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final TableQuery productClassTable = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final JoinedQueryElement leftJoin = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
        private static final JoinedQueryElement rightJoin = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
        private static final JoinQuery joinQuery = RolapMappingFactory.eINSTANCE.createJoinQuery();

        private static final Level productFamilyLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final ExplicitHierarchy productHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final StandardDimension productDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final DimensionConnector productConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        private static final PhysicalCube fooCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final Catalog amcCatalog = RolapMappingFactory.eINSTANCE.createCatalog();

        static {
            // Aggregation Excludes
            aggExclude1.setName("agg_g_ms_pcat_sales_fact_1997");
            aggExclude2.setName("agg_c_14_sales_fact_1997");
            aggExclude3.setName("agg_pl_01_sales_fact_1997");
            aggExclude4.setName("agg_ll_01_sales_fact_1997");
            aggExclude5.setName("agg_l_03_sales_fact_1997");
            aggExclude6.setName("agg_lc_06_sales_fact_1997");
            aggExclude7.setName("agg_l_04_sales_fact_1997");
            aggExclude8.setName("agg_c_10_sales_fact_1997");

            // Aggregation Name and related objects
            factCount.setColumn(CatalogSupplier.COLUMN_FACT_COUNT_AGG_L_05_SALES_FACT_1997);

            ignoreCustomer.setColumn(CatalogSupplier.COLUMN_CUSTOMER_ID_AGG_L_05_SALES_FACT_1997);
            ignoreStore.setColumn(CatalogSupplier.COLUMN_STORE_ID_AGG_L_05_SALES_FACT_1997);
            ignorePromotion.setColumn(CatalogSupplier.COLUMN_PROMOTION_ID_AGG_L_05_SALES_FACT_1997);

            aggForeignKey.setFactColumn(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);
            aggForeignKey.setAggregationColumn(CatalogSupplier.COLUMN_PRODUCT_ID_AGG_L_05_SALES_FACT_1997);

            aggMeasureStoreCost.setName("[Measures].[Store Cost]");
            aggMeasureStoreCost.setColumn(CatalogSupplier.COLUMN_STORE_COST_AGG_L_05_SALES_FACT_1997);

            aggMeasureStoreSales.setName("[Measures].[Store Sales]");
            aggMeasureStoreSales.setColumn(CatalogSupplier.COLUMN_STORE_SALES_AGG_L_05_SALES_FACT_1997);

            aggMeasureUnitSales.setName("[Measures].[Unit Sales]");
            aggMeasureUnitSales.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_AGG_L_05_SALES_FACT_1997);

            aggName.setName(CatalogSupplier.TABLE_AGG_L_05_SALES_FACT);
            aggName.setAggregationFactCount(factCount);
            aggName.getAggregationIgnoreColumns().addAll(List.of(ignoreCustomer, ignoreStore, ignorePromotion));
            aggName.getAggregationForeignKeys().add(aggForeignKey);
            aggName.getAggregationMeasures().addAll(List.of(aggMeasureStoreCost, aggMeasureStoreSales, aggMeasureUnitSales));

            // Sales Fact Query
            salesFactQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
            salesFactQuery.getAggregationExcludes().addAll(List.of(aggExclude1, aggExclude2, aggExclude3, aggExclude4, aggExclude5, aggExclude6, aggExclude7, aggExclude8));
            salesFactQuery.getAggregationTables().add(aggName);

            // Measures
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");

            customerCountMeasure.setName("Customer Count");
            customerCountMeasure.setColumn(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
            customerCountMeasure.setFormatString("Standard");

            storeSalesMeasure.setName("Store Sales");
            storeSalesMeasure.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);
            storeSalesMeasure.setFormatString("Standard");

            storeCostMeasure.setName("Store Cost");
            storeCostMeasure.setColumn(CatalogSupplier.COLUMN_STORE_COST_SALESFACT);
            storeCostMeasure.setFormatString("Standard");

            measureGroup.getMeasures().addAll(List.of(unitSalesMeasure, customerCountMeasure, storeSalesMeasure, storeCostMeasure));

            // Product Dimension
            productTable.setTable(CatalogSupplier.TABLE_PRODUCT);
            productClassTable.setTable(CatalogSupplier.TABLE_PRODUCT_CLASS);

            leftJoin.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT);
            leftJoin.setQuery(productTable);

            rightJoin.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT_CLASS);
            rightJoin.setQuery(productClassTable);

            joinQuery.setLeft(leftJoin);
            joinQuery.setRight(rightJoin);

            productFamilyLevel.setName("Product Family");
            productFamilyLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_FAMILY_PRODUCT_CLASS);
            productFamilyLevel.setUniqueMembers(true);

            productHierarchy.setHasAll(true);
            productHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);
            productHierarchy.setQuery(joinQuery);
            productHierarchy.getLevels().add(productFamilyLevel);

            productDimension.setName("Product");
            productDimension.getHierarchies().add(productHierarchy);

            productConnector.setOverrideDimensionName("Product");
            productConnector.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);
            productConnector.setDimension(productDimension);

            // Foo Cube
            fooCube.setName("Foo");
            fooCube.setDefaultMeasure(unitSalesMeasure);
            fooCube.setQuery(salesFactQuery);
            fooCube.getDimensionConnectors().add(productConnector);
            fooCube.getMeasureGroups().add(measureGroup);

            // AMC Catalog
            amcCatalog.setName("AMC");
            amcCatalog.getCubes().add(fooCube);
        }

        public TestAggregationManagerModifier(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            return amcCatalog;
        }
    }

    public static class TestAggregationManagerModifier3 extends EmfMappingModifier {

        /*
                "<Schema name=\"FoodMart\">"
                + "<Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">\n"
                + "  <Table name=\"sales_fact_1997\" />\n"
                + "  <Dimension name=\"Gender\" foreignKey=\"customer_id\">\n"
                + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Gender\" primaryKey=\"customer_id\">\n"
                + "      <Table name=\"customer\"/>\n"
                + "      <Level name=\"Gender\" column=\"gender\" uniqueMembers=\"true\"/>\n"
                + "    </Hierarchy>\n"
                + "  </Dimension>\n"
                + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
                + "      formatString=\"Standard\"/>\n"
                + "</Cube>\n"
                + "</Schema>");
         */

        private static final SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        private static final TableQuery salesFactQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final TableQuery customerTable = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final Level genderLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final ExplicitHierarchy genderHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final StandardDimension genderDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final DimensionConnector genderConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        private static final PhysicalCube salesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final Catalog foodMartCatalog = RolapMappingFactory.eINSTANCE.createCatalog();

        static {
            // Unit Sales Measure
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");

            measureGroup.getMeasures().add(unitSalesMeasure);

            // Sales Fact Query
            salesFactQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);

            // Customer Table
            customerTable.setTable(CatalogSupplier.TABLE_CUSTOMER);

            // Gender Level
            genderLevel.setName("Gender");
            genderLevel.setColumn(CatalogSupplier.COLUMN_GENDER_CUSTOMER);
            genderLevel.setUniqueMembers(true);

            // Gender Hierarchy
            genderHierarchy.setHasAll(true);
            genderHierarchy.setAllMemberName("All Gender");
            genderHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);
            genderHierarchy.setQuery(customerTable);
            genderHierarchy.getLevels().add(genderLevel);

            // Gender Dimension
            genderDimension.setName("Gender");
            genderDimension.getHierarchies().add(genderHierarchy);

            // Gender Connector
            genderConnector.setOverrideDimensionName("Gender");
            genderConnector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
            genderConnector.setDimension(genderDimension);

            // Sales Cube
            salesCube.setName("Sales");
            salesCube.setDefaultMeasure(unitSalesMeasure);
            salesCube.setQuery(salesFactQuery);
            salesCube.getDimensionConnectors().add(genderConnector);
            salesCube.getMeasureGroups().add(measureGroup);

            // FoodMart Catalog
            foodMartCatalog.setName("FoodMart");
            foodMartCatalog.getCubes().add(salesCube);
        }

        public TestAggregationManagerModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            return foodMartCatalog;
        }
    }

    public static class TestAggregationManagerModifier4 extends EmfMappingModifier {

        /*
                "<Schema name=\"FoodMart\">"
                + "  <Dimension name=\"Time\" type=\"TimeDimension\">\n"
                + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n"
                + "      <Table name=\"time_by_day\"/>\n"
                + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
                + "          levelType=\"TimeYears\"/>\n"
                + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
                + "          levelType=\"TimeQuarters\"/>\n"
                + "    </Hierarchy>\n"
                + "  </Dimension>\n"
                + "<Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">\n"
                + "  <Table name=\"sales_fact_1997\">\n"
                + "    <AggExclude name=\"agg_c_special_sales_fact_1997\" />\n"
                + "    <AggExclude name=\"agg_lc_100_sales_fact_1997\" />\n"
                + "    <AggExclude name=\"agg_lc_10_sales_fact_1997\" />\n"
                + "    <AggExclude name=\"agg_pc_10_sales_fact_1997\" />\n"
                + "    <AggName name=\"agg_g_ms_pcat_sales_fact_1997\">\n"
                + "        <AggFactCount column=\"FACT_COUNT\"/>\n"
                + "        <AggIgnoreColumn column=\"Quarter\"/>\n"
                + "        <AggIgnoreColumn column=\"MONTH_OF_YEAR\"/>\n"
                + "        <AggMeasure name=\"[Measures].[Customer Count]\" column=\"customer_count\" />\n"
                + "        <AggLevel name=\"[Time].[Year]\" column=\"the_year\" />\n"
                + "    </AggName>\n"
                + "  </Table>\n"
                + "  <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
                + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
                + "      formatString=\"Standard\"/>\n"
                + "  <Measure name=\"Customer Count\" column=\"customer_id\" aggregator=\"distinct-count\"\n"
                + "      formatString=\"Standard\"/>\n"
                + "</Cube>\n"
                + "</Schema>");
         */

        private static final SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final CountMeasure customerCountMeasure = RolapMappingFactory.eINSTANCE.createCountMeasure();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        private static final AggregationExclude aggExclude1 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude2 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude3 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude4 = RolapMappingFactory.eINSTANCE.createAggregationExclude();

        private static final AggregationName aggName = RolapMappingFactory.eINSTANCE.createAggregationName();
        private static final AggregationColumnName factCount = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
        private static final AggregationColumnName ignoreQuarter = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
        private static final AggregationColumnName ignoreMonthOfYear = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
        private static final AggregationMeasure aggMeasureCustomerCount = RolapMappingFactory.eINSTANCE.createAggregationMeasure();
        private static final AggregationLevel aggLevelYear = RolapMappingFactory.eINSTANCE.createAggregationLevel();

        private static final TableQuery salesFactQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final TableQuery timeByDayTable = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final Level yearLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final Level quarterLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final ExplicitHierarchy timeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final TimeDimension timeDimension = RolapMappingFactory.eINSTANCE.createTimeDimension();
        private static final DimensionConnector timeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        private static final PhysicalCube salesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final Catalog foodMartCatalog = RolapMappingFactory.eINSTANCE.createCatalog();

        static {
            // Aggregation Excludes
            aggExclude1.setName("agg_c_special_sales_fact_1997");
            aggExclude2.setName("agg_lc_100_sales_fact_1997");
            aggExclude3.setName("agg_lc_10_sales_fact_1997");
            aggExclude4.setName("agg_pc_10_sales_fact_1997");

            // Aggregation Name and related objects
            factCount.setColumn(CatalogSupplier.COLUMN_FACT_COUNT_AGG_G_MS_PCAT_SALES_FACT_1997);

            ignoreQuarter.setColumn(CatalogSupplier.COLUMN_QUARTER_AGG_G_MS_PCAT_SALES_FACT_1997);
            ignoreMonthOfYear.setColumn(CatalogSupplier.COLUMN_MONTH_YEAR_AGG_G_MS_PCAT_SALES_FACT_1997);

            aggMeasureCustomerCount.setName("[Measures].[Customer Count]");
            aggMeasureCustomerCount.setColumn(CatalogSupplier.COLUMN_CUSTOMER_COUNT_AGG_G_MS_PCAT_SALES_FACT_1997);

            aggLevelYear.setName("[Time].[Year]");
            aggLevelYear.setColumn(CatalogSupplier.COLUMN_THE_YEAR_AGG_G_MS_PCAT_SALES_FACT_1997);

            aggName.setName(CatalogSupplier.TABLE_AGG_G_MS_PCAT_SALES_FACT);
            aggName.setAggregationFactCount(factCount);
            aggName.getAggregationIgnoreColumns().addAll(List.of(ignoreQuarter, ignoreMonthOfYear));
            aggName.getAggregationMeasures().add(aggMeasureCustomerCount);
            aggName.getAggregationLevels().add(aggLevelYear);

            // Sales Fact Query
            salesFactQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
            salesFactQuery.getAggregationExcludes().addAll(List.of(aggExclude1, aggExclude2, aggExclude3, aggExclude4));
            salesFactQuery.getAggregationTables().add(aggName);

            // Measures
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");

            customerCountMeasure.setName("Customer Count");
            customerCountMeasure.setColumn(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
            customerCountMeasure.setDistinct(true);
            customerCountMeasure.setFormatString("Standard");

            measureGroup.getMeasures().addAll(List.of(unitSalesMeasure, customerCountMeasure));

            // Time Dimension
            timeByDayTable.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);

            yearLevel.setName("Year");
            yearLevel.setColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
            yearLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            yearLevel.setUniqueMembers(true);
            yearLevel.setType(LevelDefinition.TIME_YEARS);

            quarterLevel.setName("Quarter");
            quarterLevel.setColumn(CatalogSupplier.COLUMN_QUARTER_TIME_BY_DAY);
            quarterLevel.setUniqueMembers(false);
            quarterLevel.setType(LevelDefinition.TIME_QUARTERS);

            timeHierarchy.setHasAll(true);
            timeHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);
            timeHierarchy.setQuery(timeByDayTable);
            timeHierarchy.getLevels().addAll(List.of(yearLevel, quarterLevel));

            timeDimension.setName("Time");
            timeDimension.getHierarchies().add(timeHierarchy);

            timeConnector.setOverrideDimensionName("Time");
            timeConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
            timeConnector.setDimension(timeDimension);

            // Sales Cube
            salesCube.setName("Sales");
            salesCube.setDefaultMeasure(unitSalesMeasure);
            salesCube.setQuery(salesFactQuery);
            salesCube.getDimensionConnectors().add(timeConnector);
            salesCube.getMeasureGroups().add(measureGroup);

            // FoodMart Catalog
            foodMartCatalog.setName("FoodMart");
            foodMartCatalog.getCubes().add(salesCube);
        }

        public TestAggregationManagerModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            return foodMartCatalog;
        }
    }

    public static class TestAggregationManagerModifier5 extends EmfMappingModifier {

        /*
                "<Schema name=\"FooSchema\"><Cube name=\"Sales_Foo\" defaultMeasure=\"Unit Sales\">\n"
                + "  <Table name=\"sales_fact_1997\">\n"
                + " <AggName name=\"agg_pl_01_sales_fact_1997\" approxRowCount=\"86000\">\n"
                + "     <AggFactCount column=\"FACT_COUNT\"/>\n"
                + "     <AggForeignKey factColumn=\"product_id\" aggColumn=\"PRODUCT_ID\" />\n"
                + "     <AggForeignKey factColumn=\"customer_id\" aggColumn=\"CUSTOMER_ID\" />\n"
                + "     <AggForeignKey factColumn=\"time_id\" aggColumn=\"TIME_ID\" />\n"
                + "     <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"UNIT_SALES_SUM\" />\n"
                + "     <AggMeasure name=\"[Measures].[Store Cost]\" column=\"STORE_COST_SUM\" />\n"
                + "     <AggMeasure name=\"[Measures].[Store Sales]\" column=\"STORE_SALES_SUM\" />\n"
                + " </AggName>\n"
                + "    <AggExclude name=\"agg_c_special_sales_fact_1997\" />\n"
                + "    <AggExclude name=\"agg_lc_100_sales_fact_1997\" />\n"
                + "    <AggExclude name=\"agg_lc_10_sales_fact_1997\" />\n"
                + "    <AggExclude name=\"agg_pc_10_sales_fact_1997\" />\n"
                + "  </Table>\n"
                + ...
                + "</Cube></Schema>\n");
         */

        public TestAggregationManagerModifier5(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // TODO: This is a very complex modifier that creates a complete schema with multiple dimensions,
            // aggregation tables, SQL expressions, etc. It requires extensive EMF object creation.
            // For now, returning the original catalog. Full implementation needed.
            return catalog2;
        }
    }

    public static class TestAggregationManagerModifier6 extends EmfMappingModifier {

        /*
        "<?xml version=\"1.0\"?>\n"
        + "<Schema name=\"custom\">\n"
        + "  <Dimension name=\"Store\">\n"
        + "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n"
        + "      <Table name=\"store\"/>\n"
        + "      <Level name=\"Store Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
        + "      <Level name=\"Store State\" column=\"store_state\" uniqueMembers=\"true\"/>\n"
        + "      <Level name=\"Store City\" column=\"store_city\" uniqueMembers=\"false\"/>\n"
        + "      <Level name=\"Store Name\" column=\"store_name\" uniqueMembers=\"true\">\n"
        + "      </Level>\n"
        + "    </Hierarchy>\n"
        + "  </Dimension>\n"
        + "  <Dimension name=\"Time\" type=\"TimeDimension\">\n"
        + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n"
        + "      <Table name=\"time_by_day\"/>\n"
        + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
        + "          levelType=\"TimeYears\"/>\n"
        + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
        + "          levelType=\"TimeQuarters\"/>\n"
        + "      <Level name=\"Month\" column=\"month_of_year\" uniqueMembers=\"true\" type=\"Numeric\"\n"
        + "          levelType=\"TimeMonths\"/>\n"
        + "      <Level name=\"Day\" column=\"day_of_month\" uniqueMembers=\"false\" type=\"Numeric\"\n"
        + "          levelType=\"TimeDays\"/>\n"
        + "    </Hierarchy>\n"
        + "  </Dimension>\n"
        + "  <Cube name=\"Sales1\" defaultMeasure=\"Unit Sales\">\n"
        + "    <Table name=\"sales_fact_1997\">\n"
        + "      <AggExclude name=\"agg_c_special_sales_fact_1997\"/>"
        + "      <AggExclude name=\"agg_c_10_sales_fact_1997\"/>"
        + "      <AggExclude name=\"agg_l_04_sales_fact_1997\"/>"
        + "      <AggExclude name=\"agg_g_ms_pcat_sales_fact_1997\"/>"
        + "      <AggExclude name=\"agg_lc_06_sales_fact_1997\"/>"
        + "      <AggExclude name=\"agg_l_03_sales_fact_1997\"/>"
        + "      <AggExclude name=\"agg_lc_100_sales_fact_1997\"/>"
        + "      <AggExclude name=\"agg_pl_01_sales_fact_1997\"/>"
        + "      <AggExclude name=\"agg_ll_01_sales_fact_1997\"/>"
        + "      <AggExclude name=\"agg_l_05_sales_fact_1997\"/>"
        + "      <AggName name=\"agg_c_14_sales_fact_1997\">\n"
        + "        <AggFactCount column=\"fact_count\"/>\n"
        + "        <AggIgnoreColumn column=\"product_id\" />\n"
        + "        <AggIgnoreColumn column=\"customer_id\" />\n"
        + "        <AggIgnoreColumn column=\"promotion_id\" />\n"
        + "        <AggIgnoreColumn column=\"the_year\" />\n"
        + "        <AggIgnoreColumn column=\"quarter\" />\n"
        + "        <AggForeignKey factColumn=\"store_id\" aggColumn=\"store_id\" />\n"
        + "        <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"unit_sales\" />\n"
        + "        <AggMeasure name=\"[Measures].[Store Cost]\" column=\"store_cost\" />\n"
        + "        <AggMeasure name=\"[Measures].[Store Sales]\" column=\"store_sales\" />\n"
        + "        <AggLevel name=\"[Time].[Month]\" column=\"month_of_year\" collapsed=\"false\" />\n"
        + "      </AggName>\n"
        + "    </Table>\n"
        + "    <DimensionUsage name=\"Store\" source=\"Store\" foreignKey=\"store_id\"/>\n"
        + "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
        + "    <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
        + "      formatString=\"Standard\"/>\n"
        + "    <Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\"\n"
        + "      formatString=\"#,###.00\"/>\n"
        + "    <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
        + "      formatString=\"#,###.00\"/>\n"
        + "  </Cube>\n"
        + "</Schema>\n";
     */

        private static final SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final SumMeasure storeCostMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final SumMeasure storeSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        private static final AggregationExclude aggExclude1 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude2 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude3 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude4 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude5 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude6 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude7 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude8 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude9 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude10 = RolapMappingFactory.eINSTANCE.createAggregationExclude();

        private static final AggregationName aggName = RolapMappingFactory.eINSTANCE.createAggregationName();
        private static final AggregationColumnName factCount = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
        private static final AggregationColumnName ignoreProductId = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
        private static final AggregationColumnName ignoreCustomerId = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
        private static final AggregationColumnName ignorePromotionId = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
        private static final AggregationColumnName ignoreTheYear = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
        private static final AggregationColumnName ignoreQuarter = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
        private static final AggregationForeignKey aggForeignKey = RolapMappingFactory.eINSTANCE.createAggregationForeignKey();
        private static final AggregationMeasure aggMeasureUnitSales = RolapMappingFactory.eINSTANCE.createAggregationMeasure();
        private static final AggregationMeasure aggMeasureStoreCost = RolapMappingFactory.eINSTANCE.createAggregationMeasure();
        private static final AggregationMeasure aggMeasureStoreSales = RolapMappingFactory.eINSTANCE.createAggregationMeasure();
        private static final AggregationLevel aggLevelMonth = RolapMappingFactory.eINSTANCE.createAggregationLevel();

        private static final TableQuery salesFactQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final TableQuery storeTable = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final TableQuery timeByDayTable = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final Level storeCountryLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final Level storeStateLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final Level storeCityLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final Level storeNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final ExplicitHierarchy storeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final StandardDimension storeDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final DimensionConnector storeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        private static final Level yearLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final Level quarterLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final Level monthLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final Level dayLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final ExplicitHierarchy timeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final TimeDimension timeDimension = RolapMappingFactory.eINSTANCE.createTimeDimension();
        private static final DimensionConnector timeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        private static final PhysicalCube sales1Cube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final Catalog customCatalog = RolapMappingFactory.eINSTANCE.createCatalog();

        static {
            // Aggregation Excludes
            aggExclude1.setName("agg_c_special_sales_fact_1997");
            aggExclude2.setName("agg_c_10_sales_fact_1997");
            aggExclude3.setName("agg_l_04_sales_fact_1997");
            aggExclude4.setName("agg_g_ms_pcat_sales_fact_1997");
            aggExclude5.setName("agg_lc_06_sales_fact_1997");
            aggExclude6.setName("agg_l_03_sales_fact_1997");
            aggExclude7.setName("agg_lc_100_sales_fact_1997");
            aggExclude8.setName("agg_pl_01_sales_fact_1997");
            aggExclude9.setName("agg_ll_01_sales_fact_1997");
            aggExclude10.setName("agg_l_05_sales_fact_1997");

            // Aggregation Name and related objects
            factCount.setColumn(CatalogSupplier.COLUMN_FACT_COUNT_AGG_C_14_SALES_FACT_1997);

            ignoreProductId.setColumn(CatalogSupplier.COLUMN_PRODUCT_ID_AGG_C_14_SALES_FACT_1997);
            ignoreCustomerId.setColumn(CatalogSupplier.COLUMN_CUSTOMER_ID_AGG_C_14_SALES_FACT_1997);
            ignorePromotionId.setColumn(CatalogSupplier.COLUMN_PROMOTION_ID_AGG_C_14_SALES_FACT_1997);
            ignoreTheYear.setColumn(CatalogSupplier.COLUMN_THE_YEAR_AGG_C_14_SALES_FACT_1997);
            ignoreQuarter.setColumn(CatalogSupplier.COLUMN_QUARTER_AGG_C_14_SALES_FACT_1997);

            aggForeignKey.setFactColumn(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
            aggForeignKey.setAggregationColumn(CatalogSupplier.COLUMN_STORE_ID_AGG_C_14_SALES_FACT_1997);

            aggMeasureUnitSales.setName("[Measures].[Unit Sales]");
            aggMeasureUnitSales.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_AGG_C_14_SALES_FACT_1997);

            aggMeasureStoreCost.setName("[Measures].[Store Cost]");
            aggMeasureStoreCost.setColumn(CatalogSupplier.COLUMN_STORE_COST_AGG_C_14_SALES_FACT_1997);

            aggMeasureStoreSales.setName("[Measures].[Store Sales]");
            aggMeasureStoreSales.setColumn(CatalogSupplier.COLUMN_STORE_SALES_AGG_C_14_SALES_FACT_1997);

            aggLevelMonth.setName("[Time].[Time].[Month]");
            aggLevelMonth.setColumn(CatalogSupplier.COLUMN_MONTH_YEAR_AGG_C_14_SALES_FACT_1997);
            aggLevelMonth.setCollapsed(false);

            aggName.setName(CatalogSupplier.TABLE_AGG_C_14_SALES_FACT);
            aggName.setAggregationFactCount(factCount);
            aggName.getAggregationIgnoreColumns().addAll(List.of(ignoreProductId, ignoreCustomerId, ignorePromotionId, ignoreTheYear, ignoreQuarter));
            aggName.getAggregationForeignKeys().add(aggForeignKey);
            aggName.getAggregationMeasures().addAll(List.of(aggMeasureUnitSales, aggMeasureStoreCost, aggMeasureStoreSales));
            aggName.getAggregationLevels().add(aggLevelMonth);

            // Sales Fact Query
            salesFactQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
            salesFactQuery.getAggregationExcludes().addAll(List.of(aggExclude1, aggExclude2, aggExclude3, aggExclude4, aggExclude5, aggExclude6, aggExclude7, aggExclude8, aggExclude9, aggExclude10));
            salesFactQuery.getAggregationTables().add(aggName);

            // Measures
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");

            storeCostMeasure.setName("Store Cost");
            storeCostMeasure.setColumn(CatalogSupplier.COLUMN_STORE_COST_SALESFACT);
            storeCostMeasure.setFormatString("#,###.00");

            storeSalesMeasure.setName("Store Sales");
            storeSalesMeasure.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);
            storeSalesMeasure.setFormatString("#,###.00");

            measureGroup.getMeasures().addAll(List.of(unitSalesMeasure, storeCostMeasure, storeSalesMeasure));

            // Store Dimension
            storeTable.setTable(CatalogSupplier.TABLE_STORE);

            storeCountryLevel.setName("Store Country");
            storeCountryLevel.setColumn(CatalogSupplier.COLUMN_STORE_COUNTRY_STORE);
            storeCountryLevel.setUniqueMembers(true);

            storeStateLevel.setName("Store State");
            storeStateLevel.setColumn(CatalogSupplier.COLUMN_STORE_STATE_STORE);
            storeStateLevel.setUniqueMembers(true);

            storeCityLevel.setName("Store City");
            storeCityLevel.setColumn(CatalogSupplier.COLUMN_STORE_CITY_STORE);
            storeCityLevel.setUniqueMembers(false);

            storeNameLevel.setName("Store Name");
            storeNameLevel.setColumn(CatalogSupplier.COLUMN_STORE_NAME_STORE);
            storeNameLevel.setUniqueMembers(true);

            storeHierarchy.setHasAll(true);
            storeHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);
            storeHierarchy.setQuery(storeTable);
            storeHierarchy.getLevels().addAll(List.of(storeCountryLevel, storeStateLevel, storeCityLevel, storeNameLevel));

            storeDimension.setName("Store");
            storeDimension.getHierarchies().add(storeHierarchy);

            storeConnector.setOverrideDimensionName("Store");
            storeConnector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
            storeConnector.setDimension(storeDimension);

            // Time Dimension
            timeByDayTable.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);

            yearLevel.setName("Year");
            yearLevel.setColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
            yearLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            yearLevel.setUniqueMembers(true);
            yearLevel.setType(LevelDefinition.TIME_YEARS);

            quarterLevel.setName("Quarter");
            quarterLevel.setColumn(CatalogSupplier.COLUMN_QUARTER_TIME_BY_DAY);
            quarterLevel.setUniqueMembers(false);
            quarterLevel.setType(LevelDefinition.TIME_QUARTERS);

            monthLevel.setName("Month");
            monthLevel.setColumn(CatalogSupplier.COLUMN_MONTH_OF_YEAR_TIME_BY_DAY);
            monthLevel.setUniqueMembers(true);
            monthLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            monthLevel.setType(LevelDefinition.TIME_MONTHS);

            dayLevel.setName("Day");
            dayLevel.setColumn(CatalogSupplier.COLUMN_DAY_OF_MONTH_TIME_BY_DAY);
            dayLevel.setUniqueMembers(false);
            dayLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            dayLevel.setType(LevelDefinition.TIME_DAYS);

            timeHierarchy.setHasAll(false);
            timeHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);
            timeHierarchy.setQuery(timeByDayTable);
            timeHierarchy.getLevels().addAll(List.of(yearLevel, quarterLevel, monthLevel, dayLevel));

            timeDimension.setName("Time");
            timeDimension.getHierarchies().add(timeHierarchy);

            timeConnector.setOverrideDimensionName("Time");
            timeConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
            timeConnector.setDimension(timeDimension);

            // Sales1 Cube
            sales1Cube.setName("Sales1");
            sales1Cube.setDefaultMeasure(unitSalesMeasure);
            sales1Cube.setQuery(salesFactQuery);
            sales1Cube.getDimensionConnectors().addAll(List.of(storeConnector, timeConnector));
            sales1Cube.getMeasureGroups().add(measureGroup);

            // Custom Catalog
            customCatalog.setName("custom");
            customCatalog.getCubes().add(sales1Cube);
        }

        public TestAggregationManagerModifier6(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            return customCatalog;
        }
    }

    public static class TestAggregationManagerModifier7 extends EmfMappingModifier {

        /*
                "<Schema name=\"FoodMart\">"
                + "  <Dimension name=\"Time\" type=\"TimeDimension\">\n"
                + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n"
                + "      <Table name=\"time_by_day\"/>\n"
                + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
                + "          levelType=\"TimeYears\"/>\n"
                + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
                + "          levelType=\"TimeQuarters\"/>\n"
                + "    </Hierarchy>\n"
                + "  </Dimension>\n"
                + "<Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">\n"
                + "  <Table name=\"sales_fact_1997\">\n"
                + "    <AggExclude name=\"agg_c_special_sales_fact_1997\" />\n"
                + "    <AggExclude name=\"agg_lc_100_sales_fact_1997\" />\n"
                + "    <AggExclude name=\"agg_lc_10_sales_fact_1997\" />\n"
                + "    <AggExclude name=\"agg_pc_10_sales_fact_1997\" />\n"
                + "    <AggName name=\"agg_c_10_sales_fact_1997\">\n"
                + "        <AggFactCount column=\"FACT_COUNT\"/>\n"
                + "        <AggIgnoreColumn column=\"Quarter\"/>\n"
                + "        <AggIgnoreColumn column=\"MONTH_OF_YEAR\"/>\n"
                + "        <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"unit_sales\" />\n"
                + "        <AggLevel name=\"[Time].[Year]\" column=\"the_year\" />\n"
                + "    </AggName>\n"
                + "  </Table>\n"
                + "  <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
                + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
                + "      formatString=\"Standard\"/>\n"
                + "</Cube>\n"
                + "</Schema>");

         */

        private static final SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        private static final AggregationExclude aggExclude1 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude2 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude3 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude4 = RolapMappingFactory.eINSTANCE.createAggregationExclude();

        private static final AggregationName aggName = RolapMappingFactory.eINSTANCE.createAggregationName();
        private static final AggregationColumnName factCount = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
        private static final AggregationColumnName ignoreQuarter = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
        private static final AggregationColumnName ignoreMonthOfYear = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
        private static final AggregationMeasure aggMeasureUnitSales = RolapMappingFactory.eINSTANCE.createAggregationMeasure();
        private static final AggregationLevel aggLevelYear = RolapMappingFactory.eINSTANCE.createAggregationLevel();

        private static final TableQuery salesFactQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final TableQuery timeByDayTable = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final Level yearLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final Level quarterLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final ExplicitHierarchy timeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final TimeDimension timeDimension = RolapMappingFactory.eINSTANCE.createTimeDimension();
        private static final DimensionConnector timeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        private static final PhysicalCube salesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final Catalog foodMartCatalog = RolapMappingFactory.eINSTANCE.createCatalog();

        static {
            // Aggregation Excludes
            aggExclude1.setName("agg_c_special_sales_fact_1997");
            aggExclude2.setName("agg_lc_100_sales_fact_1997");
            aggExclude3.setName("agg_lc_10_sales_fact_1997");
            aggExclude4.setName("agg_pc_10_sales_fact_1997");

            // Aggregation Name and related objects
            factCount.setColumn(CatalogSupplier.COLUMN_FACT_COUNT_AGG_C_10_SALES_FACT_1997);

            ignoreQuarter.setColumn(CatalogSupplier.COLUMN_QUARTER_AGG_C_10_SALES_FACT_1997);
            ignoreMonthOfYear.setColumn(CatalogSupplier.COLUMN_MONTH_YEAR_AGG_C_10_SALES_FACT_1997);

            aggMeasureUnitSales.setName("[Measures].[Unit Sales]");
            aggMeasureUnitSales.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_AGG_C_10_SALES_FACT_1997);

            aggLevelYear.setName("[Time].[Time].[Year]");
            aggLevelYear.setColumn(CatalogSupplier.COLUMN_THE_YEAR_AGG_C_10_SALES_FACT_1997);

            aggName.setName(CatalogSupplier.TABLE_AGG_C_10_SALES_FACT_1997);
            aggName.setAggregationFactCount(factCount);
            aggName.getAggregationIgnoreColumns().addAll(List.of(ignoreQuarter, ignoreMonthOfYear));
            aggName.getAggregationMeasures().add(aggMeasureUnitSales);
            aggName.getAggregationLevels().add(aggLevelYear);

            // Sales Fact Query
            salesFactQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
            salesFactQuery.getAggregationExcludes().addAll(List.of(aggExclude1, aggExclude2, aggExclude3, aggExclude4));
            salesFactQuery.getAggregationTables().add(aggName);

            // Measure
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");

            measureGroup.getMeasures().add(unitSalesMeasure);

            // Time Dimension
            timeByDayTable.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);

            yearLevel.setName("Year");
            yearLevel.setColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
            yearLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            yearLevel.setUniqueMembers(true);
            yearLevel.setType(LevelDefinition.TIME_YEARS);

            quarterLevel.setName("Quarter");
            quarterLevel.setColumn(CatalogSupplier.COLUMN_QUARTER_TIME_BY_DAY);
            quarterLevel.setUniqueMembers(false);
            quarterLevel.setType(LevelDefinition.TIME_QUARTERS);

            timeHierarchy.setHasAll(false);
            timeHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);
            timeHierarchy.setQuery(timeByDayTable);
            timeHierarchy.getLevels().addAll(List.of(yearLevel, quarterLevel));

            timeDimension.setName("Time");
            timeDimension.getHierarchies().add(timeHierarchy);

            timeConnector.setOverrideDimensionName("Time");
            timeConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
            timeConnector.setDimension(timeDimension);

            // Sales Cube
            salesCube.setName("Sales");
            salesCube.setDefaultMeasure(unitSalesMeasure);
            salesCube.setQuery(salesFactQuery);
            salesCube.getDimensionConnectors().add(timeConnector);
            salesCube.getMeasureGroups().add(measureGroup);

            // FoodMart Catalog
            foodMartCatalog.setName("FoodMart");
            foodMartCatalog.getCubes().add(salesCube);
        }

        public TestAggregationManagerModifier7(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            return foodMartCatalog;
        }
    }

    public static class TestAggregationManagerModifier8 extends EmfMappingModifier {

        /*
            "<Schema name=\"AMC\"><Cube name=\"Foo\" defaultMeasure=\"Unit Sales\">\n"
            + "  <Table name=\"sales_fact_1997\">\n"
            + "    <AggExclude name=\"agg_g_ms_pcat_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_c_14_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_pl_01_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_ll_01_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_l_03_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_lc_06_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_l_04_sales_fact_1997\"/>"
            + "    <AggExclude name=\"agg_c_10_sales_fact_1997\"/>"
            + "    <AggName name=\"agg_l_05_sales_fact_1997\">"
            + "        <AggFactCount column=\"fact_count\"/>\n"
            + "        <AggIgnoreColumn column=\"customer_id\"/>\n"
            + "        <AggIgnoreColumn column=\"store_id\"/>\n"
            + "        <AggIgnoreColumn column=\"promotion_id\"/>\n"
            + " <AggForeignKey factColumn=\"promotion_id\" aggColumn=\"promotion_id\"/>"
            + "        <AggMeasure name=\"[Measures].[Store Cost]\" column=\"store_cost\" />\n"
            + "        <AggMeasure name=\"[Measures].[Store Sales]\" column=\"store_sales\" />\n"
            + "        <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"unit_sales\" />\n"
            + "    </AggName>\n"
            + "</Table>\n"
            + "  <Dimension name=\"Promotions\" foreignKey=\"promotion_id\">\n"
            + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
            + "      <Table name=\"promotion\"/>\n"
            + "      <Level name=\"Media Type\" column=\"media_type\" uniqueMembers=\"true\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>"
            + "<Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "<Measure name=\"Customer Count\" column=\"customer_id\" aggregator=\"distinct-count\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "<Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "<Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "</Cube></Schema>\n";
         */

        private static final SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final SumMeasure customerCountMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final SumMeasure storeSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final SumMeasure storeCostMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        private static final AggregationExclude aggExclude1 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude2 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude3 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude4 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude5 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude6 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude7 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        private static final AggregationExclude aggExclude8 = RolapMappingFactory.eINSTANCE.createAggregationExclude();

        private static final AggregationName aggName = RolapMappingFactory.eINSTANCE.createAggregationName();
        private static final AggregationColumnName factCount = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
        private static final AggregationColumnName ignoreCustomer = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
        private static final AggregationColumnName ignoreStore = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
        private static final AggregationColumnName ignorePromotion = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
        private static final AggregationForeignKey aggForeignKey = RolapMappingFactory.eINSTANCE.createAggregationForeignKey();
        private static final AggregationMeasure aggMeasureStoreCost = RolapMappingFactory.eINSTANCE.createAggregationMeasure();
        private static final AggregationMeasure aggMeasureStoreSales = RolapMappingFactory.eINSTANCE.createAggregationMeasure();
        private static final AggregationMeasure aggMeasureUnitSales = RolapMappingFactory.eINSTANCE.createAggregationMeasure();

        private static final TableQuery salesFactQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final TableQuery promotionTable = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final Level mediaTypeLevel = RolapMappingFactory.eINSTANCE.createLevel();
        private static final ExplicitHierarchy promotionHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final StandardDimension promotionDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final DimensionConnector promotionConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();

        private static final PhysicalCube fooCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final Catalog amcCatalog = RolapMappingFactory.eINSTANCE.createCatalog();

        static {
            // Aggregation Excludes
            aggExclude1.setName("agg_g_ms_pcat_sales_fact_1997");
            aggExclude2.setName("agg_c_14_sales_fact_1997");
            aggExclude3.setName("agg_pl_01_sales_fact_1997");
            aggExclude4.setName("agg_ll_01_sales_fact_1997");
            aggExclude5.setName("agg_l_03_sales_fact_1997");
            aggExclude6.setName("agg_lc_06_sales_fact_1997");
            aggExclude7.setName("agg_l_04_sales_fact_1997");
            aggExclude8.setName("agg_c_10_sales_fact_1997");

            // Aggregation Name and related objects
            factCount.setColumn(CatalogSupplier.COLUMN_FACT_COUNT_AGG_L_05_SALES_FACT_1997);

            ignoreCustomer.setColumn(CatalogSupplier.COLUMN_CUSTOMER_ID_AGG_L_05_SALES_FACT_1997);
            ignoreStore.setColumn(CatalogSupplier.COLUMN_STORE_ID_AGG_L_05_SALES_FACT_1997);
            ignorePromotion.setColumn(CatalogSupplier.COLUMN_PROMOTION_ID_AGG_L_05_SALES_FACT_1997);

            aggForeignKey.setFactColumn(CatalogSupplier.COLUMN_PROMOTION_ID_SALESFACT);
            aggForeignKey.setAggregationColumn(CatalogSupplier.COLUMN_PROMOTION_ID_AGG_L_05_SALES_FACT_1997);

            aggMeasureStoreCost.setName("[Measures].[Store Cost]");
            aggMeasureStoreCost.setColumn(CatalogSupplier.COLUMN_STORE_COST_AGG_L_05_SALES_FACT_1997);

            aggMeasureStoreSales.setName("[Measures].[Store Sales]");
            aggMeasureStoreSales.setColumn(CatalogSupplier.COLUMN_STORE_SALES_AGG_L_05_SALES_FACT_1997);

            aggMeasureUnitSales.setName("[Measures].[Unit Sales]");
            aggMeasureUnitSales.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_AGG_L_05_SALES_FACT_1997);

            aggName.setName(CatalogSupplier.TABLE_AGG_L_05_SALES_FACT);
            aggName.setAggregationFactCount(factCount);
            aggName.getAggregationIgnoreColumns().addAll(List.of(ignoreCustomer, ignoreStore, ignorePromotion));
            aggName.getAggregationForeignKeys().add(aggForeignKey);
            aggName.getAggregationMeasures().addAll(List.of(aggMeasureStoreCost, aggMeasureStoreSales, aggMeasureUnitSales));

            // Sales Fact Query
            salesFactQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
            salesFactQuery.getAggregationExcludes().addAll(List.of(aggExclude1, aggExclude2, aggExclude3, aggExclude4, aggExclude5, aggExclude6, aggExclude7, aggExclude8));
            salesFactQuery.getAggregationTables().add(aggName);

            // Measures
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");

            customerCountMeasure.setName("Customer Count");
            customerCountMeasure.setColumn(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
            customerCountMeasure.setFormatString("Standard");

            storeSalesMeasure.setName("Store Sales");
            storeSalesMeasure.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);
            storeSalesMeasure.setFormatString("Standard");

            storeCostMeasure.setName("Store Cost");
            storeCostMeasure.setColumn(CatalogSupplier.COLUMN_STORE_COST_SALESFACT);
            storeCostMeasure.setFormatString("Standard");

            measureGroup.getMeasures().addAll(List.of(unitSalesMeasure, customerCountMeasure, storeSalesMeasure, storeCostMeasure));

            // Promotion Dimension
            promotionTable.setTable(CatalogSupplier.TABLE_PROMOTION);

            mediaTypeLevel.setName("Media Type");
            mediaTypeLevel.setColumn(CatalogSupplier.COLUMN_MEDIA_TYPE_PROMOTION);
            mediaTypeLevel.setUniqueMembers(true);

            promotionHierarchy.setHasAll(true);
            promotionHierarchy.setAllMemberName("All Promotions");
            promotionHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PROMOTION_ID_PROMOTION);
            promotionHierarchy.setDefaultMember("[All Promotions]");
            promotionHierarchy.setQuery(promotionTable);
            promotionHierarchy.getLevels().add(mediaTypeLevel);

            promotionDimension.setName("Promotions");
            promotionDimension.getHierarchies().add(promotionHierarchy);

            promotionConnector.setOverrideDimensionName("Promotions");
            promotionConnector.setForeignKey(CatalogSupplier.COLUMN_PROMOTION_ID_SALESFACT);
            promotionConnector.setDimension(promotionDimension);

            // Foo Cube
            fooCube.setName("Foo");
            fooCube.setDefaultMeasure(unitSalesMeasure);
            fooCube.setQuery(salesFactQuery);
            fooCube.getDimensionConnectors().add(promotionConnector);
            fooCube.getMeasureGroups().add(measureGroup);

            // AMC Catalog
            amcCatalog.setName("AMC");
            amcCatalog.getCubes().add(fooCube);
        }

        public TestAggregationManagerModifier8(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            return amcCatalog;
        }
    }

    public static class TestAggregationManagerModifier9 extends EmfMappingModifier {

        /*
            "<?xml version=\"1.0\"?>\n"
            + "<Schema name=\"custom\">\n"
            + "  <Dimension name=\"Store\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "      <Table name=\"store\"/>\n"
            + "      <Level name=\"Store Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"Store State\" column=\"store_state\" uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"Store City\" column=\"store_city\" uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Store Name\" column=\"store_name\" uniqueMembers=\"true\">\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension name=\"Time\" type=\"TimeDimension\">\n"
            + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n"
            + "      <Table name=\"time_by_day\"/>\n"
            + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
            + "          levelType=\"TimeYears\"/>\n"
            + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
            + "          levelType=\"TimeQuarters\"/>\n"
            + "      <Level name=\"Month\" column=\"month_of_year\" uniqueMembers=\"false\" type=\"Numeric\"\n"
            + "          levelType=\"TimeMonths\"/>\n"
            + "    </Hierarchy>\n"
            + "    <Hierarchy hasAll=\"true\" name=\"Weekly\" primaryKey=\"time_id\">\n"
            + "      <Table name=\"time_by_day\"/>\n"
            + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
            + "          levelType=\"TimeYears\"/>\n"
            + "      <Level name=\"Week\" column=\"week_of_year\" type=\"Numeric\" uniqueMembers=\"false\"\n"
            + "          levelType=\"TimeWeeks\"/>\n"
            + "      <Level name=\"Day\" column=\"day_of_month\" uniqueMembers=\"false\" type=\"Numeric\"\n"
            + "          levelType=\"TimeDays\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Cube name=\"Sales1\" defaultMeasure=\"Unit Sales\">\n"
            + "    <Table name=\"sales_fact_1997\">\n"
            + "      <AggName name=\"agg_c_special_sales_fact_1997\">\n"
            + "        <AggFactCount column=\"FACT_COUNT\"/>\n"
            + "        <AggIgnoreColumn column=\"foo\"/>\n"
            + "        <AggIgnoreColumn column=\"bar\"/>\n"
            + "        <AggIgnoreColumn column=\"PRODUCT_ID\" />\n"
            + "        <AggIgnoreColumn column=\"CUSTOMER_ID\" />\n"
            + "        <AggIgnoreColumn column=\"PROMOTION_ID\" />\n"
            + "        <AggForeignKey factColumn=\"store_id\" aggColumn=\"STORE_ID\" />\n"
            + "        <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"UNIT_SALES_SUM\" />\n"
            + "        <AggMeasure name=\"[Measures].[Store Cost]\" column=\"STORE_COST_SUM\" />\n"
            + "        <AggMeasure name=\"[Measures].[Store Sales]\" column=\"STORE_SALES_SUM\" />\n"
            + "        <AggLevel name=\"[Time].[Year]\" column=\"TIME_YEAR\" />\n"
            + "        <AggLevel name=\"[Time].[Quarter]\" column=\"TIME_QUARTER\" />\n"
            + "        <AggLevel name=\"[Time].[Month]\" column=\"TIME_MONTH\" />\n"
            + "      </AggName>\n"
            + "    </Table>\n"
            + "    <DimensionUsage name=\"Store\" source=\"Store\" foreignKey=\"store_id\"/>\n"
            + "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
            + "    <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "    <Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n"
            + "    <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n"
            + "  </Cube>\n"
            + "  <Cube name=\"Sales2\" defaultMeasure=\"Unit Sales\">\n"
            + "    <Table name=\"sales_fact_1997\">\n"
            + "      <AggName name=\"agg_c_special_sales_fact_1997\">\n"
            + "        <AggFactCount column=\"FACT_COUNT\"/>\n"
            + "        <AggIgnoreColumn column=\"foo\"/>\n"
            + "        <AggIgnoreColumn column=\"bar\"/>\n"
            + "        <AggIgnoreColumn column=\"PRODUCT_ID\" />\n"
            + "        <AggIgnoreColumn column=\"CUSTOMER_ID\" />\n"
            + "        <AggIgnoreColumn column=\"PROMOTION_ID\" />\n"
            + "        <AggForeignKey factColumn=\"store_id\" aggColumn=\"STORE_ID\" />\n"
            + "        <AggMeasure name=\"[Measures].[Unit Sales]\" column=\"UNIT_SALES_SUM\" />\n"
            + "        <AggMeasure name=\"[Measures].[Store Cost]\" column=\"STORE_COST_SUM\" />\n"
            + "        <AggMeasure name=\"[Measures].[Store Sales]\" column=\"STORE_SALES_SUM\" />\n"
            + "        <AggLevel name=\"[Time].[Year]\" column=\"TIME_YEAR\" />\n"
            + "        <AggLevel name=\"[Time].[Quarter]\" column=\"TIME_QUARTER\" />\n"
            + "        <AggLevel name=\"[Time].[Month]\" column=\"TIME_MONTH\" />\n"
            + "      </AggName>\n"
            + "    </Table>\n"
            + "    <DimensionUsage name=\"Store\" source=\"Store\" foreignKey=\"store_id\"/>\n"
            + "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
            + "    <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "    <Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n"
            + "    <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n"
            + "  </Cube>\n"
            + "  <VirtualCube name=\"SuperSales\" defaultMeasure=\"Unit Sales\">\n"
            + "    <VirtualCubeDimension cubeName=\"Sales1\" name=\"Store\"/>\n"
            + " <VirtualCubeDimension cubeName=\"Sales1\" name=\"Time\"/>\n"
            + "    <VirtualCubeMeasure cubeName=\"Sales2\" name=\"[Measures].[Unit Sales]\"/>\n"
            + " <VirtualCubeMeasure cubeName=\"Sales2\" name=\"[Measures].[Store Cost]\"/>\n"
            + " <VirtualCubeMeasure cubeName=\"Sales2\" name=\"[Measures].[Store Sales]\"/>\n"
            + "  </VirtualCube>\n"
            + "</Schema>\n";

         */
    	private static final PhysicalColumn foo = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
    	private static final PhysicalColumn bar = RolapMappingFactory.eINSTANCE.createPhysicalColumn();

    	private static TableQuery t;
    	private static StandardDimension storeDimension;
    	private static TimeDimension timeDimension;

        public TestAggregationManagerModifier9(CatalogMapping catalog) {
            super(catalog);
            foo.setName("foo");
            foo.setType(ColumnType.INTEGER);
            bar.setName("bar");
            bar.setType(ColumnType.INTEGER);

            // Initialize table with aggregations
            t = RolapMappingFactory.eINSTANCE.createTableQuery();
            t.setTable(CatalogSupplier.TABLE_SALES_FACT);

            AggregationName aggName = RolapMappingFactory.eINSTANCE.createAggregationName();
            aggName.setName(CatalogSupplier.TABLE_AGG_C_SPECIAL_SALES_FACT_1997);

            AggregationColumnName factCount = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
            factCount.setColumn(CatalogSupplier.COLUMN_FACT_COUNT_AGG_C_SPECIAL_SALES_FACT_1997);
            aggName.setAggregationFactCount(factCount);

            // Ignore columns
            AggregationColumnName ignoreColFoo = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
            ignoreColFoo.setColumn(foo);
            aggName.getAggregationIgnoreColumns().add(ignoreColFoo);

            AggregationColumnName ignoreColBar = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
            ignoreColBar.setColumn(bar);
            aggName.getAggregationIgnoreColumns().add(ignoreColBar);

            AggregationColumnName ignoreColProduct = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
            ignoreColProduct.setColumn(CatalogSupplier.COLUMN_PRODUCT_ID_AGG_C_SPECIAL_SALES_FACT_1997);
            aggName.getAggregationIgnoreColumns().add(ignoreColProduct);

            AggregationColumnName ignoreColCustomer = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
            ignoreColCustomer.setColumn(CatalogSupplier.COLUMN_CUSTOMER_ID_AGG_C_SPECIAL_SALES_FACT_1997);
            aggName.getAggregationIgnoreColumns().add(ignoreColCustomer);

            AggregationColumnName ignoreColPromotion = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
            ignoreColPromotion.setColumn(CatalogSupplier.COLUMN_PROMOTION_ID_AGG_C_SPECIAL_SALES_FACT_1997);
            aggName.getAggregationIgnoreColumns().add(ignoreColPromotion);

            // Foreign key
            AggregationForeignKey aggFk = RolapMappingFactory.eINSTANCE.createAggregationForeignKey();
            aggFk.setFactColumn(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
            aggFk.setAggregationColumn(CatalogSupplier.COLUMN_STORE_ID_AGG_C_SPECIAL_SALES_FACT_1997);
            aggName.getAggregationForeignKeys().add(aggFk);

            // Measures
            AggregationMeasure aggMeasureUnitSales = RolapMappingFactory.eINSTANCE.createAggregationMeasure();
            aggMeasureUnitSales.setName("[Measures].[Unit Sales]");
            aggMeasureUnitSales.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SUM_AGG_C_SPECIAL_SALES_FACT_1997);
            aggName.getAggregationMeasures().add(aggMeasureUnitSales);

            AggregationMeasure aggMeasureStoreCost = RolapMappingFactory.eINSTANCE.createAggregationMeasure();
            aggMeasureStoreCost.setName("[Measures].[Store Cost]");
            aggMeasureStoreCost.setColumn(CatalogSupplier.COLUMN_STORE_COST_SUM_AGG_C_SPECIAL_SALES_FACT_1997);
            aggName.getAggregationMeasures().add(aggMeasureStoreCost);

            AggregationMeasure aggMeasureStoreSales = RolapMappingFactory.eINSTANCE.createAggregationMeasure();
            aggMeasureStoreSales.setName("[Measures].[Store Sales]");
            aggMeasureStoreSales.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SUM_AGG_C_SPECIAL_SALES_FACT_1997);
            aggName.getAggregationMeasures().add(aggMeasureStoreSales);

            // Levels
            AggregationLevel aggLevelYear = RolapMappingFactory.eINSTANCE.createAggregationLevel();
            aggLevelYear.setName("[Time].[Time].[Year]");
            aggLevelYear.setColumn(CatalogSupplier.COLUMN_TIME_YEAR_AGG_C_SPECIAL_SALES_FACT_1997);
            aggName.getAggregationLevels().add(aggLevelYear);

            AggregationLevel aggLevelQuarter = RolapMappingFactory.eINSTANCE.createAggregationLevel();
            aggLevelQuarter.setName("[Time].[Time].[Quarter]");
            aggLevelQuarter.setColumn(CatalogSupplier.COLUMN_TIME_QUARTER_AGG_C_SPECIAL_SALES_FACT_1997);
            aggName.getAggregationLevels().add(aggLevelQuarter);

            AggregationLevel aggLevelMonth = RolapMappingFactory.eINSTANCE.createAggregationLevel();
            aggLevelMonth.setName("[Time].[Time].[Month]");
            aggLevelMonth.setColumn(CatalogSupplier.COLUMN_TIME_MONTH_AGG_C_SPECIAL_SALES_FACT_1997);
            aggName.getAggregationLevels().add(aggLevelMonth);

            t.getAggregationTables().add(aggName);

            // Store dimension
            storeDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            storeDimension.setName("Store");

            ExplicitHierarchy storeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            storeHierarchy.setHasAll(true);
            storeHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);

            TableQuery storeTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            storeTable.setTable(CatalogSupplier.TABLE_STORE);
            storeHierarchy.setQuery(storeTable);

            Level levelStoreCountry = RolapMappingFactory.eINSTANCE.createLevel();
            levelStoreCountry.setName("Store Country");
            levelStoreCountry.setColumn(CatalogSupplier.COLUMN_STORE_COUNTRY_STORE);
            levelStoreCountry.setUniqueMembers(true);
            storeHierarchy.getLevels().add(levelStoreCountry);

            Level levelStoreState = RolapMappingFactory.eINSTANCE.createLevel();
            levelStoreState.setName("Store State");
            levelStoreState.setColumn(CatalogSupplier.COLUMN_STORE_STATE_STORE);
            levelStoreState.setUniqueMembers(true);
            storeHierarchy.getLevels().add(levelStoreState);

            Level levelStoreCity = RolapMappingFactory.eINSTANCE.createLevel();
            levelStoreCity.setName("Store City");
            levelStoreCity.setColumn(CatalogSupplier.COLUMN_STORE_CITY_STORE);
            levelStoreCity.setUniqueMembers(false);
            storeHierarchy.getLevels().add(levelStoreCity);

            Level levelStoreName = RolapMappingFactory.eINSTANCE.createLevel();
            levelStoreName.setName("Store Name");
            levelStoreName.setColumn(CatalogSupplier.COLUMN_STORE_NAME_STORE);
            levelStoreName.setUniqueMembers(true);
            storeHierarchy.getLevels().add(levelStoreName);

            storeDimension.getHierarchies().add(storeHierarchy);

            // Time dimension
            timeDimension = RolapMappingFactory.eINSTANCE.createTimeDimension();
            timeDimension.setName("Time");

            // First hierarchy (default)
            ExplicitHierarchy timeHierarchy1 = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            timeHierarchy1.setHasAll(false);
            timeHierarchy1.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);

            TableQuery timeTable1 = RolapMappingFactory.eINSTANCE.createTableQuery();
            timeTable1.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);
            timeHierarchy1.setQuery(timeTable1);

            Level levelYear1 = RolapMappingFactory.eINSTANCE.createLevel();
            levelYear1.setName("Year");
            levelYear1.setColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
            levelYear1.setColumnType(ColumnInternalDataType.NUMERIC);
            levelYear1.setUniqueMembers(true);
            levelYear1.setType(LevelDefinition.TIME_YEARS);
            timeHierarchy1.getLevels().add(levelYear1);

            Level levelQuarter1 = RolapMappingFactory.eINSTANCE.createLevel();
            levelQuarter1.setName("Quarter");
            levelQuarter1.setColumn(CatalogSupplier.COLUMN_QUARTER_TIME_BY_DAY);
            levelQuarter1.setUniqueMembers(false);
            levelQuarter1.setType(LevelDefinition.TIME_QUARTERS);
            timeHierarchy1.getLevels().add(levelQuarter1);

            Level levelMonth1 = RolapMappingFactory.eINSTANCE.createLevel();
            levelMonth1.setName("Month");
            levelMonth1.setColumn(CatalogSupplier.COLUMN_MONTH_OF_YEAR_TIME_BY_DAY);
            levelMonth1.setUniqueMembers(false);
            levelMonth1.setColumnType(ColumnInternalDataType.NUMERIC);
            levelMonth1.setType(LevelDefinition.TIME_MONTHS);
            timeHierarchy1.getLevels().add(levelMonth1);

            timeDimension.getHierarchies().add(timeHierarchy1);

            // Second hierarchy (Weekly)
            ExplicitHierarchy timeHierarchy2 = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            timeHierarchy2.setHasAll(true);
            timeHierarchy2.setName("Weekly");
            timeHierarchy2.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);

            TableQuery timeTable2 = RolapMappingFactory.eINSTANCE.createTableQuery();
            timeTable2.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);
            timeHierarchy2.setQuery(timeTable2);

            Level levelYear2 = RolapMappingFactory.eINSTANCE.createLevel();
            levelYear2.setName("Year");
            levelYear2.setColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
            levelYear2.setColumnType(ColumnInternalDataType.NUMERIC);
            levelYear2.setUniqueMembers(true);
            levelYear2.setType(LevelDefinition.TIME_YEARS);
            timeHierarchy2.getLevels().add(levelYear2);

            Level levelWeek = RolapMappingFactory.eINSTANCE.createLevel();
            levelWeek.setName("Week");
            levelWeek.setColumn(CatalogSupplier.COLUMN_WEEK_OF_YEAR_TIME_BY_DAY);
            levelWeek.setUniqueMembers(false);
            levelWeek.setColumnType(ColumnInternalDataType.NUMERIC);
            levelWeek.setType(LevelDefinition.TIME_WEEKS);
            timeHierarchy2.getLevels().add(levelWeek);

            Level levelDay = RolapMappingFactory.eINSTANCE.createLevel();
            levelDay.setName("Day");
            levelDay.setColumn(CatalogSupplier.COLUMN_DAY_OF_MONTH_TIME_BY_DAY);
            levelDay.setUniqueMembers(false);
            levelDay.setColumnType(ColumnInternalDataType.NUMERIC);
            levelDay.setType(LevelDefinition.TIME_DAYS);
            timeHierarchy2.getLevels().add(levelDay);

            timeDimension.getHierarchies().add(timeHierarchy2);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
        	MeasureGroup mgSales1 = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        	SumMeasure mUnitSalesSales1 = RolapMappingFactory.eINSTANCE.createSumMeasure();
        	mUnitSalesSales1.setName("Unit Sales");
        	mUnitSalesSales1.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
        	mUnitSalesSales1.setFormatString("Standard");
        	mUnitSalesSales1.setMeasureGroup(mgSales1);

        	SumMeasure mStoreCostSales1 = RolapMappingFactory.eINSTANCE.createSumMeasure();
        	mStoreCostSales1.setName("Store Cost");
        	mStoreCostSales1.setColumn(CatalogSupplier.COLUMN_STORE_COST_SALESFACT);
        	mStoreCostSales1.setFormatString("#,###.00");
        	mStoreCostSales1.setMeasureGroup(mgSales1);

        	SumMeasure mStoreSalesSales1 = RolapMappingFactory.eINSTANCE.createSumMeasure();
        	mStoreSalesSales1.setName("Store Sales");
        	mStoreSalesSales1.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);
        	mStoreSalesSales1.setFormatString("#,###.00");
        	mStoreSalesSales1.setMeasureGroup(mgSales1);

        	mgSales1.getMeasures().add(mUnitSalesSales1);
        	mgSales1.getMeasures().add(mStoreCostSales1);
        	mgSales1.getMeasures().add(mStoreSalesSales1);

        	MeasureGroup mgSales2 = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        	SumMeasure mUnitSalesSales2 = RolapMappingFactory.eINSTANCE.createSumMeasure();
        	mUnitSalesSales2.setName("Unit Sales");
        	mUnitSalesSales2.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
        	mUnitSalesSales2.setFormatString("Standard");
        	mUnitSalesSales2.setMeasureGroup(mgSales2);

        	SumMeasure mStoreCostSales2 = RolapMappingFactory.eINSTANCE.createSumMeasure();
        	mStoreCostSales2.setName("Store Cost");
        	mStoreCostSales2.setColumn(CatalogSupplier.COLUMN_STORE_COST_SALESFACT);
        	mStoreCostSales2.setFormatString("#,###.00");
        	mStoreCostSales2.setMeasureGroup(mgSales2);

        	SumMeasure mStoreSalesSales2 = RolapMappingFactory.eINSTANCE.createSumMeasure();
        	mStoreSalesSales2.setName("Store Sales");
        	mStoreSalesSales2.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);
        	mStoreSalesSales2.setFormatString("#,###.00");
        	mStoreSalesSales2.setMeasureGroup(mgSales2);

        	mgSales2.getMeasures().add(mUnitSalesSales2);
        	mgSales2.getMeasures().add(mStoreCostSales2);
        	mgSales2.getMeasures().add(mStoreSalesSales2);

        	PhysicalCube cubeSales1 = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        	cubeSales1.setName("Sales1");
        	cubeSales1.setDefaultMeasure(mUnitSalesSales1);
        	cubeSales1.setQuery(t);

        	DimensionConnector dcStore1 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        	dcStore1.setOverrideDimensionName("Store");
        	dcStore1.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
        	dcStore1.setDimension(storeDimension);
        	cubeSales1.getDimensionConnectors().add(dcStore1);

        	DimensionConnector dcTime1 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        	dcTime1.setOverrideDimensionName("Time");
        	dcTime1.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
        	dcTime1.setDimension(timeDimension);
        	cubeSales1.getDimensionConnectors().add(dcTime1);

        	cubeSales1.getMeasureGroups().add(mgSales1);
        	mgSales1.setPhysicalCube(cubeSales1);

        	PhysicalCube cubeSales2 = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        	cubeSales2.setName("Sales2");
        	cubeSales2.setDefaultMeasure(mUnitSalesSales2);
        	cubeSales2.setQuery(t);

        	DimensionConnector dcStore2 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        	dcStore2.setOverrideDimensionName("Store");
        	dcStore2.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
        	dcStore2.setDimension(storeDimension);
        	cubeSales2.getDimensionConnectors().add(dcStore2);

        	DimensionConnector dcTime2 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        	dcTime2.setOverrideDimensionName("Time");
        	dcTime2.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
        	dcTime2.setDimension(timeDimension);
        	cubeSales2.getDimensionConnectors().add(dcTime2);

        	cubeSales2.getMeasureGroups().add(mgSales2);
        	mgSales2.setPhysicalCube(cubeSales2);

        	VirtualCube vcSuperSales = RolapMappingFactory.eINSTANCE.createVirtualCube();
        	vcSuperSales.setName("SuperSales");
        	vcSuperSales.setDefaultMeasure(mUnitSalesSales2);

        	DimensionConnector ccStore = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        	ccStore.setPhysicalCube(cubeSales1);
        	ccStore.setOverrideDimensionName("Store");
        	ccStore.setDimension(storeDimension);
        	vcSuperSales.getDimensionConnectors().add(ccStore);

        	DimensionConnector ccTime = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        	ccTime.setPhysicalCube(cubeSales1);
        	ccTime.setOverrideDimensionName("Time");
        	ccTime.setDimension(timeDimension);
        	vcSuperSales.getDimensionConnectors().add(ccTime);

        	vcSuperSales.getReferencedMeasures().add(mUnitSalesSales2);
        	vcSuperSales.getReferencedMeasures().add(mStoreCostSales2);
        	vcSuperSales.getReferencedMeasures().add(mStoreSalesSales2);

            Catalog newCatalog = RolapMappingFactory.eINSTANCE.createCatalog();
            newCatalog.setName("custom");
            newCatalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            newCatalog.getCubes().add(cubeSales1);
            newCatalog.getCubes().add(cubeSales2);
            newCatalog.getCubes().add(vcSuperSales);

            return newCatalog;
        }
    }

    public static class TestCalculatedMembers1 extends EmfMappingModifier {

        /*
        final String cubeName = "Sales_Bug1410383";
                "<Cube name=\"" + cubeName + "\">\n"
                + "  <Table name=\"sales_fact_1997\"/>\n"
                + "  <Dimension name=\"Gender\" foreignKey=\"customer_id\">\n"
                + "    <Hierarchy hasAll=\"false\" primaryKey=\"customer_id\">\n"
                + "    <Table name=\"customer\"/>\n"
                + "      <Level name=\"Gender\" column=\"gender\" uniqueMembers=\"true\"/>\n"
                + "    </Hierarchy>\n"
                + "  </Dimension>\n"
                + "  <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
                + "      formatString=\"Standard\" visible=\"false\"/>\n"
                + "  <Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\"\n"
                + "      formatString=\"Standard\" visible=\"false\"/>\n"
                + "  <CalculatedMember\n"
                + "      name=\"Apos in dq\"\n"
                + "      dimension=\"Measures\"\n"
                + "      visible=\"false\"\n"
                + "      formula=\" &quot;an 'apos' in dq&quot; \" />\n"
                + "  <CalculatedMember\n"
                + "      name=\"Dq in dq\"\n"
                + "      dimension=\"Measures\"\n"
                + "      visible=\"false\"\n"
                + "      formula=\" &quot;a &quot;&quot;dq&quot;&quot; in dq&quot; \" />\n"
                + "  <CalculatedMember\n"
                + "      name=\"Apos in apos\"\n"
                + "      dimension=\"Measures\"\n"
                + "      visible=\"false\"\n"
                + "      formula=\" &apos;an &apos;&apos;apos&apos;&apos; in apos&apos; \" />\n"
                + "  <CalculatedMember\n"
                + "      name=\"Dq in apos\"\n"
                + "      dimension=\"Measures\"\n"
                + "      visible=\"false\"\n"
                + "      formula=\" &apos;a &quot;dq&quot; in apos&apos; \" />\n"
                + "  <CalculatedMember\n"
                + "      name=\"Colored Profit\"\n"
                + "      dimension=\"Measures\"\n"
                + "      visible=\"false\"\n"
                + "      formula=\" [Measures].[Store Sales] - [Measures].[Store Cost] \">\n"
                + "    <CalculatedMemberProperty name=\"FORMAT_STRING\" expression=\"Iif([Measures].[Colored Profit] &lt; 0, '|($#,##0.00)|style=red', '|$#,##0.00|style=green')\"/>\n"
                + "  </CalculatedMember>\n"
                + "</Cube>";

         */

        private static final StandardDimension genderDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy genderHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level levelGender = RolapMappingFactory.eINSTANCE.createLevel();

        private static final SumMeasure measureStoreSales = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final SumMeasure measureStoreCost = RolapMappingFactory.eINSTANCE.createSumMeasure();

        private static final TableQuery querySalesCube = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final TableQuery queryCustomer = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final PhysicalCube salesBugCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final DimensionConnector dimensionConnectorGender = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        private static final CalculatedMember calcMemberAposInDq = RolapMappingFactory.eINSTANCE.createCalculatedMember();
        private static final CalculatedMember calcMemberDqInDq = RolapMappingFactory.eINSTANCE.createCalculatedMember();
        private static final CalculatedMember calcMemberAposInApos = RolapMappingFactory.eINSTANCE.createCalculatedMember();
        private static final CalculatedMember calcMemberDqInApos = RolapMappingFactory.eINSTANCE.createCalculatedMember();
        private static final CalculatedMember calcMemberColoredProfit = RolapMappingFactory.eINSTANCE.createCalculatedMember();
        private static final CalculatedMemberProperty propFormatString = RolapMappingFactory.eINSTANCE.createCalculatedMemberProperty();

        static {
            levelGender.setName("Gender");
            levelGender.setColumn(CatalogSupplier.COLUMN_GENDER_CUSTOMER);
            levelGender.setUniqueMembers(true);

            queryCustomer.setTable(CatalogSupplier.TABLE_CUSTOMER);

            genderHierarchy.setHasAll(false);
            genderHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);
            genderHierarchy.setQuery(queryCustomer);
            genderHierarchy.getLevels().add(levelGender);

            genderDimension.setName("Gender");
            genderDimension.getHierarchies().add(genderHierarchy);

            measureStoreSales.setName("Store Sales");
            measureStoreSales.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);
            measureStoreSales.setFormatString("Standard");
            measureStoreSales.setVisible(false);

            measureStoreCost.setName("Store Cost");
            measureStoreCost.setColumn(CatalogSupplier.COLUMN_STORE_COST_SALESFACT);
            measureStoreCost.setFormatString("Standard");
            measureStoreCost.setVisible(false);

            measureGroup.getMeasures().add(measureStoreSales);
            measureGroup.getMeasures().add(measureStoreCost);

            calcMemberAposInDq.setName("Apos in dq");
            calcMemberAposInDq.setVisible(false);
            calcMemberAposInDq.setFormula(" \"an 'apos' in dq\" ");

            calcMemberDqInDq.setName("Dq in dq");
            calcMemberDqInDq.setVisible(false);
            calcMemberDqInDq.setFormula(" \"a \"\"dq\"\" in dq\" ");

            calcMemberAposInApos.setName("Apos in apos");
            calcMemberAposInApos.setVisible(false);
            calcMemberAposInApos.setFormula(" 'an ''apos'' in apos' ");

            calcMemberDqInApos.setName("Dq in apos");
            calcMemberDqInApos.setVisible(false);
            calcMemberDqInApos.setFormula(" 'a \"dq\" in apos' ");

            propFormatString.setName("FORMAT_STRING");
            propFormatString.setExpression("Iif([Measures].[Colored Profit] < 0, '|($#,##0.00)|style=red', '|$#,##0.00|style=green')");

            calcMemberColoredProfit.setName("Colored Profit");
            calcMemberColoredProfit.setVisible(false);
            calcMemberColoredProfit.setFormula(" [Measures].[Store Sales] - [Measures].[Store Cost] ");
            calcMemberColoredProfit.getCalculatedMemberProperties().add(propFormatString);

            querySalesCube.setTable(CatalogSupplier.TABLE_SALES_FACT);

            dimensionConnectorGender.setOverrideDimensionName("Gender");
            dimensionConnectorGender.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
            dimensionConnectorGender.setDimension(genderDimension);

            salesBugCube.setName("Sales_Bug1410383");
            salesBugCube.setQuery(querySalesCube);
            salesBugCube.getDimensionConnectors().add(dimensionConnectorGender);
            salesBugCube.getMeasureGroups().add(measureGroup);
            salesBugCube.getCalculatedMembers().add(calcMemberAposInDq);
            salesBugCube.getCalculatedMembers().add(calcMemberDqInDq);
            salesBugCube.getCalculatedMembers().add(calcMemberAposInApos);
            salesBugCube.getCalculatedMembers().add(calcMemberDqInApos);
            salesBugCube.getCalculatedMembers().add(calcMemberColoredProfit);
        }

        public TestCalculatedMembers1(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName("custom");
            catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().add(salesBugCube);
            return catalog;
        }
    }

    public static class TestCalculatedMembers2 extends EmfMappingModifier {

        /*
            "<Cube name=\"Store5\"> \n"
            + "  <Table name=\"store\"/> \n"
            + "  <!-- We could have used the shared dimension \"Store Type\", but we \n"
            + "     want to test private dimensions without primary key. --> \n"
            + "  <Dimension name=\"Store Type\"> \n"
            + "    <Hierarchy name=\"Store Types Hierarchy\" allMemberName=\"All Store Types Member Name\" hasAll=\"true\"> \n"
            + "      <Level name=\"Store Type\" column=\"store_type\" uniqueMembers=\"true\"/> \n"
            + "    </Hierarchy> \n"
            + "  </Dimension> \n"
            + "\n"
            + "  <Dimension name=\"Country\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"customer_id\">\n"
            + "      <Level name=\"Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "\n"
            + "  <Measure name=\"Store Sqft\" column=\"store_sqft\" aggregator=\"sum\" \n"
            + "      formatString=\"#,###\"/> \n"
            + "  <Measure name=\"Grocery Sqft\" column=\"grocery_sqft\" aggregator=\"sum\" \n"
            + "      formatString=\"#,###\" description=\"Grocery Sqft Description...\"> \n"
            + "    <Annotations> \n"
            + "        <Annotation name=\"AnalyzerBusinessGroup\">Numbers</Annotation> \n"
            + "    </Annotations> \n"
            + "  </Measure> \n"
            + "  <CalculatedMember \n"
            + "      name=\"Constant 1\" description=\"Constant 1 Description...\" \n"
            + "      dimension=\"Measures\"> \n"
            + "    <Annotations> \n"
            + "        <Annotation name=\"AnalyzerBusinessGroup\">Numbers</Annotation> \n"
            + "    </Annotations> \n"
            + "    <Formula>1</Formula> \n"
            + "  </CalculatedMember> \n"
            + "</Cube> ",


         */

        private static final StandardDimension storeTypeDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy storeTypeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level levelStoreType = RolapMappingFactory.eINSTANCE.createLevel();

        private static final StandardDimension countryDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy countryHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level levelCountry = RolapMappingFactory.eINSTANCE.createLevel();

        private static final SumMeasure measureStoreSqft = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final SumMeasure measureGrocerySqft = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final Annotation annotationGrocery = RolapMappingFactory.eINSTANCE.createAnnotation();

        private static final CalculatedMember calcMemberConstant1 = RolapMappingFactory.eINSTANCE.createCalculatedMember();
        private static final Annotation annotationCalcMember = RolapMappingFactory.eINSTANCE.createAnnotation();

        private static final TableQuery queryStore = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final PhysicalCube store5Cube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final DimensionConnector dimensionConnectorStoreType = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector dimensionConnectorCountry = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        static {
            levelStoreType.setName("Store Type");
            levelStoreType.setColumn(CatalogSupplier.COLUMN_STORE_TYPE_STORE);
            levelStoreType.setUniqueMembers(true);

            storeTypeHierarchy.setName("Store Types Hierarchy");
            storeTypeHierarchy.setAllMemberName("All Store Types Member Name");
            storeTypeHierarchy.setHasAll(true);
            storeTypeHierarchy.getLevels().add(levelStoreType);

            storeTypeDimension.setName("Store Type");
            storeTypeDimension.getHierarchies().add(storeTypeHierarchy);

            levelCountry.setName("Country");
            levelCountry.setColumn(CatalogSupplier.COLUMN_STORE_COUNTRY_STORE);
            levelCountry.setUniqueMembers(true);

            countryHierarchy.setHasAll(true);
            countryHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);
            countryHierarchy.getLevels().add(levelCountry);

            countryDimension.setName("Country");
            countryDimension.getHierarchies().add(countryHierarchy);

            measureStoreSqft.setName("Store Sqft");
            measureStoreSqft.setColumn(CatalogSupplier.COLUMN_STORE_SQFT_STORE);
            measureStoreSqft.setFormatString("#,###");

            annotationGrocery.setName("AnalyzerBusinessGroup");
            annotationGrocery.setValue("Numbers");

            measureGrocerySqft.setName("Grocery Sqft");
            measureGrocerySqft.setColumn(CatalogSupplier.COLUMN_GROCERY_SQFT_STORE);
            measureGrocerySqft.setFormatString("#,###");
            measureGrocerySqft.setDescription("Grocery Sqft Description...");
            measureGrocerySqft.getAnnotations().add(annotationGrocery);

            measureGroup.getMeasures().add(measureStoreSqft);
            measureGroup.getMeasures().add(measureGrocerySqft);

            annotationCalcMember.setName("AnalyzerBusinessGroup");
            annotationCalcMember.setValue("Numbers");

            calcMemberConstant1.setName("Constant 1");
            calcMemberConstant1.setDescription("Constant 1 Description...");
            calcMemberConstant1.setFormula("1");
            calcMemberConstant1.getAnnotations().add(annotationCalcMember);

            queryStore.setTable(CatalogSupplier.TABLE_STORE);

            dimensionConnectorStoreType.setOverrideDimensionName("Store Type");
            dimensionConnectorStoreType.setDimension(storeTypeDimension);

            dimensionConnectorCountry.setOverrideDimensionName("Country");
            dimensionConnectorCountry.setDimension(countryDimension);

            store5Cube.setName("Store5");
            store5Cube.setQuery(queryStore);
            store5Cube.getDimensionConnectors().add(dimensionConnectorStoreType);
            store5Cube.getDimensionConnectors().add(dimensionConnectorCountry);
            store5Cube.getMeasureGroups().add(measureGroup);
            store5Cube.getCalculatedMembers().add(calcMemberConstant1);
        }

        public TestCalculatedMembers2(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName("custom");
            catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().add(store5Cube);
            return catalog;
        }
    }

    public static class TestCalculatedMembers3 extends EmfMappingModifier {

        /*
        final String cubeName = "Sales_BracketInCubeCalcMemberName";
        String s =
            "<Cube name=\"" + cubeName + "\">\n"
            + "  <Table name=\"sales_fact_1997\"/>\n"
            + "  <Dimension name=\"Gender\" foreignKey=\"customer_id\">\n"
            + "    <Hierarchy hasAll=\"false\" primaryKey=\"customer_id\">\n"
            + "    <Table name=\"customer\"/>\n"
            + "      <Level name=\"Gender\" column=\"gender\" uniqueMembers=\"true\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\" visible=\"false\"/>\n"
            + "  <CalculatedMember\n"
            + "      name=\"With a [bracket] inside it\"\n"
            + "      dimension=\"Measures\"\n"
            + "      visible=\"false\"\n"
            + "      formula=\"[Measures].[Unit Sales] * 10\">\n"
            + "    <CalculatedMemberProperty name=\"FORMAT_STRING\" value=\"$#,##0.00\"/>\n"
            + "  </CalculatedMember>\n"
            + "</Cube>";

         */

        private static final StandardDimension genderDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy genderHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level levelGender = RolapMappingFactory.eINSTANCE.createLevel();

        private static final SumMeasure measureUnitSales = RolapMappingFactory.eINSTANCE.createSumMeasure();

        private static final CalculatedMember calcMemberBracket = RolapMappingFactory.eINSTANCE.createCalculatedMember();
        private static final CalculatedMemberProperty propFormatString = RolapMappingFactory.eINSTANCE.createCalculatedMemberProperty();

        private static final TableQuery querySalesCube = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final TableQuery queryCustomer = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final PhysicalCube salesBracketCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final DimensionConnector dimensionConnectorGender = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        static {
            levelGender.setName("Gender");
            levelGender.setColumn(CatalogSupplier.COLUMN_GENDER_CUSTOMER);
            levelGender.setUniqueMembers(true);

            queryCustomer.setTable(CatalogSupplier.TABLE_CUSTOMER);

            genderHierarchy.setHasAll(false);
            genderHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);
            genderHierarchy.setQuery(queryCustomer);
            genderHierarchy.getLevels().add(levelGender);

            genderDimension.setName("Gender");
            genderDimension.getHierarchies().add(genderHierarchy);

            measureUnitSales.setName("Unit Sales");
            measureUnitSales.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            measureUnitSales.setFormatString("Standard");
            measureUnitSales.setVisible(false);

            measureGroup.getMeasures().add(measureUnitSales);

            propFormatString.setName("FORMAT_STRING");
            propFormatString.setValue("$#,##0.00");

            calcMemberBracket.setName("With a [bracket] inside it");
            calcMemberBracket.setVisible(false);
            calcMemberBracket.setFormula("[Measures].[Unit Sales] * 10");
            calcMemberBracket.getCalculatedMemberProperties().add(propFormatString);

            querySalesCube.setTable(CatalogSupplier.TABLE_SALES_FACT);

            dimensionConnectorGender.setOverrideDimensionName("Gender");
            dimensionConnectorGender.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
            dimensionConnectorGender.setDimension(genderDimension);

            salesBracketCube.setName("Sales_BracketInCubeCalcMemberName");
            salesBracketCube.setQuery(querySalesCube);
            salesBracketCube.getDimensionConnectors().add(dimensionConnectorGender);
            salesBracketCube.getMeasureGroups().add(measureGroup);
            salesBracketCube.getCalculatedMembers().add(calcMemberBracket);
        }

        public TestCalculatedMembers3(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName("custom");
            catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().add(salesBracketCube);
            return catalog;
        }
    }

    public static class CurrentDateMemberUdfTestModifier1 extends EmfMappingModifier {

        /*
            "<UserDefinedFunction name=\"MockCurrentDateMember\" "
            + "className=\"mondrian.udf.MockCurrentDateMember\" /> ",

            */

        public CurrentDateMemberUdfTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        /* TODO: UserDefinedFunction
        @Override
        protected List<MappingUserDefinedFunction> schemaUserDefinedFunctions(MappingSchema schema) {
            List<MappingUserDefinedFunction> result = new ArrayList<>();
            result.addAll(super.schemaUserDefinedFunctions(schema));
            result.add(UserDefinedFunctionRBuilder.builder()
                .name("MockCurrentDateMember")
                .className("mondrian.udf.MockCurrentDateMember")
                .build());
            return result;
        }
        */
    }

    public static class UsagePrefixTestModifier1 extends EmfMappingModifier {

        /*
            "<Schema name=\"usagePrefixTest\">"
            + "<Dimension name='StoreX' >\n"
            + " <Hierarchy hasAll='true' primaryKey='store_id'>\n"
            + " <Table name='store_x'/>\n"
            + " <Level name='Store Value' column='value' uniqueMembers='true'/>\n"
            + " </Hierarchy>\n"
            + "</Dimension>\n"
            + "<Dimension name='StoreY' >\n"
            + " <Hierarchy hasAll='true' primaryKey='store_id'>\n"
            + " <Table name='store_y'/>\n"
            + " <Level name='Store Value' column='value' uniqueMembers='true'/>\n"
            + " </Hierarchy>\n"
            + "</Dimension>\n"
            + "<Cube name='Cheques'>\n"
            + "<Table name='cheques'>\n"
            + "<AggName name='agg_lp_xxx_cheques'>\n"
            + "<AggFactCount column='FACT_COUNT'/>\n"

            + "<AggMeasure name='[Measures].[Amount]'\n"
            + "   column='amount' />\n"
            + "        <AggLevel name=\"[StoreX].[Store Value]\" column=\"value\" />"
            + "</AggName>\n"
            + "</Table>\n"

            + "<DimensionUsage name=\"StoreX\" source=\"StoreX\" foreignKey=\"store_id\" "
            + " usagePrefix=\"firstprefix_\" />"

            + "<DimensionUsage name=\"StoreY\" source=\"StoreY\" foreignKey=\"store_id\" "
            + " usagePrefix=\"secondprefix_\" />"

            + "<Measure name='Amount' \n"
            + "    column='amount' aggregator='sum'\n"
            + "   formatString='00.0'/>\n"
            + "</Cube>"
            + "</Schema>";

         */

        private static final Column storeIdX = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
        private static final Column valueX = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
        private static final PhysicalTable storeX = RolapMappingFactory.eINSTANCE.createPhysicalTable();

        private static final Column storeIdY = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
        private static final Column valueY = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
        private static final PhysicalTable storeY = RolapMappingFactory.eINSTANCE.createPhysicalTable();

        private static final StandardDimension dimensionStoreX = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy hierarchyStoreX = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level levelStoreX = RolapMappingFactory.eINSTANCE.createLevel();
        private static final TableQuery queryStoreX = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final StandardDimension dimensionStoreY = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy hierarchyStoreY = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level levelStoreY = RolapMappingFactory.eINSTANCE.createLevel();
        private static final TableQuery queryStoreY = RolapMappingFactory.eINSTANCE.createTableQuery();

        static {
            storeIdX.setName("store_id");
            storeIdX.setType(ColumnType.INTEGER);

            valueX.setName("value");
            valueX.setType(ColumnType.VARCHAR);
            valueX.setCharOctetLength(30);

            storeX.setName("store_x");
            storeX.getColumns().add(storeIdX);
            storeX.getColumns().add(valueX);

            queryStoreX.setTable(storeX);

            levelStoreX.setName("Store Value");
            levelStoreX.setColumn(valueX);
            levelStoreX.setUniqueMembers(true);

            hierarchyStoreX.setHasAll(true);
            hierarchyStoreX.setPrimaryKey(storeIdX);
            hierarchyStoreX.setQuery(queryStoreX);
            hierarchyStoreX.getLevels().add(levelStoreX);

            dimensionStoreX.setName("StoreX");
            dimensionStoreX.getHierarchies().add(hierarchyStoreX);

            storeIdY.setName("store_id");
            storeIdY.setType(ColumnType.INTEGER);

            valueY.setName("value");
            valueY.setType(ColumnType.VARCHAR);
            valueY.setCharOctetLength(30);

            storeY.setName("store_y");
            storeY.getColumns().add(storeIdY);
            storeY.getColumns().add(valueY);

            queryStoreY.setTable(storeY);

            levelStoreY.setName("Store Value");
            levelStoreY.setColumn(valueY);
            levelStoreY.setUniqueMembers(true);

            hierarchyStoreY.setHasAll(true);
            hierarchyStoreY.setPrimaryKey(storeIdY);
            hierarchyStoreY.setQuery(queryStoreY);
            hierarchyStoreY.getLevels().add(levelStoreY);

            dimensionStoreY.setName("StoreY");
            dimensionStoreY.getHierarchies().add(hierarchyStoreY);
        }

        public UsagePrefixTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Column storeIdCheques = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
            storeIdCheques.setName("store_id");
            storeIdCheques.setType(ColumnType.INTEGER);

            Column prodIdCheques = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
            prodIdCheques.setName("prod_id");
            prodIdCheques.setType(ColumnType.INTEGER);

            Column amountCheques = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
            amountCheques.setName("amount");
            amountCheques.setType(ColumnType.DECIMAL);
            amountCheques.setColumnSize(10);
            amountCheques.setDecimalDigits(2);

            PhysicalTable cheques = RolapMappingFactory.eINSTANCE.createPhysicalTable();
            cheques.setName("cheques");
            cheques.getColumns().add(storeIdCheques);
            cheques.getColumns().add(prodIdCheques);
            cheques.getColumns().add(amountCheques);

            Column firstprefixValueAgg = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
            firstprefixValueAgg.setName("firstprefix_value");
            firstprefixValueAgg.setType(ColumnType.VARCHAR);
            firstprefixValueAgg.setColumnSize(30);

            Column secondprefixValueAgg = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
            secondprefixValueAgg.setName("secondprefix_value");
            secondprefixValueAgg.setType(ColumnType.VARCHAR);
            secondprefixValueAgg.setColumnSize(30);

            Column amountAgg = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
            amountAgg.setName("amount");
            amountAgg.setType(ColumnType.DECIMAL);
            amountAgg.setColumnSize(10);
            amountAgg.setDecimalDigits(2);

            Column factCountAgg = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
            factCountAgg.setName("FACT_COUNT");
            factCountAgg.setType(ColumnType.INTEGER);

            PhysicalTable aggLp595Cheques = RolapMappingFactory.eINSTANCE.createPhysicalTable();
            aggLp595Cheques.setName("agg_lp_595_cheques");
            aggLp595Cheques.getColumns().add(firstprefixValueAgg);
            aggLp595Cheques.getColumns().add(secondprefixValueAgg);
            aggLp595Cheques.getColumns().add(amountAgg);
            aggLp595Cheques.getColumns().add(factCountAgg);

            AggregationColumnName aggFactCount = RolapMappingFactory.eINSTANCE.createAggregationColumnName();
            aggFactCount.setColumn(factCountAgg);

            AggregationMeasure aggMeasure = RolapMappingFactory.eINSTANCE.createAggregationMeasure();
            aggMeasure.setName("[Measures].[Amount]");
            aggMeasure.setColumn(amountAgg);

            AggregationLevel aggLevel = RolapMappingFactory.eINSTANCE.createAggregationLevel();
            aggLevel.setName("[StoreX].[Store Value]");
            aggLevel.setColumn(firstprefixValueAgg);

            AggregationName aggName = RolapMappingFactory.eINSTANCE.createAggregationName();
            aggName.setName(aggLp595Cheques);
            aggName.setAggregationFactCount(aggFactCount);
            aggName.getAggregationMeasures().add(aggMeasure);
            aggName.getAggregationLevels().add(aggLevel);

            TableQuery queryCheques = RolapMappingFactory.eINSTANCE.createTableQuery();
            queryCheques.setTable(cheques);
            queryCheques.getAggregationTables().add(aggName);

            SumMeasure measureAmount = RolapMappingFactory.eINSTANCE.createSumMeasure();
            measureAmount.setName("Amount");
            measureAmount.setColumn(amountCheques);
            measureAmount.setFormatString("00.0");

            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(measureAmount);

            DimensionConnector dcStoreX = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            dcStoreX.setOverrideDimensionName("StoreX");
            dcStoreX.setDimension(dimensionStoreX);
            dcStoreX.setForeignKey(storeIdCheques);
            dcStoreX.setUsagePrefix("firstprefix_");

            DimensionConnector dcStoreY = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            dcStoreY.setOverrideDimensionName("StoreY");
            dcStoreY.setDimension(dimensionStoreY);
            dcStoreY.setForeignKey(storeIdCheques);
            dcStoreY.setUsagePrefix("secondprefix_");

            PhysicalCube chequesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            chequesCube.setName("Cheques");
            chequesCube.setQuery(queryCheques);
            chequesCube.getDimensionConnectors().add(dcStoreX);
            chequesCube.getDimensionConnectors().add(dcStoreY);
            chequesCube.getMeasureGroups().add(measureGroup);

            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName("usagePrefixTest");
            catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().add(chequesCube);

            return catalog;
        }
    }

    public static class DrillThroughExcludeFilterTestModifier extends EmfMappingModifier {

        /*
    String schema = "<Schema name=\"MYFoodmart\">\n"
            + "  <Dimension visible=\"true\" highCardinality=\"false\" name=\"Store\">\n"
            + "    <Hierarchy visible=\"true\" hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "      <Table name=\"store\"/>\n"
            + "      <Level name=\"Store ID\" visible=\"true\" column=\"store_id\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension type=\"TimeDimension\" visible=\"true\" highCardinality=\"false\" name=\"Time\">\n"
            + "    <Hierarchy name=\"Time Hierarchy\" visible=\"true\" hasAll=\"true\" primaryKey=\"time_id\">\n"
            + "      <Table name=\"time_by_day\"/>\n"
            + "      <Level name=\"Year\" visible=\"true\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"false\" levelType=\"TimeYears\" hideMemberIf=\"Never\"/>\n"
            + "      <Level name=\"Quarter\" visible=\"true\" column=\"quarter\" type=\"String\" uniqueMembers=\"false\" levelType=\"TimeQuarters\" hideMemberIf=\"Never\"/>\n"
            + "      <Level name=\"Month\" visible=\"true\" column=\"month_of_year\" nameColumn=\"the_month\" type=\"Integer\" uniqueMembers=\"false\" levelType=\"TimeMonths\" hideMemberIf=\"Never\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension visible=\"true\" highCardinality=\"false\" name=\"Warehouse\">\n"
            + "    <Hierarchy name=\"Warehouse\" visible=\"true\" hasAll=\"true\" primaryKey=\"warehouse_id\">\n"
            + "      <Table name=\"warehouse\"/>\n"
            + "      <Level name=\"Warehouse Name\" visible=\"true\" column=\"warehouse_name\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Cube name=\"Sales\" visible=\"true\" defaultMeasure=\"Unit Sales\" cache=\"true\" enabled=\"true\">\n"
            + "    <Table name=\"sales_fact_1997\"/>\n"
            + "    <DimensionUsage source=\"Store\" name=\"Store\" visible=\"true\" foreignKey=\"store_id\" highCardinality=\"false\"/>\n"
            + "    <DimensionUsage source=\"Time\" name=\"Time\" visible=\"true\" foreignKey=\"time_id\" highCardinality=\"false\"/>\n"
            + "    <Measure name=\"Store Sales\" column=\"store_sales\" formatString=\"#,###.00\" aggregator=\"sum\"/>\n"
            + "  </Cube>\n"
            + "  <Cube name=\"Warehouse\" visible=\"true\" cache=\"true\" enabled=\"true\">\n"
            + "    <Table name=\"inventory_fact_1997\"/>\n"
            + "    <DimensionUsage source=\"Store\" name=\"Store\" visible=\"true\" foreignKey=\"store_id\" highCardinality=\"false\"/>\n"
            + "    <DimensionUsage source=\"Time\" name=\"Time\" visible=\"true\" foreignKey=\"time_id\" highCardinality=\"false\"/>\n"
            + "    <DimensionUsage source=\"Warehouse\" name=\"Warehouse\" visible=\"true\" foreignKey=\"warehouse_id\" highCardinality=\"false\"/>\n"
            + "    <Measure name=\"Warehouse Sales\" column=\"warehouse_sales\" aggregator=\"sum\"/>\n"
            + "  </Cube>\n"
            + "  <VirtualCube enabled=\"true\" name=\"Warehouse and Sales\" defaultMeasure=\"Store Sales\" visible=\"true\">\n"
            + "    <VirtualCubeDimension visible=\"true\" highCardinality=\"false\" name=\"Time\"/>\n"
            + "    <VirtualCubeMeasure cubeName=\"Sales\" name=\"[Measures].[Store Sales]\"/>\n"
            + "    <VirtualCubeMeasure cubeName=\"Warehouse\" name=\"[Measures].[Warehouse Sales]\"/>\n"
            + "  </VirtualCube>  \n"
            + "</Schema>\n";

         */

        private static final StandardDimension dimensionStore = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy hierarchyStore = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level levelStoreId = RolapMappingFactory.eINSTANCE.createLevel();
        private static final TableQuery queryStore = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final TimeDimension dimensionTime = RolapMappingFactory.eINSTANCE.createTimeDimension();
        private static final ExplicitHierarchy hierarchyTime = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level levelYear = RolapMappingFactory.eINSTANCE.createLevel();
        private static final Level levelQuarter = RolapMappingFactory.eINSTANCE.createLevel();
        private static final Level levelMonth = RolapMappingFactory.eINSTANCE.createLevel();
        private static final TableQuery queryTimeByDay = RolapMappingFactory.eINSTANCE.createTableQuery();

        private static final StandardDimension dimensionWarehouse = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy hierarchyWarehouse = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level levelWarehouseName = RolapMappingFactory.eINSTANCE.createLevel();
        private static final TableQuery queryWarehouse = RolapMappingFactory.eINSTANCE.createTableQuery();

        static {
            queryStore.setTable(CatalogSupplier.TABLE_STORE);

            levelStoreId.setName("Store ID");
            levelStoreId.setVisible(true);
            levelStoreId.setColumn(CatalogSupplier.COLUMN_STORE_ID_STORE);
            levelStoreId.setType(LevelDefinition.REGULAR);
            levelStoreId.setUniqueMembers(true);
            levelStoreId.setHideMemberIf(HideMemberIf.NEVER);

            hierarchyStore.setVisible(true);
            hierarchyStore.setHasAll(true);
            hierarchyStore.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);
            hierarchyStore.setQuery(queryStore);
            hierarchyStore.getLevels().add(levelStoreId);

            dimensionStore.setName("Store");
            dimensionStore.setVisible(true);
            dimensionStore.getHierarchies().add(hierarchyStore);

            queryTimeByDay.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);

            levelYear.setName("Year");
            levelYear.setVisible(true);
            levelYear.setColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
            levelYear.setType(LevelDefinition.TIME_YEARS);
            levelYear.setUniqueMembers(false);
            levelYear.setHideMemberIf(HideMemberIf.NEVER);

            levelQuarter.setName("Quarter");
            levelQuarter.setVisible(true);
            levelQuarter.setColumn(CatalogSupplier.COLUMN_QUARTER_TIME_BY_DAY);
            levelQuarter.setType(LevelDefinition.TIME_QUARTERS);
            levelQuarter.setUniqueMembers(false);
            levelQuarter.setHideMemberIf(HideMemberIf.NEVER);

            levelMonth.setName("Month");
            levelMonth.setVisible(true);
            levelMonth.setColumn(CatalogSupplier.COLUMN_MONTH_OF_YEAR_TIME_BY_DAY);
            levelMonth.setNameColumn(CatalogSupplier.COLUMN_THE_MONTH_TIME_BY_DAY);
            levelMonth.setType(LevelDefinition.TIME_MONTHS);
            levelMonth.setUniqueMembers(false);
            levelMonth.setHideMemberIf(HideMemberIf.NEVER);

            hierarchyTime.setName("Time Hierarchy");
            hierarchyTime.setVisible(true);
            hierarchyTime.setHasAll(true);
            hierarchyTime.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);
            hierarchyTime.setQuery(queryTimeByDay);
            hierarchyTime.getLevels().add(levelYear);
            hierarchyTime.getLevels().add(levelQuarter);
            hierarchyTime.getLevels().add(levelMonth);

            dimensionTime.setName("Time");
            dimensionTime.setVisible(true);
            dimensionTime.getHierarchies().add(hierarchyTime);

            queryWarehouse.setTable(CatalogSupplier.TABLE_WAREHOUSE);

            levelWarehouseName.setName("Warehouse Name");
            levelWarehouseName.setVisible(true);
            levelWarehouseName.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_NAME_WAREHOUSE);
            levelWarehouseName.setType(LevelDefinition.REGULAR);
            levelWarehouseName.setUniqueMembers(true);
            levelWarehouseName.setHideMemberIf(HideMemberIf.NEVER);

            hierarchyWarehouse.setName("Warehouse");
            hierarchyWarehouse.setVisible(true);
            hierarchyWarehouse.setHasAll(true);
            hierarchyWarehouse.setPrimaryKey(CatalogSupplier.COLUMN_WAREHOUSE_ID_WAREHOUSE);
            hierarchyWarehouse.setQuery(queryWarehouse);
            hierarchyWarehouse.getLevels().add(levelWarehouseName);

            dimensionWarehouse.setName("Warehouse");
            dimensionWarehouse.setVisible(true);
            dimensionWarehouse.getHierarchies().add(hierarchyWarehouse);
        }

        public DrillThroughExcludeFilterTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            MeasureGroup mgSales = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            MeasureGroup mgWarehouse = RolapMappingFactory.eINSTANCE.createMeasureGroup();

            SumMeasure mStoreSales = RolapMappingFactory.eINSTANCE.createSumMeasure();
            mStoreSales.setName("Store Sales");
            mStoreSales.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);
            mStoreSales.setFormatString("#,###.00");

            SumMeasure mWarehouseSales = RolapMappingFactory.eINSTANCE.createSumMeasure();
            mWarehouseSales.setName("Warehouse Sales");
            mWarehouseSales.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_SALES_INVENTORY_FACT);

            mgSales.getMeasures().add(mStoreSales);
            mgWarehouse.getMeasures().add(mWarehouseSales);

            TableQuery querySalesFact = RolapMappingFactory.eINSTANCE.createTableQuery();
            querySalesFact.setTable(CatalogSupplier.TABLE_SALES_FACT);

            DimensionConnector dcStoreInSales = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            dcStoreInSales.setOverrideDimensionName("Store");
            dcStoreInSales.setDimension(dimensionStore);
            dcStoreInSales.setVisible(true);
            dcStoreInSales.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);

            DimensionConnector dcTimeInSales = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            dcTimeInSales.setOverrideDimensionName("Time");
            dcTimeInSales.setDimension(dimensionTime);
            dcTimeInSales.setVisible(true);
            dcTimeInSales.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);

            PhysicalCube cubeSales = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            cubeSales.setName("Sales");
            cubeSales.setVisible(true);
            cubeSales.setCache(true);
            cubeSales.setEnabled(true);
            cubeSales.setQuery(querySalesFact);
            cubeSales.getDimensionConnectors().add(dcStoreInSales);
            cubeSales.getDimensionConnectors().add(dcTimeInSales);
            cubeSales.getMeasureGroups().add(mgSales);

            TableQuery queryInventoryFact = RolapMappingFactory.eINSTANCE.createTableQuery();
            queryInventoryFact.setTable(CatalogSupplier.TABLE_INVENTORY_FACT);

            DimensionConnector dcStoreInWarehouse = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            dcStoreInWarehouse.setOverrideDimensionName("Store");
            dcStoreInWarehouse.setDimension(dimensionStore);
            dcStoreInWarehouse.setVisible(true);
            dcStoreInWarehouse.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_INVENTORY_FACT);

            DimensionConnector dcTimeInWarehouse = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            dcTimeInWarehouse.setOverrideDimensionName("Time");
            dcTimeInWarehouse.setDimension(dimensionTime);
            dcTimeInWarehouse.setVisible(true);
            dcTimeInWarehouse.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_INVENTORY_FACT);

            DimensionConnector dcWarehouseInWarehouse = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            dcWarehouseInWarehouse.setOverrideDimensionName("Warehouse");
            dcWarehouseInWarehouse.setDimension(dimensionWarehouse);
            dcWarehouseInWarehouse.setVisible(true);
            dcWarehouseInWarehouse.setForeignKey(CatalogSupplier.COLUMN_WAREHOUSE_ID_INVENTORY_FACT);

            PhysicalCube cubeWarehouse = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            cubeWarehouse.setName("Warehouse");
            cubeWarehouse.setVisible(true);
            cubeWarehouse.setCache(true);
            cubeWarehouse.setEnabled(true);
            cubeWarehouse.setQuery(queryInventoryFact);
            cubeWarehouse.getDimensionConnectors().add(dcStoreInWarehouse);
            cubeWarehouse.getDimensionConnectors().add(dcTimeInWarehouse);
            cubeWarehouse.getDimensionConnectors().add(dcWarehouseInWarehouse);
            cubeWarehouse.getMeasureGroups().add(mgWarehouse);

            DimensionConnector dcTimeInVirtualCube = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            dcTimeInVirtualCube.setOverrideDimensionName("Time");
            dcTimeInVirtualCube.setDimension(dimensionTime);
            dcTimeInVirtualCube.setVisible(true);

            VirtualCube vcWarehouseAndSales = RolapMappingFactory.eINSTANCE.createVirtualCube();
            vcWarehouseAndSales.setEnabled(true);
            vcWarehouseAndSales.setName("Warehouse and Sales");
            vcWarehouseAndSales.setVisible(true);
            vcWarehouseAndSales.getDimensionConnectors().add(dcTimeInVirtualCube);
            vcWarehouseAndSales.getReferencedMeasures().add(mStoreSales);
            vcWarehouseAndSales.getReferencedMeasures().add(mWarehouseSales);

            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName("MYFoodmart");
            catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().add(cubeSales);
            catalog.getCubes().add(cubeWarehouse);
            catalog.getCubes().add(vcWarehouseAndSales);

            return catalog;
        }
    }

    public static class CompatibilityTestModifier extends EmfMappingModifier {

        /*
        final String cubeName = "Sales_inline";
        String schema = SchemaUtil.getSchema(
    		baseSchema,
            null,
            "<Cube name=\"" + cubeName + "\">\n"
            + "  <Table name=\"sales_fact_1997\"/>\n"
            + "  <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
            + "  <Dimension name=\"Alternative Promotion\" foreignKey=\"promotion_id\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"promo_id\">\n"
            + "      <InlineTable alias=\"alt_promotion\">\n"
            + "        <ColumnDefs>\n"
            + "          <ColumnDef name=\"promo_id\" type=\"Numeric\"/>\n"
            + "          <ColumnDef name=\"promo_name\" type=\"String\"/>\n"
            + "        </ColumnDefs>\n"
            + "        <Rows>\n"
            + "          <Row>\n"
            + "            <Value column=\"promo_id\">0</Value>\n"
            + "          </Row>\n"
            + "          <Row>\n"
            + "            <Value column=\"promo_id\">1</Value>\n"
            + "            <Value column=\"promo_name\">Promo1</Value>\n"
            + "          </Row>\n"
            + "        </Rows>\n"
            + "      </InlineTable>\n"
            + "      <Level name=\"Alternative Promotion\" column=\"promo_id\" nameColumn=\"promo_name\" uniqueMembers=\"true\"/> \n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\" visible=\"false\"/>\n"
            + "  <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n"
            + "</Cube>", null, null, null, null);
         */

        private static final Column promoId = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
        private static final Column promoName = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
        private static final InlineTable inlineTablePromotion = RolapMappingFactory.eINSTANCE.createInlineTable();
        private static final Row row1 = RolapMappingFactory.eINSTANCE.createRow();
        private static final Row row2 = RolapMappingFactory.eINSTANCE.createRow();
        private static final RowValue rowValue1 = RolapMappingFactory.eINSTANCE.createRowValue();
        private static final RowValue rowValue2PromoId = RolapMappingFactory.eINSTANCE.createRowValue();
        private static final RowValue rowValue2PromoName = RolapMappingFactory.eINSTANCE.createRowValue();

        private static final StandardDimension dimensionAlternativePromotion = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy hierarchyPromotion = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level levelPromotion = RolapMappingFactory.eINSTANCE.createLevel();
        private static final InlineTableQuery queryInlinePromotion = RolapMappingFactory.eINSTANCE.createInlineTableQuery();

        private static final SumMeasure measureUnitSales = RolapMappingFactory.eINSTANCE.createSumMeasure();
        private static final SumMeasure measureStoreSales = RolapMappingFactory.eINSTANCE.createSumMeasure();

        private static final TableQuery querySalesFact = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final PhysicalCube salesInlineCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final DimensionConnector dimensionConnectorTime = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final DimensionConnector dimensionConnectorPromotion = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        static {
            promoId.setName("promo_id");
            promoId.setType(ColumnType.NUMERIC);

            promoName.setName("promo_name");
            promoName.setType(ColumnType.VARCHAR);

            rowValue1.setColumn(promoId);
            rowValue1.setValue("0");

            row1.getRowValues().add(rowValue1);

            rowValue2PromoId.setColumn(promoId);
            rowValue2PromoId.setValue("1");

            rowValue2PromoName.setColumn(promoName);
            rowValue2PromoName.setValue("Promo1");

            row2.getRowValues().add(rowValue2PromoId);
            row2.getRowValues().add(rowValue2PromoName);

            inlineTablePromotion.setName("alt_promotion");
            inlineTablePromotion.getColumns().add(promoId);
            inlineTablePromotion.getColumns().add(promoName);
            inlineTablePromotion.getRows().add(row1);
            inlineTablePromotion.getRows().add(row2);

            queryInlinePromotion.setAlias("alt_promotion");
            queryInlinePromotion.setTable(inlineTablePromotion);

            levelPromotion.setName("Alternative Promotion");
            levelPromotion.setColumn(promoId);
            levelPromotion.setNameColumn(promoName);
            levelPromotion.setUniqueMembers(true);

            hierarchyPromotion.setHasAll(true);
            hierarchyPromotion.setPrimaryKey(promoId);
            hierarchyPromotion.setQuery(queryInlinePromotion);
            hierarchyPromotion.getLevels().add(levelPromotion);

            dimensionAlternativePromotion.setName("Alternative Promotion");
            dimensionAlternativePromotion.getHierarchies().add(hierarchyPromotion);

            measureUnitSales.setName("Unit Sales");
            measureUnitSales.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            measureUnitSales.setFormatString("Standard");
            measureUnitSales.setVisible(false);

            measureStoreSales.setName("Store Sales");
            measureStoreSales.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);
            measureStoreSales.setFormatString("#,###.00");

            measureGroup.getMeasures().add(measureUnitSales);
            measureGroup.getMeasures().add(measureStoreSales);

            querySalesFact.setTable(CatalogSupplier.TABLE_SALES_FACT);

            dimensionConnectorTime.setOverrideDimensionName("Time");
            dimensionConnectorTime.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);

            dimensionConnectorPromotion.setOverrideDimensionName("Alternative Promotion");
            dimensionConnectorPromotion.setForeignKey(CatalogSupplier.COLUMN_PROMOTION_ID_SALESFACT);
            dimensionConnectorPromotion.setDimension(dimensionAlternativePromotion);

            salesInlineCube.setName("Sales_inline");
            salesInlineCube.setQuery(querySalesFact);
            salesInlineCube.getDimensionConnectors().add(dimensionConnectorTime);
            salesInlineCube.getDimensionConnectors().add(dimensionConnectorPromotion);
            salesInlineCube.getMeasureGroups().add(measureGroup);
        }

        public CompatibilityTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Need to resolve Time dimension from base catalog
            dimensionConnectorTime.setDimension(CatalogSupplier.DIMENSION_TIME);

            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getCubes().add(salesInlineCube);

            return catalog;
        }
    }

    public static class CompatibilityTestModifier2 extends EmfMappingModifier {

        /*
        final String cubeName = "Store_NullsCollation";
            "<Cube name=\"" + cubeName + "\">\n"
            + "  <Table name=\"store\"/>\n"
            + "  <Dimension name=\"Store\" foreignKey=\"store_id\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "      <Level name=\"Store Name\" column=\"store_name\"  uniqueMembers=\"true\">\n"
            + "       <OrdinalExpression>\n"
            + "        <SQL dialect=\"access\">\n"
            + "           Iif(store_name = 'HQ', null, store_name)\n"
            + "       </SQL>\n"
            + "        <SQL dialect=\"oracle\">\n"
            + "           case \"store_name\" when 'HQ' then null else \"store_name\" end\n"
            + "       </SQL>\n"
            + "        <SQL dialect=\"hsqldb\">\n"
            + "           case \"store_name\" when 'HQ' then null else \"store_name\" end\n"
            + "       </SQL>\n"
            + "        <SQL dialect=\"db2\">\n"
            + "           case \"store\".\"store_name\" when 'HQ' then null else \"store\".\"store_name\" end\n"
            + "       </SQL>\n"
            + "        <SQL dialect=\"luciddb\">\n"
            + "           case \"store_name\" when 'HQ' then null else \"store_name\" end\n"
            + "       </SQL>\n"
            + "        <SQL dialect=\"netezza\">\n"
            + "           case \"store_name\" when 'HQ' then null else \"store_name\" end\n"
            + "       </SQL>\n"
            + "        <SQL dialect=\"generic\">\n"
            + "           case store_name when 'HQ' then null else store_name end\n"
            + "       </SQL>\n"
            + "       </OrdinalExpression>\n"
            + "        <Property name=\"Store Sqft\" column=\"store_sqft\" type=\"Numeric\"/>\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Measure name=\"Store Sqft\" column=\"store_sqft\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###\"/>\n"
            + "</Cube>",
         */

        private static final StandardDimension dimensionStore = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final ExplicitHierarchy hierarchyStore = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final Level levelStoreName = RolapMappingFactory.eINSTANCE.createLevel();
        private static final MemberProperty propertyStoreSqft = RolapMappingFactory.eINSTANCE.createMemberProperty();

        private static final SQLExpressionColumn ordinalExpression = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();
        private static final SqlStatement sqlAccess = RolapMappingFactory.eINSTANCE.createSqlStatement();
        private static final SqlStatement sqlOracle = RolapMappingFactory.eINSTANCE.createSqlStatement();
        private static final SqlStatement sqlHsqldb = RolapMappingFactory.eINSTANCE.createSqlStatement();
        private static final SqlStatement sqlDb2 = RolapMappingFactory.eINSTANCE.createSqlStatement();
        private static final SqlStatement sqlLuciddb = RolapMappingFactory.eINSTANCE.createSqlStatement();
        private static final SqlStatement sqlNetezza = RolapMappingFactory.eINSTANCE.createSqlStatement();
        private static final SqlStatement sqlGeneric = RolapMappingFactory.eINSTANCE.createSqlStatement();

        private static final SumMeasure measureStoreSqft = RolapMappingFactory.eINSTANCE.createSumMeasure();

        private static final TableQuery queryStore = RolapMappingFactory.eINSTANCE.createTableQuery();
        private static final PhysicalCube storeNullsCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        private static final DimensionConnector dimensionConnectorStore = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        private static final MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        static {
            sqlAccess.setSql("Iif(store_name = 'HQ', null, store_name)");
            sqlAccess.getDialects().add("access");

            sqlOracle.setSql("case \"store_name\" when 'HQ' then null else \"store_name\" end");
            sqlOracle.getDialects().add("oracle");

            sqlHsqldb.setSql("case \"store_name\" when 'HQ' then null else \"store_name\" end");
            sqlHsqldb.getDialects().add("hsqldb");

            sqlDb2.setSql("case \"store\".\"store_name\" when 'HQ' then null else \"store\".\"store_name\" end");
            sqlDb2.getDialects().add("db2");

            sqlLuciddb.setSql("case \"store_name\" when 'HQ' then null else \"store_name\" end");
            sqlLuciddb.getDialects().add("luciddb");

            sqlNetezza.setSql("case \"store_name\" when 'HQ' then null else \"store_name\" end");
            sqlNetezza.getDialects().add("netezza");

            sqlGeneric.setSql("case store_name when 'HQ' then null else store_name end");
            sqlGeneric.getDialects().add("generic");

            ordinalExpression.getSqls().add(sqlAccess);
            ordinalExpression.getSqls().add(sqlOracle);
            ordinalExpression.getSqls().add(sqlHsqldb);
            ordinalExpression.getSqls().add(sqlDb2);
            ordinalExpression.getSqls().add(sqlLuciddb);
            ordinalExpression.getSqls().add(sqlNetezza);
            ordinalExpression.getSqls().add(sqlGeneric);

            propertyStoreSqft.setName("Store Sqft");
            propertyStoreSqft.setColumn(CatalogSupplier.COLUMN_STORE_SQFT_STORE);
            propertyStoreSqft.setPropertyType(ColumnInternalDataType.NUMERIC);

            levelStoreName.setName("Store Name");
            levelStoreName.setColumn(CatalogSupplier.COLUMN_STORE_NAME_STORE);
            levelStoreName.setUniqueMembers(true);
            levelStoreName.setOrdinalColumn(ordinalExpression);
            levelStoreName.getMemberProperties().add(propertyStoreSqft);

            hierarchyStore.setHasAll(true);
            hierarchyStore.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);
            hierarchyStore.getLevels().add(levelStoreName);

            dimensionStore.setName("Store");
            dimensionStore.getHierarchies().add(hierarchyStore);

            measureStoreSqft.setName("Store Sqfts");
            measureStoreSqft.setColumn(CatalogSupplier.COLUMN_STORE_SQFT_STORE);
            measureStoreSqft.setFormatString("#,###");

            measureGroup.getMeasures().add(measureStoreSqft);

            queryStore.setTable(CatalogSupplier.TABLE_STORE);

            dimensionConnectorStore.setOverrideDimensionName("Store");
            dimensionConnectorStore.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_STORE);
            dimensionConnectorStore.setDimension(dimensionStore);

            storeNullsCube.setName("Store_NullsCollation");
            storeNullsCube.setQuery(queryStore);
            storeNullsCube.getDimensionConnectors().add(dimensionConnectorStore);
            storeNullsCube.getMeasureGroups().add(measureGroup);
        }

        public CompatibilityTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getCubes().add(storeNullsCube);

            return catalog;
        }
    }

    public static class AccessControlTestModifier1 extends EmfMappingModifier {

        /*
                "<Role name=\"Role1\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\"bad\" bottomLevel=\"[Customers].[City]\">\n"
                + "        <MemberGrant member=\"[Customers].[USA]\" access=\"all\"/>\n"
                + "        <MemberGrant member=\"[Customers].[USA].[CA].[Los Angeles]\" access=\"none\"/>\n"
                + "      </HierarchyGrant>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>");
        */

        private static final AccessMemberGrant memberGrantUSA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessMemberGrant memberGrantLA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessHierarchyGrant hierarchyGrantCustomers = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
        private static final AccessCubeGrant cubeGrantSales = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
        private static final AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
        private static final AccessRole role1 = RolapMappingFactory.eINSTANCE.createAccessRole();

        static {
            memberGrantUSA.setMember("[Customers].[USA]");
            memberGrantUSA.setMemberAccess(MemberAccess.ALL);

            memberGrantLA.setMember("[Customers].[USA].[CA].[Los Angeles]");
            memberGrantLA.setMemberAccess(MemberAccess.NONE);

            hierarchyGrantCustomers.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrantCustomers.setRollupPolicy(null); // should be bad
            hierarchyGrantCustomers.getMemberGrants().add(memberGrantUSA);
            hierarchyGrantCustomers.getMemberGrants().add(memberGrantLA);

            cubeGrantSales.setCubeAccess(CubeAccess.ALL);
            cubeGrantSales.getHierarchyGrants().add(hierarchyGrantCustomers);

            catalogGrant.setCatalogAccess(CatalogAccess.NONE);
            catalogGrant.getCubeGrants().add(cubeGrantSales);

            role1.setName("Role1");
            role1.getAccessCatalogGrants().add(catalogGrant);
        }

        public AccessControlTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Resolve references from base catalog
            hierarchyGrantCustomers.setHierarchy(CatalogSupplier.HIERARCHY_CUSTOMER);

            hierarchyGrantCustomers.setBottomLevel(CatalogSupplier.LEVEL_CUSTOMER_CITY);

            cubeGrantSales.setCube((Cube) catalogCubes(catalog2).stream()
                .filter(c -> "Sales".equals(c.getName()))
                .findFirst()
                .orElse(null));

            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getAccessRoles().add(role1);

            return catalog;
        }
    }

    public static class AccessControlTestModifier2 extends EmfMappingModifier {

        /*
                "<Role name=\"Role1\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\"Partial\">\n"
                + "        <MemberGrant member=\"[Customers].[USA].[CA]\" access=\"all\"/>\n"
                + "        <MemberGrant member=\"[Customers].[USA].[CA].[San Francisco].[Gladys Evans]\" access=\"none\"/>\n"
                + "      </HierarchyGrant>\n"
                + "      <HierarchyGrant hierarchy=\"[Promotion Media]\" access=\"all\"/>\n"
                + "      <HierarchyGrant hierarchy=\"[Marital Status]\" access=\"none\"/>\n"
                + "      <HierarchyGrant hierarchy=\"[Gender]\" access=\"none\"/>\n"
                + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"Partial\" topLevel=\"[Store].[Store State]\"/>\n"
                + "    </CubeGrant>\n"
                + "    <CubeGrant cube=\"Warehouse\" access=\"all\"/>\n"
                + "  </SchemaGrant>\n"
                + "</Role>\n"
                + "<Role name=\"Role2\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"none\">\n"
                + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\"Hidden\">\n"
                + "        <MemberGrant member=\"[Customers].[USA]\" access=\"all\"/>\n"
                + "        <MemberGrant member=\"[Customers].[USA].[CA]\" access=\"none\"/>\n"
                + "        <MemberGrant member=\"[Customers].[USA].[OR]\" access=\"none\"/>\n"
                + "        <MemberGrant member=\"[Customers].[USA].[OR].[Portland]\" access=\"all\"/>\n"
                + "      </HierarchyGrant>\n"
                + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"all\" rollupPolicy=\"Hidden\"/>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>\n");
        */

        // Role1 objects
        private static final AccessMemberGrant memberGrantCA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessMemberGrant memberGrantGladys = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessHierarchyGrant hierarchyGrantCustomersRole1 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
        private static final AccessHierarchyGrant hierarchyGrantPromotionMedia = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
        private static final AccessHierarchyGrant hierarchyGrantMaritalStatus = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
        private static final AccessHierarchyGrant hierarchyGrantGender = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
        private static final AccessHierarchyGrant hierarchyGrantStoreRole1 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
        private static final AccessCubeGrant cubeGrantSalesRole1 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
        private static final AccessCubeGrant cubeGrantWarehouse = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
        private static final AccessCatalogGrant catalogGrantRole1 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
        private static final AccessRole role1 = RolapMappingFactory.eINSTANCE.createAccessRole();

        // Role2 objects
        private static final AccessMemberGrant memberGrantUSA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessMemberGrant memberGrantCARole2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessMemberGrant memberGrantOR = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessMemberGrant memberGrantPortland = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessHierarchyGrant hierarchyGrantCustomersRole2 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
        private static final AccessHierarchyGrant hierarchyGrantStoreRole2 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
        private static final AccessCubeGrant cubeGrantSalesRole2 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
        private static final AccessCatalogGrant catalogGrantRole2 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
        private static final AccessRole role2 = RolapMappingFactory.eINSTANCE.createAccessRole();

        static {
            // Role1 configuration
            memberGrantCA.setMember("[Customers].[USA].[CA]");
            memberGrantCA.setMemberAccess(MemberAccess.ALL);

            memberGrantGladys.setMember("[Customers].[USA].[CA].[San Francisco].[Gladys Evans]");
            memberGrantGladys.setMemberAccess(MemberAccess.NONE);

            hierarchyGrantCustomersRole1.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrantCustomersRole1.setRollupPolicy(RollupPolicy.PARTIAL);
            hierarchyGrantCustomersRole1.getMemberGrants().add(memberGrantCA);
            hierarchyGrantCustomersRole1.getMemberGrants().add(memberGrantGladys);

            hierarchyGrantPromotionMedia.setHierarchyAccess(HierarchyAccess.ALL);

            hierarchyGrantMaritalStatus.setHierarchyAccess(HierarchyAccess.NONE);

            hierarchyGrantGender.setHierarchyAccess(HierarchyAccess.NONE);

            hierarchyGrantStoreRole1.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrantStoreRole1.setRollupPolicy(RollupPolicy.PARTIAL);

            cubeGrantSalesRole1.setCubeAccess(CubeAccess.ALL);
            cubeGrantSalesRole1.getHierarchyGrants().add(hierarchyGrantCustomersRole1);
            cubeGrantSalesRole1.getHierarchyGrants().add(hierarchyGrantPromotionMedia);
            cubeGrantSalesRole1.getHierarchyGrants().add(hierarchyGrantMaritalStatus);
            cubeGrantSalesRole1.getHierarchyGrants().add(hierarchyGrantGender);
            cubeGrantSalesRole1.getHierarchyGrants().add(hierarchyGrantStoreRole1);

            cubeGrantWarehouse.setCubeAccess(CubeAccess.ALL);

            catalogGrantRole1.setCatalogAccess(CatalogAccess.NONE);
            catalogGrantRole1.getCubeGrants().add(cubeGrantSalesRole1);
            catalogGrantRole1.getCubeGrants().add(cubeGrantWarehouse);

            role1.setName("Role1");
            role1.getAccessCatalogGrants().add(catalogGrantRole1);

            // Role2 configuration
            memberGrantUSA.setMember("[Customers].[USA]");
            memberGrantUSA.setMemberAccess(MemberAccess.ALL);

            memberGrantCARole2.setMember("[Customers].[USA].[CA]");
            memberGrantCARole2.setMemberAccess(MemberAccess.NONE);

            memberGrantOR.setMember("[Customers].[USA].[OR]");
            memberGrantOR.setMemberAccess(MemberAccess.NONE);

            memberGrantPortland.setMember("[Customers].[USA].[OR].[Portland]");
            memberGrantPortland.setMemberAccess(MemberAccess.ALL);

            hierarchyGrantCustomersRole2.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrantCustomersRole2.setRollupPolicy(RollupPolicy.HIDDEN);
            hierarchyGrantCustomersRole2.getMemberGrants().add(memberGrantUSA);
            hierarchyGrantCustomersRole2.getMemberGrants().add(memberGrantCARole2);
            hierarchyGrantCustomersRole2.getMemberGrants().add(memberGrantOR);
            hierarchyGrantCustomersRole2.getMemberGrants().add(memberGrantPortland);

            hierarchyGrantStoreRole2.setHierarchyAccess(HierarchyAccess.ALL);
            hierarchyGrantStoreRole2.setRollupPolicy(RollupPolicy.HIDDEN);

            cubeGrantSalesRole2.setCubeAccess(CubeAccess.NONE);
            cubeGrantSalesRole2.getHierarchyGrants().add(hierarchyGrantCustomersRole2);
            cubeGrantSalesRole2.getHierarchyGrants().add(hierarchyGrantStoreRole2);

            catalogGrantRole2.setCatalogAccess(CatalogAccess.NONE);
            catalogGrantRole2.getCubeGrants().add(cubeGrantSalesRole2);

            role2.setName("Role2");
            role2.getAccessCatalogGrants().add(catalogGrantRole2);
        }

        public AccessControlTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Resolve references from base catalog for Role1
            hierarchyGrantCustomersRole1.setHierarchy(CatalogSupplier.HIERARCHY_CUSTOMER);

            hierarchyGrantPromotionMedia.setHierarchy(CatalogSupplier.HIERARCHY_PROMOTION_MEDIA);

            hierarchyGrantMaritalStatus.setHierarchy(CatalogSupplier.HIERARCHY_MARITAL_STATUS);

            hierarchyGrantGender.setHierarchy(CatalogSupplier.HIERARCHY_GENDER);

            hierarchyGrantStoreRole1.setHierarchy(CatalogSupplier.HIERARCHY_STORE);

            hierarchyGrantStoreRole1.setTopLevel(CatalogSupplier.LEVEL_STORE_STATE);

            cubeGrantSalesRole1.setCube(CatalogSupplier.CUBE_SALES);

            cubeGrantWarehouse.setCube(CatalogSupplier.CUBE_WAREHOUSE);

            // Resolve references from base catalog for Role2
            hierarchyGrantCustomersRole2.setHierarchy(CatalogSupplier.HIERARCHY_CUSTOMER);

            hierarchyGrantStoreRole2.setHierarchy(CatalogSupplier.HIERARCHY_STORE);

            cubeGrantSalesRole2.setCube(CatalogSupplier.CUBE_SALES);

            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getAccessRoles().add(role1);
            catalog.getAccessRoles().add(role2);

            return catalog;
        }
    }

    public static class AccessControlTestModifier3 extends EmfMappingModifier {

        /*
        String roleDefs =
            "<Role name=\"USA manager\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <DimensionGrant access=\"all\" dimension=\"[Measures]\"/>\n"
            + "      <HierarchyGrant access=\"custom\" hierarchy=\"[Customers]\">\n"
            + "        <MemberGrant access=\"all\" member=\"[Customers].[USA]\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>\n"
            + "<Role name=\"parent of USA manager\">\n"
            + "  <Union>\n"
            + "    <RoleUsage roleName=\"USA manager\"/>\n"
            + "  </Union>\n"
            + "</Role>"
            + "<Role name=\"grandparent of USA manager\">\n"
            + "  <Union>\n"
            + "    <RoleUsage roleName=\"parent of USA manager\"/>\n"
            + "  </Union>\n"
            + "</Role>";
        */

        private static final AccessMemberGrant memberGrantUSA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessHierarchyGrant hierarchyGrantCustomers = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
        private static final AccessDimensionGrant dimensionGrantStore = RolapMappingFactory.eINSTANCE.createAccessDimensionGrant();
        private static final AccessCubeGrant cubeGrantSales = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
        private static final AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
        private static final AccessRole roleUSAmanager = RolapMappingFactory.eINSTANCE.createAccessRole();
        private static final AccessRole roleParentUSAmanager = RolapMappingFactory.eINSTANCE.createAccessRole();
        private static final AccessRole roleGrandparentUSAmanager = RolapMappingFactory.eINSTANCE.createAccessRole();

        static {
            memberGrantUSA.setMember("[Customers].[USA]");
            memberGrantUSA.setMemberAccess(MemberAccess.ALL);

            hierarchyGrantCustomers.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrantCustomers.getMemberGrants().add(memberGrantUSA);

            dimensionGrantStore.setDimensionAccess(DimensionAccess.ALL);

            cubeGrantSales.setCubeAccess(CubeAccess.ALL);
            cubeGrantSales.getDimensionGrants().add(dimensionGrantStore);
            cubeGrantSales.getHierarchyGrants().add(hierarchyGrantCustomers);

            catalogGrant.setCatalogAccess(CatalogAccess.NONE);
            catalogGrant.getCubeGrants().add(cubeGrantSales);

            roleUSAmanager.setName("USA manager");
            roleUSAmanager.getAccessCatalogGrants().add(catalogGrant);

            roleParentUSAmanager.setName("parent of USA manager");
            roleParentUSAmanager.getReferencedAccessRoles().add(roleUSAmanager);

            roleGrandparentUSAmanager.setName("grandparent of USA manager");
            roleGrandparentUSAmanager.getReferencedAccessRoles().add(roleParentUSAmanager);
        }

        public AccessControlTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Resolve references from base catalog
            hierarchyGrantCustomers.setHierarchy(CatalogSupplier.HIERARCHY_CUSTOMER);

            dimensionGrantStore.setDimension(CatalogSupplier.DIMENSION_STORE);

            cubeGrantSales.setCube(CatalogSupplier.CUBE_SALES);

            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getAccessRoles().add(roleUSAmanager);
            catalog.getAccessRoles().add(roleParentUSAmanager);
            catalog.getAccessRoles().add(roleGrandparentUSAmanager);

            return catalog;
        }
    }

    public static class AccessControlTestModifier4 extends EmfMappingModifier {

        /*
                "<Role name=\"Role1\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "  </SchemaGrant>\n"
                + "</Role>\n"
                + "<Role name=\"Role2\">\n"
                + "  <SchemaGrant access=\"all\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\"partial\">\n"
                + "        <MemberGrant member=\"[Customers].[USA].[OR]\" access=\"all\"/>\n"
                + "      </HierarchyGrant>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>\n");

        */

        private static final AccessCatalogGrant catalogGrantRole1 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
        private static final AccessRole role1 = RolapMappingFactory.eINSTANCE.createAccessRole();

        private static final AccessMemberGrant memberGrantOR = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessHierarchyGrant hierarchyGrantCustomers = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
        private static final AccessCubeGrant cubeGrantSales = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
        private static final AccessCatalogGrant catalogGrantRole2 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
        private static final AccessRole role2 = RolapMappingFactory.eINSTANCE.createAccessRole();

        static {
            catalogGrantRole1.setCatalogAccess(CatalogAccess.NONE);

            role1.setName("Role1");
            role1.getAccessCatalogGrants().add(catalogGrantRole1);

            memberGrantOR.setMember("[Customers].[USA].[OR]");
            memberGrantOR.setMemberAccess(MemberAccess.ALL);

            hierarchyGrantCustomers.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrantCustomers.setRollupPolicy(RollupPolicy.PARTIAL);
            hierarchyGrantCustomers.getMemberGrants().add(memberGrantOR);

            cubeGrantSales.setCubeAccess(CubeAccess.ALL);
            cubeGrantSales.getHierarchyGrants().add(hierarchyGrantCustomers);

            catalogGrantRole2.setCatalogAccess(CatalogAccess.ALL);
            catalogGrantRole2.getCubeGrants().add(cubeGrantSales);

            role2.setName("Role2");
            role2.getAccessCatalogGrants().add(catalogGrantRole2);
        }

        public AccessControlTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Resolve references from base catalog
            hierarchyGrantCustomers.setHierarchy(CatalogSupplier.HIERARCHY_CUSTOMER);

            cubeGrantSales.setCube(CatalogSupplier.CUBE_SALES);

            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getAccessRoles().add(role1);
            catalog.getAccessRoles().add(role2);

            return catalog;
        }
    }

    public static class AccessControlTestModifier5 extends EmfMappingModifier {

        /*
                "<Role name=\"Role1\">\n"
                + "  <SchemaGrant access=\"all\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\"Partial\" topLevel=\"[Customers].[State Province]\" bottomLevel=\"[Customers].[State Province]\">\n"
                + "        <MemberGrant member=\"[Customers].[USA].[CA]\" access=\"all\"/>\n"
                + "      </HierarchyGrant>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>\n"
                + "<Role name=\"Role2\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "  </SchemaGrant>\n"
                + "</Role>\n");

        */

        private static final AccessMemberGrant memberGrantCA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessHierarchyGrant hierarchyGrantCustomers = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
        private static final AccessCubeGrant cubeGrantSales = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
        private static final AccessCatalogGrant catalogGrantRole1 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
        private static final AccessRole role1 = RolapMappingFactory.eINSTANCE.createAccessRole();

        private static final AccessCatalogGrant catalogGrantRole2 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
        private static final AccessRole role2 = RolapMappingFactory.eINSTANCE.createAccessRole();

        static {
            memberGrantCA.setMember("[Customers].[USA].[CA]");
            memberGrantCA.setMemberAccess(MemberAccess.ALL);

            hierarchyGrantCustomers.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrantCustomers.setRollupPolicy(RollupPolicy.PARTIAL);
            hierarchyGrantCustomers.getMemberGrants().add(memberGrantCA);

            cubeGrantSales.setCubeAccess(CubeAccess.ALL);
            cubeGrantSales.getHierarchyGrants().add(hierarchyGrantCustomers);

            catalogGrantRole1.setCatalogAccess(CatalogAccess.ALL);
            catalogGrantRole1.getCubeGrants().add(cubeGrantSales);

            role1.setName("Role1");
            role1.getAccessCatalogGrants().add(catalogGrantRole1);

            catalogGrantRole2.setCatalogAccess(CatalogAccess.NONE);

            role2.setName("Role2");
            role2.getAccessCatalogGrants().add(catalogGrantRole2);
        }

        public AccessControlTestModifier5(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Resolve references from base catalog
            hierarchyGrantCustomers.setHierarchy(CatalogSupplier.HIERARCHY_CUSTOMER);

            hierarchyGrantCustomers.setTopLevel(CatalogSupplier.LEVEL_STATE_PROVINCE_TABLE_COLUMN_STATE_PROVINCE);

            hierarchyGrantCustomers.setBottomLevel(CatalogSupplier.LEVEL_STATE_PROVINCE_TABLE_COLUMN_STATE_PROVINCE);

            cubeGrantSales.setCube((Cube) catalogCubes(catalog2).stream()
                .filter(c -> "Sales".equals(c.getName()))
                .findFirst()
                .orElse(null));

            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getAccessRoles().add(role1);
            catalog.getAccessRoles().add(role2);

            return catalog;
        }
    }

    public static class AccessControlTestModifier6 extends EmfMappingModifier {

        /*
                "<Role name=\"Role1\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Product]\" access=\"custom\">\n"
                + "        <MemberGrant member=\"[Product].[Drink]\" access=\"all\"/>\n"
                + "      </HierarchyGrant>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>");
        */

        private static final AccessMemberGrant memberGrantDrink = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessHierarchyGrant hierarchyGrantProduct = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
        private static final AccessCubeGrant cubeGrantSales = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
        private static final AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
        private static final AccessRole role1 = RolapMappingFactory.eINSTANCE.createAccessRole();

        static {
            memberGrantDrink.setMember("[Product].[Drink]");
            memberGrantDrink.setMemberAccess(MemberAccess.ALL);

            hierarchyGrantProduct.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrantProduct.getMemberGrants().add(memberGrantDrink);

            cubeGrantSales.setCubeAccess(CubeAccess.ALL);
            cubeGrantSales.getHierarchyGrants().add(hierarchyGrantProduct);

            catalogGrant.setCatalogAccess(CatalogAccess.NONE);
            catalogGrant.getCubeGrants().add(cubeGrantSales);

            role1.setName("Role1");
            role1.getAccessCatalogGrants().add(catalogGrant);
        }

        public AccessControlTestModifier6(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Resolve references from base catalog
            hierarchyGrantProduct.setHierarchy(CatalogSupplier.HIERARCHY_PRODUCT);

            cubeGrantSales.setCube(CatalogSupplier.CUBE_SALES);

            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getAccessRoles().add(role1);

            return catalog;
        }
    }

    public static class AccessControlTestModifier7 extends EmfMappingModifier {

        /*
                "<Role name=\"California manager\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"none\" />\n"
                + "    </CubeGrant>\n"
                + "    <CubeGrant cube=\"Sales Ragged\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" />\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>");
        */

        private static final AccessHierarchyGrant hierarchyGrantStoreInSales = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
        private static final AccessCubeGrant cubeGrantSales = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();

        private static final AccessHierarchyGrant hierarchyGrantStoreInRagged = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
        private static final AccessCubeGrant cubeGrantSalesRagged = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();

        private static final AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
        private static final AccessRole roleCaliforniaManager = RolapMappingFactory.eINSTANCE.createAccessRole();

        static {
            hierarchyGrantStoreInSales.setHierarchyAccess(HierarchyAccess.NONE);

            cubeGrantSales.setCubeAccess(CubeAccess.ALL);
            cubeGrantSales.getHierarchyGrants().add(hierarchyGrantStoreInSales);

            hierarchyGrantStoreInRagged.setHierarchyAccess(HierarchyAccess.CUSTOM);

            cubeGrantSalesRagged.setCubeAccess(CubeAccess.ALL);
            cubeGrantSalesRagged.getHierarchyGrants().add(hierarchyGrantStoreInRagged);

            catalogGrant.setCatalogAccess(CatalogAccess.NONE);
            catalogGrant.getCubeGrants().add(cubeGrantSales);
            catalogGrant.getCubeGrants().add(cubeGrantSalesRagged);

            roleCaliforniaManager.setName("California manager");
            roleCaliforniaManager.getAccessCatalogGrants().add(catalogGrant);
        }

        public AccessControlTestModifier7(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Resolve references from base catalog
            hierarchyGrantStoreInSales.setHierarchy(CatalogSupplier.HIERARCHY_STORE);

            cubeGrantSales.setCube(CatalogSupplier.CUBE_SALES);

            hierarchyGrantStoreInRagged.setHierarchy(CatalogSupplier.HIERARCHY_STORE);

            cubeGrantSalesRagged.setCube(CatalogSupplier.CUBE_SALES_RAGGED);

            // Filter out existing "California manager" role and add new one
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));

            // Add all existing roles except "California manager"
            catalog.getAccessRoles().addAll(
                (Collection<? extends AccessRole>) catalogAccessRoles(catalog2).stream()
                    .filter(r -> !"California manager".equals(r.getName()))
                    .collect(java.util.stream.Collectors.toList())
            );

            // Add new "California manager" role
            catalog.getAccessRoles().add(roleCaliforniaManager);

            return catalog;
        }
    }

    public static class AccessControlTestModifier8 extends EmfMappingModifier {

        /*
            "<Role name=\"Buggy Role\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"HR\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Employees]\" access=\"custom\"\n"
            + "                      rollupPolicy=\"partial\">\n"
            + "        <MemberGrant\n"
            + "            member=\"[Employees].[All Employees].[Sheri Nowmer].[Darren Stanz]\"\n"
            + "            access=\"all\"/>\n"
            + "      </HierarchyGrant>\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\"\n"
            + "                      rollupPolicy=\"partial\">\n"
            + "        <MemberGrant member=\"[Store].[All Stores].[USA].[CA]\" access=\"all\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>");
        */

        private static final AccessMemberGrant memberGrantEmployee = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessHierarchyGrant hierarchyGrantEmployees = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();

        private static final AccessMemberGrant memberGrantStore = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessHierarchyGrant hierarchyGrantStore = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();

        private static final AccessCubeGrant cubeGrantHR = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
        private static final AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
        private static final AccessRole roleBuggy = RolapMappingFactory.eINSTANCE.createAccessRole();

        static {
            memberGrantEmployee.setMember("[Employees].[All Employees].[Sheri Nowmer].[Darren Stanz]");
            memberGrantEmployee.setMemberAccess(MemberAccess.ALL);

            hierarchyGrantEmployees.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrantEmployees.setRollupPolicy(RollupPolicy.PARTIAL);
            hierarchyGrantEmployees.getMemberGrants().add(memberGrantEmployee);

            memberGrantStore.setMember("[Store].[All Stores].[USA].[CA]");
            memberGrantStore.setMemberAccess(MemberAccess.ALL);

            hierarchyGrantStore.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrantStore.setRollupPolicy(RollupPolicy.PARTIAL);
            hierarchyGrantStore.getMemberGrants().add(memberGrantStore);

            cubeGrantHR.setCubeAccess(CubeAccess.ALL);
            cubeGrantHR.getHierarchyGrants().add(hierarchyGrantEmployees);
            cubeGrantHR.getHierarchyGrants().add(hierarchyGrantStore);

            catalogGrant.setCatalogAccess(CatalogAccess.NONE);
            catalogGrant.getCubeGrants().add(cubeGrantHR);

            roleBuggy.setName("Buggy Role");
            roleBuggy.getAccessCatalogGrants().add(catalogGrant);
        }

        public AccessControlTestModifier8(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Resolve references from base catalog
            hierarchyGrantEmployees.setHierarchy(CatalogSupplier.HIERARCHY_EMPLOYEE);

            hierarchyGrantStore.setHierarchy(CatalogSupplier.HIERARCHY_STORE);

            cubeGrantHR.setCube(CatalogSupplier.CUBE_HR);

            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getAccessRoles().add(roleBuggy);

            return catalog;
        }
    }

    public static class AccessControlTestModifier9 extends EmfMappingModifier {

        /*
        "<Role name=\"role1\">\n"
        + " <SchemaGrant access=\"none\">\n"
        + "  <CubeGrant cube=\"Warehouse\" access=\"all\">\n"
        + "   <HierarchyGrant hierarchy=\"[Store Size in SQFT]\" access=\"custom\" rollupPolicy=\"partial\">\n"
        + "    <MemberGrant member=\"[Store Size in SQFT].[20319]\" access=\"all\"/>\n"
        + "    <MemberGrant member=\"[Store Size in SQFT].[21215]\" access=\"none\"/>\n"
        + "   </HierarchyGrant>\n"
        + "   <HierarchyGrant hierarchy=\"[Store Type]\" access=\"custom\" rollupPolicy=\"partial\">\n"
        + "    <MemberGrant member=\"[Store Type].[Supermarket]\" access=\"all\"/>\n"
        + "   </HierarchyGrant>\n"
        + "  </CubeGrant>\n"
        + " </SchemaGrant>\n"
        + "</Role>";
        */

        private static final AccessMemberGrant memberGrant20319 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessMemberGrant memberGrant21215 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessHierarchyGrant hierarchyGrantStoreSize = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();

        private static final AccessMemberGrant memberGrantSupermarket = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessHierarchyGrant hierarchyGrantStoreType = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();

        private static final AccessCubeGrant cubeGrantWarehouse = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
        private static final AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
        private static final AccessRole role1 = RolapMappingFactory.eINSTANCE.createAccessRole();

        static {
            memberGrant20319.setMember("[Store Size in SQFT].[20319]");
            memberGrant20319.setMemberAccess(MemberAccess.ALL);

            memberGrant21215.setMember("[Store Size in SQFT].[21215]");
            memberGrant21215.setMemberAccess(MemberAccess.NONE);

            hierarchyGrantStoreSize.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrantStoreSize.setRollupPolicy(RollupPolicy.PARTIAL);
            hierarchyGrantStoreSize.getMemberGrants().add(memberGrant20319);
            hierarchyGrantStoreSize.getMemberGrants().add(memberGrant21215);

            memberGrantSupermarket.setMember("[Store Type].[Supermarket]");
            memberGrantSupermarket.setMemberAccess(MemberAccess.ALL);

            hierarchyGrantStoreType.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrantStoreType.setRollupPolicy(RollupPolicy.PARTIAL);
            hierarchyGrantStoreType.getMemberGrants().add(memberGrantSupermarket);

            cubeGrantWarehouse.setCubeAccess(CubeAccess.ALL);
            cubeGrantWarehouse.getHierarchyGrants().add(hierarchyGrantStoreSize);
            cubeGrantWarehouse.getHierarchyGrants().add(hierarchyGrantStoreType);

            catalogGrant.setCatalogAccess(CatalogAccess.NONE);
            catalogGrant.getCubeGrants().add(cubeGrantWarehouse);

            role1.setName("role1");
            role1.getAccessCatalogGrants().add(catalogGrant);
        }

        public AccessControlTestModifier9(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Resolve references from base catalog
            hierarchyGrantStoreSize.setHierarchy(CatalogSupplier.HIERARCHY_STORE_SIZE_IN_SQFT);

            hierarchyGrantStoreType.setHierarchy(CatalogSupplier.HIERARCHY_STORE);

            cubeGrantWarehouse.setCube((Cube) catalogCubes(catalog2).stream()
                .filter(c -> "Warehouse".equals(c.getName()))
                .findFirst()
                .orElse(null));

            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getAccessRoles().add(role1);

            return catalog;
        }
    }

    public static class AccessControlTestModifier10 extends EmfMappingModifier {

        /*
            "<Role name=\"VCRole\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Warehouse and Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\">\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA].[Los Angeles]\" access=\"none\"/>\n"
            + "      </HierarchyGrant>\n"
            + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\"\n"
            + "          topLevel=\"[Customers].[State Province]\" bottomLevel=\"[Customers].[City]\">\n"
            + "        <MemberGrant member=\"[Customers].[USA].[CA]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Customers].[USA].[CA].[Los Angeles]\" access=\"none\"/>\n"
            + "      </HierarchyGrant>\n"
            + "      <HierarchyGrant hierarchy=\"[Gender]\" access=\"none\"/>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>");
        */

        private static final AccessMemberGrant memberGrantStoreCA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessMemberGrant memberGrantStoreLA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessHierarchyGrant hierarchyGrantStore = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();

        private static final AccessMemberGrant memberGrantCustomersCA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessMemberGrant memberGrantCustomersLA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessHierarchyGrant hierarchyGrantCustomers = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();

        private static final AccessHierarchyGrant hierarchyGrantGender = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();

        private static final AccessCubeGrant cubeGrantWarehouseAndSales = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
        private static final AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
        private static final AccessRole vcRole = RolapMappingFactory.eINSTANCE.createAccessRole();

        static {
            memberGrantStoreCA.setMember("[Store].[USA].[CA]");
            memberGrantStoreCA.setMemberAccess(MemberAccess.ALL);

            memberGrantStoreLA.setMember("[Store].[USA].[CA].[Los Angeles]");
            memberGrantStoreLA.setMemberAccess(MemberAccess.NONE);

            hierarchyGrantStore.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrantStore.getMemberGrants().add(memberGrantStoreCA);
            hierarchyGrantStore.getMemberGrants().add(memberGrantStoreLA);

            memberGrantCustomersCA.setMember("[Customers].[USA].[CA]");
            memberGrantCustomersCA.setMemberAccess(MemberAccess.ALL);

            memberGrantCustomersLA.setMember("[Customers].[USA].[CA].[Los Angeles]");
            memberGrantCustomersLA.setMemberAccess(MemberAccess.NONE);

            hierarchyGrantCustomers.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrantCustomers.getMemberGrants().add(memberGrantCustomersCA);
            hierarchyGrantCustomers.getMemberGrants().add(memberGrantCustomersLA);

            hierarchyGrantGender.setHierarchyAccess(HierarchyAccess.NONE);

            cubeGrantWarehouseAndSales.setCubeAccess(CubeAccess.ALL);
            cubeGrantWarehouseAndSales.getHierarchyGrants().add(hierarchyGrantStore);
            cubeGrantWarehouseAndSales.getHierarchyGrants().add(hierarchyGrantCustomers);
            cubeGrantWarehouseAndSales.getHierarchyGrants().add(hierarchyGrantGender);

            catalogGrant.setCatalogAccess(CatalogAccess.NONE);
            catalogGrant.getCubeGrants().add(cubeGrantWarehouseAndSales);

            vcRole.setName("VCRole");
            vcRole.getAccessCatalogGrants().add(catalogGrant);
        }

        public AccessControlTestModifier10(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Resolve references from base catalog
            hierarchyGrantStore.setHierarchy(CatalogSupplier.HIERARCHY_STORE);

            hierarchyGrantCustomers.setHierarchy(CatalogSupplier.HIERARCHY_CUSTOMER);

            hierarchyGrantCustomers.setTopLevel(CatalogSupplier.LEVEL_STATE_PROVINCE_TABLE_COLUMN_STATE_PROVINCE);

            hierarchyGrantCustomers.setBottomLevel(CatalogSupplier.LEVEL_CITY_TABLE_COLUMN_STORE_CITY);

            hierarchyGrantGender.setHierarchy(CatalogSupplier.HIERARCHY_GENDER);

            cubeGrantWarehouseAndSales.setCube((Cube) catalogCubes(catalog2).stream()
                .filter(c -> "Warehouse and Sales".equals(c.getName()))
                .findFirst()
                .orElse(null));

            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getAccessRoles().add(vcRole);

            return catalog;
        }
    }

    public static class AccessControlTestModifier11 extends EmfMappingModifier {

        /*
            "<Role name=\"role2\">"
            + " <SchemaGrant access=\"none\">"
            + "  <CubeGrant cube=\"Sales\" access=\"all\">"
            + "   <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"partial\">"
            + "    <MemberGrant member=\"[Store].[USA].[CA]\" access=\"all\"/>"
            + "    <MemberGrant member=\"[Store].[USA].[CA].[Los Angeles]\" access=\"none\"/>"
            + "   </HierarchyGrant>"
            + "  </CubeGrant>"
            + " </SchemaGrant>"
            + "</Role>";
        */

        private static final AccessMemberGrant memberGrantCA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessMemberGrant memberGrantLA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
        private static final AccessHierarchyGrant hierarchyGrantStore = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
        private static final AccessCubeGrant cubeGrantSales = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
        private static final AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
        private static final AccessRole role2 = RolapMappingFactory.eINSTANCE.createAccessRole();

        static {
            memberGrantCA.setMember("[Store].[USA].[CA]");
            memberGrantCA.setMemberAccess(MemberAccess.ALL);

            memberGrantLA.setMember("[Store].[USA].[CA].[Los Angeles]");
            memberGrantLA.setMemberAccess(MemberAccess.NONE);

            hierarchyGrantStore.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrantStore.setRollupPolicy(RollupPolicy.PARTIAL);
            hierarchyGrantStore.getMemberGrants().add(memberGrantCA);
            hierarchyGrantStore.getMemberGrants().add(memberGrantLA);

            cubeGrantSales.setCubeAccess(CubeAccess.ALL);
            cubeGrantSales.getHierarchyGrants().add(hierarchyGrantStore);

            catalogGrant.setCatalogAccess(CatalogAccess.NONE);
            catalogGrant.getCubeGrants().add(cubeGrantSales);

            role2.setName("role2");
            role2.getAccessCatalogGrants().add(catalogGrant);
        }

        public AccessControlTestModifier11(CatalogMapping catalog) {
            super(catalog);
        }

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Resolve references from base catalog
            hierarchyGrantStore.setHierarchy(CatalogSupplier.HIERARCHY_STORE);

            cubeGrantSales.setCube(CatalogSupplier.CUBE_SALES);

            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName(catalog2.getName());
            catalog.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().addAll((Collection<? extends Cube>) catalogCubes(catalog2));
            catalog.getAccessRoles().add(role2);

            return catalog;
        }
    }

    public static class AccessControlTestModifier12 extends EmfMappingModifier {

        private Result result;
        private PhysicalCube cube;

        private static final ExplicitHierarchy hCustomers = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final ExplicitHierarchy hCustomers2 = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final ExplicitHierarchy hCustomers3 = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        private static final StandardDimension dCustomers = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final StandardDimension dCustomers2 = RolapMappingFactory.eINSTANCE.createStandardDimension();
        private static final StandardDimension dCustomers3 = RolapMappingFactory.eINSTANCE.createStandardDimension();

        static {
            // Initialize hCustomers
            hCustomers.setHasAll(true);
            hCustomers.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);
            TableQuery tq1 = RolapMappingFactory.eINSTANCE.createTableQuery();
            tq1.setTable(CatalogSupplier.TABLE_CUSTOMER);
            hCustomers.setQuery(tq1);

            Level levelCountry1 = RolapMappingFactory.eINSTANCE.createLevel();
            levelCountry1.setName("Country");
            levelCountry1.setColumn(CatalogSupplier.COLUMN_COUNTRY_CUSTOMER);
            levelCountry1.setUniqueMembers(true);

            Level levelStateProvince1 = RolapMappingFactory.eINSTANCE.createLevel();
            levelStateProvince1.setName("State Province");
            levelStateProvince1.setColumn(CatalogSupplier.COLUMN_STATE_PROVINCE_CUSTOMER);
            levelStateProvince1.setUniqueMembers(true);

            Level levelCity1 = RolapMappingFactory.eINSTANCE.createLevel();
            levelCity1.setName("City");
            levelCity1.setColumn(CatalogSupplier.COLUMN_CITY_CUSTOMER);
            levelCity1.setUniqueMembers(false);

            Level levelName1 = RolapMappingFactory.eINSTANCE.createLevel();
            levelName1.setName("Name");
            levelName1.setColumn(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);
            levelName1.setColumnType(ColumnInternalDataType.NUMERIC);
            levelName1.setUniqueMembers(true);

            hCustomers.getLevels().add(levelCountry1);
            hCustomers.getLevels().add(levelStateProvince1);
            hCustomers.getLevels().add(levelCity1);
            hCustomers.getLevels().add(levelName1);

            // Initialize hCustomers2
            hCustomers2.setHasAll(true);
            hCustomers2.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);
            TableQuery tq2 = RolapMappingFactory.eINSTANCE.createTableQuery();
            tq2.setTable(CatalogSupplier.TABLE_CUSTOMER);
            hCustomers2.setQuery(tq2);

            Level levelCountry2 = RolapMappingFactory.eINSTANCE.createLevel();
            levelCountry2.setName("Country");
            levelCountry2.setColumn(CatalogSupplier.COLUMN_COUNTRY_CUSTOMER);
            levelCountry2.setUniqueMembers(true);

            Level levelStateProvince2 = RolapMappingFactory.eINSTANCE.createLevel();
            levelStateProvince2.setName("State Province");
            levelStateProvince2.setColumn(CatalogSupplier.COLUMN_STATE_PROVINCE_CUSTOMER);
            levelStateProvince2.setUniqueMembers(true);

            Level levelCity2 = RolapMappingFactory.eINSTANCE.createLevel();
            levelCity2.setName("City");
            levelCity2.setColumn(CatalogSupplier.COLUMN_CITY_CUSTOMER);
            levelCity2.setUniqueMembers(false);

            Level levelName2 = RolapMappingFactory.eINSTANCE.createLevel();
            levelName2.setName("Name");
            levelName2.setColumn(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);
            levelName2.setColumnType(ColumnInternalDataType.NUMERIC);
            levelName2.setUniqueMembers(true);

            hCustomers2.getLevels().add(levelCountry2);
            hCustomers2.getLevels().add(levelStateProvince2);
            hCustomers2.getLevels().add(levelCity2);
            hCustomers2.getLevels().add(levelName2);

            // Initialize hCustomers3
            hCustomers3.setHasAll(true);
            hCustomers3.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);
            TableQuery tq3 = RolapMappingFactory.eINSTANCE.createTableQuery();
            tq3.setTable(CatalogSupplier.TABLE_CUSTOMER);
            hCustomers3.setQuery(tq3);

            Level levelCountry3 = RolapMappingFactory.eINSTANCE.createLevel();
            levelCountry3.setName("Country");
            levelCountry3.setColumn(CatalogSupplier.COLUMN_COUNTRY_CUSTOMER);
            levelCountry3.setUniqueMembers(true);

            Level levelStateProvince3 = RolapMappingFactory.eINSTANCE.createLevel();
            levelStateProvince3.setName("State Province");
            levelStateProvince3.setColumn(CatalogSupplier.COLUMN_STATE_PROVINCE_CUSTOMER);
            levelStateProvince3.setUniqueMembers(true);

            Level levelCity3 = RolapMappingFactory.eINSTANCE.createLevel();
            levelCity3.setName("City");
            levelCity3.setColumn(CatalogSupplier.COLUMN_CITY_CUSTOMER);
            levelCity3.setUniqueMembers(false);

            Level levelName3 = RolapMappingFactory.eINSTANCE.createLevel();
            levelName3.setName("Name");
            levelName3.setColumn(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);
            levelName3.setColumnType(ColumnInternalDataType.NUMERIC);
            levelName3.setUniqueMembers(true);

            hCustomers3.getLevels().add(levelCountry3);
            hCustomers3.getLevels().add(levelStateProvince3);
            hCustomers3.getLevels().add(levelCity3);
            hCustomers3.getLevels().add(levelName3);

            // Initialize dCustomers
            dCustomers.setName("Customers");
            dCustomers.getHierarchies().add(hCustomers);

            // Initialize dCustomers2
            dCustomers2.setName("Customers2");
            dCustomers2.getHierarchies().add(hCustomers2);

            // Initialize dCustomers3
            dCustomers3.setName("Customers3");
            dCustomers3.getHierarchies().add(hCustomers3);
        }

        public AccessControlTestModifier12(Catalog catalog, Result result) {
            super(catalog);
            this.result = result;
            cube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            cube.setName("Sales with multiple customers");

            TableQuery factTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            factTable.setTable(CatalogSupplier.TABLE_SALES_FACT);
            cube.setQuery(factTable);

            DimensionConnector dcTime = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            dcTime.setOverrideDimensionName("Time");
            dcTime.setDimension(CatalogSupplier.DIMENSION_TIME);
            dcTime.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);

            DimensionConnector dcProduct = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            dcProduct.setOverrideDimensionName("Product");
            dcProduct.setDimension(CatalogSupplier.DIMENSION_PRODUCT);
            dcProduct.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);

            DimensionConnector dcCustomers = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            dcCustomers.setOverrideDimensionName("Customers");
            dcCustomers.setDimension(dCustomers);
            dcCustomers.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);

            DimensionConnector dcCustomers2 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            dcCustomers2.setOverrideDimensionName("Customers2");
            dcCustomers2.setDimension(dCustomers2);
            dcCustomers2.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);

            DimensionConnector dcCustomers3 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            dcCustomers3.setOverrideDimensionName("Customers3");
            dcCustomers3.setDimension(dCustomers3);
            dcCustomers3.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);

            cube.getDimensionConnectors().add(dcTime);
            cube.getDimensionConnectors().add(dcProduct);
            cube.getDimensionConnectors().add(dcCustomers);
            cube.getDimensionConnectors().add(dcCustomers2);
            cube.getDimensionConnectors().add(dcCustomers3);

            MeasureGroup mg = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            SumMeasure measure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            measure.setName("Unit Sales");
            measure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            measure.setFormatString("Standard");
            mg.getMeasures().add(measure);

            cube.getMeasureGroups().add(mg);
        }

        @Override
        protected List<CubeMapping> catalogCubes(CatalogMapping Schema) {
            List<CubeMapping> cubes = new ArrayList<>();
            cubes.add(cube);
            return cubes;
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            List<AccessRole> res = new ArrayList<>();
            List<AccessRole> roleUsages = new ArrayList<>();
            for (Position position : result.getAxes()[0].getPositions()) {
                Member member = position.get(0);
                String name = member.getParentMember().getName()
                    + "."
                    + member.getName(); // e.g. "BC.Burnaby"
                // e.g. "[Customers].[State Province].[BC].[Burnaby]"
                String uniqueName =
                    member.getUniqueName().replace(".[All Customers]", "");
                // e.g. "[Customers2].[State Province].[BC].[Burnaby]"
                String uniqueName2 =
                    uniqueName.replace("Customers", "Customers2");
                // e.g. "[Customers3].[State Province].[BC].[Burnaby]"
                String uniqueName3 =
                    uniqueName.replace("Customers", "Customers3");

                AccessRole r = RolapMappingFactory.eINSTANCE.createAccessRole();
                r.setName(name);

                AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
                catalogGrant.setCatalogAccess(CatalogAccess.NONE);

                AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
                cubeGrant.setCubeAccess(CubeAccess.ALL);
                cubeGrant.setCube(cube);

                AccessHierarchyGrant hg1 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
                hg1.setHierarchyAccess(HierarchyAccess.CUSTOM);
                hg1.setHierarchy(hCustomers);
                hg1.setRollupPolicy(RollupPolicy.PARTIAL);

                AccessMemberGrant mg1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
                mg1.setMemberAccess(MemberAccess.ALL);
                mg1.setMember(uniqueName);
                hg1.getMemberGrants().add(mg1);

                AccessHierarchyGrant hg2 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
                hg2.setHierarchyAccess(HierarchyAccess.CUSTOM);
                hg2.setHierarchy(hCustomers2);
                hg2.setRollupPolicy(RollupPolicy.PARTIAL);

                AccessMemberGrant mg2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
                mg2.setMemberAccess(MemberAccess.ALL);
                mg2.setMember(uniqueName2);
                hg2.getMemberGrants().add(mg2);

                AccessHierarchyGrant hg3 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
                hg3.setHierarchyAccess(HierarchyAccess.CUSTOM);
                hg3.setHierarchy(hCustomers3);
                hg3.setRollupPolicy(RollupPolicy.PARTIAL);

                AccessMemberGrant mg3 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
                mg3.setMemberAccess(MemberAccess.ALL);
                mg3.setMember(uniqueName3);
                hg3.getMemberGrants().add(mg3);

                cubeGrant.getHierarchyGrants().add(hg1);
                cubeGrant.getHierarchyGrants().add(hg2);
                cubeGrant.getHierarchyGrants().add(hg3);

                catalogGrant.getCubeGrants().add(cubeGrant);
                r.getAccessCatalogGrants().add(catalogGrant);

                res.add(r);
                roleUsages.add(r);
            }

            AccessRole testRole = RolapMappingFactory.eINSTANCE.createAccessRole();
            testRole.setName("Test");
            testRole.getReferencedAccessRoles().addAll(roleUsages);
            res.add(testRole);
            
            return res;
        }

        /*
            " <Dimension name=\"Customers\"> \n"
        + "    <Hierarchy hasAll=\"true\" primaryKey=\"customer_id\"> \n"
        + "      <Table name=\"customer\"/> \n"
        + "      <Level name=\"Country\" column=\"country\" uniqueMembers=\"true\"/> \n"
        + "      <Level name=\"State Province\" column=\"state_province\" uniqueMembers=\"true\"/> \n"
        + "      <Level name=\"City\" column=\"city\" uniqueMembers=\"false\"/> \n"
        + "      <Level name=\"Name\" column=\"customer_id\" type=\"Numeric\" uniqueMembers=\"true\"/> \n"
        + "    </Hierarchy> \n"
        + "  </Dimension> ",

        */




        /*
            "  <Cube name=\"" + cubeName + "\"> \n"
        + "    <Table name=\"sales_fact_1997\"/> \n"
        + "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/> \n"
        + "    <DimensionUsage name=\"Product\" source=\"Product\" foreignKey=\"product_id\"/> \n"
        + "    <DimensionUsage name=\"Customers\" source=\"Customers\" foreignKey=\"customer_id\"/> \n"
        + "    <DimensionUsage name=\"Customers2\" source=\"Customers\" foreignKey=\"customer_id\"/> \n"
        + "    <DimensionUsage name=\"Customers3\" source=\"Customers\" foreignKey=\"customer_id\"/> \n"
        + "    <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\" formatString=\"Standard\"/> \n"
        + "  </Cube> \n",

         */
    }

    public static class AccessControlTestModifier14 extends EmfMappingModifier {

        /*
                        "<Role name=\"REG1\"> \n"
                + "  <SchemaGrant access=\"none\"> \n"
                + "    <CubeGrant cube=\"HR\" access=\"all\"> \n"
                + "      <HierarchyGrant hierarchy=\"Employees\" access=\"custom\" rollupPolicy=\"partial\"> \n"
                + "        <MemberGrant member=\"[Employees].[All Employees]\" access=\"none\"/>\n"
                + "        <MemberGrant member=\"[Employees].[Sheri Nowmer].[Derrick Whelply].[Laurie Borges].[Cody Goldey].[Shanay Steelman].[Steven Betsekas]\" access=\"all\"/> \n"
                + "        <MemberGrant member=\"[Employees].[Sheri Nowmer].[Derrick Whelply].[Laurie Borges].[Cody Goldey].[Shanay Steelman].[Arvid Ziegler]\" access=\"all\"/> \n"
                + "        <MemberGrant member=\"[Employees].[Sheri Nowmer].[Derrick Whelply].[Laurie Borges].[Cody Goldey].[Shanay Steelman].[Ann Weyerhaeuser]\" access=\"all\"/> \n"
                + "      </HierarchyGrant> \n"
                + "    </CubeGrant> \n"
                + "  </SchemaGrant> \n"
                + "</Role>");
        */

        public AccessControlTestModifier14(Catalog catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            AccessRole role = RolapMappingFactory.eINSTANCE.createAccessRole();
            role.setName("REG1");

            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant.setCube((Cube) look(CatalogSupplier.CUBE_HR));
            cubeGrant.setCubeAccess(CubeAccess.ALL);

            AccessHierarchyGrant hierarchyGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hierarchyGrant.setHierarchy((Hierarchy) look(CatalogSupplier.HIERARCHY_EMPLOYEE));
            hierarchyGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrant.setRollupPolicy(RollupPolicy.PARTIAL);

            AccessMemberGrant mg1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg1.setMember("[Employees].[All Employees]");
            mg1.setMemberAccess(MemberAccess.NONE);

            AccessMemberGrant mg2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg2.setMember("[Employees].[Sheri Nowmer].[Derrick Whelply].[Laurie Borges].[Cody Goldey].[Shanay Steelman].[Steven Betsekas]");
            mg2.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant mg3 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg3.setMember("[Employees].[Sheri Nowmer].[Derrick Whelply].[Laurie Borges].[Cody Goldey].[Shanay Steelman].[Arvid Ziegler]");
            mg3.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant mg4 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg4.setMember("[Employees].[Sheri Nowmer].[Derrick Whelply].[Laurie Borges].[Cody Goldey].[Shanay Steelman].[Ann Weyerhaeuser]");
            mg4.setMemberAccess(MemberAccess.ALL);

            hierarchyGrant.getMemberGrants().add(mg1);
            hierarchyGrant.getMemberGrants().add(mg2);
            hierarchyGrant.getMemberGrants().add(mg3);
            hierarchyGrant.getMemberGrants().add(mg4);

            cubeGrant.getHierarchyGrants().add(hierarchyGrant);
            catalogGrant.getCubeGrants().add(cubeGrant);
            role.getAccessCatalogGrants().add(catalogGrant);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));
            result.add(role);
            return result;
        }
    }    

    public static class AccessControlTestModifier15 extends EmfMappingModifier {

        /*
            "<Role name=\"CTO\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\">\n"
            + "        <MemberGrant member=\"[Customers].[USA].[XX]\" access=\"none\"/>\n"
            + "        <MemberGrant member=\"[Customers].[USA].[XX].[Yyy Yyyyyyy]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Customers].[USA]\" access=\"none\"/>\n"
            + "        <MemberGrant member=\"[Customers].[USA].[CA]\" access=\"none\"/>\n"
            + "        <MemberGrant member=\"[Customers].[USA].[CA].[Los Angeles]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Customers].[USA].[CA].[Zzz Zzzz]\" access=\"none\"/>\n"
            + "        <MemberGrant member=\"[Customers].[USA].[CA].[San Francisco]\" access=\"all\"/>\n"
            + "      </HierarchyGrant>\n"
            + "      <HierarchyGrant hierarchy=\"[Gender]\" access=\"none\"/>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>");

        */

        public AccessControlTestModifier15(Catalog catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            AccessRole role = RolapMappingFactory.eINSTANCE.createAccessRole();
            role.setName("CTO");

            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant.setCubeAccess(CubeAccess.ALL);

            AccessHierarchyGrant hg1 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hg1.setHierarchy(CatalogSupplier.HIERARCHY_CUSTOMER);
            hg1.setHierarchyAccess(HierarchyAccess.CUSTOM);

            AccessMemberGrant mg1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg1.setMember("[Customers].[USA].[XX]");
            mg1.setMemberAccess(MemberAccess.NONE);

            AccessMemberGrant mg2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg2.setMember("[Customers].[USA].[XX].[Yyy Yyyyyyy]");
            mg2.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant mg3 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg3.setMember("[Customers].[USA]");
            mg3.setMemberAccess(MemberAccess.NONE);

            AccessMemberGrant mg4 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg4.setMember("[Customers].[USA].[CA]");
            mg4.setMemberAccess(MemberAccess.NONE);

            AccessMemberGrant mg5 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg5.setMember("[Customers].[USA].[CA].[Los Angeles]");
            mg5.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant mg6 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg6.setMember("[Customers].[USA].[CA].[Zzz Zzzz]");
            mg6.setMemberAccess(MemberAccess.NONE);

            AccessMemberGrant mg7 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg7.setMember("[Customers].[USA].[CA].[San Francisco]");
            mg7.setMemberAccess(MemberAccess.ALL);

            hg1.getMemberGrants().add(mg1);
            hg1.getMemberGrants().add(mg2);
            hg1.getMemberGrants().add(mg3);
            hg1.getMemberGrants().add(mg4);
            hg1.getMemberGrants().add(mg5);
            hg1.getMemberGrants().add(mg6);
            hg1.getMemberGrants().add(mg7);

            AccessHierarchyGrant hg2 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hg2.setHierarchy(CatalogSupplier.HIERARCHY_GENDER);
            hg2.setHierarchyAccess(HierarchyAccess.NONE);

            cubeGrant.getHierarchyGrants().add(hg1);
            cubeGrant.getHierarchyGrants().add(hg2);

            catalogGrant.getCubeGrants().add(cubeGrant);
            role.getAccessCatalogGrants().add(catalogGrant);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));
            result.add(role);
            return result;
        }
    }

    public static class AccessControlTestModifier16 extends EmfMappingModifier {

        /*
                "<Role name=\"Role1\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"Partial\" topLevel=\"[Store].[Store State]\">\n"
                + "      </HierarchyGrant>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>\n");
        */

        public AccessControlTestModifier16(Catalog catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            AccessRole role = RolapMappingFactory.eINSTANCE.createAccessRole();
            role.setName("Role1");

            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant.setCubeAccess(CubeAccess.ALL);

            AccessHierarchyGrant hierarchyGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hierarchyGrant.setHierarchy(CatalogSupplier.HIERARCHY_STORE);
            hierarchyGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrant.setRollupPolicy(RollupPolicy.PARTIAL);
            hierarchyGrant.setTopLevel(CatalogSupplier.LEVEL_STORE_STATE);

            cubeGrant.getHierarchyGrants().add(hierarchyGrant);
            catalogGrant.getCubeGrants().add(cubeGrant);
            role.getAccessCatalogGrants().add(catalogGrant);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));
            result.add(role);
            return result;
        }
    }

    public static class AccessControlTestModifier17 extends EmfMappingModifier {

        /*
                "<Role name=\"Role1\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"none\">\n"
                + "      <HierarchyGrant hierarchy=\"[Measures]\" access=\"custom\">\n"
                + "        <MemberGrant member=\"[Measures].[Unit Sales]\" access=\"all\"/>\n"
                + "      </HierarchyGrant>"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>\n"
                + "<Role name=\"Role2\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales Ragged\" access=\"all\"/>\n"
                + "  </SchemaGrant>\n"
                + "</Role>");
        */

        public AccessControlTestModifier17(Catalog catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            // Role1
            AccessRole role1 = RolapMappingFactory.eINSTANCE.createAccessRole();
            role1.setName("Role1");

            AccessCatalogGrant catalogGrant1 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant1.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant1 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant1.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant1.setCubeAccess(CubeAccess.NONE);

            AccessHierarchyGrant hierarchyGrant1 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            //.withHierarchy([Measures])
            hierarchyGrant1.setHierarchyAccess(HierarchyAccess.CUSTOM);

            AccessMemberGrant mg1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg1.setMember("[Measures].[Unit Sales]");
            mg1.setMemberAccess(MemberAccess.ALL);

            hierarchyGrant1.getMemberGrants().add(mg1);
            cubeGrant1.getHierarchyGrants().add(hierarchyGrant1);
            catalogGrant1.getCubeGrants().add(cubeGrant1);
            role1.getAccessCatalogGrants().add(catalogGrant1);

            // Role2
            AccessRole role2 = RolapMappingFactory.eINSTANCE.createAccessRole();
            role2.setName("Role2");

            AccessCatalogGrant catalogGrant2 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant2.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant2 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant2.setCube(CatalogSupplier.CUBE_SALES_RAGGED);
            cubeGrant2.setCubeAccess(CubeAccess.ALL);

            catalogGrant2.getCubeGrants().add(cubeGrant2);
            role2.getAccessCatalogGrants().add(catalogGrant2);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));
            result.add(role1);
            result.add(role2);
            return result;
        }
    }

    public static class AccessControlTestModifier18 extends EmfMappingModifier {

        /*
                "<Role name='Role1'>\n"
                + "  <SchemaGrant access='none'>\n"
                + "    <CubeGrant cube='Sales' access='all'>\n"
                + "      <HierarchyGrant hierarchy='[Store Type]' access='custom' rollupPolicy='partial'>\n"
                + "        <MemberGrant member='[Store Type].[All Store Types]' access='none'/>\n"
                + "        <MemberGrant member='[Store Type].[Supermarket]' access='all'/>\n"
                + "      </HierarchyGrant>\n"
                + "      <HierarchyGrant hierarchy='[Customers]' access='custom' rollupPolicy='partial' >\n"
                + "        <MemberGrant member='[Customers].[All Customers]' access='none'/>\n"
                + "        <MemberGrant member='[Customers].[USA].[WA]' access='all'/>\n"
                + "        <MemberGrant member='[Customers].[USA].[CA]' access='none'/>\n"
                + "        <MemberGrant member='[Customers].[USA].[CA].[Los Angeles]' access='all'/>\n"
                + "      </HierarchyGrant>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>\n");

        */

        public AccessControlTestModifier18(Catalog catalog) {
            super(catalog);
        }


        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            AccessRole role = RolapMappingFactory.eINSTANCE.createAccessRole();
            role.setName("Role1");

            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant.setCubeAccess(CubeAccess.ALL);

            // Store Type hierarchy grant
            AccessHierarchyGrant hg1 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hg1.setHierarchy((Hierarchy) look(CatalogSupplier.HIERARCHY_STORE_TYPE));
            hg1.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hg1.setRollupPolicy(RollupPolicy.PARTIAL);

            AccessMemberGrant mg1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg1.setMember("[Store Type].[All Store Types]");
            mg1.setMemberAccess(MemberAccess.NONE);

            AccessMemberGrant mg2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg2.setMember("[Store Type].[Supermarket]");
            mg2.setMemberAccess(MemberAccess.ALL);

            hg1.getMemberGrants().add(mg1);
            hg1.getMemberGrants().add(mg2);

            // Customers hierarchy grant
            AccessHierarchyGrant hg2 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hg2.setHierarchy(CatalogSupplier.HIERARCHY_CUSTOMER);
            hg2.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hg2.setRollupPolicy(RollupPolicy.PARTIAL);

            AccessMemberGrant mg3 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg3.setMember("[Customers].[All Customers]");
            mg3.setMemberAccess(MemberAccess.NONE);

            AccessMemberGrant mg4 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg4.setMember("[Customers].[USA].[WA]");
            mg4.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant mg5 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg5.setMember("[Customers].[USA].[CA]");
            mg5.setMemberAccess(MemberAccess.NONE);

            AccessMemberGrant mg6 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg6.setMember("[Customers].[USA].[CA].[Los Angeles]");
            mg6.setMemberAccess(MemberAccess.ALL);

            hg2.getMemberGrants().add(mg3);
            hg2.getMemberGrants().add(mg4);
            hg2.getMemberGrants().add(mg5);
            hg2.getMemberGrants().add(mg6);

            cubeGrant.getHierarchyGrants().add(hg1);
            cubeGrant.getHierarchyGrants().add(hg2);

            catalogGrant.getCubeGrants().add(cubeGrant);
            role.getAccessCatalogGrants().add(catalogGrant);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));
            result.add(role);
            return result;
        }

    }

    public static class AccessControlTestModifier19 extends EmfMappingModifier {

        /*
            "<Role name=\"Role1\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"custom\">\n"
            + "      <DimensionGrant dimension=\"[Measures]\" access=\"all\" />\n"
            + "      <DimensionGrant dimension=\"[Education Level]\" access=\"all\" />\n"
            + "      <DimensionGrant dimension=\"[Gender]\" access=\"all\" />\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>\n"
            + "<Role name=\"Role2\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"custom\">\n"
            + "      <DimensionGrant dimension=\"[Measures]\" access=\"all\" />\n"
            + "      <DimensionGrant dimension=\"[Education Level]\" access=\"all\" />\n"
            + "      <DimensionGrant dimension=\"[Customers]\" access=\"none\" />\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>\n"
            + "<Role name=\"Role3\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"custom\">\n"
            + "      <DimensionGrant dimension=\"[Education Level]\" access=\"all\" />\n"
            + "      <DimensionGrant dimension=\"[Measures]\" access=\"custom\" />\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>\n");

        */

        public AccessControlTestModifier19(Catalog catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            // Role1
            AccessRole role1 = RolapMappingFactory.eINSTANCE.createAccessRole();
            role1.setName("Role1");

            AccessCatalogGrant catalogGrant1 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant1.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant1 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant1.setCube(CatalogSupplier.CUBE_SALES);
            cubeGrant1.setCubeAccess(CubeAccess.CUSTOM);

            AccessDimensionGrant dg1 = RolapMappingFactory.eINSTANCE.createAccessDimensionGrant();
            //.withDimension([Measures])
            dg1.setDimensionAccess(DimensionAccess.ALL);

            AccessDimensionGrant dg2 = RolapMappingFactory.eINSTANCE.createAccessDimensionGrant();
            dg2.setDimension(CatalogSupplier.DIMENSION_EDUCATION_LEVEL);
            dg2.setDimensionAccess(DimensionAccess.ALL);

            AccessDimensionGrant dg3 = RolapMappingFactory.eINSTANCE.createAccessDimensionGrant();
            dg3.setDimension(CatalogSupplier.DIMENSION_GENDER);
            dg3.setDimensionAccess(DimensionAccess.ALL);

            cubeGrant1.getDimensionGrants().add(dg1);
            cubeGrant1.getDimensionGrants().add(dg2);
            cubeGrant1.getDimensionGrants().add(dg3);

            catalogGrant1.getCubeGrants().add(cubeGrant1);
            role1.getAccessCatalogGrants().add(catalogGrant1);

            // Role2
            AccessRole role2 = RolapMappingFactory.eINSTANCE.createAccessRole();
            role2.setName("Role2");

            AccessCatalogGrant catalogGrant2 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant2.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant2 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant2.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant2.setCubeAccess(CubeAccess.CUSTOM);

            AccessDimensionGrant dg4 = RolapMappingFactory.eINSTANCE.createAccessDimensionGrant();
            //.withDimension([Measures])
            dg4.setDimensionAccess(DimensionAccess.ALL);

            AccessDimensionGrant dg5 = RolapMappingFactory.eINSTANCE.createAccessDimensionGrant();
            dg5.setDimension(CatalogSupplier.DIMENSION_EDUCATION_LEVEL);
            dg5.setDimensionAccess(DimensionAccess.ALL);

            AccessDimensionGrant dg6 = RolapMappingFactory.eINSTANCE.createAccessDimensionGrant();
            dg6.setDimension(CatalogSupplier.DIMENSION_GENDER);
            dg6.setDimensionAccess(DimensionAccess.NONE);

            cubeGrant2.getDimensionGrants().add(dg4);
            cubeGrant2.getDimensionGrants().add(dg5);
            cubeGrant2.getDimensionGrants().add(dg6);

            catalogGrant2.getCubeGrants().add(cubeGrant2);
            role2.getAccessCatalogGrants().add(catalogGrant2);

            // Role3
            AccessRole role3 = RolapMappingFactory.eINSTANCE.createAccessRole();
            role3.setName("Role3");

            AccessCatalogGrant catalogGrant3 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant3.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant3 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant3.setCube(CatalogSupplier.CUBE_SALES);
            cubeGrant3.setCubeAccess(CubeAccess.CUSTOM);

            AccessDimensionGrant dg7 = RolapMappingFactory.eINSTANCE.createAccessDimensionGrant();
            dg7.setDimension(CatalogSupplier.DIMENSION_EDUCATION_LEVEL);
            dg7.setDimensionAccess(DimensionAccess.ALL);

            AccessDimensionGrant dg8 = RolapMappingFactory.eINSTANCE.createAccessDimensionGrant();
            //.withDimension("[Measures]")
            dg8.setDimensionAccess(DimensionAccess.CUSTOM);

            cubeGrant3.getDimensionGrants().add(dg7);
            cubeGrant3.getDimensionGrants().add(dg8);

            catalogGrant3.getCubeGrants().add(cubeGrant3);
            role3.getAccessCatalogGrants().add(catalogGrant3);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));
            result.add(role1);
            result.add(role2);
            result.add(role3);
            return result;
        }

    }

    public static class AccessControlTestModifier20 extends EmfMappingModifier {

        /*
                    "  <Role name=\"Role1\">\n"
                    + "    <SchemaGrant access=\"all\">\n"
                    + "      <CubeGrant cube=\"Sales\" access=\"all\">\n"
                    + "        <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" topLevel=\"[Customers].[City]\" bottomLevel=\"[Customers].[City]\" rollupPolicy=\"partial\">\n"
                    + "          <MemberGrant member=\"[City].[Coronado]\" access=\"all\">\n"
                    + "          </MemberGrant>\n"
                    + "        </HierarchyGrant>\n"
                    + "      </CubeGrant>\n"
                    + "    </SchemaGrant>\n"
                    + "  </Role>\n"
                    + "  <Role name=\"Role2\">\n"
                    + "    <SchemaGrant access=\"all\">\n"
                    + "      <CubeGrant cube=\"Sales\" access=\"all\">\n"
                    + "        <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" topLevel=\"[Customers].[City]\" bottomLevel=\"[Customers].[City]\" rollupPolicy=\"partial\">\n"
                    + "          <MemberGrant member=\"[City].[Burbank]\" access=\"all\">\n"
                    + "          </MemberGrant>\n"
                    + "        </HierarchyGrant>\n"
                    + "      </CubeGrant>\n"
                    + "    </SchemaGrant>\n"
                    + "  </Role>\n");

        */

        public AccessControlTestModifier20(Catalog catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            // Role1
            AccessRole role1 = RolapMappingFactory.eINSTANCE.createAccessRole();
            role1.setName("Role1");

            AccessCatalogGrant catalogGrant1 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant1.setCatalogAccess(CatalogAccess.ALL);

            AccessCubeGrant cubeGrant1 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant1.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant1.setCubeAccess(CubeAccess.ALL);

            AccessHierarchyGrant hg1 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hg1.setHierarchy(CatalogSupplier.HIERARCHY_CUSTOMER);
            hg1.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hg1.setTopLevel((Level) look(CatalogSupplier.LEVEL_CITY_TABLE_COLUMN_CITY));
            hg1.setBottomLevel((Level) look(CatalogSupplier.LEVEL_CITY_TABLE_COLUMN_CITY));
            hg1.setRollupPolicy(RollupPolicy.PARTIAL);

            AccessMemberGrant mg1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg1.setMember("[City].[Coronado]");
            mg1.setMemberAccess(MemberAccess.ALL);

            hg1.getMemberGrants().add(mg1);
            cubeGrant1.getHierarchyGrants().add(hg1);
            catalogGrant1.getCubeGrants().add(cubeGrant1);
            role1.getAccessCatalogGrants().add(catalogGrant1);

            // Role2
            AccessRole role2 = RolapMappingFactory.eINSTANCE.createAccessRole();
            role2.setName("Role2");

            AccessCatalogGrant catalogGrant2 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant2.setCatalogAccess(CatalogAccess.ALL);

            AccessCubeGrant cubeGrant2 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant2.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant2.setCubeAccess(CubeAccess.ALL);

            AccessHierarchyGrant hg2 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hg2.setHierarchy(CatalogSupplier.HIERARCHY_CUSTOMER);
            hg2.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hg2.setTopLevel(CatalogSupplier.LEVEL_CITY_TABLE_COLUMN_CITY);
            hg2.setBottomLevel((Level) look(CatalogSupplier.LEVEL_CITY_TABLE_COLUMN_CITY));
            hg2.setRollupPolicy(RollupPolicy.PARTIAL);

            AccessMemberGrant mg2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg2.setMember("[City].[Burbank]");
            mg2.setMemberAccess(MemberAccess.ALL);

            hg2.getMemberGrants().add(mg2);
            cubeGrant2.getHierarchyGrants().add(hg2);
            catalogGrant2.getCubeGrants().add(cubeGrant2);
            role2.getAccessCatalogGrants().add(catalogGrant2);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));
            result.add(role1);
            result.add(role2);
            return result;
        }
    }

    public static class AccessControlTestModifier21 extends EmfMappingModifier {

        /*
            "<Role name=\"Bacon\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\"partial\">\n"
            + "        <MemberGrant member=\"[Customers].[USA].[CA].[Los Angeles]\" access=\"all\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>");

        */

        public AccessControlTestModifier21(Catalog catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            AccessRole role = RolapMappingFactory.eINSTANCE.createAccessRole();
            role.setName("Bacon");

            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant.setCubeAccess(CubeAccess.ALL);

            AccessHierarchyGrant hierarchyGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hierarchyGrant.setHierarchy((Hierarchy) look(CatalogSupplier.HIERARCHY_CUSTOMER));
            hierarchyGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrant.setRollupPolicy(RollupPolicy.PARTIAL);

            AccessMemberGrant memberGrant = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrant.setMember("[Customers].[USA].[CA].[Los Angeles]");
            memberGrant.setMemberAccess(MemberAccess.ALL);

            hierarchyGrant.getMemberGrants().add(memberGrant);
            cubeGrant.getHierarchyGrants().add(hierarchyGrant);
            catalogGrant.getCubeGrants().add(cubeGrant);
            role.getAccessCatalogGrants().add(catalogGrant);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));
            result.add(role);
            return result;
        }

    }

    public static class AccessControlTestModifier22 extends EmfMappingModifier {

        /*
            "<Role name=\"Role1\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"partial\">\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA]\" access=\"all\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>");
        */

        public AccessControlTestModifier22(Catalog catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            AccessRole role = RolapMappingFactory.eINSTANCE.createAccessRole();
            role.setName("Role1");

            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant.setCubeAccess(CubeAccess.ALL);

            AccessHierarchyGrant hierarchyGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hierarchyGrant.setHierarchy((Hierarchy) look(CatalogSupplier.HIERARCHY_STORE));
            hierarchyGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrant.setRollupPolicy(RollupPolicy.PARTIAL);

            AccessMemberGrant memberGrant = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrant.setMember("[Store].[USA].[CA]");
            memberGrant.setMemberAccess(MemberAccess.ALL);

            hierarchyGrant.getMemberGrants().add(memberGrant);
            cubeGrant.getHierarchyGrants().add(hierarchyGrant);
            catalogGrant.getCubeGrants().add(cubeGrant);
            role.getAccessCatalogGrants().add(catalogGrant);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));
            result.add(role);
            return result;
        }
    }

    public static class AccessControlTestModifier23 extends EmfMappingModifier {

        /*
            "<Role name=\"Role1\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"partial\">\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA]\" access=\"all\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>"
            + "<Role name=\"Role2\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"partial\">\n"
            + "        <MemberGrant member=\"[Store].[USA].[OR]\" access=\"all\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>");
        */

        public AccessControlTestModifier23(Catalog catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            // Role1
            AccessRole role1 = RolapMappingFactory.eINSTANCE.createAccessRole();
            role1.setName("Role1");

            AccessCatalogGrant catalogGrant1 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant1.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant1 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant1.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant1.setCubeAccess(CubeAccess.ALL);

            AccessHierarchyGrant hg1 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hg1.setHierarchy((Hierarchy) look(CatalogSupplier.HIERARCHY_STORE));
            hg1.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hg1.setRollupPolicy(RollupPolicy.PARTIAL);

            AccessMemberGrant mg1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg1.setMember("[Store].[USA].[CA]");
            mg1.setMemberAccess(MemberAccess.ALL);

            hg1.getMemberGrants().add(mg1);
            cubeGrant1.getHierarchyGrants().add(hg1);
            catalogGrant1.getCubeGrants().add(cubeGrant1);
            role1.getAccessCatalogGrants().add(catalogGrant1);

            // Role2
            AccessRole role2 = RolapMappingFactory.eINSTANCE.createAccessRole();
            role2.setName("Role2");

            AccessCatalogGrant catalogGrant2 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant2.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant2 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant2.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant2.setCubeAccess(CubeAccess.ALL);

            AccessHierarchyGrant hg2 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hg2.setHierarchy((Hierarchy) look(CatalogSupplier.HIERARCHY_STORE));
            hg2.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hg2.setRollupPolicy(RollupPolicy.PARTIAL);

            AccessMemberGrant mg2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg2.setMember("[Store].[USA].[OR]");
            mg2.setMemberAccess(MemberAccess.ALL);

            hg2.getMemberGrants().add(mg2);
            cubeGrant2.getHierarchyGrants().add(hg2);
            catalogGrant2.getCubeGrants().add(cubeGrant2);
            role2.getAccessCatalogGrants().add(catalogGrant2);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));
            result.add(role1);
            result.add(role2);
            return result;
        }
    }

    public static class AccessControlTestModifier24 extends EmfMappingModifier {

        /*
                "<Role name=\"Admin\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Store]\" rollupPolicy=\"partial\" access=\"custom\">\n"
                + "        <MemberGrant member=\"[Store].[USA].[CA]\" access=\"all\">\n"
                + "        </MemberGrant>\n"
                + "      </HierarchyGrant>\n"
                + "      <HierarchyGrant hierarchy=\"[Customers]\" rollupPolicy=\"partial\" access=\"custom\">\n"
                + "        <MemberGrant member=\"[Customers].[USA].[CA]\" access=\"all\">\n"
                + "        </MemberGrant>\n"
                + "      </HierarchyGrant>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role> \n");
        */

        public AccessControlTestModifier24(Catalog catalog) {
            super(catalog);
        }


        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            AccessRole role = RolapMappingFactory.eINSTANCE.createAccessRole();
            role.setName("Admin");

            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant.setCubeAccess(CubeAccess.ALL);

            // Store hierarchy grant
            AccessHierarchyGrant hg1 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hg1.setHierarchy((Hierarchy) look(CatalogSupplier.HIERARCHY_STORE));
            hg1.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hg1.setRollupPolicy(RollupPolicy.PARTIAL);

            AccessMemberGrant mg1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg1.setMember("[Store].[Store].[USA].[CA]");
            mg1.setMemberAccess(MemberAccess.ALL);

            hg1.getMemberGrants().add(mg1);

            // Customers hierarchy grant
            AccessHierarchyGrant hg2 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hg2.setHierarchy((Hierarchy) look(CatalogSupplier.HIERARCHY_CUSTOMER));
            hg2.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hg2.setRollupPolicy(RollupPolicy.PARTIAL);

            AccessMemberGrant mg2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg2.setMember("[Customers].[Customers].[USA].[CA]");
            mg2.setMemberAccess(MemberAccess.ALL);

            hg2.getMemberGrants().add(mg2);

            cubeGrant.getHierarchyGrants().add(hg1);
            cubeGrant.getHierarchyGrants().add(hg2);

            catalogGrant.getCubeGrants().add(cubeGrant);
            role.getAccessCatalogGrants().add(catalogGrant);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));
            result.add(role);
            return result;
        }

    }

    public static class AccessControlTestModifier25 extends EmfMappingModifier {

        /*
            "<Role name=\"test\">\n"
            + " <SchemaGrant access=\"none\">\n"
            + "   <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "     <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\"\n"
            + "         topLevel=\"[Store].[Store Country]\" rollupPolicy=\"partial\">\n"
            + "       <MemberGrant member=\"[Store].[All Stores]\" access=\"none\"/>\n"
            + "       <MemberGrant member=\"[Store].[USA].[CA].[Los Angeles]\" access=\"all\"/>\n"
            + "       <MemberGrant member=\"[Store].[USA].[CA].[Alameda]\" access=\"all\"/>\n"
            + "       <MemberGrant member=\"[Store].[USA].[CA].[Beverly Hills]\"\n"
            + "access=\"all\"/>\n"
            + "       <MemberGrant member=\"[Store].[USA].[CA].[San Francisco]\"\n"
            + "access=\"all\"/>\n"
            + "       <MemberGrant member=\"[Store].[USA].[CA].[San Diego]\" access=\"all\"/>\n"
            + "\n"
            + "       <MemberGrant member=\"[Store].[USA].[OR].[Portland]\" access=\"all\"/>\n"
            + "       <MemberGrant member=\"[Store].[USA].[OR].[Salem]\" access=\"all\"/>\n"
            + "     </HierarchyGrant>\n"
            + "   </CubeGrant>\n"
            + " </SchemaGrant>\n"
            + "</Role>");
        */

        public AccessControlTestModifier25(Catalog catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            AccessRole role = RolapMappingFactory.eINSTANCE.createAccessRole();
            role.setName("test");

            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant.setCubeAccess(CubeAccess.ALL);

            AccessHierarchyGrant hierarchyGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hierarchyGrant.setHierarchy((Hierarchy) look(CatalogSupplier.HIERARCHY_STORE));
            hierarchyGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrant.setTopLevel((Level) look(CatalogSupplier.LEVEL_STORE_COUNTRY));
            hierarchyGrant.setRollupPolicy(RollupPolicy.PARTIAL);

            AccessMemberGrant mg1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg1.setMember("[Store].[All Stores]");
            mg1.setMemberAccess(MemberAccess.NONE);

            AccessMemberGrant mg2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg2.setMember("[Store].[USA].[CA].[Los Angeles]");
            mg2.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant mg3 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg3.setMember("[Store].[USA].[CA].[Alameda]");
            mg3.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant mg4 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg4.setMember("[Store].[USA].[CA].[Beverly Hills]");
            mg4.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant mg5 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg5.setMember("[Store].[USA].[CA].[San Francisco]");
            mg5.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant mg6 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg6.setMember("[Store].[USA].[CA].[San Diego]");
            mg6.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant mg7 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg7.setMember("[Store].[USA].[OR].[Portland]");
            mg7.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant mg8 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            mg8.setMember("[Store].[USA].[OR].[Salem]");
            mg8.setMemberAccess(MemberAccess.ALL);

            hierarchyGrant.getMemberGrants().add(mg1);
            hierarchyGrant.getMemberGrants().add(mg2);
            hierarchyGrant.getMemberGrants().add(mg3);
            hierarchyGrant.getMemberGrants().add(mg4);
            hierarchyGrant.getMemberGrants().add(mg5);
            hierarchyGrant.getMemberGrants().add(mg6);
            hierarchyGrant.getMemberGrants().add(mg7);
            hierarchyGrant.getMemberGrants().add(mg8);

            cubeGrant.getHierarchyGrants().add(hierarchyGrant);
            catalogGrant.getCubeGrants().add(cubeGrant);
            role.getAccessCatalogGrants().add(catalogGrant);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));
            result.add(role);
            return result;
        }
    }

    public static class AccessControlTestModifier26 extends EmfMappingModifier {

        /*
            "<Role name=\"dev\">"
            + "    <SchemaGrant access=\"all\">"
            + "      <CubeGrant cube=\"Sales\" access=\"all\">"
            + "      </CubeGrant>"
            + "      <CubeGrant cube=\"HR\" access=\"all\">"
            + "      </CubeGrant>"
            + "      <CubeGrant cube=\"Warehouse and Sales\" access=\"all\">"
            + "         <HierarchyGrant hierarchy=\"Measures\" access=\"custom\">"
            + "            <MemberGrant member=\"[Measures].[Warehouse Sales]\" access=\"all\">"
            + "            </MemberGrant>"
            + "         </HierarchyGrant>"
            + "     </CubeGrant>"
            + "  </SchemaGrant>"
            + "</Role>";
        */

        public AccessControlTestModifier26(Catalog catalog) {
            super(catalog);
        }


        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            AccessRole role = RolapMappingFactory.eINSTANCE.createAccessRole();
            role.setName("dev");

            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.ALL);

            // Sales cube grant
            AccessCubeGrant cubeGrant1 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant1.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant1.setCubeAccess(CubeAccess.ALL);

            // HR cube grant
            AccessCubeGrant cubeGrant2 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant2.setCube((Cube) look(CatalogSupplier.CUBE_HR));
            cubeGrant2.setCubeAccess(CubeAccess.ALL);

            // Warehouse and Sales cube grant with hierarchy grant
            AccessCubeGrant cubeGrant3 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant3.setCube((Cube) look(CatalogSupplier.CUBE_VIRTIAL_WAREHOUSE_AND_SALES));
            cubeGrant3.setCubeAccess(CubeAccess.ALL);

            AccessHierarchyGrant hierarchyGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            //.withHierarchy("Measures")
            hierarchyGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);

            AccessMemberGrant memberGrant = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrant.setMember("[Measures].[Warehouse Sales]");
            memberGrant.setMemberAccess(MemberAccess.ALL);

            hierarchyGrant.getMemberGrants().add(memberGrant);
            cubeGrant3.getHierarchyGrants().add(hierarchyGrant);

            catalogGrant.getCubeGrants().add(cubeGrant1);
            catalogGrant.getCubeGrants().add(cubeGrant2);
            catalogGrant.getCubeGrants().add(cubeGrant3);

            role.getAccessCatalogGrants().add(catalogGrant);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));
            result.add(role);
            return result;
        }
    }

    public static class AccessControlTestModifier27 extends EmfMappingModifier {

        /*
            "<Role name=\"dev\">"
            + "    <SchemaGrant access=\"all\">"
            + "      <CubeGrant cube=\"Sales\" access=\"all\">"
            + "         <HierarchyGrant hierarchy=\"Measures\" access=\"custom\">"
            + "            <MemberGrant member=\"[Measures].[Unit Sales]\" access=\"all\">"
            + "            </MemberGrant>"
            + "         </HierarchyGrant>"
            + "      </CubeGrant>"
            + "      <CubeGrant cube=\"HR\" access=\"all\">"
            + "      </CubeGrant>"
            + "      <CubeGrant cube=\"Warehouse and Sales\" access=\"all\">"
            + "     </CubeGrant>"
            + "  </SchemaGrant>"
            + "</Role>";
        */

        public AccessControlTestModifier27(Catalog catalog) {
            super(catalog);
        }


        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            AccessRole role = RolapMappingFactory.eINSTANCE.createAccessRole();
            role.setName("dev");

            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.ALL);

            // Sales cube grant with hierarchy grant
            AccessCubeGrant cubeGrant1 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant1.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant1.setCubeAccess(CubeAccess.ALL);

            AccessHierarchyGrant hierarchyGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            //.withHierarchy("Measures")
            hierarchyGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);

            AccessMemberGrant memberGrant = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrant.setMember("[Measures].[Unit Sales]");
            memberGrant.setMemberAccess(MemberAccess.ALL);

            hierarchyGrant.getMemberGrants().add(memberGrant);
            cubeGrant1.getHierarchyGrants().add(hierarchyGrant);

            // HR cube grant
            AccessCubeGrant cubeGrant2 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant2.setCube((Cube) look(CatalogSupplier.CUBE_HR));
            cubeGrant2.setCubeAccess(CubeAccess.ALL);

            // Warehouse and Sales cube grant
            AccessCubeGrant cubeGrant3 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant3.setCube((Cube) look(CatalogSupplier.CUBE_VIRTIAL_WAREHOUSE_AND_SALES));
            cubeGrant3.setCubeAccess(CubeAccess.ALL);

            catalogGrant.getCubeGrants().add(cubeGrant1);
            catalogGrant.getCubeGrants().add(cubeGrant2);
            catalogGrant.getCubeGrants().add(cubeGrant3);

            role.getAccessCatalogGrants().add(catalogGrant);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));
            result.add(role);
            return result;
        }
    }

    public static class AccessControlTestModifier28 extends EmfMappingModifier {

        /*
                "<Role name=\"Admin\">\n"
                + "    <SchemaGrant access=\"none\">\n"
                + "      <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "        <HierarchyGrant hierarchy=\"[Gender]\" rollupPolicy=\"partial\" access=\"custom\">\n"
                + "          <MemberGrant member=\"[Gender].[F]\" access=\"all\">\n"
                + "          </MemberGrant>\n"
                + "        </HierarchyGrant>\n"
                + "      </CubeGrant>\n"
                + "    </SchemaGrant>\n"
                + "  </Role>\n");
        */

        public AccessControlTestModifier28(Catalog catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            AccessRole role = RolapMappingFactory.eINSTANCE.createAccessRole();
            role.setName("Admin");

            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant.setCubeAccess(CubeAccess.ALL);

            AccessHierarchyGrant hierarchyGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hierarchyGrant.setHierarchy((Hierarchy) look(CatalogSupplier.HIERARCHY_GENDER));
            hierarchyGrant.setRollupPolicy(RollupPolicy.PARTIAL);
            hierarchyGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);

            AccessMemberGrant memberGrant = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrant.setMember("[Gender].[Gender].[F]");
            memberGrant.setMemberAccess(MemberAccess.ALL);

            hierarchyGrant.getMemberGrants().add(memberGrant);
            cubeGrant.getHierarchyGrants().add(hierarchyGrant);
            catalogGrant.getCubeGrants().add(cubeGrant);
            role.getAccessCatalogGrants().add(catalogGrant);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));
            result.add(role);
            return result;
        }
    }

    public static class AccessControlTestModifier39 extends EmfMappingModifier {
        /*
                "<Role name=\"Role1\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\""
                    + rollupPolicy
                    + "\" bottomLevel=\"[Customers].[City]\">\n"
                    + "        <MemberGrant member=\"[Customers].[USA]\" access=\"all\"/>\n"
                    + "        <MemberGrant member=\"[Customers].[USA].[CA]\" access=\"all\"/>\n"
                    + "        <MemberGrant member=\"[Customers].[USA].[CA].[Los Angeles]\" access=\"none\"/>\n"
                    + "      </HierarchyGrant>\n"
                    + "    </CubeGrant>\n"
                    + "  </SchemaGrant>\n"
                    + "</Role>");
        */
        private final RollupPolicy policy;

        public AccessControlTestModifier39(Catalog catalog, RollupPolicy policy) {
            super(catalog);
            this.policy = policy;
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            AccessRole role = RolapMappingFactory.eINSTANCE.createAccessRole();
            role.setName("Role1");

            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant.setCubeAccess(CubeAccess.ALL);

            AccessHierarchyGrant hierarchyGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hierarchyGrant.setHierarchy((Hierarchy) look(CatalogSupplier.HIERARCHY_CUSTOMER));
            hierarchyGrant.setRollupPolicy(policy);
            hierarchyGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrant.setBottomLevel(CatalogSupplier.LEVEL_CUSTOMER_CITY);

            AccessMemberGrant memberGrantUSA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantUSA.setMember("[Customers].[USA]");
            memberGrantUSA.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantCA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantCA.setMember("[Customers].[USA].[CA]");
            memberGrantCA.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantLA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantLA.setMember("[Customers].[USA].[CA].[Los Angeles]");
            memberGrantLA.setMemberAccess(MemberAccess.NONE);

            hierarchyGrant.getMemberGrants().add(memberGrantUSA);
            hierarchyGrant.getMemberGrants().add(memberGrantCA);
            hierarchyGrant.getMemberGrants().add(memberGrantLA);

            cubeGrant.getHierarchyGrants().add(hierarchyGrant);
            catalogGrant.getCubeGrants().add(cubeGrant);
            role.getAccessCatalogGrants().add(catalogGrant);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));
            result.add(role);
            return result;
        }
    }

    public static class AccessControlTestModifier40 extends EmfMappingModifier {
        /*
                "<Role name=\"Role1\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\""
                + policy
                + "\">\n"
                + "        <MemberGrant member=\"[Customers].[USA]\" access=\"all\"/>\n"
                + "        <MemberGrant member=\"[Customers].[USA].[CA].[San Francisco].[Gladys Evans]\" access=\"none\"/>\n"
                + "      </HierarchyGrant>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>");
        */
        private final RollupPolicy policy;

        public AccessControlTestModifier40(Catalog catalog, RollupPolicy policy) {
            super(catalog);
            this.policy = policy;
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            AccessRole role = RolapMappingFactory.eINSTANCE.createAccessRole();
            role.setName("Role1");

            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant.setCubeAccess(CubeAccess.ALL);

            AccessHierarchyGrant hierarchyGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hierarchyGrant.setHierarchy((Hierarchy) look(CatalogSupplier.HIERARCHY_CUSTOMER));
            hierarchyGrant.setRollupPolicy(policy);
            hierarchyGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);

            AccessMemberGrant memberGrantUSA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantUSA.setMember("[Customers].[USA]");
            memberGrantUSA.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantGladys = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantGladys.setMember("[Customers].[USA].[CA].[San Francisco].[Gladys Evans]");
            memberGrantGladys.setMemberAccess(MemberAccess.NONE);

            hierarchyGrant.getMemberGrants().add(memberGrantUSA);
            hierarchyGrant.getMemberGrants().add(memberGrantGladys);

            cubeGrant.getHierarchyGrants().add(hierarchyGrant);
            catalogGrant.getCubeGrants().add(cubeGrant);
            role.getAccessCatalogGrants().add(catalogGrant);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));
            result.add(role);
            return result;
        }
    }

    public static class AccessControlTestModifier41 extends EmfMappingModifier {
        /*
                "<Role name=\"Role1\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" rollupPolicy=\""
                + policy
                + "\">\n"
                + "        <MemberGrant member=\"[Customers].[USA]\" access=\"all\"/>\n"
                + "        <MemberGrant member=\"[Customers].[USA].[CA].[San Francisco].[Gladys Evans]\" access=\"none\"/>\n"
                + "      </HierarchyGrant>\n"
                + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\""
                + policy
                + "\">\n"
                + "        <MemberGrant member=\"[Store].[USA].[CA]\" access=\"all\"/>\n"
                + "        <MemberGrant member=\"[Store].[USA].[CA].[San Francisco].[Store 14]\" access=\"none\"/>\n"
                + "      </HierarchyGrant>\n"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>");
        */
        private final RollupPolicy policy;

        public AccessControlTestModifier41(Catalog catalog, RollupPolicy policy) {
            super(catalog);
            this.policy = policy;
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            AccessRole role = RolapMappingFactory.eINSTANCE.createAccessRole();
            role.setName("Role1");

            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant.setCubeAccess(CubeAccess.ALL);

            // Customers hierarchy grant
            AccessHierarchyGrant hierarchyGrantCustomers = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hierarchyGrantCustomers.setHierarchy((Hierarchy) look(CatalogSupplier.HIERARCHY_CUSTOMER));
            hierarchyGrantCustomers.setRollupPolicy(policy);
            hierarchyGrantCustomers.setHierarchyAccess(HierarchyAccess.CUSTOM);

            AccessMemberGrant memberGrantUSA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantUSA.setMember("[Customers].[USA]");
            memberGrantUSA.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantGladys = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantGladys.setMember("[Customers].[USA].[CA].[San Francisco].[Gladys Evans]");
            memberGrantGladys.setMemberAccess(MemberAccess.NONE);

            hierarchyGrantCustomers.getMemberGrants().add(memberGrantUSA);
            hierarchyGrantCustomers.getMemberGrants().add(memberGrantGladys);

            // Store hierarchy grant
            AccessHierarchyGrant hierarchyGrantStore = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hierarchyGrantStore.setHierarchy((Hierarchy) look(CatalogSupplier.HIERARCHY_STORE));
            hierarchyGrantStore.setRollupPolicy(policy);
            hierarchyGrantStore.setHierarchyAccess(HierarchyAccess.CUSTOM);

            AccessMemberGrant memberGrantStoreCA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantStoreCA.setMember("[Store].[USA].[CA]");
            memberGrantStoreCA.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantStore14 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantStore14.setMember("[Store].[USA].[CA].[San Francisco].[Store 14]");
            memberGrantStore14.setMemberAccess(MemberAccess.NONE);

            hierarchyGrantStore.getMemberGrants().add(memberGrantStoreCA);
            hierarchyGrantStore.getMemberGrants().add(memberGrantStore14);

            cubeGrant.getHierarchyGrants().add(hierarchyGrantCustomers);
            cubeGrant.getHierarchyGrants().add(hierarchyGrantStore);
            catalogGrant.getCubeGrants().add(cubeGrant);
            role.getAccessCatalogGrants().add(catalogGrant);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema).stream()
                .filter(r -> !"Role1".equals(r.getName())).toList());
            result.add(role);
            return result;
        }
    }

    public static class AccessControlTestModifier42 extends EmfMappingModifier {
        /*
                "<Role name=\"California manager\">\n"
                + "  <SchemaGrant access=\"none\">\n"
                + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "      <HierarchyGrant hierarchy=\"[Store]\" rollupPolicy=\""
                + policy.name().toLowerCase()
                + "\" access=\"custom\">\n"
                + "        <MemberGrant member=\"[Store].[USA].[CA]\" access=\"all\"/>\n"
                + "        <MemberGrant member=\"[Store].[USA].[OR].[Portland]\" access=\"all\"/>\n"
                + "      </HierarchyGrant>"
                + "    </CubeGrant>\n"
                + "  </SchemaGrant>\n"
                + "</Role>");
        */
        private final RollupPolicy policy;

        public AccessControlTestModifier42(Catalog catalog, RollupPolicy policy) {
            super(catalog);
            this.policy = policy;
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            AccessRole role = RolapMappingFactory.eINSTANCE.createAccessRole();
            role.setName("California manager");

            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant.setCubeAccess(CubeAccess.ALL);

            AccessHierarchyGrant hierarchyGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hierarchyGrant.setHierarchy((Hierarchy) look(CatalogSupplier.HIERARCHY_STORE));
            hierarchyGrant.setRollupPolicy(policy);
            hierarchyGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);

            AccessMemberGrant memberGrantCA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantCA.setMember("[Store].[USA].[CA]");
            memberGrantCA.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantPortland = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantPortland.setMember("[Store].[USA].[OR].[Portland]");
            memberGrantPortland.setMemberAccess(MemberAccess.ALL);

            hierarchyGrant.getMemberGrants().add(memberGrantCA);
            hierarchyGrant.getMemberGrants().add(memberGrantPortland);

            cubeGrant.getHierarchyGrants().add(hierarchyGrant);
            catalogGrant.getCubeGrants().add(cubeGrant);
            role.getAccessCatalogGrants().add(catalogGrant);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema).stream()
                .filter(r -> !"California manager".equals(r.getName())).toList());
            result.add(role);
            return result;
        }
    }

    public static class AccessControlTestModifier29 extends EmfMappingModifier {
        /*
                "<Role name=\"Admin\">\n"
                + "    <SchemaGrant access=\"none\">\n"
                + "      <CubeGrant cube=\"Sales\" access=\"all\">\n"
                + "        <HierarchyGrant hierarchy=\"[Gender]\" rollupPolicy=\"partial\" access=\"custom\">\n"
                + "          <MemberGrant member=\"[Gender].[F]\" access=\"all\">\n"
                + "          </MemberGrant>\n"
                + "        </HierarchyGrant>\n"
                + "      </CubeGrant>\n"
                + "    </SchemaGrant>\n"
                + "  </Role>\n");
        */
        /*
            "<Cube name=\"TinySales\">\n"
            + "  <Table name=\"sales_fact_1997\"/>\n"
            + "  <DimensionUsage name=\"Product\" source=\"Product\" foreignKey=\"product_id\"/>\n"
            + "  <DimensionUsage name=\"Store2\" source=\"Store2\" foreignKey=\"store_id\"/>\n"
            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"/>\n"
            + "</Cube>";
         */
        /*
                     "<Dimension name=\"Store2\">\n"
            + "  <Hierarchy hasAll=\"%s\" primaryKey=\"store_id\" %s >\n"
            + "    <Table name=\"store\"/>\n"
            + "    <Level name=\"Store Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
            + "    <Level name=\"Store State\" column=\"store_state\" uniqueMembers=\"true\"/>\n"
            + "  </Hierarchy>\n"
            + "</Dimension>\n";
         */
        /*
                    "<Role name=\"test\">\n"
            + "        <SchemaGrant access=\"none\">\n"
            + "            <CubeGrant cube=\"TinySales\" access=\"all\">\n"
            + "                <HierarchyGrant hierarchy=\"[Store2]\" access=\"custom\"\n"
            + "                                 rollupPolicy=\"%s\">\n"
            + "                    <MemberGrant member=\"[Store2].[USA].[CA]\" access=\"all\"/>\n"
            + "                    <MemberGrant member=\"[Store2].[USA].[OR]\" access=\"all\"/>\n"
            + "                    <MemberGrant member=\"[Store2].[Canada]\" access=\"all\"/>\n"
            + "                </HierarchyGrant>\n"
            + "            </CubeGrant>\n"
            + "        </SchemaGrant>\n"
            + "    </Role> ";
         */
        private final Boolean hasAll;
        private final String defaultMem;
        private final RollupPolicy policy;
        private PhysicalCube tinySalesCube;
        private ExplicitHierarchy store2Hierarchy;

        public AccessControlTestModifier29(Catalog catalog, Boolean hasAll, String defaultMem, RollupPolicy policy) {
            super(catalog);
            this.hasAll = hasAll;
            this.defaultMem = defaultMem;
            this.policy = policy;
        }

        @Override
        protected List<? extends CubeMapping> catalogCubes(CatalogMapping schema) {
            // Create Store2 dimension
            StandardDimension store2Dimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            store2Dimension.setName("Store2");

            store2Hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            store2Hierarchy.setHasAll(hasAll);
            if (defaultMem != null) {
                store2Hierarchy.setDefaultMember(defaultMem);
            }
            store2Hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);

            TableQuery tableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            tableQuery.setTable(CatalogSupplier.TABLE_STORE);
            store2Hierarchy.setQuery(tableQuery);

            Level storeCountryLevel = RolapMappingFactory.eINSTANCE.createLevel();
            storeCountryLevel.setName("Store Country");
            storeCountryLevel.setColumn(CatalogSupplier.COLUMN_STORE_COUNTRY_STORE);
            storeCountryLevel.setUniqueMembers(true);

            Level storeStateLevel = RolapMappingFactory.eINSTANCE.createLevel();
            storeStateLevel.setName("Store State");
            storeStateLevel.setColumn(CatalogSupplier.COLUMN_STORE_STATE_STORE);
            storeStateLevel.setUniqueMembers(true);

            store2Hierarchy.getLevels().add(storeCountryLevel);
            store2Hierarchy.getLevels().add(storeStateLevel);

            store2Dimension.getHierarchies().add(store2Hierarchy);

            // Create TinySales cube
            tinySalesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            tinySalesCube.setName("TinySales");

            TableQuery salesFactQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            salesFactQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
            tinySalesCube.setQuery(salesFactQuery);

            // Product dimension connector
            DimensionConnector productConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            productConnector.setOverrideDimensionName("Product");
            productConnector.setDimension((org.eclipse.daanse.rolap.mapping.emf.rolapmapping.Dimension) look(CatalogSupplier.DIMENSION_PRODUCT));
            productConnector.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);

            // Store2 dimension connector
            DimensionConnector store2Connector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            store2Connector.setOverrideDimensionName("Store2");
            store2Connector.setDimension(store2Dimension);
            store2Connector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);

            tinySalesCube.getDimensionConnectors().add(productConnector);
            tinySalesCube.getDimensionConnectors().add(store2Connector);

            // Measure group
            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

            SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);

            measureGroup.getMeasures().add(unitSalesMeasure);
            tinySalesCube.getMeasureGroups().add(measureGroup);

            List<CubeMapping> result = new ArrayList<>();
            result.addAll(super.catalogCubes(schema).stream()
                .filter(c -> !"TinySales".equals(c.getName())).toList());
            result.add(tinySalesCube);
            return result;
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            AccessRole role = RolapMappingFactory.eINSTANCE.createAccessRole();
            role.setName("test");

            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant.setCube(tinySalesCube);
            cubeGrant.setCubeAccess(CubeAccess.ALL);

            AccessHierarchyGrant hierarchyGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hierarchyGrant.setHierarchy(store2Hierarchy);
            hierarchyGrant.setRollupPolicy(policy);
            hierarchyGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);

            AccessMemberGrant memberGrantCA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantCA.setMember("[Store2].[USA].[CA]");
            memberGrantCA.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantOR = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantOR.setMember("[Store2].[USA].[OR]");
            memberGrantOR.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantCanada = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantCanada.setMember("[Store2].[Canada]");
            memberGrantCanada.setMemberAccess(MemberAccess.ALL);

            hierarchyGrant.getMemberGrants().add(memberGrantCA);
            hierarchyGrant.getMemberGrants().add(memberGrantOR);
            hierarchyGrant.getMemberGrants().add(memberGrantCanada);

            cubeGrant.getHierarchyGrants().add(hierarchyGrant);
            catalogGrant.getCubeGrants().add(cubeGrant);
            role.getAccessCatalogGrants().add(catalogGrant);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema).stream()
                .filter(r -> !"test".equals(r.getName())).toList());
            result.add(role);
            return result;
        }
    }

    public static class AccessControlTestModifier30 extends EmfMappingModifier {
        /*
            "<Role name=\"noBaseCubes\">\n"
            + " <SchemaGrant access=\"all\">\n"
            + "  <CubeGrant cube=\"Sales\" access=\"none\" />\n"
            + "  <CubeGrant cube=\"Sales Ragged\" access=\"none\" />\n"
            + "  <CubeGrant cube=\"Sales 2\" access=\"none\" />\n"
            + "  <CubeGrant cube=\"Warehouse\" access=\"none\" />\n"
            + " </SchemaGrant>\n"
            + "</Role> ";
        */

        public AccessControlTestModifier30(Catalog catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            AccessRole role = RolapMappingFactory.eINSTANCE.createAccessRole();
            role.setName("noBaseCubes");

            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.ALL);

            AccessCubeGrant cubeGrantSales = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrantSales.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrantSales.setCubeAccess(CubeAccess.NONE);

            AccessCubeGrant cubeGrantSalesRagged = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrantSalesRagged.setCube((Cube) look(CatalogSupplier.CUBE_SALES_RAGGED));
            cubeGrantSalesRagged.setCubeAccess(CubeAccess.NONE);

            AccessCubeGrant cubeGrantSales2 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrantSales2.setCube((Cube) look(CatalogSupplier.CUBE_SALES_2));
            cubeGrantSales2.setCubeAccess(CubeAccess.NONE);

            AccessCubeGrant cubeGrantWarehouse = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrantWarehouse.setCube((Cube) look(CatalogSupplier.CUBE_WAREHOUSE));
            cubeGrantWarehouse.setCubeAccess(CubeAccess.NONE);

            catalogGrant.getCubeGrants().add(cubeGrantSales);
            catalogGrant.getCubeGrants().add(cubeGrantSalesRagged);
            catalogGrant.getCubeGrants().add(cubeGrantSales2);
            catalogGrant.getCubeGrants().add(cubeGrantWarehouse);

            role.getAccessCatalogGrants().add(catalogGrant);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));
            result.add(role);
            return result;
        }
    }

    public static class AccessControlTestModifier31 extends EmfMappingModifier {
        /*
            "<Role name=\"Role1\">\n"
            + "  <SchemaGrant access=\"all\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Measures]\" access=\"all\">\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>"
            + "<Role name=\"Role2\">\n"
            + "  <SchemaGrant access=\"all\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Measures]\" access=\"custom\">\n"
            + "        <MemberGrant member=\"[Measures].[Unit Sales]\" access=\"all\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>");
        */

        public AccessControlTestModifier31(Catalog catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            // Role1
            AccessRole role1 = RolapMappingFactory.eINSTANCE.createAccessRole();
            role1.setName("Role1");

            AccessCatalogGrant catalogGrant1 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant1.setCatalogAccess(CatalogAccess.ALL);

            AccessCubeGrant cubeGrant1 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant1.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant1.setCubeAccess(CubeAccess.ALL);

            AccessHierarchyGrant hierarchyGrant1 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            // Note: [Measures] hierarchy is not set explicitly (TODO in original code)
            hierarchyGrant1.setHierarchyAccess(HierarchyAccess.ALL);

            cubeGrant1.getHierarchyGrants().add(hierarchyGrant1);
            catalogGrant1.getCubeGrants().add(cubeGrant1);
            role1.getAccessCatalogGrants().add(catalogGrant1);

            // Role2
            AccessRole role2 = RolapMappingFactory.eINSTANCE.createAccessRole();
            role2.setName("Role2");

            AccessCatalogGrant catalogGrant2 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant2.setCatalogAccess(CatalogAccess.ALL);

            AccessCubeGrant cubeGrant2 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant2.setCube((Cube) look(CatalogSupplier.CUBE_SALES));
            cubeGrant2.setCubeAccess(CubeAccess.ALL);

            AccessHierarchyGrant hierarchyGrant2 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            // Note: [Measures] hierarchy is not set explicitly (TODO in original code)
            hierarchyGrant2.setHierarchyAccess(HierarchyAccess.CUSTOM);

            AccessMemberGrant memberGrant = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrant.setMember("[Measures].[Unit Sales]");
            memberGrant.setMemberAccess(MemberAccess.ALL);

            hierarchyGrant2.getMemberGrants().add(memberGrant);
            cubeGrant2.getHierarchyGrants().add(hierarchyGrant2);
            catalogGrant2.getCubeGrants().add(cubeGrant2);
            role2.getAccessCatalogGrants().add(catalogGrant2);

            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));
            result.add(role1);
            result.add(role2);
            return result;
        }
    }

    public static class AccessControlTestModifier33 extends EmfMappingModifier {
    	private PhysicalCube sales1Cube;
    	private ExplicitHierarchy storeHierarchy;
    	private ExplicitHierarchy customersHierarchy;
    	private Level stateProvinceLevel;
    	private Level cityLevel;

        public AccessControlTestModifier33(CatalogMapping catalog) {
            super(catalog);
        }

        /*
                String cubeDef = "<Cube name=\"Sales1\">"
          + "  <Table name=\"sales_fact_1997\"/>\n"
            "    <Dimension visible=\"true\" foreignKey=\"customer_id\" highCardinality=\"false\" name=\"Customers\">\n"
            + "      <Hierarchy visible=\"true\" hasAll=\"true\" allMemberName=\"All Customers\" primaryKey=\"customer_id\">\n"
            + "        <Table name=\"customer\">\n"
            + "        </Table>\n"
            + "        <Level name=\"Country\" visible=\"true\" column=\"country\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "        </Level>\n"
            + "        <Level name=\"State Province\" visible=\"true\" column=\"state_province\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "        </Level>\n"
            + "        <Level name=\"City\" visible=\"true\" column=\"city\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "        </Level>\n"
            + "        <Level name=\"Name1\" visible=\"true\" column=\"fname\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "          <Property name=\"Gender\" column=\"gender\" type=\"String\">\n"
            + "          </Property>\n"
            + "          <Property name=\"Marital Status\" column=\"marital_status\" type=\"String\">\n"
            + "          </Property>\n"
            + "          <Property name=\"Education\" column=\"education\" type=\"String\">\n"
            + "          </Property>\n"
            + "          <Property name=\"Yearly Income\" column=\"yearly_income\" type=\"String\">\n"
            + "          </Property>\n"
            + "        </Level>\n"
            + "        <Level name=\"First Name\" visible=\"true\" column=\"fname\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "        </Level>\n"
            + "      </Hierarchy>\n"
            + "      <Hierarchy name=\"Gender\" visible=\"true\" hasAll=\"true\" primaryKey=\"customer_id\">\n"
            + "        <Table name=\"customer\">\n"
            + "        </Table>\n"
            + "        <Level name=\"Gender\" visible=\"true\" column=\"gender\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "          <Annotations>\n"
            + "            <Annotation name=\"AnalyzerBusinessGroup\">\n"
            + "              <![CDATA[Customers]]>\n"
            + "            </Annotation>\n"
            + "          </Annotations>\n"
            + "        </Level>\n"
            + "      </Hierarchy>\n"
            + "      <Hierarchy name=\"Marital Status\" visible=\"true\" hasAll=\"true\" primaryKey=\"customer_id\">\n"
            + "        <Table name=\"customer\">\n"
            + "        </Table>\n"
            + "        <Level name=\"Marital Status\" visible=\"true\" column=\"marital_status\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "          <Annotations>\n"
            + "            <Annotation name=\"AnalyzerBusinessGroup\">\n"
            + "              <![CDATA[Customers]]>\n"
            + "            </Annotation>\n"
            + "          </Annotations>\n"
            + "        </Level>\n"
            + "      </Hierarchy>\n"
            + "    </Dimension>\n"
            + "  <Dimension visible=\"true\" highCardinality=\"false\" name=\"Store\" foreignKey=\"store_id\">\n"
            + "    <Hierarchy visible=\"true\" hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "      <Table name=\"store\">\n"
            + "      </Table>\n"
            + "      <Level name=\"Store ID\" visible=\"true\" column=\"store_id\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "      </Level>\n"
            + "      <Level name=\"Store Country\" visible=\"true\" column=\"store_country\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "      </Level>\n"
            + "      <Level name=\"Store State\" visible=\"true\" column=\"store_state\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "      </Level>\n"
            + "      <Level name=\"Store City\" visible=\"true\" column=\"store_city\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "      </Level>\n"
            + "      <Level name=\"Store Name\" visible=\"true\" column=\"store_name\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "        <Property name=\"Store Type\" column=\"store_type\" type=\"String\">\n"
            + "        </Property>\n"
            + "        <Property name=\"Store Manager\" column=\"store_manager\" type=\"String\">\n"
            + "        </Property>\n"
            + "        <Property name=\"Store Sqft\" column=\"store_sqft\" type=\"Numeric\">\n"
            + "        </Property>\n"
            + "        <Property name=\"Grocery Sqft\" column=\"grocery_sqft\" type=\"Numeric\">\n"
            + "        </Property>\n"
            + "        <Property name=\"Frozen Sqft\" column=\"frozen_sqft\" type=\"Numeric\">\n"
            + "        </Property>\n"
            + "        <Property name=\"Meat Sqft\" column=\"meat_sqft\" type=\"Numeric\">\n"
            + "        </Property>\n"
            + "        <Property name=\"Has coffee bar\" column=\"coffee_bar\" type=\"Boolean\">\n"
            + "        </Property>\n"
            + "        <Property name=\"Street address\" column=\"store_street_address\" type=\"String\">\n"
            + "        </Property>\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n";

          + "</Cube>";

         */

        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            Catalog emfCatalog = (Catalog) catalog2;

            // Create the Sales1 cube
            sales1Cube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            sales1Cube.setName("Sales1");

            sales1Cube.setQuery(CatalogSupplier.QUERY_SALES_FACT);

            // Create Customers dimension
            StandardDimension customersDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            customersDimension.setName("Customers");

            // Create Customers hierarchy
            customersHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            customersHierarchy.setVisible(true);
            customersHierarchy.setHasAll(true);
            customersHierarchy.setAllMemberName("All Customers");
            customersHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);

            customersHierarchy.setQuery(CatalogSupplier.QUERY_CUSTOMER);;

            // Country level
            Level countryLevel = RolapMappingFactory.eINSTANCE.createLevel();
            countryLevel.setName("Country");
            countryLevel.setVisible(true);
            countryLevel.setColumn(CatalogSupplier.COLUMN_COUNTRY_CUSTOMER);
            countryLevel.setColumnType(ColumnInternalDataType.STRING);
            countryLevel.setUniqueMembers(true);
            countryLevel.setType(LevelDefinition.REGULAR);
            countryLevel.setHideMemberIf(HideMemberIf.NEVER);

            // State Province level
            stateProvinceLevel = RolapMappingFactory.eINSTANCE.createLevel();
            stateProvinceLevel.setName("State Province");
            stateProvinceLevel.setVisible(true);
            stateProvinceLevel.setColumn(CatalogSupplier.COLUMN_STATE_PROVINCE_CUSTOMER);
            stateProvinceLevel.setColumnType(ColumnInternalDataType.STRING);
            stateProvinceLevel.setUniqueMembers(true);
            stateProvinceLevel.setType(LevelDefinition.REGULAR);
            stateProvinceLevel.setHideMemberIf(HideMemberIf.NEVER);

            // City level
            cityLevel = RolapMappingFactory.eINSTANCE.createLevel();
            cityLevel.setName("City");
            cityLevel.setVisible(true);
            cityLevel.setColumn(CatalogSupplier.COLUMN_CITY_CUSTOMER);
            cityLevel.setColumnType(ColumnInternalDataType.STRING);
            cityLevel.setUniqueMembers(false);
            cityLevel.setType(LevelDefinition.REGULAR);
            cityLevel.setHideMemberIf(HideMemberIf.NEVER);

            // Name1 level
            Level name1Level = RolapMappingFactory.eINSTANCE.createLevel();
            name1Level.setName("Name1");
            name1Level.setVisible(true);
            name1Level.setColumn(CatalogSupplier.COLUMN_FNAME_CUSTOMER);
            name1Level.setColumnType(ColumnInternalDataType.STRING);
            name1Level.setUniqueMembers(false);
            name1Level.setType(LevelDefinition.REGULAR);
            name1Level.setHideMemberIf(HideMemberIf.NEVER);

            // Add properties to Name1 level
            MemberProperty genderProp = RolapMappingFactory.eINSTANCE.createMemberProperty();
            genderProp.setName("Gender");
            genderProp.setColumn(CatalogSupplier.COLUMN_GENDER_CUSTOMER);
            genderProp.setPropertyType(ColumnInternalDataType.STRING);
            name1Level.getMemberProperties().add(genderProp);

            MemberProperty maritalStatusProp = RolapMappingFactory.eINSTANCE.createMemberProperty();
            maritalStatusProp.setName("Marital Status");
            maritalStatusProp.setColumn(CatalogSupplier.COLUMN_MARITAL_STATUS_CUSTOMER);
            maritalStatusProp.setPropertyType(ColumnInternalDataType.STRING);
            name1Level.getMemberProperties().add(maritalStatusProp);

            MemberProperty educationProp = RolapMappingFactory.eINSTANCE.createMemberProperty();
            educationProp.setName("Education");
            educationProp.setColumn(CatalogSupplier.COLUMN_EDUCATION_CUSTOMER);
            educationProp.setPropertyType(ColumnInternalDataType.STRING);
            name1Level.getMemberProperties().add(educationProp);

            MemberProperty yearlyIncomeProp = RolapMappingFactory.eINSTANCE.createMemberProperty();
            yearlyIncomeProp.setName("Yearly Income");
            yearlyIncomeProp.setColumn(CatalogSupplier.COLUMN_YEARLY_INCOME_CUSTOMER);
            yearlyIncomeProp.setPropertyType(ColumnInternalDataType.STRING);
            name1Level.getMemberProperties().add(yearlyIncomeProp);

            // First Name level
            Level firstNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
            firstNameLevel.setName("First Name");
            firstNameLevel.setVisible(true);
            firstNameLevel.setColumn(CatalogSupplier.COLUMN_FNAME_CUSTOMER);
            firstNameLevel.setColumnType(ColumnInternalDataType.STRING);
            firstNameLevel.setUniqueMembers(false);
            firstNameLevel.setType(LevelDefinition.REGULAR);
            firstNameLevel.setHideMemberIf(HideMemberIf.NEVER);

            // Add levels to customers hierarchy
            customersHierarchy.getLevels().add(countryLevel);
            customersHierarchy.getLevels().add(stateProvinceLevel);
            customersHierarchy.getLevels().add(cityLevel);
            customersHierarchy.getLevels().add(name1Level);
            customersHierarchy.getLevels().add(firstNameLevel);

            // Gender hierarchy
            ExplicitHierarchy genderHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            genderHierarchy.setName("Gender");
            genderHierarchy.setVisible(true);
            genderHierarchy.setHasAll(true);
            genderHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);

            genderHierarchy.setQuery(CatalogSupplier.QUERY_CUSTOMER);

            Level genderLevel = RolapMappingFactory.eINSTANCE.createLevel();
            genderLevel.setName("Gender");
            genderLevel.setVisible(true);
            genderLevel.setColumn(CatalogSupplier.COLUMN_GENDER_CUSTOMER);
            genderLevel.setColumnType(ColumnInternalDataType.STRING);
            genderLevel.setUniqueMembers(true);
            genderLevel.setType(LevelDefinition.REGULAR);
            genderLevel.setHideMemberIf(HideMemberIf.NEVER);

            Annotation genderAnnotation = RolapMappingFactory.eINSTANCE.createAnnotation();
            genderAnnotation.setName("AnalyzerBusinessGroup");
            genderAnnotation.setValue("Customers");
            genderLevel.getAnnotations().add(genderAnnotation);

            genderHierarchy.getLevels().add(genderLevel);

            // Marital Status hierarchy
            ExplicitHierarchy maritalStatusHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            maritalStatusHierarchy.setName("Marital Status");
            maritalStatusHierarchy.setVisible(true);
            maritalStatusHierarchy.setHasAll(true);
            maritalStatusHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);
            maritalStatusHierarchy.setQuery(CatalogSupplier.QUERY_CUSTOMER);

            Level maritalStatusLevel = RolapMappingFactory.eINSTANCE.createLevel();
            maritalStatusLevel.setName("Marital Status");
            maritalStatusLevel.setVisible(true);
            maritalStatusLevel.setColumn(CatalogSupplier.COLUMN_MARITAL_STATUS_CUSTOMER);
            maritalStatusLevel.setColumnType(ColumnInternalDataType.STRING);
            maritalStatusLevel.setUniqueMembers(true);
            maritalStatusLevel.setType(LevelDefinition.REGULAR);
            maritalStatusLevel.setHideMemberIf(HideMemberIf.NEVER);

            Annotation maritalStatusAnnotation = RolapMappingFactory.eINSTANCE.createAnnotation();
            maritalStatusAnnotation.setName("AnalyzerBusinessGroup");
            maritalStatusAnnotation.setValue("Customers");
            maritalStatusLevel.getAnnotations().add(maritalStatusAnnotation);

            maritalStatusHierarchy.getLevels().add(maritalStatusLevel);

            // Add hierarchies to customers dimension
            customersDimension.getHierarchies().add(customersHierarchy);
            customersDimension.getHierarchies().add(genderHierarchy);
            customersDimension.getHierarchies().add(maritalStatusHierarchy);

            // Create DimensionConnector for Customers
            DimensionConnector customersConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            customersConnector.setVisible(true);
            customersConnector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);
            customersConnector.setOverrideDimensionName("Customers");
            customersConnector.setDimension(customersDimension);

            // Create Store dimension
            StandardDimension storeDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            storeDimension.setName("Store");

            // Create Store hierarchy
            storeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            storeHierarchy.setVisible(true);
            storeHierarchy.setHasAll(true);
            storeHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);
            storeHierarchy.setQuery(CatalogSupplier.QUERY_STORE);

            // Store ID level
            Level storeIdLevel = RolapMappingFactory.eINSTANCE.createLevel();
            storeIdLevel.setName("Store ID");
            storeIdLevel.setVisible(true);
            storeIdLevel.setColumn(CatalogSupplier.COLUMN_STORE_ID_STORE);
            storeIdLevel.setColumnType(ColumnInternalDataType.STRING);
            storeIdLevel.setUniqueMembers(true);
            storeIdLevel.setType(LevelDefinition.REGULAR);
            storeIdLevel.setHideMemberIf(HideMemberIf.NEVER);

            // Store Country level
            Level storeCountryLevel = RolapMappingFactory.eINSTANCE.createLevel();
            storeCountryLevel.setName("Store Country");
            storeCountryLevel.setVisible(true);
            storeCountryLevel.setColumn(CatalogSupplier.COLUMN_STORE_COUNTRY_STORE);
            storeCountryLevel.setColumnType(ColumnInternalDataType.STRING);
            storeCountryLevel.setUniqueMembers(true);
            storeCountryLevel.setType(LevelDefinition.REGULAR);
            storeCountryLevel.setHideMemberIf(HideMemberIf.NEVER);

            // Store State level
            Level storeStateLevel = RolapMappingFactory.eINSTANCE.createLevel();
            storeStateLevel.setName("Store State");
            storeStateLevel.setVisible(true);
            storeStateLevel.setColumn(CatalogSupplier.COLUMN_STORE_STATE_STORE);
            storeStateLevel.setColumnType(ColumnInternalDataType.STRING);
            storeStateLevel.setUniqueMembers(true);
            storeStateLevel.setType(LevelDefinition.REGULAR);
            storeStateLevel.setHideMemberIf(HideMemberIf.NEVER);

            // Store City level
            Level storeCityLevel = RolapMappingFactory.eINSTANCE.createLevel();
            storeCityLevel.setName("Store City");
            storeCityLevel.setVisible(true);
            storeCityLevel.setColumn(CatalogSupplier.COLUMN_STORE_CITY_STORE);
            storeCityLevel.setColumnType(ColumnInternalDataType.STRING);
            storeCityLevel.setUniqueMembers(false);
            storeCityLevel.setType(LevelDefinition.REGULAR);
            storeCityLevel.setHideMemberIf(HideMemberIf.NEVER);

            // Store Name level
            Level storeNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
            storeNameLevel.setName("Store Name");
            storeNameLevel.setVisible(true);
            storeNameLevel.setColumn(CatalogSupplier.COLUMN_STORE_NAME_STORE);
            storeNameLevel.setColumnType(ColumnInternalDataType.STRING);
            storeNameLevel.setUniqueMembers(true);
            storeNameLevel.setType(LevelDefinition.REGULAR);
            storeNameLevel.setHideMemberIf(HideMemberIf.NEVER);

            // Add properties to Store Name level
            MemberProperty storeTypeProp = RolapMappingFactory.eINSTANCE.createMemberProperty();
            storeTypeProp.setName("Store Type");
            storeTypeProp.setColumn(CatalogSupplier.COLUMN_STORE_TYPE_STORE);
            storeTypeProp.setPropertyType(ColumnInternalDataType.STRING);
            storeNameLevel.getMemberProperties().add(storeTypeProp);

            MemberProperty storeManagerProp = RolapMappingFactory.eINSTANCE.createMemberProperty();
            storeManagerProp.setName("Store Manager");
            storeManagerProp.setColumn(CatalogSupplier.COLUMN_STORE_MANAGER_STORE);
            storeManagerProp.setPropertyType(ColumnInternalDataType.STRING);
            storeNameLevel.getMemberProperties().add(storeManagerProp);

            MemberProperty storeSqftProp = RolapMappingFactory.eINSTANCE.createMemberProperty();
            storeSqftProp.setName("Store Sqft");
            storeSqftProp.setColumn(CatalogSupplier.COLUMN_STORE_SQFT_STORE);
            storeSqftProp.setPropertyType(ColumnInternalDataType.NUMERIC);
            storeNameLevel.getMemberProperties().add(storeSqftProp);

            MemberProperty grocerySqftProp = RolapMappingFactory.eINSTANCE.createMemberProperty();
            grocerySqftProp.setName("Grocery Sqft");
            grocerySqftProp.setColumn(CatalogSupplier.COLUMN_GROCERY_SQFT_STORE);
            grocerySqftProp.setPropertyType(ColumnInternalDataType.NUMERIC);
            storeNameLevel.getMemberProperties().add(grocerySqftProp);

            MemberProperty frozenSqftProp = RolapMappingFactory.eINSTANCE.createMemberProperty();
            frozenSqftProp.setName("Frozen Sqft");
            frozenSqftProp.setColumn(CatalogSupplier.COLUMN_FROZEN_SQFT_STORE);
            frozenSqftProp.setPropertyType(ColumnInternalDataType.NUMERIC);
            storeNameLevel.getMemberProperties().add(frozenSqftProp);

            MemberProperty meatSqftProp = RolapMappingFactory.eINSTANCE.createMemberProperty();
            meatSqftProp.setName("Meat Sqft");
            meatSqftProp.setColumn(CatalogSupplier.COLUMN_MEAT_SQFT_STORE);
            meatSqftProp.setPropertyType(ColumnInternalDataType.NUMERIC);
            storeNameLevel.getMemberProperties().add(meatSqftProp);

            MemberProperty coffeeBarProp = RolapMappingFactory.eINSTANCE.createMemberProperty();
            coffeeBarProp.setName("Has coffee bar");
            coffeeBarProp.setColumn(CatalogSupplier.COLUMN_COFFEE_BAR_STORE);
            coffeeBarProp.setPropertyType(ColumnInternalDataType.BOOLEAN);
            storeNameLevel.getMemberProperties().add(coffeeBarProp);

            MemberProperty streetAddressProp = RolapMappingFactory.eINSTANCE.createMemberProperty();
            streetAddressProp.setName("Street address");
            streetAddressProp.setColumn(CatalogSupplier.COLUMN_STORE_STREET_ADDRESS_STORE);
            streetAddressProp.setPropertyType(ColumnInternalDataType.STRING);
            storeNameLevel.getMemberProperties().add(streetAddressProp);

            // Add levels to store hierarchy
            storeHierarchy.getLevels().add(storeIdLevel);
            storeHierarchy.getLevels().add(storeCountryLevel);
            storeHierarchy.getLevels().add(storeStateLevel);
            storeHierarchy.getLevels().add(storeCityLevel);
            storeHierarchy.getLevels().add(storeNameLevel);

            // Add hierarchy to store dimension
            storeDimension.getHierarchies().add(storeHierarchy);

            // Create DimensionConnector for Store
            DimensionConnector storeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            storeConnector.setVisible(true);
            storeConnector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
            storeConnector.setOverrideDimensionName("Store");
            storeConnector.setDimension(storeDimension);

            // Add dimension connectors to cube
            sales1Cube.getDimensionConnectors().add(customersConnector);
            sales1Cube.getDimensionConnectors().add(storeConnector);

            // Add cube to catalog
            emfCatalog.getCubes().add(sales1Cube);

            return emfCatalog;
        }

        /*
            "<Role name=\"MR\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales1\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"all\">\n"
            + "      </HierarchyGrant>\n"
            + "      <HierarchyGrant hierarchy=\"[Customers]\" access=\"custom\" topLevel=\"[Customers].[State Province]\" bottomLevel=\"[Customers].[City]\">\n"
            + "\t  </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>\n"
            + "<Role name=\"DBPentUsers\">\n"
            + "   <SchemaGrant access=\"none\">\n"
            + "   </SchemaGrant>\n"
            + "</Role>");
        */

        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));

            // Create MR role
            AccessHierarchyGrant storeHierarchyGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            storeHierarchyGrant.setHierarchy(storeHierarchy);
            storeHierarchyGrant.setHierarchyAccess(HierarchyAccess.ALL);

            AccessHierarchyGrant customersHierarchyGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            customersHierarchyGrant.setHierarchy(customersHierarchy);
            customersHierarchyGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);
            customersHierarchyGrant.setTopLevel(stateProvinceLevel);
            customersHierarchyGrant.setBottomLevel(cityLevel);

            AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant.setCube(sales1Cube);
            cubeGrant.setCubeAccess(CubeAccess.ALL);
            cubeGrant.getHierarchyGrants().add(storeHierarchyGrant);
            cubeGrant.getHierarchyGrants().add(customersHierarchyGrant);

            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.NONE);
            catalogGrant.getCubeGrants().add(cubeGrant);

            AccessRole mrRole = RolapMappingFactory.eINSTANCE.createAccessRole();
            mrRole.setName("MR");
            mrRole.getAccessCatalogGrants().add(catalogGrant);

            result.add(mrRole);

            // Create DBPentUsers role
            AccessCatalogGrant catalogGrant2 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant2.setCatalogAccess(CatalogAccess.NONE);

            AccessRole dbPentUsersRole = RolapMappingFactory.eINSTANCE.createAccessRole();
            dbPentUsersRole.setName("DBPentUsers");
            dbPentUsersRole.getAccessCatalogGrants().add(catalogGrant2);

            result.add(dbPentUsersRole);

            return result;
        }
    }

    public static class AccessControlTestModifier34 extends EmfMappingModifier {

        /*
            "<Role name=\"Role1\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"partial\">\n"
            + "        <MemberGrant member=\"[Store].[USA].[Non Existent]\" access=\"all\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>");
        */

        public AccessControlTestModifier34(CatalogMapping catalog) {
            super(catalog);
        }

        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));

            // Create member grant
            AccessMemberGrant memberGrant = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrant.setMember("[Store].[Store].[USA].[Non Existent]");
            memberGrant.setMemberAccess(MemberAccess.ALL);

            // Create hierarchy grant
            AccessHierarchyGrant hierarchyGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hierarchyGrant.setHierarchy(CatalogSupplier.HIERARCHY_STORE);
            hierarchyGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrant.setRollupPolicy(RollupPolicy.PARTIAL);
            hierarchyGrant.getMemberGrants().add(memberGrant);

            // Create cube grant
            AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant.setCube(CatalogSupplier.CUBE_SALES);
            cubeGrant.setCubeAccess(CubeAccess.ALL);
            cubeGrant.getHierarchyGrants().add(hierarchyGrant);

            // Create catalog grant
            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.NONE);
            catalogGrant.getCubeGrants().add(cubeGrant);

            // Create role
            AccessRole role1 = RolapMappingFactory.eINSTANCE.createAccessRole();
            role1.setName("Role1");
            role1.getAccessCatalogGrants().add(catalogGrant);

            result.add(role1);

            return result;
        }
    }

    public static class AccessControlTestModifier35 extends EmfMappingModifier {

        /*
            "<Role name=\"Role1\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"partial\">\n"
            + "        <MemberGrant member=\"[Store].[USA].[WA]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[OR]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA].[San Francisco]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA].[Los Angeles]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[Mexico]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[Mexico].[DF]\" access=\"none\"/>\n"
            + "        <MemberGrant member=\"[Store].[Canada]\" access=\"none\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>\n"
            + "<Role name=\"Role2\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"full\">\n"
            + "        <MemberGrant member=\"[Store].[USA].[WA]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[OR]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA].[San Francisco]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA].[Los Angeles]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[Mexico]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[Mexico].[DF]\" access=\"none\"/>\n"
            + "        <MemberGrant member=\"[Store].[Canada]\" access=\"none\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>";

        */

        public AccessControlTestModifier35(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));

            // Role1 - with PARTIAL rollup policy
            AccessMemberGrant memberGrantWA1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantWA1.setMember("[Store].[USA].[WA]");
            memberGrantWA1.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantOR1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantOR1.setMember("[Store].[USA].[OR]");
            memberGrantOR1.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantSF1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantSF1.setMember("[Store].[USA].[CA].[San Francisco]");
            memberGrantSF1.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantLA1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantLA1.setMember("[Store].[USA].[CA].[Los Angeles]");
            memberGrantLA1.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantMexico1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantMexico1.setMember("[Store].[Mexico]");
            memberGrantMexico1.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantDF1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantDF1.setMember("[Store].[Mexico].[DF]");
            memberGrantDF1.setMemberAccess(MemberAccess.NONE);

            AccessMemberGrant memberGrantCanada1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantCanada1.setMember("[Store].[Canada]");
            memberGrantCanada1.setMemberAccess(MemberAccess.NONE);

            AccessHierarchyGrant hierarchyGrant1 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hierarchyGrant1.setHierarchy(CatalogSupplier.HIERARCHY_STORE);
            hierarchyGrant1.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrant1.setRollupPolicy(RollupPolicy.PARTIAL);
            hierarchyGrant1.getMemberGrants().add(memberGrantWA1);
            hierarchyGrant1.getMemberGrants().add(memberGrantOR1);
            hierarchyGrant1.getMemberGrants().add(memberGrantSF1);
            hierarchyGrant1.getMemberGrants().add(memberGrantLA1);
            hierarchyGrant1.getMemberGrants().add(memberGrantMexico1);
            hierarchyGrant1.getMemberGrants().add(memberGrantDF1);
            hierarchyGrant1.getMemberGrants().add(memberGrantCanada1);

            AccessCubeGrant cubeGrant1 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant1.setCube(CatalogSupplier.CUBE_SALES);
            cubeGrant1.setCubeAccess(CubeAccess.ALL);
            cubeGrant1.getHierarchyGrants().add(hierarchyGrant1);

            AccessCatalogGrant catalogGrant1 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant1.setCatalogAccess(CatalogAccess.NONE);
            catalogGrant1.getCubeGrants().add(cubeGrant1);

            AccessRole role1 = RolapMappingFactory.eINSTANCE.createAccessRole();
            role1.setName("Role1");
            role1.getAccessCatalogGrants().add(catalogGrant1);

            result.add(role1);

            // Role2 - with FULL rollup policy
            AccessMemberGrant memberGrantWA2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantWA2.setMember("[Store].[USA].[WA]");
            memberGrantWA2.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantOR2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantOR2.setMember("[Store].[USA].[OR]");
            memberGrantOR2.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantSF2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantSF2.setMember("[Store].[USA].[CA].[San Francisco]");
            memberGrantSF2.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantLA2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantLA2.setMember("[Store].[USA].[CA].[Los Angeles]");
            memberGrantLA2.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantMexico2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantMexico2.setMember("[Store].[Mexico]");
            memberGrantMexico2.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantDF2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantDF2.setMember("[Store].[Mexico].[DF]");
            memberGrantDF2.setMemberAccess(MemberAccess.NONE);

            AccessMemberGrant memberGrantCanada2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantCanada2.setMember("[Store].[Canada]");
            memberGrantCanada2.setMemberAccess(MemberAccess.NONE);

            AccessHierarchyGrant hierarchyGrant2 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hierarchyGrant2.setHierarchy(CatalogSupplier.HIERARCHY_STORE);
            hierarchyGrant2.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrant2.setRollupPolicy(RollupPolicy.FULL);
            hierarchyGrant2.getMemberGrants().add(memberGrantWA2);
            hierarchyGrant2.getMemberGrants().add(memberGrantOR2);
            hierarchyGrant2.getMemberGrants().add(memberGrantSF2);
            hierarchyGrant2.getMemberGrants().add(memberGrantLA2);
            hierarchyGrant2.getMemberGrants().add(memberGrantMexico2);
            hierarchyGrant2.getMemberGrants().add(memberGrantDF2);
            hierarchyGrant2.getMemberGrants().add(memberGrantCanada2);

            AccessCubeGrant cubeGrant2 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant2.setCube(CatalogSupplier.CUBE_SALES);
            cubeGrant2.setCubeAccess(CubeAccess.ALL);
            cubeGrant2.getHierarchyGrants().add(hierarchyGrant2);

            AccessCatalogGrant catalogGrant2 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant2.setCatalogAccess(CatalogAccess.NONE);
            catalogGrant2.getCubeGrants().add(cubeGrant2);

            AccessRole role2 = RolapMappingFactory.eINSTANCE.createAccessRole();
            role2.setName("Role2");
            role2.getAccessCatalogGrants().add(catalogGrant2);

            result.add(role2);

            return result;
        }
    }

    public static class AccessControlTestModifier36 extends EmfMappingModifier {

        /*
            "<Role name=\"Role1\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"partial\">\n"
            + "        <MemberGrant member=\"[Store].[USA].[WA]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[OR]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA].[San Francisco]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA].[Los Angeles]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[Mexico]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[Mexico].[DF]\" access=\"none\"/>\n"
            + "        <MemberGrant member=\"[Store].[Canada]\" access=\"none\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>\n"
            + "<Role name=\"Role2\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"all\">\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"partial\">\n"
            + "        <MemberGrant member=\"[Store].[USA].[WA]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[OR]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA].[San Francisco]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[Mexico]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[Mexico].[DF]\" access=\"none\"/>\n"
            + "        <MemberGrant member=\"[Store].[Canada]\" access=\"none\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>";

        */

        public AccessControlTestModifier36(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));

            // Role1 - with 7 member grants
            AccessMemberGrant memberGrantWA1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantWA1.setMember("[Store].[USA].[WA]");
            memberGrantWA1.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantOR1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantOR1.setMember("[Store].[USA].[OR]");
            memberGrantOR1.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantSF1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantSF1.setMember("[Store].[USA].[CA].[San Francisco]");
            memberGrantSF1.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantLA1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantLA1.setMember("[Store].[USA].[CA].[Los Angeles]");
            memberGrantLA1.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantMexico1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantMexico1.setMember("[Store].[Mexico]");
            memberGrantMexico1.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantDF1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantDF1.setMember("[Store].[Mexico].[DF]");
            memberGrantDF1.setMemberAccess(MemberAccess.NONE);

            AccessMemberGrant memberGrantCanada1 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantCanada1.setMember("[Store].[Canada]");
            memberGrantCanada1.setMemberAccess(MemberAccess.NONE);

            AccessHierarchyGrant hierarchyGrant1 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hierarchyGrant1.setHierarchy(CatalogSupplier.HIERARCHY_STORE);
            hierarchyGrant1.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrant1.setRollupPolicy(RollupPolicy.PARTIAL);
            hierarchyGrant1.getMemberGrants().add(memberGrantWA1);
            hierarchyGrant1.getMemberGrants().add(memberGrantOR1);
            hierarchyGrant1.getMemberGrants().add(memberGrantSF1);
            hierarchyGrant1.getMemberGrants().add(memberGrantLA1);
            hierarchyGrant1.getMemberGrants().add(memberGrantMexico1);
            hierarchyGrant1.getMemberGrants().add(memberGrantDF1);
            hierarchyGrant1.getMemberGrants().add(memberGrantCanada1);

            AccessCubeGrant cubeGrant1 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant1.setCube(CatalogSupplier.CUBE_SALES);
            cubeGrant1.setCubeAccess(CubeAccess.ALL);
            cubeGrant1.getHierarchyGrants().add(hierarchyGrant1);

            AccessCatalogGrant catalogGrant1 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant1.setCatalogAccess(CatalogAccess.NONE);
            catalogGrant1.getCubeGrants().add(cubeGrant1);

            AccessRole role1 = RolapMappingFactory.eINSTANCE.createAccessRole();
            role1.setName("Role1");
            role1.getAccessCatalogGrants().add(catalogGrant1);

            result.add(role1);

            // Role2 - with 6 member grants (no Los Angeles)
            AccessMemberGrant memberGrantWA2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantWA2.setMember("[Store].[USA].[WA]");
            memberGrantWA2.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantOR2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantOR2.setMember("[Store].[USA].[OR]");
            memberGrantOR2.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantSF2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantSF2.setMember("[Store].[USA].[CA].[San Francisco]");
            memberGrantSF2.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantMexico2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantMexico2.setMember("[Store].[Mexico]");
            memberGrantMexico2.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantDF2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantDF2.setMember("[Store].[Mexico].[DF]");
            memberGrantDF2.setMemberAccess(MemberAccess.NONE);

            AccessMemberGrant memberGrantCanada2 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantCanada2.setMember("[Store].[Canada]");
            memberGrantCanada2.setMemberAccess(MemberAccess.NONE);

            AccessHierarchyGrant hierarchyGrant2 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hierarchyGrant2.setHierarchy(CatalogSupplier.HIERARCHY_STORE);
            hierarchyGrant2.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrant2.setRollupPolicy(RollupPolicy.PARTIAL);
            hierarchyGrant2.getMemberGrants().add(memberGrantWA2);
            hierarchyGrant2.getMemberGrants().add(memberGrantOR2);
            hierarchyGrant2.getMemberGrants().add(memberGrantSF2);
            hierarchyGrant2.getMemberGrants().add(memberGrantMexico2);
            hierarchyGrant2.getMemberGrants().add(memberGrantDF2);
            hierarchyGrant2.getMemberGrants().add(memberGrantCanada2);

            AccessCubeGrant cubeGrant2 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant2.setCube(CatalogSupplier.CUBE_SALES);
            cubeGrant2.setCubeAccess(CubeAccess.ALL);
            cubeGrant2.getHierarchyGrants().add(hierarchyGrant2);

            AccessCatalogGrant catalogGrant2 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant2.setCatalogAccess(CatalogAccess.NONE);
            catalogGrant2.getCubeGrants().add(cubeGrant2);

            AccessRole role2 = RolapMappingFactory.eINSTANCE.createAccessRole();
            role2.setName("Role2");
            role2.getAccessCatalogGrants().add(catalogGrant2);

            result.add(role2);

            return result;
        }
    }

    public static class AccessControlTestModifier37 extends EmfMappingModifier {

        /*
            "<Role name=\"Role1\">\n"
            + "  <SchemaGrant access=\"none\">\n"
            + "    <CubeGrant cube=\"Sales\" access=\"custom\">\n"
            + "      <DimensionGrant dimension=\"[Measures]\" access=\"all\"/>\n"
            + "      <DimensionGrant dimension=\"[Gender]\" access=\"all\"/>\n"
            + "      <HierarchyGrant hierarchy=\"[Store]\" access=\"custom\" rollupPolicy=\"partial\">\n"
            + "        <MemberGrant member=\"[Store].[USA]\" access=\"all\"/>\n"
            + "        <MemberGrant member=\"[Store].[USA].[CA]\" access=\"none\"/>\n"
            + "      </HierarchyGrant>\n"
            + "    </CubeGrant>\n"
            + "  </SchemaGrant>\n"
            + "</Role>");
        */

        public AccessControlTestModifier37(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));

            // Create dimension grants
            AccessDimensionGrant measuresGrant = RolapMappingFactory.eINSTANCE.createAccessDimensionGrant();
            // Note: Measures dimension grant doesn't need setDimension call (commented in original)
            measuresGrant.setDimensionAccess(DimensionAccess.ALL);

            AccessDimensionGrant genderGrant = RolapMappingFactory.eINSTANCE.createAccessDimensionGrant();
            genderGrant.setDimension(CatalogSupplier.DIMENSION_GENDER);
            genderGrant.setDimensionAccess(DimensionAccess.ALL);

            // Create member grants
            AccessMemberGrant memberGrantUSA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantUSA.setMember("[Store].[USA]");
            memberGrantUSA.setMemberAccess(MemberAccess.ALL);

            AccessMemberGrant memberGrantCA = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrantCA.setMember("[Store].[USA].[CA]");
            memberGrantCA.setMemberAccess(MemberAccess.NONE);

            // Create hierarchy grant
            AccessHierarchyGrant hierarchyGrant = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hierarchyGrant.setHierarchy(CatalogSupplier.HIERARCHY_STORE);
            hierarchyGrant.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierarchyGrant.setRollupPolicy(RollupPolicy.PARTIAL);
            hierarchyGrant.getMemberGrants().add(memberGrantUSA);
            hierarchyGrant.getMemberGrants().add(memberGrantCA);

            // Create cube grant
            AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant.setCube(CatalogSupplier.CUBE_SALES);
            cubeGrant.setCubeAccess(CubeAccess.CUSTOM);
            cubeGrant.getDimensionGrants().add(measuresGrant);
            cubeGrant.getDimensionGrants().add(genderGrant);
            cubeGrant.getHierarchyGrants().add(hierarchyGrant);

            // Create catalog grant
            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.NONE);
            catalogGrant.getCubeGrants().add(cubeGrant);

            // Create role
            AccessRole role1 = RolapMappingFactory.eINSTANCE.createAccessRole();
            role1.setName("Role1");
            role1.getAccessCatalogGrants().add(catalogGrant);

            result.add(role1);

            return result;
        }
    }

    public static class AccessControlTestModifier32 extends EmfMappingModifier {

        /*
      String schema =
          "<Schema name=\"FoodMart.DimAndMeasure.Role\">\n"
          + " <Dimension name=\"WarehouseShared\">\n"
          + "   <Hierarchy hasAll=\"true\" primaryKey=\"warehouse_id\">\n"
          + "     <Table name=\"warehouse\"/>\n"
          + "     <Level name=\"Country\" column=\"warehouse_country\" uniqueMembers=\"true\"/>\n"
          + "     <Level name=\"State Province\" column=\"warehouse_state_province\"\n"
          + "          uniqueMembers=\"true\"/>\n"
          + "     <Level name=\"City\" column=\"warehouse_city\" uniqueMembers=\"false\"/>\n"
          + "     <Level name=\"Warehouse Name\" column=\"warehouse_name\" uniqueMembers=\"true\"/>\n"
          + "   </Hierarchy>\n"
          + " </Dimension>\n"
          + " <Cube name=\"Warehouse1\">\n"
          + "   <Table name=\"inventory_fact_1997\"/>\n"
          + "   <DimensionUsage name=\"WarehouseShared\" source=\"WarehouseShared\" foreignKey=\"warehouse_id\"/>\n"
          + "   <Measure name=\"Measure1_0\" column=\"warehouse_cost\" aggregator=\"sum\"/>\n"
          + "   <Measure name=\"Measure1_1\" column=\"warehouse_sales\" aggregator=\"sum\"/>\n"
          + "   <CalculatedMember name=\"Calculated Measure1\" dimension=\"Measures\">\n"
          + "     <Formula>[Measures].[Measure1_1] / [Measures].[Measure1_0]</Formula>\n"
          + "     <CalculatedMemberProperty name=\"FORMAT_STRING\" value=\"$#,##0.00\"/>\n"
          + "   </CalculatedMember>\n"
          + " </Cube>\n"
          + " <Cube name=\"Warehouse2\">\n"
          + "   <Table name=\"inventory_fact_1997\"/>\n"
          + "   <DimensionUsage name=\"WarehouseShared\" source=\"WarehouseShared\" foreignKey=\"warehouse_id\"/>\n"
          + "   <Measure name=\"Measure2_0\" column=\"warehouse_cost\" aggregator=\"sum\"/>\n"
          + "   <Measure name=\"Measure2_1\" column=\"warehouse_sales\" aggregator=\"sum\"/>\n"
          + "   <CalculatedMember name=\"Calculated Measure2\" dimension=\"Measures\">\n"
          + "     <Formula>[Measures].[Measure2_1] / [Measures].[Measure2_0]</Formula>\n"
          + "     <CalculatedMemberProperty name=\"FORMAT_STRING\" value=\"$#,##0.00\"/>\n"
          + "   </CalculatedMember>\n"
          + " </Cube>\n"
          + " <Role name=\"Administrator\">\n"
          + "   <SchemaGrant access=\"none\">\n"
          + "     <CubeGrant cube=\"Warehouse1\" access=\"custom\">\n"
          + "       <HierarchyGrant hierarchy=\"[WarehouseShared]\" access=\"all\">\n"
          + "       </HierarchyGrant>\n"
          + "       <HierarchyGrant hierarchy=\"[Measures]\" access=\"all\">\n"
          + "       </HierarchyGrant>\n"
          + "     </CubeGrant>\n"
          + "     <CubeGrant cube=\"Warehouse2\" access=\"custom\">\n"
          + "       <HierarchyGrant hierarchy=\"[WarehouseShared]\" access=\"all\">\n"
          + "       </HierarchyGrant>\n"
          + "       <HierarchyGrant hierarchy=\"[Measures]\" access=\"all\">\n"
          + "       </HierarchyGrant>\n"
          + "     </CubeGrant>\n"
          + "   </SchemaGrant>\n"
          + " </Role>\n"
          + "</Schema>";

        */

        public AccessControlTestModifier32(CatalogMapping catalog) {
            super(catalog);
        }

        protected Catalog modifyCatalog(Catalog catalog2) {

            ExplicitHierarchy warehouseSharedHierarchy;
        	StandardDimension d = RolapMappingFactory.eINSTANCE.createStandardDimension();
        	d.setName("WarehouseShared");
        	warehouseSharedHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        	warehouseSharedHierarchy.setHasAll(true);
        	warehouseSharedHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_WAREHOUSE_ID_WAREHOUSE);
        	TableQuery warehouseTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        	warehouseTableQuery.setTable(CatalogSupplier.TABLE_WAREHOUSE);
        	warehouseSharedHierarchy.setQuery(warehouseTableQuery);

        	Level stateProvinceLevel = RolapMappingFactory.eINSTANCE.createLevel();
        	stateProvinceLevel.setName("State Province");
        	stateProvinceLevel.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_STATE_PROVINCE_WAREHOUSE);
        	stateProvinceLevel.setUniqueMembers(true);

        	Level cityLevel = RolapMappingFactory.eINSTANCE.createLevel();
        	cityLevel.setName("City");
        	cityLevel.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_CITY_WAREHOUSE);
        	cityLevel.setUniqueMembers(false);

        	Level warehouseNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
        	warehouseNameLevel.setName("Warehouse Name");
        	warehouseNameLevel.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_NAME_WAREHOUSE);
        	warehouseNameLevel.setUniqueMembers(true);

        	warehouseSharedHierarchy.getLevels().add(stateProvinceLevel);
        	warehouseSharedHierarchy.getLevels().add(cityLevel);
        	warehouseSharedHierarchy.getLevels().add(warehouseNameLevel);

        	d.getHierarchies().add(warehouseSharedHierarchy);

        	PhysicalCube warehouse1Cube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        	warehouse1Cube.setName("Warehouse1");
        	TableQuery warehouse1TableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        	warehouse1TableQuery.setTable(CatalogSupplier.TABLE_INVENTORY_FACT);
        	warehouse1Cube.setQuery(warehouse1TableQuery);

        	DimensionConnector dc1 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        	dc1.setOverrideDimensionName("WarehouseShared");
        	dc1.setDimension(d);
        	dc1.setForeignKey(CatalogSupplier.COLUMN_WAREHOUSE_ID_INVENTORY_FACT);
        	warehouse1Cube.getDimensionConnectors().add(dc1);

        	MeasureGroup mg1 = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        	SumMeasure measure1_0 = RolapMappingFactory.eINSTANCE.createSumMeasure();
        	measure1_0.setName("Measure1_0");
        	measure1_0.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_COST_INVENTORY_FACT);

        	SumMeasure measure1_1 = RolapMappingFactory.eINSTANCE.createSumMeasure();
        	measure1_1.setName("Measure1_1");
        	measure1_1.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_SALES_INVENTORY_FACT);

        	mg1.getMeasures().add(measure1_0);
        	mg1.getMeasures().add(measure1_1);
        	warehouse1Cube.getMeasureGroups().add(mg1);

        	CalculatedMember cm1 = RolapMappingFactory.eINSTANCE.createCalculatedMember();
        	cm1.setName("Calculated Measure1");
        	cm1.setFormula("[Measures].[Measure1_1] / [Measures].[Measure1_0]");

        	CalculatedMemberProperty cmp1 = RolapMappingFactory.eINSTANCE.createCalculatedMemberProperty();
        	cmp1.setName("FORMAT_STRING");
        	cmp1.setValue("$#,##0.00");
        	cm1.getCalculatedMemberProperties().add(cmp1);

        	warehouse1Cube.getCalculatedMembers().add(cm1);

        	PhysicalCube warehouse2Cube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        	warehouse2Cube.setName("Warehouse2");
        	TableQuery warehouse2TableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        	warehouse2TableQuery.setTable(CatalogSupplier.TABLE_INVENTORY_FACT);
        	warehouse2Cube.setQuery(warehouse2TableQuery);

        	DimensionConnector dc2 = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        	dc2.setOverrideDimensionName("WarehouseShared");
        	dc2.setDimension(d);
        	dc2.setForeignKey(CatalogSupplier.COLUMN_WAREHOUSE_ID_INVENTORY_FACT);
        	warehouse2Cube.getDimensionConnectors().add(dc2);

        	MeasureGroup mg2 = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        	SumMeasure measure2_0 = RolapMappingFactory.eINSTANCE.createSumMeasure();
        	measure2_0.setName("Measure2_0");
        	measure2_0.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_COST_INVENTORY_FACT);

        	SumMeasure measure2_1 = RolapMappingFactory.eINSTANCE.createSumMeasure();
        	measure2_1.setName("Measure2_1");
        	measure2_1.setColumn(CatalogSupplier.COLUMN_WAREHOUSE_SALES_INVENTORY_FACT);

        	mg2.getMeasures().add(measure2_0);
        	mg2.getMeasures().add(measure2_1);
        	warehouse2Cube.getMeasureGroups().add(mg2);

        	CalculatedMember cm2 = RolapMappingFactory.eINSTANCE.createCalculatedMember();
        	cm2.setName("Calculated Measure2");
        	cm2.setFormula("[Measures].[Measure2_1] / [Measures].[Measure2_0]");

        	CalculatedMemberProperty cmp2 = RolapMappingFactory.eINSTANCE.createCalculatedMemberProperty();
        	cmp2.setName("FORMAT_STRING");
        	cmp2.setValue("$#,##0.00");
        	cm2.getCalculatedMemberProperties().add(cmp2);

        	warehouse2Cube.getCalculatedMembers().add(cm2);

        	Catalog result = RolapMappingFactory.eINSTANCE.createCatalog();
        	result.setName("FoodMart.DimAndMeasure.Role");
        	result.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
        	result.getCubes().add(warehouse1Cube);
        	result.getCubes().add(warehouse2Cube);

        	AccessRole adminRole = RolapMappingFactory.eINSTANCE.createAccessRole();
        	adminRole.setName("Administrator");

        	AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
        	catalogGrant.setCatalogAccess(CatalogAccess.NONE);

        	AccessCubeGrant cubeGrant1 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
        	cubeGrant1.setCube(warehouse1Cube);
        	cubeGrant1.setCubeAccess(CubeAccess.CUSTOM);

        	AccessHierarchyGrant hg1_1 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
        	hg1_1.setHierarchy(warehouseSharedHierarchy);
        	hg1_1.setHierarchyAccess(HierarchyAccess.ALL);

        	AccessHierarchyGrant hg1_2 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
        	hg1_2.setHierarchyAccess(HierarchyAccess.ALL);

        	cubeGrant1.getHierarchyGrants().add(hg1_1);
        	cubeGrant1.getHierarchyGrants().add(hg1_2);

        	AccessCubeGrant cubeGrant2 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
        	cubeGrant2.setCube(warehouse2Cube);
        	cubeGrant2.setCubeAccess(CubeAccess.CUSTOM);

        	AccessHierarchyGrant hg2_1 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
        	hg2_1.setHierarchy(warehouseSharedHierarchy);
        	hg2_1.setHierarchyAccess(HierarchyAccess.ALL);

        	AccessHierarchyGrant hg2_2 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
        	hg2_2.setHierarchyAccess(HierarchyAccess.ALL);

        	cubeGrant2.getHierarchyGrants().add(hg2_1);
        	cubeGrant2.getHierarchyGrants().add(hg2_2);

        	catalogGrant.getCubeGrants().add(cubeGrant1);
        	catalogGrant.getCubeGrants().add(cubeGrant2);

        	adminRole.getAccessCatalogGrants().add(catalogGrant);

        	result.getAccessRoles().add(adminRole);

        	return result;
        }
    }

    public static class AccessControlTestModifier38 extends EmfMappingModifier {

        /*
          "<Role name=\"Sales Ragged\">\n"
          + "  <SchemaGrant access=\"none\">\n"
          + "    <CubeGrant cube=\"Sales Ragged\" access=\"all\" />\n"
          + "  </SchemaGrant>\n"
          + "</Role>";
        */

        public AccessControlTestModifier38(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));

            AccessRole salesRaggedRole = RolapMappingFactory.eINSTANCE.createAccessRole();
            salesRaggedRole.setName("Sales Ragged");

            AccessCatalogGrant catalogGrant = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            catalogGrant.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant.setCube((PhysicalCube) look(CatalogSupplier.CUBE_SALES_RAGGED));
            cubeGrant.setCubeAccess(CubeAccess.ALL);

            catalogGrant.getCubeGrants().add(cubeGrant);
            salesRaggedRole.getAccessCatalogGrants().add(catalogGrant);

            result.add(salesRaggedRole);

            return result;
        }
    }

    public static class OrderKeyOneToOneCheckTestModifier extends EmfMappingModifier {

        /*
                    + "<Schema name=\"FoodMart 2358\">\n"
                    + "  <Dimension name=\"Time\" type=\"TimeDimension\">\n"
                    + "    <Hierarchy hasAll=\"false\" primaryKey=\"time_id\">\n"
                    + "      <Table name=\"time_by_day\"/>\n"
                    + "      <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
                    + "          levelType=\"TimeYears\"/> \n"
                    + "      <Level name=\"Quarter\" column=\"quarter\" ordinalColumn=\"month_of_year\" uniqueMembers=\"false\" levelType=\"TimeQuarters\"/>  \n"
                    + "      <Level name=\"Month\" column=\"month_of_year\" uniqueMembers=\"false\" type=\"Numeric\"\n"
                    + "          levelType=\"TimeMonths\"/>\n"
                    + "    </Hierarchy>\n"
                    + "  </Dimension>\n"
                    + "<Cube name=\"Sales\" defaultMeasure=\"Unit Sales\">\n"
                    + "  <Table name=\"sales_fact_1997\"/>\n"
                    + "  <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
                    + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
                    + "      formatString=\"Standard\"/>\n"
                    + "</Cube>\n"
                    + "</Schema>");
        */

        public OrderKeyOneToOneCheckTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        protected Catalog modifyCatalog(Catalog catalog2) {
        	TimeDimension timeDimension = RolapMappingFactory.eINSTANCE.createTimeDimension();
        	timeDimension.setName("Time");

        	ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        	hierarchy.setHasAll(true);
        	hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);

        	TableQuery timeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        	timeTableQuery.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);
        	hierarchy.setQuery(timeTableQuery);

        	Level yearLevel = RolapMappingFactory.eINSTANCE.createLevel();
        	yearLevel.setName("Year");
        	yearLevel.setColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
        	yearLevel.setColumnType(ColumnInternalDataType.NUMERIC);
        	yearLevel.setUniqueMembers(true);
        	yearLevel.setType(LevelDefinition.TIME_YEARS);

        	Level quarterLevel = RolapMappingFactory.eINSTANCE.createLevel();
        	quarterLevel.setName("Quarter");
        	quarterLevel.setColumn(CatalogSupplier.COLUMN_QUARTER_TIME_BY_DAY);
        	quarterLevel.setOrdinalColumn(CatalogSupplier.COLUMN_MONTH_OF_YEAR_TIME_BY_DAY);
        	quarterLevel.setUniqueMembers(false);
        	quarterLevel.setType(LevelDefinition.TIME_QUARTERS);

        	Level monthLevel = RolapMappingFactory.eINSTANCE.createLevel();
        	monthLevel.setName("Month");
        	monthLevel.setColumn(CatalogSupplier.COLUMN_MONTH_OF_YEAR_TIME_BY_DAY);
        	monthLevel.setUniqueMembers(false);
        	monthLevel.setColumnType(ColumnInternalDataType.NUMERIC);
        	monthLevel.setType(LevelDefinition.TIME_MONTHS);

        	hierarchy.getLevels().add(yearLevel);
        	hierarchy.getLevels().add(quarterLevel);
        	hierarchy.getLevels().add(monthLevel);

        	timeDimension.getHierarchies().add(hierarchy);

        	PhysicalCube salesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        	salesCube.setName("Sales");

        	TableQuery salesTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        	salesTableQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
        	salesCube.setQuery(salesTableQuery);

        	DimensionConnector timeDc = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        	timeDc.setOverrideDimensionName("Time");
        	timeDc.setDimension(timeDimension);
        	timeDc.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
        	salesCube.getDimensionConnectors().add(timeDc);

        	MeasureGroup mg = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        	SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        	unitSalesMeasure.setName("Unit Sales");
        	unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
        	unitSalesMeasure.setFormatString("Standard");

        	mg.getMeasures().add(unitSalesMeasure);
        	salesCube.getMeasureGroups().add(mg);

        	Catalog result = RolapMappingFactory.eINSTANCE.createCatalog();
        	result.setName("FoodMart 2358");
        	result.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
        	result.getCubes().add(salesCube);

        	return result;
        }
    }

    public static class DefaultRecognizerTestModifier extends EmfMappingModifier {

        /*
                    + "<Schema name=\"FoodMart\">\n"
        "<Dimension name=\"Time\" type=\"TimeDimension\"> "
        + "  <Hierarchy hasAll=\"false\" primaryKey=\"time_id\"> "
        + "    <Table name=\"time_by_day\"/> "
        + "    <Level name=\"Year\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\" levelType=\"TimeYears\"/> "
        + "    <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\" levelType=\"TimeQuarters\"/> "
        + "    <Level name=\"Month\" column=\"month_of_year\" uniqueMembers=\"false\" type=\"Numeric\" levelType=\"TimeMonths\"/> "
        + "  </Hierarchy> "
        + "</Dimension>";
                    "<Cube name=\"Sales\" defaultMeasure=\"Unit Sales\"> "
            // For this test, we use an alias on the fact table.
            + "  <Table name=\"sales_fact_1997\" alias=\"foobar\"> "
            + "      <AggExclude name=\"agg_c_special_sales_fact_1997\"/>"
            + "      <AggExclude name=\"agg_c_14_sales_fact_1997\"/>"
            + "  </Table>"
            + "  <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/> "
            + "<Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"Standard\"/>\n"
            + "  <Measure name=\"Store Cost\" column=\"store_cost\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>\n"
            + "  <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\"\n"
            + "      formatString=\"#,###.00\"/>"
            + "  <Measure name=\"Customer Count\" column=\"customer_id\" aggregator=\"distinct-count\" formatString=\"#,###\" />"
            + "</Cube>";

                    + "</Schema>");
        */

        public DefaultRecognizerTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
        	TimeDimension timeDimension = RolapMappingFactory.eINSTANCE.createTimeDimension();
        	timeDimension.setName("Time");

        	ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        	hierarchy.setHasAll(true);
        	hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);

        	TableQuery timeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        	timeTableQuery.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);
        	hierarchy.setQuery(timeTableQuery);

        	Level yearLevel = RolapMappingFactory.eINSTANCE.createLevel();
        	yearLevel.setName("Year");
        	yearLevel.setColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
        	yearLevel.setColumnType(ColumnInternalDataType.NUMERIC);
        	yearLevel.setUniqueMembers(true);
        	yearLevel.setType(LevelDefinition.TIME_YEARS);

        	Level quarterLevel = RolapMappingFactory.eINSTANCE.createLevel();
        	quarterLevel.setName("Quarter");
        	quarterLevel.setColumn(CatalogSupplier.COLUMN_QUARTER_TIME_BY_DAY);
        	quarterLevel.setOrdinalColumn(CatalogSupplier.COLUMN_MONTH_OF_YEAR_TIME_BY_DAY);
        	quarterLevel.setUniqueMembers(false);
        	quarterLevel.setType(LevelDefinition.TIME_QUARTERS);

        	Level monthLevel = RolapMappingFactory.eINSTANCE.createLevel();
        	monthLevel.setName("Month");
        	monthLevel.setColumn(CatalogSupplier.COLUMN_MONTH_OF_YEAR_TIME_BY_DAY);
        	monthLevel.setUniqueMembers(false);
        	monthLevel.setColumnType(ColumnInternalDataType.NUMERIC);
        	monthLevel.setType(LevelDefinition.TIME_MONTHS);

        	hierarchy.getLevels().add(yearLevel);
        	hierarchy.getLevels().add(quarterLevel);
        	hierarchy.getLevels().add(monthLevel);

        	timeDimension.getHierarchies().add(hierarchy);

        	SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        	unitSalesMeasure.setName("Unit Sales");
        	unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
        	unitSalesMeasure.setFormatString("Standard");

        	PhysicalCube salesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        	salesCube.setName("Sales");
        	salesCube.setDefaultMeasure(unitSalesMeasure);

        	TableQuery salesTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        	salesTableQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);

        	AggregationExclude aggExclude1 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        	aggExclude1.setName("agg_c_special_sales_fact_1997");

        	AggregationExclude aggExclude2 = RolapMappingFactory.eINSTANCE.createAggregationExclude();
        	aggExclude2.setName("agg_c_14_sales_fact_1997");

        	salesTableQuery.getAggregationExcludes().add(aggExclude1);
        	salesTableQuery.getAggregationExcludes().add(aggExclude2);

        	salesCube.setQuery(salesTableQuery);

        	DimensionConnector timeDc = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        	timeDc.setOverrideDimensionName("Time");
        	timeDc.setDimension(timeDimension);
        	timeDc.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
        	salesCube.getDimensionConnectors().add(timeDc);

        	MeasureGroup mg = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        	SumMeasure storeCostMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        	storeCostMeasure.setName("Store Cost");
        	storeCostMeasure.setColumn(CatalogSupplier.COLUMN_STORE_COST_SALESFACT);
        	storeCostMeasure.setFormatString("#,###.00");

        	SumMeasure storeSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        	storeSalesMeasure.setName("Store Sales");
        	storeSalesMeasure.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);
        	storeSalesMeasure.setFormatString("#,###.00");

        	CountMeasure customerCountMeasure = RolapMappingFactory.eINSTANCE.createCountMeasure();
        	customerCountMeasure.setName("Customer Count");
        	customerCountMeasure.setColumn(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
        	customerCountMeasure.setDistinct(true);
        	customerCountMeasure.setFormatString("#,###");

        	mg.getMeasures().add(unitSalesMeasure);
        	mg.getMeasures().add(storeCostMeasure);
        	mg.getMeasures().add(storeSalesMeasure);
        	mg.getMeasures().add(customerCountMeasure);

        	salesCube.getMeasureGroups().add(mg);

        	Catalog result = RolapMappingFactory.eINSTANCE.createCatalog();
        	result.setName("FoodMart");
        	result.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
        	result.getCubes().add(salesCube);

        	return result;
        }
    }

    public static class DialectTestModifier1 extends EmfMappingModifier {

        /*
            "<?xml version=\"1.0\"?>\n"
                    + "<Schema name=\"FoodMart\">\n"
                    + "  <Dimension  name=\"Time\" type=\"TimeDimension\">\n"
                    + "    <Hierarchy hasAll='true' primaryKey=\"time_id\">\n"
                    + "      <Table name=\"time_by_day\"/>\n"
                    + "      <Level name=\"Day\"  type=\"Date\" uniqueMembers=\"true\"\n"
                    + "          levelType=\"TimeYears\">\n"
                    + "        <KeyExpression>\n"
                    + "          <SQL>\n"
                    + "            cast(\"the_date\" as DATE)\n"
                    + "          </SQL>\n"
                    + "        </KeyExpression>\n"
                    + "      </Level>\n"
                    + "    </Hierarchy>\n"
                    + "  </Dimension>\n"
                    + "  <Cube name=\"DateLiteralTest\" defaultMeasure=\"expression\">\n"
                    + "    <Table name=\"sales_fact_1997\" />\n"
                    + "    <DimensionUsage name=\"Time\" source=\"Time\" foreignKey=\"time_id\"/>\n"
                    + "    <Measure name=\"Unit Sales\" column=\"unit_sales\"  aggregator=\"sum\"\n"
                    + "    formatString=\"Standard\" />\n"
                    + "  </Cube>\n"
                    + "</Schema>\n" );
        */

        public DialectTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
        	TimeDimension timeDimension = RolapMappingFactory.eINSTANCE.createTimeDimension();
        	timeDimension.setName("Time");

        	ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        	hierarchy.setHasAll(true);
        	hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);

        	TableQuery timeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        	timeTableQuery.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);
        	hierarchy.setQuery(timeTableQuery);

        	Level dayLevel = RolapMappingFactory.eINSTANCE.createLevel();
        	dayLevel.setName("Day");
        	dayLevel.setColumnType(ColumnInternalDataType.DATE);
        	dayLevel.setUniqueMembers(true);
        	dayLevel.setType(LevelDefinition.TIME_YEARS);

        	SQLExpressionColumn sqlColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();
        	SqlStatement sqlStatement = RolapMappingFactory.eINSTANCE.createSqlStatement();
        	sqlStatement.setSql("cast(\"the_date\" as DATE)\n");
        	sqlColumn.getSqls().add(sqlStatement);
        	sqlColumn.setType(ColumnType.VARCHAR);

        	dayLevel.setColumn(sqlColumn);

        	hierarchy.getLevels().add(dayLevel);
        	timeDimension.getHierarchies().add(hierarchy);

        	SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        	unitSalesMeasure.setName("Unit Sales");
        	unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
        	unitSalesMeasure.setFormatString("Standard");

        	PhysicalCube dateLiteralTestCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        	dateLiteralTestCube.setName("DateLiteralTest");
        	dateLiteralTestCube.setDefaultMeasure(unitSalesMeasure);

        	TableQuery salesTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        	salesTableQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
        	dateLiteralTestCube.setQuery(salesTableQuery);

        	DimensionConnector timeDc = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        	timeDc.setOverrideDimensionName("Time");
        	timeDc.setDimension(timeDimension);
        	timeDc.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
        	dateLiteralTestCube.getDimensionConnectors().add(timeDc);

        	MeasureGroup mg = RolapMappingFactory.eINSTANCE.createMeasureGroup();
        	mg.getMeasures().add(unitSalesMeasure);
        	dateLiteralTestCube.getMeasureGroups().add(mg);

        	Catalog result = RolapMappingFactory.eINSTANCE.createCatalog();
        	result.setName("FoodMart");
        	result.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
        	result.getCubes().add(dateLiteralTestCube);

        	return result;
        }
    }

    public static class DialectTestModifier2 extends EmfMappingModifier {

        /*
            "<?xml version=\"1.0\"?>\n"
                    + "<Schema name=\"FoodMart\">\n"
                    + "  <Dimension name=\"StoreSqft\">\n"
                    + "    <Hierarchy hasAll=\"true\" primaryKey=\"store_id\">\n"
                    + "      <Table name=\"store\"  />\n"
                    + "      <Level name=\"StoreSqft\"  type=\"Numeric\" uniqueMembers=\"true\">\n"
                    + "         <KeyExpression>"
                    + "          <SQL dialect='mysql'>\n"
                    + "            cast(`store_sqft` as UNSIGNED INTEGER) + "
                    + Integer.MAX_VALUE
                    + "          </SQL>\n"
                    + "          <SQL dialect='vertica'>\n"
                    + "            cast(\"store_sqft\" as BIGINT) + "
                    + Integer.MAX_VALUE
                    + "          </SQL>\n"
                    + "          <SQL dialect='oracle'>\n"
                    + "            CAST(\"store_sqft\" + 2147483647 AS NUMBER(22))  "
                    + "          </SQL>\n"
                    + "         </KeyExpression>"
                    + "      </Level>"
                    + "    </Hierarchy>\n"
                    + "  </Dimension>"
                    + "  <Cube name=\"BigIntTest\" defaultMeasure=\"expression\">\n"
                    + "    <Table name=\"sales_fact_1997\" />\n"
                    + "    <DimensionUsage name=\"StoreSqft\" source=\"StoreSqft\" foreignKey=\"store_id\"/>\n"
                    + "    <Measure name=\"Big Unit Sales\"   aggregator=\"sum\"\n"
                    + "    formatString=\"Standard\" >\n"
                    + "           <MeasureExpression>\n"
                    + "      <SQL dialect=\"vertica\">\n"
                    + "   CAST(\"unit_sales\" + 2147483647 AS NUMBER(22)) \n"
                    + "      </SQL>\n"
                    + "      </MeasureExpression>\n"
                    + "      </Measure>\n"
                    + "  <Measure name=\"Pass Agg enabled\" column=\"store_cost\" aggregator=\"sum\"/>\n"
                    + "  </Cube>\n"
                    + "</Schema>\n" );
        */

        public DialectTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
        	TimeDimension storeSqftDimension = RolapMappingFactory.eINSTANCE.createTimeDimension();
        	storeSqftDimension.setName("StoreSqft");

        	ExplicitHierarchy hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
        	hierarchy.setHasAll(true);
        	hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);

        	TableQuery storeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        	storeTableQuery.setTable(CatalogSupplier.TABLE_STORE);
        	hierarchy.setQuery(storeTableQuery);

        	Level storeSqftLevel = RolapMappingFactory.eINSTANCE.createLevel();
        	storeSqftLevel.setName("StoreSqft");
        	storeSqftLevel.setColumnType(ColumnInternalDataType.NUMERIC);
        	storeSqftLevel.setUniqueMembers(true);

        	SQLExpressionColumn sqlColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();

        	SqlStatement sqlStatement1 = RolapMappingFactory.eINSTANCE.createSqlStatement();
        	sqlStatement1.getDialects().add("mysql");
        	sqlStatement1.setSql("cast(`store_sqft` as UNSIGNED INTEGER) + " + Integer.MAX_VALUE);

        	SqlStatement sqlStatement2 = RolapMappingFactory.eINSTANCE.createSqlStatement();
        	sqlStatement2.getDialects().add("vertica");
        	sqlStatement2.setSql("cast(\"store_sqft\" as BIGINT) + " + Integer.MAX_VALUE);

        	SqlStatement sqlStatement3 = RolapMappingFactory.eINSTANCE.createSqlStatement();
        	sqlStatement3.getDialects().add("oracle");
        	sqlStatement3.setSql("CAST(\"store_sqft\" + 2147483647 AS NUMBER(22))");

        	sqlColumn.getSqls().add(sqlStatement1);
        	sqlColumn.getSqls().add(sqlStatement2);
        	sqlColumn.getSqls().add(sqlStatement3);
        	sqlColumn.setType(ColumnType.VARCHAR);

        	storeSqftLevel.setColumn(sqlColumn);

        	hierarchy.getLevels().add(storeSqftLevel);
        	storeSqftDimension.getHierarchies().add(hierarchy);

        	PhysicalCube bigIntTestCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
        	bigIntTestCube.setName("BigIntTest");

        	TableQuery salesTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
        	salesTableQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);
        	bigIntTestCube.setQuery(salesTableQuery);

        	DimensionConnector storeSqftDc = RolapMappingFactory.eINSTANCE.createDimensionConnector();
        	storeSqftDc.setOverrideDimensionName("StoreSqft");
        	storeSqftDc.setDimension(storeSqftDimension);
        	storeSqftDc.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
        	bigIntTestCube.getDimensionConnectors().add(storeSqftDc);

        	MeasureGroup mg = RolapMappingFactory.eINSTANCE.createMeasureGroup();

        	SumMeasure bigUnitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        	bigUnitSalesMeasure.setName("Big Unit Sales");
        	bigUnitSalesMeasure.setFormatString("Standard");

        	SQLExpressionColumn measureSqlColumn = RolapMappingFactory.eINSTANCE.createSQLExpressionColumn();
        	SqlStatement measureSqlStatement = RolapMappingFactory.eINSTANCE.createSqlStatement();
        	measureSqlStatement.getDialects().add("vertica");
        	measureSqlStatement.setSql("CAST(\"unit_sales\" + 2147483647 AS NUMBER(22))");
        	measureSqlColumn.getSqls().add(measureSqlStatement);

        	bigUnitSalesMeasure.setColumn(measureSqlColumn);

        	SumMeasure passAggMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
        	passAggMeasure.setName("Pass Agg enabled");
        	passAggMeasure.setColumn(CatalogSupplier.COLUMN_STORE_COST_SALESFACT);

        	mg.getMeasures().add(bigUnitSalesMeasure);
        	mg.getMeasures().add(passAggMeasure);

        	bigIntTestCube.getMeasureGroups().add(mg);

        	Catalog result = RolapMappingFactory.eINSTANCE.createCatalog();
        	result.setName("FoodMart");
        	result.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
        	result.getCubes().add(bigIntTestCube);

        	return result;
        }
    }

    public static class DrillThroughTestModifier4 extends EmfMappingModifier {

        /*
            "<Schema name=\"dsad\">\n"
            + "  <Dimension name=\"Frozen sqft\">\n"
            + "    <Hierarchy hasAll=\"true\">\n"
            + "      <Table name=\"store\"/>\n"
            + "      <Level name=\"Frozen sqft\" uniqueMembers=\"false\" column=\"frozen_sqft\" type=\"Numeric\">\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension name=\"Grocery sqft\">\n"
            + "    <Hierarchy hasAll=\"true\">\n"
            + "      <Table name=\"store\"/>\n"
            + "      <Level name=\"Grocery sqft\" uniqueMembers=\"false\" column=\"grocery_sqft\" type=\"Numeric\">\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension name=\"Meat sqft\">\n"
            + "    <Hierarchy hasAll=\"true\">\n"
            + "      <Table name=\"store\"/>\n"
            + "      <Level name=\"Meat sqft\" uniqueMembers=\"false\" column=\"meat_sqft\" type=\"Numeric\">\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension name=\"Store sqft\">\n"
            + "    <Hierarchy hasAll=\"true\">\n"
            + "      <Table name=\"store\"/>\n"
            + "      <Level name=\"Store sqft\" uniqueMembers=\"false\" column=\"store_sqft\" type=\"Numeric\">\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Cube name=\"dsad\">\n"
            + "    <Table name=\"store\"/>\n"
            + "    <DimensionUsage name=\"Frozen sqft\" source=\"Frozen sqft\"/>\n"
            + "    <DimensionUsage name=\"Grocery sqft\" source=\"Grocery sqft\"/>\n"
            + "    <DimensionUsage name=\"Meat sqft\" source=\"Meat sqft\"/>\n"
            + "    <DimensionUsage name=\"Store sqft\" source=\"Store sqft\"/>\n"
            + "    <Measure name=\"Frozen sqft\" column=\"frozen_sqft\" aggregator=\"sum\"/>\n"
            + "    <Measure name=\"Grocery sqft\" column=\"grocery_sqft\" aggregator=\"sum\"/>\n"
            + "    <Measure name=\"Meat sqft\" column=\"meat_sqft\" aggregator=\"sum\"/>\n"
            + "    <Measure name=\"Store sqft\" column=\"store_sqft\" aggregator=\"sum\"/>\n"
            + "  </Cube>\n"
            + "</Schema>\n");
        */

        public DrillThroughTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected Catalog modifyCatalog(CatalogMapping catalog2) {

            StandardDimension frozenSqftDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            frozenSqftDimension.setName("Frozen sqft");

            ExplicitHierarchy frozenSqftHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            frozenSqftHierarchy.setHasAll(true);

            TableQuery frozenSqftTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            frozenSqftTable.setTable(CatalogSupplier.TABLE_STORE);
            frozenSqftHierarchy.setQuery(frozenSqftTable);

            Level frozenSqftLevel = RolapMappingFactory.eINSTANCE.createLevel();
            frozenSqftLevel.setName("Frozen sqft");
            frozenSqftLevel.setUniqueMembers(false);
            frozenSqftLevel.setColumn(CatalogSupplier.COLUMN_FROZEN_SQFT_STORE);
            frozenSqftLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            frozenSqftHierarchy.getLevels().add(frozenSqftLevel);

            frozenSqftDimension.getHierarchies().add(frozenSqftHierarchy);

            StandardDimension grocerySqftDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            grocerySqftDimension.setName("Grocery sqft");

            ExplicitHierarchy grocerySqftHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            grocerySqftHierarchy.setHasAll(true);

            TableQuery grocerySqftTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            grocerySqftTable.setTable(CatalogSupplier.TABLE_STORE);
            grocerySqftHierarchy.setQuery(grocerySqftTable);

            Level grocerySqftLevel = RolapMappingFactory.eINSTANCE.createLevel();
            grocerySqftLevel.setName("Grocery sqft");
            grocerySqftLevel.setUniqueMembers(false);
            grocerySqftLevel.setColumn(CatalogSupplier.COLUMN_GROCERY_SQFT_STORE);
            grocerySqftLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            grocerySqftHierarchy.getLevels().add(grocerySqftLevel);

            grocerySqftDimension.getHierarchies().add(grocerySqftHierarchy);

            StandardDimension meatSqftDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            meatSqftDimension.setName("Meat sqft");

            ExplicitHierarchy meatSqftHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            meatSqftHierarchy.setHasAll(true);

            TableQuery meatSqftTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            meatSqftTable.setTable(CatalogSupplier.TABLE_STORE);
            meatSqftHierarchy.setQuery(meatSqftTable);

            Level meatSqftLevel = RolapMappingFactory.eINSTANCE.createLevel();
            meatSqftLevel.setName("Meat sqft");
            meatSqftLevel.setUniqueMembers(false);
            meatSqftLevel.setColumn(CatalogSupplier.COLUMN_MEAT_SQFT_STORE);
            meatSqftLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            meatSqftHierarchy.getLevels().add(meatSqftLevel);

            meatSqftDimension.getHierarchies().add(meatSqftHierarchy);

            StandardDimension storeSqftDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            storeSqftDimension.setName("Store sqft");

            ExplicitHierarchy storeSqftHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            storeSqftHierarchy.setHasAll(true);

            TableQuery storeSqftTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            storeSqftTable.setTable(CatalogSupplier.TABLE_STORE);
            storeSqftHierarchy.setQuery(storeSqftTable);

            Level storeSqftLevel = RolapMappingFactory.eINSTANCE.createLevel();
            storeSqftLevel.setName("Store sqft");
            storeSqftLevel.setUniqueMembers(false);
            storeSqftLevel.setColumn(CatalogSupplier.COLUMN_STORE_SQFT_STORE);
            storeSqftLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            storeSqftHierarchy.getLevels().add(storeSqftLevel);

            storeSqftDimension.getHierarchies().add(storeSqftHierarchy);

            PhysicalCube dsadCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            dsadCube.setName("dsad");

            TableQuery dsadCubeTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            dsadCubeTable.setTable(CatalogSupplier.TABLE_STORE);
            dsadCube.setQuery(dsadCubeTable);

            DimensionConnector frozenSqftConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            frozenSqftConnector.setOverrideDimensionName("Frozen sqft");
            frozenSqftConnector.setDimension(frozenSqftDimension);
            dsadCube.getDimensionConnectors().add(frozenSqftConnector);

            DimensionConnector grocerySqftConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            grocerySqftConnector.setOverrideDimensionName("Grocery sqft");
            grocerySqftConnector.setDimension(grocerySqftDimension);
            dsadCube.getDimensionConnectors().add(grocerySqftConnector);

            DimensionConnector meatSqftConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            meatSqftConnector.setOverrideDimensionName("Meat sqft");
            meatSqftConnector.setDimension(meatSqftDimension);
            dsadCube.getDimensionConnectors().add(meatSqftConnector);

            DimensionConnector storeSqftConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            storeSqftConnector.setOverrideDimensionName("Store sqft");
            storeSqftConnector.setDimension(storeSqftDimension);
            dsadCube.getDimensionConnectors().add(storeSqftConnector);

            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

            SumMeasure frozenSqftMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            frozenSqftMeasure.setName("Frozen sqft");
            frozenSqftMeasure.setColumn(CatalogSupplier.COLUMN_FROZEN_SQFT_STORE);
            measureGroup.getMeasures().add(frozenSqftMeasure);

            SumMeasure grocerySqftMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            grocerySqftMeasure.setName("Grocery sqft");
            grocerySqftMeasure.setColumn(CatalogSupplier.COLUMN_GROCERY_SQFT_STORE);
            measureGroup.getMeasures().add(grocerySqftMeasure);

            SumMeasure meatSqftMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            meatSqftMeasure.setName("Meat sqft");
            meatSqftMeasure.setColumn(CatalogSupplier.COLUMN_MEAT_SQFT_STORE);
            measureGroup.getMeasures().add(meatSqftMeasure);

            SumMeasure storeSqftMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            storeSqftMeasure.setName("Store sqft");
            storeSqftMeasure.setColumn(CatalogSupplier.COLUMN_STORE_SQFT_STORE);
            measureGroup.getMeasures().add(storeSqftMeasure);

            dsadCube.getMeasureGroups().add(measureGroup);

            Catalog result = RolapMappingFactory.eINSTANCE.createCatalog();
            result.setName("FoodMart");
            result.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            result.getCubes().add(dsadCube);

            return result;
        }
    }

    public static class DrillThroughTestModifier5 extends EmfMappingModifier {

        /*
        "<Schema name=\"FoodMartSalesOnly\">\n"
        + " <Cube name=\"SalesShort\">\n"
        + "   <Table name=\"sales_fact_1997\"/>\n"
        + "   <Dimension name=\"Customers Dimension\" foreignKey=\"customer_id\">\n"
        + "     <Hierarchy hasAll=\"true\" allMemberName=\"All Customers hierarchy name\" primaryKey=\"customer_id\">\n"
        + "       <Table name=\"customer\"/>\n"
        + "       <Level name=\"Customer Level Name\" caption=\"Customer Level Caption\" description=\"Customer Level Description\" column=\"customer_id\" nameColumn=\"fullname\" type=\"String\" uniqueMembers=\"true\" />\n"
        + "     </Hierarchy>\n"
        + "   </Dimension>\n"
        + "   <Dimension name=\"Product Dimension\" foreignKey=\"product_id\">\n"
        + "     <Hierarchy hasAll=\"true\" allMemberName=\"All products hierarchy name\" primaryKey=\"product_id\">\n"
        + "       <Table name=\"product\"/>\n"
        + "       <Level name=\"Product Level Name\" caption=\"Product Level Caption\" description=\"Product Level Description\" column=\"product_id\" nameColumn=\"product_name\" type=\"String\" uniqueMembers=\"true\" />\n"
        + "     </Hierarchy>\n"
        + "   </Dimension>\n"
        + "   <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\" formatString=\"#,###.00\"/>\n"
        + " </Cube>\n"
        + "</Schema>\n";
        */

        public DrillThroughTestModifier5(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected Catalog modifyCatalog(CatalogMapping catalog2) {
            // Customers Dimension
            StandardDimension customersDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            customersDimension.setName("Customers Dimension");

            ExplicitHierarchy customersHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            customersHierarchy.setHasAll(true);
            customersHierarchy.setAllMemberName("All Customers hierarchy name");
            customersHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);

            TableQuery customersTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            customersTable.setTable(CatalogSupplier.TABLE_CUSTOMER);
            customersHierarchy.setQuery(customersTable);

            Level customerLevel = RolapMappingFactory.eINSTANCE.createLevel();
            customerLevel.setName("Customer Level Name");
            customerLevel.setDescription("Customer Level Description");
            customerLevel.setColumn(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);
            customerLevel.setNameColumn(CatalogSupplier.COLUMN_FULLNAME_CUSTOMER);
            customerLevel.setColumnType(ColumnInternalDataType.STRING);
            customerLevel.setUniqueMembers(true);
            customersHierarchy.getLevels().add(customerLevel);

            customersDimension.getHierarchies().add(customersHierarchy);

            // Product Dimension
            StandardDimension productDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            productDimension.setName("Product Dimension");

            ExplicitHierarchy productHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            productHierarchy.setHasAll(true);
            productHierarchy.setAllMemberName("All products hierarchy name");
            productHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);

            TableQuery productTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            productTable.setTable(CatalogSupplier.TABLE_PRODUCT);
            productHierarchy.setQuery(productTable);

            Level productLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productLevel.setName("Product Level Name");
            productLevel.setDescription("Product Level Description");
            productLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);
            productLevel.setNameColumn(CatalogSupplier.COLUMN_PRODUCT_NAME_PRODUCT);
            productLevel.setColumnType(ColumnInternalDataType.STRING);
            productLevel.setUniqueMembers(true);
            productHierarchy.getLevels().add(productLevel);

            productDimension.getHierarchies().add(productHierarchy);

            // SalesShort Cube
            PhysicalCube salesShortCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            salesShortCube.setName("SalesShort");

            TableQuery salesTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            salesTable.setTable(CatalogSupplier.TABLE_SALES_FACT);
            salesShortCube.setQuery(salesTable);

            DimensionConnector customersConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            customersConnector.setOverrideDimensionName("Customers Dimension");
            customersConnector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
            customersConnector.setDimension(customersDimension);
            salesShortCube.getDimensionConnectors().add(customersConnector);

            DimensionConnector productConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            productConnector.setOverrideDimensionName("Product Dimension");
            productConnector.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);
            productConnector.setDimension(productDimension);
            salesShortCube.getDimensionConnectors().add(productConnector);

            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

            SumMeasure storeSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            storeSalesMeasure.setName("Store Sales");
            storeSalesMeasure.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);
            storeSalesMeasure.setFormatString("#,###.00");
            measureGroup.getMeasures().add(storeSalesMeasure);

            salesShortCube.getMeasureGroups().add(measureGroup);

            Catalog result = RolapMappingFactory.eINSTANCE.createCatalog();
            result.setName("FoodMartSalesOnly");
            result.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            result.getCubes().add(salesShortCube);

            return result;
        }
    }

    public static class DrillThroughTestModifier6 extends EmfMappingModifier {

        /*
        "<Schema name=\"FoodMartSalesOnly\">\n"
        + " <Cube name=\"SalesShort\">\n"
        + "   <Table name=\"sales_fact_1997\"/>\n"
        + "   <Dimension name=\"Customers Dimension\" foreignKey=\"customer_id\">\n"
        + "     <Hierarchy hasAll=\"true\" allMemberName=\"All Customers hierarchy name\" primaryKey=\"customer_id\">\n"
        + "       <Table name=\"customer\"/>\n"
        + "       <Level name=\"Customer Level Name\" caption=\"Customer Level Caption\" description=\"Customer Level Description\" column=\"customer_id\" type=\"String\" uniqueMembers=\"true\" />\n"
        + "     </Hierarchy>\n"
        + "   </Dimension>\n"
        + "   <Dimension name=\"Product Dimension\" foreignKey=\"product_id\">\n"
        + "     <Hierarchy hasAll=\"true\" allMemberName=\"All products hierarchy name\" primaryKey=\"product_id\">\n"
        + "       <Table name=\"product\"/>\n"
        + "       <Level name=\"Product Level Name\" caption=\"Product Level Caption\" description=\"Product Level Description\" column=\"product_id\" type=\"String\" uniqueMembers=\"true\" />\n"
        + "     </Hierarchy>\n"
        + "   </Dimension>\n"
        + "   <Measure name=\"Store Sales\" column=\"store_sales\" aggregator=\"sum\" formatString=\"#,###.00\"/>\n"
        + " </Cube>\n"
        + "</Schema>\n";
        */

        public DrillThroughTestModifier6(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected Catalog modifyCatalog(CatalogMapping catalog2) {
            // Customers Dimension
            StandardDimension customersDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            customersDimension.setName("Customers Dimension");

            ExplicitHierarchy customersHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            customersHierarchy.setHasAll(true);
            customersHierarchy.setAllMemberName("All Customers hierarchy name");
            customersHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);

            TableQuery customersTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            customersTable.setTable(CatalogSupplier.TABLE_CUSTOMER);
            customersHierarchy.setQuery(customersTable);

            Level customerLevel = RolapMappingFactory.eINSTANCE.createLevel();
            customerLevel.setName("Customer Level Name");
            customerLevel.setDescription("Customer Level Description");
            customerLevel.setColumn(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);
            customerLevel.setColumnType(ColumnInternalDataType.STRING);
            customerLevel.setUniqueMembers(true);
            customersHierarchy.getLevels().add(customerLevel);

            customersDimension.getHierarchies().add(customersHierarchy);

            // Product Dimension
            StandardDimension productDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            productDimension.setName("Product Dimension");

            ExplicitHierarchy productHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            productHierarchy.setHasAll(true);
            productHierarchy.setAllMemberName("All products hierarchy name");
            productHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);

            TableQuery productTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            productTable.setTable(CatalogSupplier.TABLE_PRODUCT);
            productHierarchy.setQuery(productTable);

            Level productLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productLevel.setName("Product Level Name");
            productLevel.setDescription("Product Level Description");
            productLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);
            productLevel.setColumnType(ColumnInternalDataType.STRING);
            productLevel.setUniqueMembers(true);
            productHierarchy.getLevels().add(productLevel);

            productDimension.getHierarchies().add(productHierarchy);

            // SalesShort Cube
            PhysicalCube salesShortCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            salesShortCube.setName("SalesShort");

            TableQuery salesTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            salesTable.setTable(CatalogSupplier.TABLE_SALES_FACT);
            salesShortCube.setQuery(salesTable);

            DimensionConnector customersConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            customersConnector.setOverrideDimensionName("Customers Dimension");
            customersConnector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
            customersConnector.setDimension(customersDimension);
            salesShortCube.getDimensionConnectors().add(customersConnector);

            DimensionConnector productConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            productConnector.setOverrideDimensionName("Product Dimension");
            productConnector.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);
            productConnector.setDimension(productDimension);
            salesShortCube.getDimensionConnectors().add(productConnector);

            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();

            SumMeasure storeSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            storeSalesMeasure.setName("Store Sales");
            storeSalesMeasure.setColumn(CatalogSupplier.COLUMN_STORE_SALES_SALESFACT);
            storeSalesMeasure.setFormatString("#,###.00");
            measureGroup.getMeasures().add(storeSalesMeasure);

            salesShortCube.getMeasureGroups().add(measureGroup);

            Catalog result = RolapMappingFactory.eINSTANCE.createCatalog();
            result.setName("FoodMartSalesOnly");
            result.getDbschemas().addAll((Collection<? extends DatabaseSchema>) catalogDatabaseSchemas(catalog2));
            result.getCubes().add(salesShortCube);

            return result;
        }
    }

    public static class PropertiesTestModifier extends EmfMappingModifier {

        /*
            "<Cube name=\"Foo\" defaultMeasure=\"Unit Sales\">\n"
            + "  <Table name=\"sales_fact_1997\"/>\n"
            + "  <Dimension name=\"Promotions\" foreignKey=\"promotion_id\">\n"
            + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
            + "      <Table name=\"promotion\"/>\n"
            + "      <Level name=\"Promotion Name\" column=\"promotion_name\" uniqueMembers=\"true\">\n"
            + "   <Property name=\"BarProp\" column=\"promotion_name\" description=\"BaconDesc\"/>\n"
            + "   </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\" formatString=\"Standard\"/>\n"
            + "</Cube>\n",
        */

        public PropertiesTestModifier(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected List<? extends Cube> catalogCubes(CatalogMapping schema) {
            SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");

            List<Cube> result = new ArrayList<>();
            result.addAll((Collection<? extends Cube>) super.catalogCubes(schema));

            // Promotions Dimension
            StandardDimension promotionsDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            promotionsDimension.setName("Promotions");

            ExplicitHierarchy promotionsHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            promotionsHierarchy.setHasAll(true);
            promotionsHierarchy.setAllMemberName("All Promotions");
            promotionsHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PROMOTION_ID_PROMOTION);
            promotionsHierarchy.setDefaultMember("[All Promotions]");

            TableQuery promotionsTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            promotionsTable.setTable(CatalogSupplier.TABLE_PROMOTION);
            promotionsHierarchy.setQuery(promotionsTable);

            Level promotionNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
            promotionNameLevel.setName("Promotion Name");
            promotionNameLevel.setColumn(CatalogSupplier.COLUMN_PROMOTION_NAME_PROMOTION);
            promotionNameLevel.setUniqueMembers(true);

            MemberProperty barProp = RolapMappingFactory.eINSTANCE.createMemberProperty();
            barProp.setName("BarProp");
            barProp.setColumn(CatalogSupplier.COLUMN_PROMOTION_NAME_PROMOTION);
            barProp.setDescription("BaconDesc");
            promotionNameLevel.getMemberProperties().add(barProp);

            promotionsHierarchy.getLevels().add(promotionNameLevel);
            promotionsDimension.getHierarchies().add(promotionsHierarchy);

            // Foo Cube
            PhysicalCube fooCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            fooCube.setName("Foo");
            fooCube.setDefaultMeasure(unitSalesMeasure);

            TableQuery fooTable = RolapMappingFactory.eINSTANCE.createTableQuery();
            fooTable.setTable(CatalogSupplier.TABLE_SALES_FACT);
            fooCube.setQuery(fooTable);

            DimensionConnector promotionsConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            promotionsConnector.setOverrideDimensionName("Promotions");
            promotionsConnector.setForeignKey(CatalogSupplier.COLUMN_PROMOTION_ID_SALESFACT);
            promotionsConnector.setDimension(promotionsDimension);
            fooCube.getDimensionConnectors().add(promotionsConnector);

            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(unitSalesMeasure);
            fooCube.getMeasureGroups().add(measureGroup);

            result.add(fooCube);
            return result;
        }
    }

    public static class Ssas2005CompatibilityTestModifier5 extends EmfMappingModifier {

        public Ssas2005CompatibilityTestModifier5(CatalogMapping catalog) {
            super(catalog);
        }

        /*
            "<Schema name=\"FoodMart\">\n"
            + "<Cube name=\"Warehouse and Sales\" defaultMeasure=\"Unit Sales\">\n"
            + "  <Table name=\"sales_fact_1997\" />\n"
            + "  <Dimension name=\"Store\" foreignKey=\"store_id\">\n"
            + "    <Hierarchy name=\"Stores\" hasAll=\"true\" primaryKey=\"store_id\">\n"
            + "      <Table name=\"store\"/>\n"
            + "      <Level name=\"Store Country\" column=\"store_country\" uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"Store State\" column=\"store_state\" uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"Store City\" column=\"store_city\" uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Store Name\" column=\"store_name\" uniqueMembers=\"true\">\n"
            + "        <Property name=\"Store Type\" column=\"store_type\"/>\n"
            + "        <Property name=\"Store Sqft\" column=\"store_sqft\" type=\"Numeric\"/>\n"
            + "      </Level>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension name=\"Time\" type=\"TimeDimension\" foreignKey=\"time_id\">\n"
            + "    <Hierarchy hasAll=\"true\" name=\"Time By Week\" primaryKey=\"time_id\" >\n"
            + "      <Table name=\"time_by_day\"/>\n"
            + "      <Level name=\"Year2\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
            + "          levelType=\"TimeYears\"/>\n"
            + "      <Level name=\"Week\" column=\"week_of_year\" type=\"Numeric\" uniqueMembers=\"false\"\n"
            + "          levelType=\"TimeWeeks\"/>\n"
            + "      <Level name=\"Date2\" column=\"day_of_month\" uniqueMembers=\"false\" type=\"Numeric\"\n"
            + "          levelType=\"TimeDays\"/>\n"
            + "    </Hierarchy>\n"
            + "    <Hierarchy name=\"Time2\" hasAll=\"false\" primaryKey=\"time_id\">\n"
            + "      <Table name=\"time_by_day\"/>\n"
            + "      <Level name=\"Year2\" column=\"the_year\" type=\"Numeric\" uniqueMembers=\"true\"\n"
            + "          levelType=\"TimeYears\"/>\n"
            + "      <Level name=\"Quarter\" column=\"quarter\" uniqueMembers=\"false\"\n"
            + "          levelType=\"TimeQuarters\"/>\n"
            + "      <Level name=\"Month\" column=\"month_of_year\" nameColumn=\"the_month\" uniqueMembers=\"false\" type=\"Numeric\"\n"
            + "          levelType=\"TimeMonths\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension name=\"Product\" foreignKey=\"product_id\">\n"
            + "    <Hierarchy name=\"Products\" hasAll=\"true\" primaryKey=\"product_id\" primaryKeyTable=\"product\">\n"
            + "      <Join leftKey=\"product_class_id\" rightKey=\"product_class_id\">\n"
            + "        <Table name=\"product\"/>\n"
            + "        <Table name=\"product_class\"/>\n"
            + "      </Join>\n"
            + "      <Level name=\"Product Family\" table=\"product_class\" column=\"product_family\"\n"
            + "          uniqueMembers=\"true\"/>\n"
            + "      <Level name=\"Product Department\" table=\"product_class\" column=\"product_department\"\n"
            + "          uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Product Category\" table=\"product_class\" column=\"product_category\"\n"
            + "          uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Product Subcategory\" table=\"product_class\" column=\"product_subcategory\"\n"
            + "          uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Brand Name\" table=\"product\" column=\"brand_name\" uniqueMembers=\"false\"/>\n"
            + "      <Level name=\"Product Name\" table=\"product\" nameColumn=\"product_name\" column=\"product_id\" \n"
            + "          uniqueMembers=\"true\"/>\n"
            + "    </Hierarchy>\n"
            + "    <Hierarchy name=\"Product Name\" hasAll=\"true\" primaryKey=\"product_id\" primaryKeyTable=\"product\">\n"
            + "      <Join leftKey=\"product_class_id\" rightKey=\"product_class_id\">\n"
            + "        <Table name=\"product\"/>\n"
            + "        <Table name=\"product_class\"/>\n"
            + "      </Join>\n"
            + "      <Level name=\"Product Name\" table=\"product\" column=\"product_name\"\n"
            + "          uniqueMembers=\"true\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension name=\"Promotion\" foreignKey=\"promotion_id\">\n"
            + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Promotions\" primaryKey=\"promotion_id\" defaultMember=\"[All Promotions]\">\n"
            + "      <Table name=\"promotion\"/>\n"
            + "      <Level name=\"Promotion Name\" column=\"promotion_name\" uniqueMembers=\"true\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension name=\"Currency\" foreignKey=\"promotion_id\">\n"
            + "    <Hierarchy hasAll=\"true\" primaryKey=\"promotion_id\">\n"
            + "      <Table name=\"promotion\"/>\n"
            + "      <Level name=\"Currency\" column=\"media_type\" uniqueMembers=\"true\"/>\n"
            + "    </Hierarchy>\n"
            + "  </Dimension>"
            + "  <Dimension name=\"Customer\" foreignKey=\"customer_id\">\n"
                + "    <Hierarchy hasAll=\"true\" allMemberName=\"All Customers\" primaryKey=\"customer_id\">\n"
                + "      <Table name=\"customer\"/>\n"
                + "      <Level name=\"Country\" column=\"country\" uniqueMembers=\"true\"/>\n"
                + "      <Level name=\"State Province\" column=\"state_province\" uniqueMembers=\"true\"/>\n"
                + "      <Level name=\"City\" column=\"city\" uniqueMembers=\"false\"/>\n"
                + "      <Level name=\"Name\" column=\"customer_id\" type=\"Numeric\" uniqueMembers=\"true\"/>\n"
                + "    </Hierarchy>\n"
                + "  </Dimension>\n"
                + "  <Dimension name='Store Size in SQFT' foreignKey='store_id'>\n"
                + "    <Hierarchy hasAll='true' primaryKey='store_id'>\n"
                + "      <Table name='store'/>\n"
                + "      <Level name='Store Sqft' column='store_sqft' type='Numeric' uniqueMembers='true'/>\n"
                + "    </Hierarchy>\n"
                + "  </Dimension>\n"
                + "  <Measure name=\"Unit Sales\" column=\"unit_sales\" aggregator=\"sum\"\n"
                + "      formatString=\"Standard\"/>\n"
                + "</Cube>\n"
                + "</Schema>");
         */

        @Override
        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Create the measure
            SumMeasure unitSalesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            unitSalesMeasure.setName("Unit Sales");
            unitSalesMeasure.setColumn(CatalogSupplier.COLUMN_UNIT_SALES_SALESFACT);
            unitSalesMeasure.setFormatString("Standard");

            // Store Dimension - Stores Hierarchy
            Level storeCountryLevel = RolapMappingFactory.eINSTANCE.createLevel();
            storeCountryLevel.setName("Store Country");
            storeCountryLevel.setColumn(CatalogSupplier.COLUMN_STORE_COUNTRY_STORE);
            storeCountryLevel.setUniqueMembers(true);

            Level storeStateLevel = RolapMappingFactory.eINSTANCE.createLevel();
            storeStateLevel.setName("Store State");
            storeStateLevel.setColumn(CatalogSupplier.COLUMN_STORE_STATE_STORE);
            storeStateLevel.setUniqueMembers(true);

            Level storeCityLevel = RolapMappingFactory.eINSTANCE.createLevel();
            storeCityLevel.setName("Store City");
            storeCityLevel.setColumn(CatalogSupplier.COLUMN_STORE_CITY_STORE);
            storeCityLevel.setUniqueMembers(false);

            MemberProperty storeTypeProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
            storeTypeProperty.setName("Store Type");
            storeTypeProperty.setColumn(CatalogSupplier.COLUMN_STORE_TYPE_STORE);

            MemberProperty storeSqftProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
            storeSqftProperty.setName("Store Sqft");
            storeSqftProperty.setColumn(CatalogSupplier.COLUMN_STORE_SQFT_STORE);
            storeSqftProperty.setPropertyType(ColumnInternalDataType.NUMERIC);

            Level storeNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
            storeNameLevel.setName("Store Name");
            storeNameLevel.setColumn(CatalogSupplier.COLUMN_STORE_NAME_STORE);
            storeNameLevel.setUniqueMembers(true);
            storeNameLevel.getMemberProperties().add(storeTypeProperty);
            storeNameLevel.getMemberProperties().add(storeSqftProperty);

            TableQuery storeQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            storeQuery.setTable(CatalogSupplier.TABLE_STORE);

            ExplicitHierarchy storesHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            storesHierarchy.setName("Stores");
            storesHierarchy.setHasAll(true);
            storesHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);
            storesHierarchy.setQuery(storeQuery);
            storesHierarchy.getLevels().add(storeCountryLevel);
            storesHierarchy.getLevels().add(storeStateLevel);
            storesHierarchy.getLevels().add(storeCityLevel);
            storesHierarchy.getLevels().add(storeNameLevel);

            StandardDimension storeDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            storeDimension.setName("Store");
            storeDimension.getHierarchies().add(storesHierarchy);

            DimensionConnector storeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            storeConnector.setOverrideDimensionName("Store");
            storeConnector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
            storeConnector.setDimension(storeDimension);

            // Time Dimension - Time By Week Hierarchy
            Level year2Level1 = RolapMappingFactory.eINSTANCE.createLevel();
            year2Level1.setName("Year2");
            year2Level1.setColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
            year2Level1.setColumnType(ColumnInternalDataType.NUMERIC);
            year2Level1.setUniqueMembers(true);
            year2Level1.setType(LevelDefinition.TIME_YEARS);

            Level weekLevel = RolapMappingFactory.eINSTANCE.createLevel();
            weekLevel.setName("Week");
            weekLevel.setColumn(CatalogSupplier.COLUMN_WEEK_OF_YEAR_TIME_BY_DAY);
            weekLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            weekLevel.setUniqueMembers(false);
            weekLevel.setType(LevelDefinition.TIME_WEEKS);

            Level date2Level = RolapMappingFactory.eINSTANCE.createLevel();
            date2Level.setName("Date2");
            date2Level.setColumn(CatalogSupplier.COLUMN_DAY_OF_MONTH_TIME_BY_DAY);
            date2Level.setColumnType(ColumnInternalDataType.NUMERIC);
            date2Level.setUniqueMembers(false);
            date2Level.setType(LevelDefinition.TIME_DAYS);

            TableQuery timeByDayQuery1 = RolapMappingFactory.eINSTANCE.createTableQuery();
            timeByDayQuery1.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);

            ExplicitHierarchy timeByWeekHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            timeByWeekHierarchy.setHasAll(true);
            timeByWeekHierarchy.setName("Time By Week");
            timeByWeekHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);
            timeByWeekHierarchy.setQuery(timeByDayQuery1);
            timeByWeekHierarchy.getLevels().add(year2Level1);
            timeByWeekHierarchy.getLevels().add(weekLevel);
            timeByWeekHierarchy.getLevels().add(date2Level);

            // Time Dimension - Time2 Hierarchy
            Level year2Level2 = RolapMappingFactory.eINSTANCE.createLevel();
            year2Level2.setName("Year2");
            year2Level2.setColumn(CatalogSupplier.COLUMN_THE_YEAR_TIME_BY_DAY);
            year2Level2.setColumnType(ColumnInternalDataType.NUMERIC);
            year2Level2.setUniqueMembers(true);
            year2Level2.setType(LevelDefinition.TIME_YEARS);

            Level quarterLevel = RolapMappingFactory.eINSTANCE.createLevel();
            quarterLevel.setName("Quarter");
            quarterLevel.setColumn(CatalogSupplier.COLUMN_QUARTER_TIME_BY_DAY);
            quarterLevel.setUniqueMembers(false);
            quarterLevel.setType(LevelDefinition.TIME_QUARTERS);

            Level monthLevel = RolapMappingFactory.eINSTANCE.createLevel();
            monthLevel.setName("Month");
            monthLevel.setColumn(CatalogSupplier.COLUMN_MONTH_OF_YEAR_TIME_BY_DAY);
            monthLevel.setNameColumn(CatalogSupplier.COLUMN_THE_MONTH_TIME_BY_DAY);
            monthLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            monthLevel.setUniqueMembers(false);
            monthLevel.setType(LevelDefinition.TIME_MONTHS);

            TableQuery timeByDayQuery2 = RolapMappingFactory.eINSTANCE.createTableQuery();
            timeByDayQuery2.setTable(CatalogSupplier.TABLE_TIME_BY_DAY);

            ExplicitHierarchy time2Hierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            time2Hierarchy.setHasAll(false);
            time2Hierarchy.setName("Time2");
            time2Hierarchy.setPrimaryKey(CatalogSupplier.COLUMN_TIME_ID_TIME_BY_DAY);
            time2Hierarchy.setQuery(timeByDayQuery2);
            time2Hierarchy.getLevels().add(year2Level2);
            time2Hierarchy.getLevels().add(quarterLevel);
            time2Hierarchy.getLevels().add(monthLevel);

            TimeDimension timeDimension = RolapMappingFactory.eINSTANCE.createTimeDimension();
            timeDimension.setName("Time");
            timeDimension.getHierarchies().add(timeByWeekHierarchy);
            timeDimension.getHierarchies().add(time2Hierarchy);

            DimensionConnector timeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            timeConnector.setOverrideDimensionName("Time");
            timeConnector.setForeignKey(CatalogSupplier.COLUMN_TIME_ID_SALESFACT);
            timeConnector.setDimension(timeDimension);

            // Product Dimension - Products Hierarchy
            Level productFamilyLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productFamilyLevel.setName("Product Family");
            productFamilyLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_FAMILY_PRODUCT_CLASS);
            productFamilyLevel.setUniqueMembers(true);

            Level productDepartmentLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productDepartmentLevel.setName("Product Department");
            productDepartmentLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_DEPARTMENT_PRODUCT_CLASS);
            productDepartmentLevel.setUniqueMembers(false);

            Level productCategoryLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productCategoryLevel.setName("Product Category");
            productCategoryLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_CATEGORY_PRODUCT_CLASS);
            productCategoryLevel.setUniqueMembers(false);

            Level productSubcategoryLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productSubcategoryLevel.setName("Product Subcategory");
            productSubcategoryLevel.setColumn(CatalogSupplier.COLUMN_PRODUCT_SUBCATEGORY_PRODUCT_CLASS);
            productSubcategoryLevel.setUniqueMembers(false);

            Level brandNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
            brandNameLevel.setName("Brand Name");
            brandNameLevel.setColumn(CatalogSupplier.COLUMN_BRAND_NAME_PRODUCT);
            brandNameLevel.setUniqueMembers(false);

            Level productNameLevel1 = RolapMappingFactory.eINSTANCE.createLevel();
            productNameLevel1.setName("Product Name");
            productNameLevel1.setNameColumn(CatalogSupplier.COLUMN_PRODUCT_NAME_PRODUCT);
            productNameLevel1.setColumn(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);
            productNameLevel1.setUniqueMembers(true);

            TableQuery productTableQuery1 = RolapMappingFactory.eINSTANCE.createTableQuery();
            productTableQuery1.setTable(CatalogSupplier.TABLE_PRODUCT);

            TableQuery productClassTableQuery1 = RolapMappingFactory.eINSTANCE.createTableQuery();
            productClassTableQuery1.setTable(CatalogSupplier.TABLE_PRODUCT_CLASS);

            JoinedQueryElement leftJoin1 = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
            leftJoin1.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT);
            leftJoin1.setQuery(productTableQuery1);

            JoinedQueryElement rightJoin1 = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
            rightJoin1.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT_CLASS);
            rightJoin1.setQuery(productClassTableQuery1);

            JoinQuery joinQuery1 = RolapMappingFactory.eINSTANCE.createJoinQuery();
            joinQuery1.setLeft(leftJoin1);
            joinQuery1.setRight(rightJoin1);

            ExplicitHierarchy productsHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            productsHierarchy.setHasAll(true);
            productsHierarchy.setName("Products");
            productsHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);
            productsHierarchy.setQuery(joinQuery1);
            productsHierarchy.getLevels().add(productFamilyLevel);
            productsHierarchy.getLevels().add(productDepartmentLevel);
            productsHierarchy.getLevels().add(productCategoryLevel);
            productsHierarchy.getLevels().add(productSubcategoryLevel);
            productsHierarchy.getLevels().add(brandNameLevel);
            productsHierarchy.getLevels().add(productNameLevel1);

            // Product Dimension - Product Name Hierarchy
            Level productNameLevel2 = RolapMappingFactory.eINSTANCE.createLevel();
            productNameLevel2.setName("Product Name");
            productNameLevel2.setColumn(CatalogSupplier.COLUMN_PRODUCT_NAME_PRODUCT);
            productNameLevel2.setUniqueMembers(true);

            TableQuery productTableQuery2 = RolapMappingFactory.eINSTANCE.createTableQuery();
            productTableQuery2.setTable(CatalogSupplier.TABLE_PRODUCT);

            TableQuery productClassTableQuery2 = RolapMappingFactory.eINSTANCE.createTableQuery();
            productClassTableQuery2.setTable(CatalogSupplier.TABLE_PRODUCT_CLASS);

            JoinedQueryElement leftJoin2 = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
            leftJoin2.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT);
            leftJoin2.setQuery(productTableQuery2);

            JoinedQueryElement rightJoin2 = RolapMappingFactory.eINSTANCE.createJoinedQueryElement();
            rightJoin2.setKey(CatalogSupplier.COLUMN_PRODUCT_CLASS_ID_PRODUCT_CLASS);
            rightJoin2.setQuery(productClassTableQuery2);

            JoinQuery joinQuery2 = RolapMappingFactory.eINSTANCE.createJoinQuery();
            joinQuery2.setLeft(leftJoin2);
            joinQuery2.setRight(rightJoin2);

            ExplicitHierarchy productNameHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            productNameHierarchy.setName("Product Name");
            productNameHierarchy.setHasAll(true);
            productNameHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PRODUCT_ID_PRODUCT);
            productNameHierarchy.setQuery(joinQuery2);
            productNameHierarchy.getLevels().add(productNameLevel2);

            StandardDimension productDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            productDimension.setName("Product");
            productDimension.getHierarchies().add(productsHierarchy);
            productDimension.getHierarchies().add(productNameHierarchy);

            DimensionConnector productConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            productConnector.setOverrideDimensionName("Product");
            productConnector.setForeignKey(CatalogSupplier.COLUMN_PRODUCT_ID_SALESFACT);
            productConnector.setDimension(productDimension);

            // Promotion Dimension
            Level promotionNameLevel = RolapMappingFactory.eINSTANCE.createLevel();
            promotionNameLevel.setName("Promotion Name");
            promotionNameLevel.setColumn(CatalogSupplier.COLUMN_PROMOTION_NAME_PROMOTION);
            promotionNameLevel.setUniqueMembers(true);

            TableQuery promotionQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            promotionQuery.setTable(CatalogSupplier.TABLE_PROMOTION);

            ExplicitHierarchy promotionHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            promotionHierarchy.setHasAll(true);
            promotionHierarchy.setAllMemberName("All Promotions");
            promotionHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PROMOTION_ID_PROMOTION);
            promotionHierarchy.setDefaultMember("[All Promotions]");
            promotionHierarchy.setQuery(promotionQuery);
            promotionHierarchy.getLevels().add(promotionNameLevel);

            StandardDimension promotionDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            promotionDimension.setName("Promotion");
            promotionDimension.getHierarchies().add(promotionHierarchy);

            DimensionConnector promotionConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            promotionConnector.setOverrideDimensionName("Promotion");
            promotionConnector.setForeignKey(CatalogSupplier.COLUMN_PROMOTION_ID_SALESFACT);
            promotionConnector.setDimension(promotionDimension);

            // Currency Dimension
            Level currencyLevel = RolapMappingFactory.eINSTANCE.createLevel();
            currencyLevel.setName("Currency");
            currencyLevel.setColumn(CatalogSupplier.COLUMN_MEDIA_TYPE_PROMOTION);
            currencyLevel.setUniqueMembers(true);

            TableQuery promotionQuery2 = RolapMappingFactory.eINSTANCE.createTableQuery();
            promotionQuery2.setTable(CatalogSupplier.TABLE_PROMOTION);

            ExplicitHierarchy currencyHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            currencyHierarchy.setHasAll(true);
            currencyHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_PROMOTION_ID_PROMOTION);
            currencyHierarchy.setQuery(promotionQuery2);
            currencyHierarchy.getLevels().add(currencyLevel);

            StandardDimension currencyDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            currencyDimension.setName("Currency");
            currencyDimension.getHierarchies().add(currencyHierarchy);

            DimensionConnector currencyConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            currencyConnector.setOverrideDimensionName("Currency");
            currencyConnector.setForeignKey(CatalogSupplier.COLUMN_PROMOTION_ID_SALESFACT);
            currencyConnector.setDimension(currencyDimension);

            // Customer Dimension
            Level countryLevel = RolapMappingFactory.eINSTANCE.createLevel();
            countryLevel.setName("Country");
            countryLevel.setColumn(CatalogSupplier.COLUMN_COUNTRY_CUSTOMER);
            countryLevel.setUniqueMembers(true);

            Level stateProvinceLevel = RolapMappingFactory.eINSTANCE.createLevel();
            stateProvinceLevel.setName("State Province");
            stateProvinceLevel.setColumn(CatalogSupplier.COLUMN_STATE_PROVINCE_CUSTOMER);
            stateProvinceLevel.setUniqueMembers(true);

            Level cityLevel = RolapMappingFactory.eINSTANCE.createLevel();
            cityLevel.setName("City");
            cityLevel.setColumn(CatalogSupplier.COLUMN_CITY_CUSTOMER);
            cityLevel.setUniqueMembers(false);

            Level nameLevel = RolapMappingFactory.eINSTANCE.createLevel();
            nameLevel.setName("Name");
            nameLevel.setColumn(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);
            nameLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            nameLevel.setUniqueMembers(true);

            TableQuery customerQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            customerQuery.setTable(CatalogSupplier.TABLE_CUSTOMER);

            ExplicitHierarchy customerHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            customerHierarchy.setHasAll(true);
            customerHierarchy.setAllMemberName("All Customers");
            customerHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_CUSTOMER_ID_CUSTOMER);
            customerHierarchy.setQuery(customerQuery);
            customerHierarchy.getLevels().add(countryLevel);
            customerHierarchy.getLevels().add(stateProvinceLevel);
            customerHierarchy.getLevels().add(cityLevel);
            customerHierarchy.getLevels().add(nameLevel);

            StandardDimension customerDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            customerDimension.setName("Customer");
            customerDimension.getHierarchies().add(customerHierarchy);

            DimensionConnector customerConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            customerConnector.setOverrideDimensionName("Customer");
            customerConnector.setForeignKey(CatalogSupplier.COLUMN_CUSTOMER_ID_SALESFACT);
            customerConnector.setDimension(customerDimension);

            // Store Size in SQFT Dimension
            Level storeSqftLevel = RolapMappingFactory.eINSTANCE.createLevel();
            storeSqftLevel.setName("Store Sqft");
            storeSqftLevel.setColumn(CatalogSupplier.COLUMN_STORE_SQFT_STORE);
            storeSqftLevel.setColumnType(ColumnInternalDataType.NUMERIC);
            storeSqftLevel.setUniqueMembers(true);

            TableQuery storeQuery2 = RolapMappingFactory.eINSTANCE.createTableQuery();
            storeQuery2.setTable(CatalogSupplier.TABLE_STORE);

            ExplicitHierarchy storeSizeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            storeSizeHierarchy.setHasAll(true);
            storeSizeHierarchy.setPrimaryKey(CatalogSupplier.COLUMN_STORE_ID_STORE);
            storeSizeHierarchy.setQuery(storeQuery2);
            storeSizeHierarchy.getLevels().add(storeSqftLevel);

            StandardDimension storeSizeDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            storeSizeDimension.setName("Store Size in SQFT");
            storeSizeDimension.getHierarchies().add(storeSizeHierarchy);

            DimensionConnector storeSizeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            storeSizeConnector.setOverrideDimensionName("Store Size in SQFT");
            storeSizeConnector.setForeignKey(CatalogSupplier.COLUMN_STORE_ID_SALESFACT);
            storeSizeConnector.setDimension(storeSizeDimension);

            // Create the cube
            TableQuery salesFactQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            salesFactQuery.setTable(CatalogSupplier.TABLE_SALES_FACT);

            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(unitSalesMeasure);

            PhysicalCube warehouseAndSalesCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            warehouseAndSalesCube.setName("Warehouse and Sales");
            warehouseAndSalesCube.setDefaultMeasure(unitSalesMeasure);
            warehouseAndSalesCube.setQuery(salesFactQuery);
            warehouseAndSalesCube.getDimensionConnectors().add(storeConnector);
            warehouseAndSalesCube.getDimensionConnectors().add(timeConnector);
            warehouseAndSalesCube.getDimensionConnectors().add(productConnector);
            warehouseAndSalesCube.getDimensionConnectors().add(promotionConnector);
            warehouseAndSalesCube.getDimensionConnectors().add(currencyConnector);
            warehouseAndSalesCube.getDimensionConnectors().add(customerConnector);
            warehouseAndSalesCube.getDimensionConnectors().add(storeSizeConnector);
            warehouseAndSalesCube.getMeasureGroups().add(measureGroup);

            // Create the catalog
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName("FoodMart");
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().add(warehouseAndSalesCube);

            return catalog;
        }
    }

    public static class SteelWheelsSchemaTestModifier1 extends EmfMappingModifier {


        public SteelWheelsSchemaTestModifier1(CatalogMapping catalog) {
            super(catalog);
        }

        /*
                    "<Schema name=\"SteelWheels\">\n"
            + "  <Cube name=\"SteelWheelsSales\" cache=\"true\" enabled=\"true\">\n"
            + "    <Table name=\"orderfact\">\n"
            + "    </Table>\n"
            + "    <Dimension foreignKey=\"CUSTOMERNUMBER\" name=\"Markets\">\n"
            + "      <Hierarchy hasAll=\"true\" allMemberName=\"All Markets\" primaryKey=\"CUSTOMERNUMBER\">\n"
            + "        <Table name=\"customer_w_ter\">\n"
            + "        </Table>\n"
            + "        <Level name=\"Territory\" column=\"TERRITORY\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\"\n"
            + "               hideMemberIf=\"Never\">\n"
            + "        </Level>\n"
            + "        <Level name=\"Country\" column=\"COUNTRY\" levelType=\"Regular\"\n"
            + "               hideMemberIf=\"Never\">\n"
            + "          <Annotations>\n"
            + "            <Annotation name=\"Data.Role\">Geography</Annotation>\n"
            + "            <Annotation name=\"Geo.Role\">country</Annotation>\n"
            + "          </Annotations>\n"
            + "        </Level>\n"
            + "        <Level name=\"State Province\" column=\"STATE\" type=\"String\" levelType=\"Regular\"\n"
            + "               hideMemberIf=\"Never\">\n"
            + "          <Annotations>\n"
            + "            <Annotation name=\"Data.Role\">Geography</Annotation>\n"
            + "            <Annotation name=\"Geo.Role\">state</Annotation>\n"
            + "            <Annotation name=\"Geo.RequiredParents\">country</Annotation>\n"
            + "          </Annotations>\n"
            + "        </Level>\n"
            + "        <Level name=\"City\" column=\"CITY\" type=\"String\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "          <Annotations>\n"
            + "            <Annotation name=\"Data.Role\">Geography</Annotation>\n"
            + "            <Annotation name=\"Geo.Role\">city</Annotation>\n"
            + "            <Annotation name=\"Geo.RequiredParents\">country,state</Annotation>\n"
            + "          </Annotations>\n"
            + "        </Level>\n"
            + "      </Hierarchy>\n"
            + "    </Dimension>\n"
            + "    <Dimension foreignKey=\"CUSTOMERNUMBER\" name=\"Customers\">\n"
            + "      <Hierarchy hasAll=\"true\" allMemberName=\"All Customers\" primaryKey=\"CUSTOMERNUMBER\">\n"
            + "        <Table name=\"CUSTOMER_W_TER\">\n"
            + "        </Table>\n"
            + "        <Level name=\"Customer\" column=\"CUSTOMERNAME\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\"\n"
            + "               hideMemberIf=\"Never\">\n"
            + "          <Property name=\"Customer Number\" column=\"CUSTOMERNUMBER\" type=\"Numeric\"/>\n"
            + "          <Property name=\"Contact First Name\" column=\"CONTACTFIRSTNAME\" type=\"String\"/>\n"
            + "          <Property name=\"Contact Last Name\" column=\"CONTACTLASTNAME\" type=\"String\"/>\n"
            + "          <Property name=\"Phone\" column=\"PHONE\" type=\"String\"/>\n"
            + "          <Property name=\"Address\" column=\"ADDRESSLINE1\" type=\"String\"/>\n"
            + "          <Property name=\"Credit Limit\" column=\"CREDITLIMIT\" type=\"Numeric\"/>\n"
            + "        </Level>\n"
            + "      </Hierarchy>\n"
            + "    </Dimension>\n"
            + "    <Dimension foreignKey=\"PRODUCTCODE\" name=\"Product\">\n"
            + "      <Hierarchy name=\"\" hasAll=\"true\" allMemberName=\"All Products\" primaryKey=\"PRODUCTCODE\" primaryKeyTable=\"PRODUCTS\"\n"
            + "                 caption=\"\">\n"
            + "        <Table name=\"PRODUCTS\">\n"
            + "        </Table>\n"
            + "        <Level name=\"Line\" table=\"PRODUCTS\" column=\"PRODUCTLINE\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\"\n"
            + "               hideMemberIf=\"Never\">\n"
            + "        </Level>\n"
            + "        <Level name=\"Vendor\" table=\"PRODUCTS\" column=\"PRODUCTVENDOR\" type=\"String\" uniqueMembers=\"false\"\n"
            + "               levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "        </Level>\n"
            + "        <Level name=\"Product\" table=\"PRODUCTS\" column=\"PRODUCTNAME\" type=\"String\" uniqueMembers=\"true\"\n"
            + "               levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "          <Property name=\"Code\" column=\"PRODUCTCODE\" type=\"String\"/>\n"
            + "          <Property name=\"Vendor\" column=\"PRODUCTVENDOR\" type=\"String\"/>\n"
            + "          <Property name=\"Description\" column=\"PRODUCTDESCRIPTION\" type=\"String\"/>\n"
            + "        </Level>\n"
            + "      </Hierarchy>\n"
            + "    </Dimension>\n"
            + "    <Dimension type=\"TimeDimension\" foreignKey=\"TIME_ID\" name=\"Time\">\n"
            + "      <Hierarchy hasAll=\"true\" allMemberName=\"All Years\" primaryKey=\"TIME_ID\">\n"
            + "        <Table name=\"DIM_TIME\">\n"
            + "        </Table>\n"
            + "        <Level name=\"Years\" column=\"YEAR_ID\" type=\"String\" uniqueMembers=\"true\" levelType=\"TimeYears\"\n"
            + "               hideMemberIf=\"Never\">\n"
            + "          <Annotations>\n"
            + "            <Annotation name=\"AnalyzerDateFormat\">[yyyy]</Annotation>\n"
            + "          </Annotations>\n"
            + "        </Level>\n"
            + "        <Level name=\"Quarters\" column=\"QTR_NAME\" ordinalColumn=\"QTR_ID\" type=\"String\" uniqueMembers=\"false\"\n"
            + "               levelType=\"TimeQuarters\" hideMemberIf=\"Never\">\n"
            + "          <Annotations>\n"
            + "            <Annotation name=\"AnalyzerDateFormat\">[yyyy].['QTR'q]</Annotation>\n"
            + "          </Annotations>\n"
            + "        </Level>\n"
            + "        <Level name=\"Months\" column=\"MONTH_NAME\" ordinalColumn=\"MONTH_ID\" type=\"String\" uniqueMembers=\"false\"\n"
            + "               levelType=\"TimeMonths\" hideMemberIf=\"Never\">\n"
            + "          <Annotations>\n"
            + "            <Annotation name=\"AnalyzerDateFormat\">[yyyy].['QTR'q].[MMM]</Annotation>\n"
            + "          </Annotations>\n"
            + "        </Level>\n"
            + "      </Hierarchy>\n"
            + "    </Dimension>\n"
            + "    <Dimension foreignKey=\"STATUS\" name=\"Order Status\">\n"
            + "      <Hierarchy hasAll=\"true\" allMemberName=\"All Status Types\" primaryKey=\"STATUS\">\n"
            + "        <Level name=\"Type\" column=\"STATUS\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "        </Level>\n"
            + "      </Hierarchy>\n"
            + "    </Dimension>\n"
            + "    <Measure name=\"Quantity\" column=\"QUANTITYORDERED\" formatString=\"#,###\" aggregator=\"sum\">\n"
            + "      <Annotations>\n"
            + "        <Annotation name=\"AnalyzerBusinessGroup\">Measures</Annotation>\n"
            + "      </Annotations>\n"
            + "    </Measure>\n"
            + "    <Measure name=\"Sales\" column=\"TOTALPRICE\" formatString=\"#,###\" aggregator=\"sum\">\n"
            + "      <Annotations>\n"
            + "        <Annotation name=\"AnalyzerBusinessGroup\">Measures</Annotation>\n"
            + "      </Annotations>\n"
            + "    </Measure>\n"
            + "  </Cube>\n"
            + "  <Role name=\"dev\">\n"
            + "    <SchemaGrant access=\"all\">\n"
            + "      <CubeGrant cube=\"SteelWheelsSales\" access=\"all\">\n"
            + "        <HierarchyGrant hierarchy=\"[Markets]\" topLevel=\"[Markets].[Territory]\" bottomLevel=\"[Markets].[Country]\" rollupPolicy=\"Partial\" access=\"custom\">\n"
            + "          <MemberGrant member=\"[Markets].[APAC]\" access=\"all\"> </MemberGrant>\n"
            + "          <MemberGrant member=\"[Markets].[APAC].[Australia]\" access=\"none\"> </MemberGrant>\n"
            + "        </HierarchyGrant> \n"
            + "      </CubeGrant>\n"
            + "    </SchemaGrant>\n"
            + "    <SchemaGrant access=\"all\">\n"
            + "      <CubeGrant cube=\"SteelWheelsSales\" access=\"all\">\n"
            + "        <HierarchyGrant hierarchy=\"Measures\" access=\"custom\">\n"
            + "          <MemberGrant member=\"[Measures].[Quantity]\" access=\"none\"> </MemberGrant>\n"
            + "          <MemberGrant member=\"[Measures].[Sales]\" access=\"all\"> </MemberGrant>\n"
            + "        </HierarchyGrant>\n"
            + "      </CubeGrant>\n"
            + "    </SchemaGrant>\n"
            + "  </Role> \n"
            + "  <Role name=\"cto\">\n"
            + "    <SchemaGrant access=\"all\">\n"
            + "      <CubeGrant cube=\"SteelWheelsSales\" access=\"all\">\n"
            + "        <HierarchyGrant hierarchy=\"Measures\" access=\"custom\">\n"
            + "          <MemberGrant member=\"[Measures].[Quantity]\" access=\"none\"> </MemberGrant>\n"
            + "          <MemberGrant member=\"[Measures].[Sales]\" access=\"all\"> </MemberGrant>\n"
            + "        </HierarchyGrant>\n"
            + "      </CubeGrant>\n"
            + "    </SchemaGrant>\n"
            + "  </Role> \n"
            + "  <Role name=\"Admin\">\n"
            + "    <SchemaGrant access=\"all\">\n"
            + "      <CubeGrant cube=\"SteelWheelsSales\" access=\"all\"/>\n"
            + "    </SchemaGrant>\n"
            + "  </Role>\n"
            + "</Schema>\n";
         */

        @Override
        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // TODO: Implement EMF version
            return catalog2;
        }
    }

    public static class SteelWheelsSchemaTestModifier2 extends EmfMappingModifier {

        public SteelWheelsSchemaTestModifier2(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected boolean hierarchyHasAll(HierarchyMapping hierarchy) {
            return false;
        }

    }

    public static class SteelWheelsSchemaTestModifier3 extends EmfMappingModifier {

        public SteelWheelsSchemaTestModifier3(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected boolean hierarchyHasAll(HierarchyMapping hierarchy) {

            if ("All Markets".equals(hierarchy.getAllMemberName()) && hierarchy.isHasAll()) {
                return false;
            }
            if ("All Status Types".equals(hierarchy.getAllMemberName()) && hierarchy.isHasAll()) {
                return false;
            }
            return hierarchy.isHasAll();
        }
    }

    public static class SteelWheelsSchemaTestModifier4 extends EmfMappingModifier {

        public SteelWheelsSchemaTestModifier4(CatalogMapping catalog) {
            super(catalog);
        }

        /*
                        "<Schema name=\"test_namecolumn\">"
                + "<Dimension type=\"StandardDimension\" highCardinality=\"false\" name=\"Markets\">"
                + "<Hierarchy hasAll=\"true\" allMemberName=\"All Markets\" primaryKey=\"CUSTOMERNUMBER\">"
                + "<Table name=\"CUSTOMER_W_TER\">\n"
                + "</Table>"
                + "<Level name=\"Territory\" column=\"TERRITORY\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "</Level>"
                + "<Level name=\"Country\" column=\"COUNTRY\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "</Level>"
                + "<Level name=\"State Province\" column=\"STATE\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "</Level>"
                + "<Level name=\"City\" column=\"CITY\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "</Level>"
                + "</Hierarchy>"
                + "</Dimension>"
                + "<Dimension type=\"StandardDimension\" highCardinality=\"false\" name=\"Customers\">"
                + "<Hierarchy hasAll=\"true\" allMemberName=\"All Customers\" primaryKey=\"CUSTOMERNUMBER\">"
                + "<Table name=\"CUSTOMER_W_TER\">\n"
                + "</Table>"
                + "<Level name=\"Customer\" column=\"CUSTOMERNAME\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">"
                + "<Property name=\"Customer Number\" column=\"CUSTOMERNUMBER\" type=\"Numeric\">\n"
                + "</Property>"
                + "<Property name=\"Contact First Name\" column=\"CONTACTFIRSTNAME\" type=\"String\">\n"
                + "</Property>"
                + "<Property name=\"Contact Last Name\" column=\"CONTACTLASTNAME\" type=\"String\">\n"
                + "</Property>"
                + "<Property name=\"Phone\" column=\"PHONE\" type=\"String\">\n"
                + "</Property>"
                + "<Property name=\"Address\" column=\"ADDRESSLINE1\" type=\"String\">\n"
                + "</Property>"
                + "<Property name=\"Credit Limit\" column=\"CREDITLIMIT\" type=\"Numeric\">\n"
                + "</Property>"
                + "</Level>"
                + "</Hierarchy>"
                + "</Dimension>"
                + "<Dimension type=\"StandardDimension\" highCardinality=\"false\" name=\"Product\">"
                + "<Hierarchy hasAll=\"true\" allMemberName=\"All Products\" primaryKey=\"PRODUCTCODE\">"
                + "<Table name=\"PRODUCTS\">\n"
                + "</Table>"
                + "<Level name=\"Line\" table=\"PRODUCTS\" column=\"PRODUCTLINE\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "</Level>"
                + "<Level name=\"Vendor\" table=\"PRODUCTS\" column=\"PRODUCTVENDOR\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "</Level>"
                + "<Level name=\"Product\" table=\"PRODUCTS\" column=\"PRODUCTNAME\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">"
                + "<Property name=\"Code\" column=\"PRODUCTCODE\" type=\"String\">\n"
                + "</Property>"
                + "<Property name=\"Vendor\" column=\"PRODUCTVENDOR\" type=\"String\">\n"
                + "</Property>"
                + "<Property name=\"Description\" column=\"PRODUCTDESCRIPTION\" type=\"String\">\n"
                + "</Property>"
                + "</Level>"
                + "</Hierarchy>"
                + "</Dimension>"
                + "<Dimension type=\"TimeDimension\" highCardinality=\"false\" name=\"Time\">"
                + "<Hierarchy hasAll=\"true\" allMemberName=\"All Years\" primaryKey=\"TIME_ID\">"
                + "<Table name=\"time\">\n"
                + "</Table>"
                + "<Level name=\"Years\" column=\"YEAR_ID\" type=\"String\" uniqueMembers=\"true\" levelType=\"TimeYears\" hideMemberIf=\"Never\">\n"
                + "</Level>"
                + "<Level name=\"Quarters\" column=\"QTR_ID\" nameColumn=\"QTR_NAME\" ordinalColumn=\"QTR_ID\" type=\"String\" uniqueMembers=\"false\" levelType=\"TimeQuarters\" hideMemberIf=\"Never\">\n"
                + "</Level>"
                + "<Level name=\"Months\" column=\"MONTH_ID\" nameColumn=\"MONTH_NAME\" ordinalColumn=\"MONTH_ID\" type=\"String\" uniqueMembers=\"false\" levelType=\"TimeMonths\" hideMemberIf=\"Never\">\n"
                + "</Level>"
                + "</Hierarchy>"
                + "</Dimension>"
                + "<Dimension type=\"StandardDimension\" highCardinality=\"false\" name=\"Order Status\">"
                + "<Hierarchy hasAll=\"true\" allMemberName=\"All Status Types\" primaryKey=\"STATUS\">"
                + "<Level name=\"Type\" column=\"STATUS\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "</Level>"
                + "</Hierarchy>"
                + "</Dimension>"
                + "<Cube name=\"SteelWheelsSales1\" cache=\"true\" enabled=\"true\">"
                + "<Table name=\"orderfact\">\n"
                + "</Table>"
                + "<DimensionUsage source=\"Markets\" name=\"Markets\" foreignKey=\"CUSTOMERNUMBER\" highCardinality=\"false\">\n</DimensionUsage>"
                + "<DimensionUsage source=\"Customers\" name=\"Customers\" foreignKey=\"CUSTOMERNUMBER\" highCardinality=\"false\">\n</DimensionUsage>"
                + "<DimensionUsage source=\"Product\" name=\"Product\" foreignKey=\"PRODUCTCODE\" highCardinality=\"false\">\n</DimensionUsage>"
                + "<DimensionUsage source=\"Time\" usagePrefix=\"TR_\" name=\"Time\" foreignKey=\"ORDERDATE\" highCardinality=\"false\">\n</DimensionUsage>"
                + "<Measure name=\"Price Each\" column=\"PRICEEACH\" formatString=\"#,###.0\" aggregator=\"sum\">\n</Measure>"
                + "<Measure name=\"Total Price\" column=\"TOTALPRICE\" formatString=\"#,###.00\" aggregator=\"sum\">\n</Measure>"
                + "</Cube>"
                + "<Cube name=\"SteelWheelsSales2\" cache=\"true\" enabled=\"true\">"
                + "<Table name=\"orderfact\">\n"
                + "</Table>"
                + "<DimensionUsage source=\"Markets\" name=\"Markets\" foreignKey=\"CUSTOMERNUMBER\" highCardinality=\"false\">\n"
                + "</DimensionUsage>"
                + "<DimensionUsage source=\"Customers\" name=\"Customers\" foreignKey=\"CUSTOMERNUMBER\" highCardinality=\"false\">\n"
                + "</DimensionUsage>"
                + "<DimensionUsage source=\"Product\" name=\"Product\" foreignKey=\"PRODUCTCODE\" highCardinality=\"false\">\n"
                + "</DimensionUsage>"
                + "<DimensionUsage source=\"Time\" usagePrefix=\"TC_\" name=\"Time\" foreignKey=\"REQUIREDDATE\" highCardinality=\"false\">\n"
                + "</DimensionUsage>"
                + "<Measure name=\"Price Each\" column=\"PRICEEACH\" formatString=\"#,###.0\" aggregator=\"sum\">\n"
                + "</Measure>"
                + "<Measure name=\"Total Price\" column=\"TOTALPRICE\" formatString=\"#,###.00\" aggregator=\"sum\">\n"
                + "</Measure>"
                + "</Cube>"
                + "<Cube name=\"SteelWheelsSales3\" cache=\"true\" enabled=\"true\">"
                + "<Table name=\"orderfact\">\n"
                + "</Table>"
                + "<DimensionUsage source=\"Markets\" name=\"Markets\" foreignKey=\"CUSTOMERNUMBER\" highCardinality=\"false\">\n"
                + "</DimensionUsage>"
                + "<DimensionUsage source=\"Customers\" name=\"Customers\" foreignKey=\"CUSTOMERNUMBER\" highCardinality=\"false\">\n"
                + "</DimensionUsage>"
                + "<DimensionUsage source=\"Product\" name=\"Product\" foreignKey=\"PRODUCTCODE\" highCardinality=\"false\">\n"
                + "</DimensionUsage>"
                + "<DimensionUsage source=\"Time\" usagePrefix=\"TW_\" name=\"Time\" foreignKey=\"SHIPPEDDATE\" highCardinality=\"false\">\n"
                + "</DimensionUsage>"
                + "<Measure name=\"Price Each\" column=\"PRICEEACH\" formatString=\"#,###.0\" aggregator=\"sum\">\n"
                + "</Measure>"
                + "<Measure name=\"Total Price\" column=\"TOTALPRICE\" formatString=\"#,###.00\" aggregator=\"sum\">\n"
                + "</Measure>"
                + "</Cube>"
                + "</Schema>\n");

         */

        @Override
        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // TODO: Implement EMF version
            return catalog2;
        }
    }

    public static class SteelWheelsSchemaTestModifier5 extends EmfMappingModifier {

        public SteelWheelsSchemaTestModifier5(CatalogMapping catalog) {
            super(catalog);
        }

        @Override
        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Create physical columns for orders table
            PhysicalColumn ordernumber = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
            ordernumber.setName("ORDERNUMBER");
            ordernumber.setType(ColumnType.INTEGER);

            PhysicalColumn orderdate = RolapMappingFactory.eINSTANCE.createPhysicalColumn();
            orderdate.setName("ORDERDATE");
            orderdate.setType(ColumnType.TIMESTAMP);

            PhysicalTable orders = RolapMappingFactory.eINSTANCE.createPhysicalTable();
            orders.setName("orders");
            orders.getColumns().add(ordernumber);
            orders.getColumns().add(orderdate);

            // Create Orders dimension
            MemberProperty orderDateProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
            orderDateProperty.setName("OrderDate");
            orderDateProperty.setColumn(orderdate);
            orderDateProperty.setPropertyType(ColumnInternalDataType.TIMESTAMP);

            Level orderLevel = RolapMappingFactory.eINSTANCE.createLevel();
            orderLevel.setName("Order");
            orderLevel.setColumn(ordernumber);
            orderLevel.setColumnType(ColumnInternalDataType.INTEGER);
            orderLevel.setUniqueMembers(true);
            orderLevel.getMemberProperties().add(orderDateProperty);

            TableQuery ordersTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            ordersTableQuery.setTable(orders);

            ExplicitHierarchy ordersHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            ordersHierarchy.setHasAll(true);
            ordersHierarchy.setAllMemberName("All Orders");
            ordersHierarchy.setPrimaryKey(ordernumber);
            ordersHierarchy.setQuery(ordersTableQuery);
            ordersHierarchy.getLevels().add(orderLevel);

            StandardDimension ordersDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            ordersDimension.setName("Orders");
            ordersDimension.getHierarchies().add(ordersHierarchy);

            DimensionConnector ordersConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            ordersConnector.setOverrideDimensionName("Orders");
            ordersConnector.setDimension(ordersDimension);
            ordersConnector.setForeignKey(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_CUSTOMERNUMBER_ORDERFACT);

            // Create Customers dimension (simplified version)
            StandardDimension customersDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            customersDimension.setName("Customers");

            ExplicitHierarchy customersHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            customersHierarchy.setHasAll(true);
            customersHierarchy.setAllMemberName("All Customers");
            customersHierarchy.setQuery(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.TABLEQUERY_CUSTOMER);
            customersHierarchy.setPrimaryKey(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_CUSTOMERNUMBER_CUSTOMER);

            Level customerLevel = RolapMappingFactory.eINSTANCE.createLevel();
            customerLevel.setName("Customer");
            customerLevel.setColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_CUSTOMERNAME_CUSTOMER);
            customerLevel.setColumnType(ColumnInternalDataType.STRING);
            customerLevel.setUniqueMembers(true);

            customersHierarchy.getLevels().add(customerLevel);
            customersDimension.getHierarchies().add(customersHierarchy);

            DimensionConnector customersConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            customersConnector.setOverrideDimensionName("Customers");
            customersConnector.setDimension(customersDimension);
            customersConnector.setForeignKey(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_CUSTOMERNUMBER_ORDERFACT);

            // Create measures
            SumMeasure quantityMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            quantityMeasure.setName("Quantity");
            quantityMeasure.setFormatString("#,###");
            quantityMeasure.setColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_QUANTITYORDERED_ORDERFACT);

            SumMeasure salesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            salesMeasure.setName("Sales");
            salesMeasure.setFormatString("#,###");
            salesMeasure.setColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_TOTALPRICE_ORDERFACT);

            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(quantityMeasure);
            measureGroup.getMeasures().add(salesMeasure);

            // Create cube
            TableQuery cubeQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            cubeQuery.setTable(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.TABLE_ORDERFACT);

            PhysicalCube fooCube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            fooCube.setName("Foo");
            fooCube.setQuery(cubeQuery);
            fooCube.getDimensionConnectors().add(ordersConnector);
            fooCube.getDimensionConnectors().add(customersConnector);
            fooCube.getMeasureGroups().add(measureGroup);

            // Create catalog
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName("FooBar");
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().add(fooCube);

            return catalog;
        }

        /*
                "<Schema name=\"FooBar\">\n"
                + "    <Cube name=\"Foo\">\n"
                + "        <Table name=\"orderfact\"></Table>\n"
                + "        <Dimension foreignKey=\"ORDERNUMBER\" name=\"Orders\">\n"
                + "            <Hierarchy hasAll=\"true\" allMemberName=\"All Orders\" primaryKey=\"ORDERNUMBER\">\n"
                + "                <Table name=\"orders\">\n"
                + "                </Table>\n"
                + "                <Level name=\"Order\" column=\"ORDERNUMBER\" type=\"Integer\" uniqueMembers=\"true\">\n"
                + "                    <Property name=\"OrderDate\" column=\"ORDERDATE\" type=\"Timestamp\"/>\n"
                + "                </Level>\n"
                + "            </Hierarchy>\n"
                + "        </Dimension>\n"
                + "        <Dimension foreignKey=\"CUSTOMERNUMBER\" name=\"Customers\">\n"
                + "            <Hierarchy hasAll=\"true\" allMemberName=\"All Customers\" primaryKey=\"CUSTOMERNUMBER\">\n"
                + "                <Table name=\"customer_w_ter\">\n"
                + "                </Table>\n"
                + "                <Level name=\"Customer\" column=\"CUSTOMERNAME\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
                + "                </Level>\n"
                + "            </Hierarchy>\n"
                + "        </Dimension>\n"
                + "        <Measure name=\"Quantity\" column=\"QUANTITYORDERED\" formatString=\"#,###\" aggregator=\"sum\">\n"
                + "        </Measure>\n"
                + "        <Measure name=\"Sales\" column=\"TOTALPRICE\" formatString=\"#,###\" aggregator=\"sum\">\n"
                + "        </Measure>\n"
                + "    </Cube>\n"
                + "</Schema>\n");

         */
    }

    public static class SteelWheelsSchemaTestModifier6 extends EmfMappingModifier {

        public SteelWheelsSchemaTestModifier6(CatalogMapping catalog) {
            super(catalog);
        }

        /*
            "<Schema name=\"SteelWheels\">\n"
            + "    <Dimension type=\"StandardDimension\" highCardinality=\"false\" name=\"Product\">\n"
            + "        <Hierarchy hasAll=\"true\" allMemberName=\"All Products\" primaryKey=\"PRODUCTCODE\">\n"
            + "            <Table name=\"products\">\n"
            + "            </Table>\n"
            + "            <Level name=\"Line\" table=\"products\" column=\"PRODUCTLINE\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "            </Level>\n"
            + "            <Level name=\"Vendor\" table=\"products\" column=\"PRODUCTVENDOR\" type=\"String\" uniqueMembers=\"false\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "            </Level>\n"
            + "            <Level name=\"Product\" table=\"products\" column=\"PRODUCTNAME\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "                <Property name=\"Code\" column=\"PRODUCTCODE\" type=\"String\">\n"
            + "                </Property>\n"
            + "                <Property name=\"Vendor\" column=\"PRODUCTVENDOR\" type=\"String\">\n"
            + "                </Property>\n"
            + "                <Property name=\"Description\" column=\"PRODUCTDESCRIPTION\" type=\"String\">\n"
            + "                </Property>\n"
            + "            </Level>\n"
            + "        </Hierarchy>\n"
            + "    </Dimension>\n"
            + "    <Cube name=\"SteelWheelsSales\" cache=\"true\" enabled=\"true\">\n"
            + "  <Table name=\"orderfact\">\n"
            + "  </Table>\n"
            + "  <Dimension foreignKey=\"CUSTOMERNUMBER\" name=\"Markets\">\n"
            + "   <Hierarchy hasAll=\"true\" allMemberName=\"All Markets\" primaryKey=\"CUSTOMERNUMBER\">\n"
            + "    <Table name=\"customer_w_ter\">\n"
            + "    </Table>\n"
            + "    <Level name=\"Territory\" column=\"TERRITORY\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "    </Level>\n"
            + "    <Level name=\"Country\" column=\"COUNTRY\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "    </Level>\n"
            + "    <Level name=\"State Province\" column=\"STATE\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "    </Level>\n"
            + "    <Level name=\"City\" column=\"CITY\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "    </Level>\n"
            + "   </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension foreignKey=\"CUSTOMERNUMBER\" name=\"Customers\">\n"
            + "   <Hierarchy hasAll=\"true\" allMemberName=\"All Customers\" primaryKey=\"CUSTOMERNUMBER\">\n"
            + "    <Table name=\"customer_w_ter\">\n"
            + "    </Table>\n"
            + "    <Level name=\"Customer\" column=\"CUSTOMERNAME\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "    </Level>\n"
            + "   </Hierarchy>\n"
            + "  </Dimension>\n"
            + "        <DimensionUsage source=\"Product\" name=\"MyProduct\" foreignKey=\"PRODUCTCODE\">\n"
            + "        </DimensionUsage>\n"
            + "        <Dimension type=\"TimeDimension\" foreignKey=\"TIME_ID\" name=\"Time\">\n"
            + "   <Hierarchy hasAll=\"true\" allMemberName=\"All Years\" primaryKey=\"TIME_ID\">\n"
            + "    <Table name=\"time\">\n"
            + "    </Table>\n"
            + "    <Level name=\"Years\" column=\"YEAR_ID\" type=\"String\" uniqueMembers=\"true\" levelType=\"TimeYears\" hideMemberIf=\"Never\">\n"
            + "    </Level>\n"
            + "    <Level name=\"Quarters\" column=\"QTR_NAME\" ordinalColumn=\"QTR_ID\" type=\"String\" uniqueMembers=\"false\" levelType=\"TimeQuarters\" hideMemberIf=\"Never\">\n"
            + "    </Level>\n"
            + "    <Level name=\"Months\" column=\"MONTH_NAME\" ordinalColumn=\"MONTH_ID\" type=\"String\" uniqueMembers=\"false\" levelType=\"TimeMonths\" hideMemberIf=\"Never\">\n"
            + "    </Level>\n"
            + "   </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Dimension foreignKey=\"STATUS\" name=\"Order Status\">\n"
            + "   <Hierarchy hasAll=\"true\" allMemberName=\"All Status Types\" primaryKey=\"STATUS\">\n"
            + "    <Level name=\"Type\" column=\"STATUS\" type=\"String\" uniqueMembers=\"true\" levelType=\"Regular\" hideMemberIf=\"Never\">\n"
            + "    </Level>\n"
            + "   </Hierarchy>\n"
            + "  </Dimension>\n"
            + "  <Measure name=\"Quantity\" column=\"QUANTITYORDERED\" formatString=\"#,###\" aggregator=\"sum\">\n"
            + "  </Measure>\n"
            + "  <Measure name=\"Sales\" column=\"TOTALPRICE\" formatString=\"#,###\" aggregator=\"sum\">\n"
            + "  </Measure>\n"
            + " </Cube>\n"
            + "</Schema>\n");

         */

        @Override
        protected CatalogMapping modifyCatalog(CatalogMapping catalog2) {
            // Create Product dimension
            MemberProperty codeProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
            codeProperty.setName("Code");
            codeProperty.setColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_PRODUCTCODE_PRODUCTS);
            codeProperty.setPropertyType(ColumnInternalDataType.STRING);

            MemberProperty vendorProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
            vendorProperty.setName("Vendor");
            vendorProperty.setColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_PRODUCTVENDOR_PRODUCTS);
            vendorProperty.setPropertyType(ColumnInternalDataType.STRING);

            MemberProperty descriptionProperty = RolapMappingFactory.eINSTANCE.createMemberProperty();
            descriptionProperty.setName("Description");
            descriptionProperty.setColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_PRODUCTDESCRIPTION_PRODUCTS);
            descriptionProperty.setPropertyType(ColumnInternalDataType.STRING);

            Level productLineLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productLineLevel.setName("Line");
            productLineLevel.setColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_PRODUCTLINE_PRODUCTS);
            productLineLevel.setColumnType(ColumnInternalDataType.STRING);
            productLineLevel.setUniqueMembers(false);
            productLineLevel.setType(LevelDefinition.REGULAR);
            productLineLevel.setHideMemberIf(HideMemberIf.NEVER);

            Level vendorLevel = RolapMappingFactory.eINSTANCE.createLevel();
            vendorLevel.setName("Vendor");
            vendorLevel.setColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_PRODUCTVENDOR_PRODUCTS);
            vendorLevel.setColumnType(ColumnInternalDataType.STRING);
            vendorLevel.setUniqueMembers(false);
            vendorLevel.setType(LevelDefinition.REGULAR);
            vendorLevel.setHideMemberIf(HideMemberIf.NEVER);

            Level productLevel = RolapMappingFactory.eINSTANCE.createLevel();
            productLevel.setName("Product");
            productLevel.setColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_PRODUCTNAME_PRODUCTS);
            productLevel.setColumnType(ColumnInternalDataType.STRING);
            productLevel.setUniqueMembers(true);
            productLevel.setType(LevelDefinition.REGULAR);
            productLevel.setHideMemberIf(HideMemberIf.NEVER);
            productLevel.getMemberProperties().add(codeProperty);
            productLevel.getMemberProperties().add(vendorProperty);
            productLevel.getMemberProperties().add(descriptionProperty);

            TableQuery productTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            productTableQuery.setTable(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.TABLE_PRODUCTS);

            ExplicitHierarchy productHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            productHierarchy.setHasAll(true);
            productHierarchy.setAllMemberName("All Products");
            productHierarchy.setPrimaryKey(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_PRODUCTCODE_PRODUCTS);
            productHierarchy.setQuery(productTableQuery);
            productHierarchy.getLevels().add(productLineLevel);
            productHierarchy.getLevels().add(vendorLevel);
            productHierarchy.getLevels().add(productLevel);

            StandardDimension productDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            productDimension.setName("Product");
            productDimension.getHierarchies().add(productHierarchy);

            // Create Markets dimension
            Level territoryLevel = RolapMappingFactory.eINSTANCE.createLevel();
            territoryLevel.setName("Territory");
            territoryLevel.setColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_TERRITORY_CUSTOMER);
            territoryLevel.setColumnType(ColumnInternalDataType.STRING);
            territoryLevel.setUniqueMembers(true);
            territoryLevel.setType(LevelDefinition.REGULAR);
            territoryLevel.setHideMemberIf(HideMemberIf.NEVER);

            Level countryLevel = RolapMappingFactory.eINSTANCE.createLevel();
            countryLevel.setName("Country");
            countryLevel.setColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_COUNTRY_CUSTOMER);
            countryLevel.setColumnType(ColumnInternalDataType.STRING);
            countryLevel.setUniqueMembers(true);
            countryLevel.setType(LevelDefinition.REGULAR);
            countryLevel.setHideMemberIf(HideMemberIf.NEVER);

            Level stateLevel = RolapMappingFactory.eINSTANCE.createLevel();
            stateLevel.setName("State Province");
            stateLevel.setColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_STATE_CUSTOMER);
            stateLevel.setColumnType(ColumnInternalDataType.STRING);
            stateLevel.setUniqueMembers(true);
            stateLevel.setType(LevelDefinition.REGULAR);
            stateLevel.setHideMemberIf(HideMemberIf.NEVER);

            Level cityLevel = RolapMappingFactory.eINSTANCE.createLevel();
            cityLevel.setName("City");
            cityLevel.setColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_CITY_CUSTOMER);
            cityLevel.setColumnType(ColumnInternalDataType.STRING);
            cityLevel.setUniqueMembers(true);
            cityLevel.setType(LevelDefinition.REGULAR);
            cityLevel.setHideMemberIf(HideMemberIf.NEVER);

            TableQuery marketsTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            marketsTableQuery.setTable(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.TABLE_CUSTOMER);

            ExplicitHierarchy marketsHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            marketsHierarchy.setHasAll(true);
            marketsHierarchy.setAllMemberName("All Markets");
            marketsHierarchy.setPrimaryKey(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_CUSTOMERNUMBER_CUSTOMER);
            marketsHierarchy.setQuery(marketsTableQuery);
            marketsHierarchy.getLevels().add(territoryLevel);
            marketsHierarchy.getLevels().add(countryLevel);
            marketsHierarchy.getLevels().add(stateLevel);
            marketsHierarchy.getLevels().add(cityLevel);

            StandardDimension marketsDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            marketsDimension.setName("Markets");
            marketsDimension.getHierarchies().add(marketsHierarchy);

            DimensionConnector marketsConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            marketsConnector.setOverrideDimensionName("Markets");
            marketsConnector.setDimension(marketsDimension);
            marketsConnector.setForeignKey(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_CUSTOMERNUMBER_ORDERFACT);

            // Create Customers dimension
            Level customerLevel = RolapMappingFactory.eINSTANCE.createLevel();
            customerLevel.setName("Customer");
            customerLevel.setColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_CUSTOMERNAME_CUSTOMER);
            customerLevel.setColumnType(ColumnInternalDataType.STRING);
            customerLevel.setUniqueMembers(true);
            customerLevel.setType(LevelDefinition.REGULAR);
            customerLevel.setHideMemberIf(HideMemberIf.NEVER);

            TableQuery customersTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            customersTableQuery.setTable(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.TABLE_CUSTOMER);

            ExplicitHierarchy customersHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            customersHierarchy.setHasAll(true);
            customersHierarchy.setAllMemberName("All Customers");
            customersHierarchy.setPrimaryKey(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_CUSTOMERNUMBER_CUSTOMER);
            customersHierarchy.setQuery(customersTableQuery);
            customersHierarchy.getLevels().add(customerLevel);

            StandardDimension customersDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            customersDimension.setName("Customers");
            customersDimension.getHierarchies().add(customersHierarchy);

            DimensionConnector customersConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            customersConnector.setOverrideDimensionName("Customers");
            customersConnector.setDimension(customersDimension);
            customersConnector.setForeignKey(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_CUSTOMERNUMBER_ORDERFACT);

            // Create Product connector
            DimensionConnector productConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            productConnector.setOverrideDimensionName("MyProduct");
            productConnector.setDimension(productDimension);
            productConnector.setForeignKey(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_PRODUCTCODE_ORDERFACT);

            // Create Time dimension
            Level yearsLevel = RolapMappingFactory.eINSTANCE.createLevel();
            yearsLevel.setName("Years");
            yearsLevel.setColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_YEAR_ID_TIME);
            yearsLevel.setColumnType(ColumnInternalDataType.STRING);
            yearsLevel.setUniqueMembers(true);
            yearsLevel.setType(LevelDefinition.TIME_YEARS);
            yearsLevel.setHideMemberIf(HideMemberIf.NEVER);

            Level quartersLevel = RolapMappingFactory.eINSTANCE.createLevel();
            quartersLevel.setName("Quarters");
            quartersLevel.setColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_QTR_NAME_TIME);
            quartersLevel.setOrdinalColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_QTR_ID_TIME);
            quartersLevel.setColumnType(ColumnInternalDataType.STRING);
            quartersLevel.setUniqueMembers(false);
            quartersLevel.setType(LevelDefinition.TIME_QUARTERS);
            quartersLevel.setHideMemberIf(HideMemberIf.NEVER);

            Level monthsLevel = RolapMappingFactory.eINSTANCE.createLevel();
            monthsLevel.setName("Months");
            monthsLevel.setColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_MONTH_NAME_TIME);
            monthsLevel.setOrdinalColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_MONTH_ID_TIME);
            monthsLevel.setColumnType(ColumnInternalDataType.STRING);
            monthsLevel.setUniqueMembers(false);
            monthsLevel.setType(LevelDefinition.TIME_MONTHS);
            monthsLevel.setHideMemberIf(HideMemberIf.NEVER);

            TableQuery timeTableQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            timeTableQuery.setTable(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.TABLE_TIME);

            ExplicitHierarchy timeHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            timeHierarchy.setHasAll(true);
            timeHierarchy.setAllMemberName("All Years");
            timeHierarchy.setPrimaryKey(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_TIME_ID_TIME);
            timeHierarchy.setQuery(timeTableQuery);
            timeHierarchy.getLevels().add(yearsLevel);
            timeHierarchy.getLevels().add(quartersLevel);
            timeHierarchy.getLevels().add(monthsLevel);

            TimeDimension timeDimension = RolapMappingFactory.eINSTANCE.createTimeDimension();
            timeDimension.setName("Time");
            timeDimension.getHierarchies().add(timeHierarchy);

            DimensionConnector timeConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            timeConnector.setOverrideDimensionName("Time");
            timeConnector.setDimension(timeDimension);
            timeConnector.setForeignKey(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_TIME_ID_ORDERFACT);

            // Create Order Status dimension
            Level statusTypeLevel = RolapMappingFactory.eINSTANCE.createLevel();
            statusTypeLevel.setName("Type");
            statusTypeLevel.setColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_STATUS_ORDERFACT);
            statusTypeLevel.setColumnType(ColumnInternalDataType.STRING);
            statusTypeLevel.setUniqueMembers(true);
            statusTypeLevel.setType(LevelDefinition.REGULAR);
            statusTypeLevel.setHideMemberIf(HideMemberIf.NEVER);

            ExplicitHierarchy statusHierarchy = RolapMappingFactory.eINSTANCE.createExplicitHierarchy();
            statusHierarchy.setHasAll(true);
            statusHierarchy.setAllMemberName("All Status Types");
            statusHierarchy.setPrimaryKey(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_STATUS_ORDERFACT);
            statusHierarchy.getLevels().add(statusTypeLevel);

            StandardDimension statusDimension = RolapMappingFactory.eINSTANCE.createStandardDimension();
            statusDimension.setName("Order Status");
            statusDimension.getHierarchies().add(statusHierarchy);

            DimensionConnector statusConnector = RolapMappingFactory.eINSTANCE.createDimensionConnector();
            statusConnector.setOverrideDimensionName("Order Status");
            statusConnector.setDimension(statusDimension);
            statusConnector.setForeignKey(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_STATUS_ORDERFACT);

            // Create measures
            SumMeasure quantityMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            quantityMeasure.setName("Quantity");
            quantityMeasure.setFormatString("#,###");
            quantityMeasure.setColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_QUANTITYORDERED_ORDERFACT);

            SumMeasure salesMeasure = RolapMappingFactory.eINSTANCE.createSumMeasure();
            salesMeasure.setName("Sales");
            salesMeasure.setFormatString("#,###");
            salesMeasure.setColumn(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.COLUMN_TOTALPRICE_ORDERFACT);

            MeasureGroup measureGroup = RolapMappingFactory.eINSTANCE.createMeasureGroup();
            measureGroup.getMeasures().add(quantityMeasure);
            measureGroup.getMeasures().add(salesMeasure);

            // Create cube
            TableQuery cubeQuery = RolapMappingFactory.eINSTANCE.createTableQuery();
            cubeQuery.setTable(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.TABLE_ORDERFACT);

            PhysicalCube cube = RolapMappingFactory.eINSTANCE.createPhysicalCube();
            cube.setName("SteelWheelsSales");
            cube.setEnabled(true);
            cube.setQuery(cubeQuery);
            cube.getDimensionConnectors().add(marketsConnector);
            cube.getDimensionConnectors().add(customersConnector);
            cube.getDimensionConnectors().add(productConnector);
            cube.getDimensionConnectors().add(timeConnector);
            cube.getDimensionConnectors().add(statusConnector);
            cube.getMeasureGroups().add(measureGroup);

            // Create catalog
            Catalog catalog = RolapMappingFactory.eINSTANCE.createCatalog();
            catalog.setName("SteelWheels");
            catalog.getDbschemas().add((DatabaseSchema) catalogDatabaseSchemas(catalog2));
            catalog.getCubes().add(cube);

            return catalog;
        }
    }

    public static class SteelWheelsSchemaTestModifier7 extends EmfMappingModifier {

        public SteelWheelsSchemaTestModifier7(CatalogMapping catalog) {
            super(catalog);
        }

        /*
                    "  <Role name=\"CUBE_SCHEMA_ALL\">\n "
            + "          <SchemaGrant access=\"all\" />\n "
            + "  </Role>\n "
            + "\n "
            + "  <Role name=\"CUBE_SALES_MINIMAL\">\n "
            + "          <SchemaGrant access=\"none\">\n "
            + "                  <CubeGrant cube=\"SteelWheelsSales\" access=\"all\">\n "
            + "                          <HierarchyGrant hierarchy=\"[Markets]\" access=\"none\"  />\n "
            + "                  </CubeGrant>\n "
            + "          </SchemaGrant>\n "
            + "  </Role>\n "
            + "  <Role name='DIM_MARKETAREA_MARKET_800'>\n "
            + "    <SchemaGrant access='none'>\n "
            + "        <CubeGrant cube='SteelWheelsSales' access='none'>\n "
            + "            <HierarchyGrant hierarchy='[Markets]'\n "
            + "                            access='custom' rollupPolicy=\"partial\"\n "
            + "                            topLevel='[Markets].[Territory]'>\n "
            + "                <MemberGrant member='[Markets].[Territory].[APAC]' access='all' />\n "
            + "            </HierarchyGrant>\n "
            + "        </CubeGrant>\n "
            + "    </SchemaGrant>\n "
            + "  </Role>\n "
            + "  <Role name='DIM_MARKETAREA_MARKET_850'>\n "
            + "    <SchemaGrant access='none'>\n "
            + "        <CubeGrant cube='SteelWheelsSales' access='none'>\n "
            + "            <HierarchyGrant hierarchy='[Markets]'\n "
            + "                            access='custom' rollupPolicy=\"partial\"\n "
            + "                            topLevel='[Markets].[Territory]'>\n "
            + "                <MemberGrant member='[Markets].[Territory].[EMEA]' access='all' />\n "
            + "            </HierarchyGrant>\n "
            + "        </CubeGrant>\n "
            + "    </SchemaGrant>\n "
            + "  </Role>\n ";

         */

        @Override
        protected List<? extends AccessRoleMapping> catalogAccessRoles(CatalogMapping schema) {
            List<AccessRoleMapping> result = new ArrayList<>();
            result.addAll(super.catalogAccessRoles(schema));

            // CUBE_SCHEMA_ALL role
            AccessRole role1 = RolapMappingFactory.eINSTANCE.createAccessRole();
            role1.setName("CUBE_SCHEMA_ALL");
            AccessCatalogGrant grant1 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            grant1.setCatalogAccess(CatalogAccess.ALL);
            role1.getAccessCatalogGrants().add(grant1);
            result.add(role1);

            // CUBE_SALES_MINIMAL role
            AccessRole role2 = RolapMappingFactory.eINSTANCE.createAccessRole();
            role2.setName("CUBE_SALES_MINIMAL");
            AccessCatalogGrant grant2 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            grant2.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant2 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant2.setCubeAccess(CubeAccess.ALL);
            cubeGrant2.setCube(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.CUBE_STEELWHEELSSALES);

            AccessHierarchyGrant hierGrant2 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hierGrant2.setHierarchyAccess(HierarchyAccess.NONE);
            hierGrant2.setHierarchy(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.HIERARCHY_MARKETS);

            cubeGrant2.getHierarchyGrants().add(hierGrant2);
            grant2.getCubeGrants().add(cubeGrant2);
            role2.getAccessCatalogGrants().add(grant2);
            result.add(role2);

            // DIM_MARKETAREA_MARKET_800 role
            AccessRole role3 = RolapMappingFactory.eINSTANCE.createAccessRole();
            role3.setName("DIM_MARKETAREA_MARKET_800");
            AccessCatalogGrant grant3 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            grant3.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant3 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant3.setCubeAccess(CubeAccess.NONE);
            cubeGrant3.setCube(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.CUBE_STEELWHEELSSALES);
            
            AccessHierarchyGrant hierGrant3 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hierGrant3.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierGrant3.setRollupPolicy(RollupPolicy.PARTIAL);
            hierGrant3.setHierarchy(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.HIERARCHY_MARKETS);

            AccessMemberGrant memberGrant3 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrant3.setMember("[Markets].[Territory].[APAC]");
            memberGrant3.setMemberAccess(MemberAccess.ALL);

            hierGrant3.getMemberGrants().add(memberGrant3);
            cubeGrant3.getHierarchyGrants().add(hierGrant3);
            grant3.getCubeGrants().add(cubeGrant3);
            role3.getAccessCatalogGrants().add(grant3);
            result.add(role3);

            // DIM_MARKETAREA_MARKET_850 role
            AccessRole role4 = RolapMappingFactory.eINSTANCE.createAccessRole();
            role4.setName("DIM_MARKETAREA_MARKET_850");
            AccessCatalogGrant grant4 = RolapMappingFactory.eINSTANCE.createAccessCatalogGrant();
            grant4.setCatalogAccess(CatalogAccess.NONE);

            AccessCubeGrant cubeGrant4 = RolapMappingFactory.eINSTANCE.createAccessCubeGrant();
            cubeGrant4.setCubeAccess(CubeAccess.NONE);
            cubeGrant4.setCube(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.CUBE_STEELWHEELSSALES);

            AccessHierarchyGrant hierGrant4 = RolapMappingFactory.eINSTANCE.createAccessHierarchyGrant();
            hierGrant4.setHierarchyAccess(HierarchyAccess.CUSTOM);
            hierGrant4.setRollupPolicy(RollupPolicy.PARTIAL);
            hierGrant3.setHierarchy(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.HIERARCHY_MARKETS);
            hierGrant3.setTopLevel(org.eclipse.daanse.rolap.mapping.instance.emf.complex.steelwheels.CatalogSupplier.LEVEL_MARKETS_TERRITORY);

            AccessMemberGrant memberGrant4 = RolapMappingFactory.eINSTANCE.createAccessMemberGrant();
            memberGrant4.setMember("[Markets].[Territory].[EMEA]");
            memberGrant4.setMemberAccess(MemberAccess.ALL);

            hierGrant4.getMemberGrants().add(memberGrant4);
            cubeGrant4.getHierarchyGrants().add(hierGrant4);
            grant4.getCubeGrants().add(cubeGrant4);
            role4.getAccessCatalogGrants().add(grant4);
            result.add(role4);

            return result;
        }
    }


}


